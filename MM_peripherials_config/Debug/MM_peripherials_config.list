
MM_peripherials_config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003af8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003c90  08003c90  00013c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ca8  08003ca8  0002004c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ca8  08003ca8  00013ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cb0  08003cb0  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cb0  08003cb0  00013cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cb4  08003cb4  00013cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08003cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000004c  08003d04  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08003d04  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d05e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bc1  00000000  00000000  0002d0da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000da8  00000000  00000000  0002eca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ce0  00000000  00000000  0002fa48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000167b1  00000000  00000000  00030728  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a4e0  00000000  00000000  00046ed9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e53b  00000000  00000000  000513b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000df8f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a84  00000000  00000000  000df970  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000004c 	.word	0x2000004c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003c78 	.word	0x08003c78

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000050 	.word	0x20000050
 80001d4:	08003c78 	.word	0x08003c78

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_d2f>:
 8000550:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000554:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000558:	bf24      	itt	cs
 800055a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800055e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000562:	d90d      	bls.n	8000580 <__aeabi_d2f+0x30>
 8000564:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000568:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800056c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000570:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000574:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000578:	bf08      	it	eq
 800057a:	f020 0001 	biceq.w	r0, r0, #1
 800057e:	4770      	bx	lr
 8000580:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000584:	d121      	bne.n	80005ca <__aeabi_d2f+0x7a>
 8000586:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800058a:	bfbc      	itt	lt
 800058c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000590:	4770      	bxlt	lr
 8000592:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000596:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800059a:	f1c2 0218 	rsb	r2, r2, #24
 800059e:	f1c2 0c20 	rsb	ip, r2, #32
 80005a2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005a6:	fa20 f002 	lsr.w	r0, r0, r2
 80005aa:	bf18      	it	ne
 80005ac:	f040 0001 	orrne.w	r0, r0, #1
 80005b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005b8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005bc:	ea40 000c 	orr.w	r0, r0, ip
 80005c0:	fa23 f302 	lsr.w	r3, r3, r2
 80005c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005c8:	e7cc      	b.n	8000564 <__aeabi_d2f+0x14>
 80005ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005ce:	d107      	bne.n	80005e0 <__aeabi_d2f+0x90>
 80005d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005d4:	bf1e      	ittt	ne
 80005d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005de:	4770      	bxne	lr
 80005e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__aeabi_uldivmod>:
 80005f0:	b953      	cbnz	r3, 8000608 <__aeabi_uldivmod+0x18>
 80005f2:	b94a      	cbnz	r2, 8000608 <__aeabi_uldivmod+0x18>
 80005f4:	2900      	cmp	r1, #0
 80005f6:	bf08      	it	eq
 80005f8:	2800      	cmpeq	r0, #0
 80005fa:	bf1c      	itt	ne
 80005fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000600:	f04f 30ff 	movne.w	r0, #4294967295
 8000604:	f000 b972 	b.w	80008ec <__aeabi_idiv0>
 8000608:	f1ad 0c08 	sub.w	ip, sp, #8
 800060c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000610:	f000 f806 	bl	8000620 <__udivmoddi4>
 8000614:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000618:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800061c:	b004      	add	sp, #16
 800061e:	4770      	bx	lr

08000620 <__udivmoddi4>:
 8000620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000624:	9e08      	ldr	r6, [sp, #32]
 8000626:	4604      	mov	r4, r0
 8000628:	4688      	mov	r8, r1
 800062a:	2b00      	cmp	r3, #0
 800062c:	d14b      	bne.n	80006c6 <__udivmoddi4+0xa6>
 800062e:	428a      	cmp	r2, r1
 8000630:	4615      	mov	r5, r2
 8000632:	d967      	bls.n	8000704 <__udivmoddi4+0xe4>
 8000634:	fab2 f282 	clz	r2, r2
 8000638:	b14a      	cbz	r2, 800064e <__udivmoddi4+0x2e>
 800063a:	f1c2 0720 	rsb	r7, r2, #32
 800063e:	fa01 f302 	lsl.w	r3, r1, r2
 8000642:	fa20 f707 	lsr.w	r7, r0, r7
 8000646:	4095      	lsls	r5, r2
 8000648:	ea47 0803 	orr.w	r8, r7, r3
 800064c:	4094      	lsls	r4, r2
 800064e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000652:	0c23      	lsrs	r3, r4, #16
 8000654:	fbb8 f7fe 	udiv	r7, r8, lr
 8000658:	fa1f fc85 	uxth.w	ip, r5
 800065c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000660:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000664:	fb07 f10c 	mul.w	r1, r7, ip
 8000668:	4299      	cmp	r1, r3
 800066a:	d909      	bls.n	8000680 <__udivmoddi4+0x60>
 800066c:	18eb      	adds	r3, r5, r3
 800066e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000672:	f080 811b 	bcs.w	80008ac <__udivmoddi4+0x28c>
 8000676:	4299      	cmp	r1, r3
 8000678:	f240 8118 	bls.w	80008ac <__udivmoddi4+0x28c>
 800067c:	3f02      	subs	r7, #2
 800067e:	442b      	add	r3, r5
 8000680:	1a5b      	subs	r3, r3, r1
 8000682:	b2a4      	uxth	r4, r4
 8000684:	fbb3 f0fe 	udiv	r0, r3, lr
 8000688:	fb0e 3310 	mls	r3, lr, r0, r3
 800068c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000690:	fb00 fc0c 	mul.w	ip, r0, ip
 8000694:	45a4      	cmp	ip, r4
 8000696:	d909      	bls.n	80006ac <__udivmoddi4+0x8c>
 8000698:	192c      	adds	r4, r5, r4
 800069a:	f100 33ff 	add.w	r3, r0, #4294967295
 800069e:	f080 8107 	bcs.w	80008b0 <__udivmoddi4+0x290>
 80006a2:	45a4      	cmp	ip, r4
 80006a4:	f240 8104 	bls.w	80008b0 <__udivmoddi4+0x290>
 80006a8:	3802      	subs	r0, #2
 80006aa:	442c      	add	r4, r5
 80006ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006b0:	eba4 040c 	sub.w	r4, r4, ip
 80006b4:	2700      	movs	r7, #0
 80006b6:	b11e      	cbz	r6, 80006c0 <__udivmoddi4+0xa0>
 80006b8:	40d4      	lsrs	r4, r2
 80006ba:	2300      	movs	r3, #0
 80006bc:	e9c6 4300 	strd	r4, r3, [r6]
 80006c0:	4639      	mov	r1, r7
 80006c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006c6:	428b      	cmp	r3, r1
 80006c8:	d909      	bls.n	80006de <__udivmoddi4+0xbe>
 80006ca:	2e00      	cmp	r6, #0
 80006cc:	f000 80eb 	beq.w	80008a6 <__udivmoddi4+0x286>
 80006d0:	2700      	movs	r7, #0
 80006d2:	e9c6 0100 	strd	r0, r1, [r6]
 80006d6:	4638      	mov	r0, r7
 80006d8:	4639      	mov	r1, r7
 80006da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006de:	fab3 f783 	clz	r7, r3
 80006e2:	2f00      	cmp	r7, #0
 80006e4:	d147      	bne.n	8000776 <__udivmoddi4+0x156>
 80006e6:	428b      	cmp	r3, r1
 80006e8:	d302      	bcc.n	80006f0 <__udivmoddi4+0xd0>
 80006ea:	4282      	cmp	r2, r0
 80006ec:	f200 80fa 	bhi.w	80008e4 <__udivmoddi4+0x2c4>
 80006f0:	1a84      	subs	r4, r0, r2
 80006f2:	eb61 0303 	sbc.w	r3, r1, r3
 80006f6:	2001      	movs	r0, #1
 80006f8:	4698      	mov	r8, r3
 80006fa:	2e00      	cmp	r6, #0
 80006fc:	d0e0      	beq.n	80006c0 <__udivmoddi4+0xa0>
 80006fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000702:	e7dd      	b.n	80006c0 <__udivmoddi4+0xa0>
 8000704:	b902      	cbnz	r2, 8000708 <__udivmoddi4+0xe8>
 8000706:	deff      	udf	#255	; 0xff
 8000708:	fab2 f282 	clz	r2, r2
 800070c:	2a00      	cmp	r2, #0
 800070e:	f040 808f 	bne.w	8000830 <__udivmoddi4+0x210>
 8000712:	1b49      	subs	r1, r1, r5
 8000714:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000718:	fa1f f885 	uxth.w	r8, r5
 800071c:	2701      	movs	r7, #1
 800071e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000722:	0c23      	lsrs	r3, r4, #16
 8000724:	fb0e 111c 	mls	r1, lr, ip, r1
 8000728:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800072c:	fb08 f10c 	mul.w	r1, r8, ip
 8000730:	4299      	cmp	r1, r3
 8000732:	d907      	bls.n	8000744 <__udivmoddi4+0x124>
 8000734:	18eb      	adds	r3, r5, r3
 8000736:	f10c 30ff 	add.w	r0, ip, #4294967295
 800073a:	d202      	bcs.n	8000742 <__udivmoddi4+0x122>
 800073c:	4299      	cmp	r1, r3
 800073e:	f200 80cd 	bhi.w	80008dc <__udivmoddi4+0x2bc>
 8000742:	4684      	mov	ip, r0
 8000744:	1a59      	subs	r1, r3, r1
 8000746:	b2a3      	uxth	r3, r4
 8000748:	fbb1 f0fe 	udiv	r0, r1, lr
 800074c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000750:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000754:	fb08 f800 	mul.w	r8, r8, r0
 8000758:	45a0      	cmp	r8, r4
 800075a:	d907      	bls.n	800076c <__udivmoddi4+0x14c>
 800075c:	192c      	adds	r4, r5, r4
 800075e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000762:	d202      	bcs.n	800076a <__udivmoddi4+0x14a>
 8000764:	45a0      	cmp	r8, r4
 8000766:	f200 80b6 	bhi.w	80008d6 <__udivmoddi4+0x2b6>
 800076a:	4618      	mov	r0, r3
 800076c:	eba4 0408 	sub.w	r4, r4, r8
 8000770:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000774:	e79f      	b.n	80006b6 <__udivmoddi4+0x96>
 8000776:	f1c7 0c20 	rsb	ip, r7, #32
 800077a:	40bb      	lsls	r3, r7
 800077c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000780:	ea4e 0e03 	orr.w	lr, lr, r3
 8000784:	fa01 f407 	lsl.w	r4, r1, r7
 8000788:	fa20 f50c 	lsr.w	r5, r0, ip
 800078c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000790:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000794:	4325      	orrs	r5, r4
 8000796:	fbb3 f9f8 	udiv	r9, r3, r8
 800079a:	0c2c      	lsrs	r4, r5, #16
 800079c:	fb08 3319 	mls	r3, r8, r9, r3
 80007a0:	fa1f fa8e 	uxth.w	sl, lr
 80007a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007a8:	fb09 f40a 	mul.w	r4, r9, sl
 80007ac:	429c      	cmp	r4, r3
 80007ae:	fa02 f207 	lsl.w	r2, r2, r7
 80007b2:	fa00 f107 	lsl.w	r1, r0, r7
 80007b6:	d90b      	bls.n	80007d0 <__udivmoddi4+0x1b0>
 80007b8:	eb1e 0303 	adds.w	r3, lr, r3
 80007bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80007c0:	f080 8087 	bcs.w	80008d2 <__udivmoddi4+0x2b2>
 80007c4:	429c      	cmp	r4, r3
 80007c6:	f240 8084 	bls.w	80008d2 <__udivmoddi4+0x2b2>
 80007ca:	f1a9 0902 	sub.w	r9, r9, #2
 80007ce:	4473      	add	r3, lr
 80007d0:	1b1b      	subs	r3, r3, r4
 80007d2:	b2ad      	uxth	r5, r5
 80007d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80007d8:	fb08 3310 	mls	r3, r8, r0, r3
 80007dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80007e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80007e4:	45a2      	cmp	sl, r4
 80007e6:	d908      	bls.n	80007fa <__udivmoddi4+0x1da>
 80007e8:	eb1e 0404 	adds.w	r4, lr, r4
 80007ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80007f0:	d26b      	bcs.n	80008ca <__udivmoddi4+0x2aa>
 80007f2:	45a2      	cmp	sl, r4
 80007f4:	d969      	bls.n	80008ca <__udivmoddi4+0x2aa>
 80007f6:	3802      	subs	r0, #2
 80007f8:	4474      	add	r4, lr
 80007fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000802:	eba4 040a 	sub.w	r4, r4, sl
 8000806:	454c      	cmp	r4, r9
 8000808:	46c2      	mov	sl, r8
 800080a:	464b      	mov	r3, r9
 800080c:	d354      	bcc.n	80008b8 <__udivmoddi4+0x298>
 800080e:	d051      	beq.n	80008b4 <__udivmoddi4+0x294>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d069      	beq.n	80008e8 <__udivmoddi4+0x2c8>
 8000814:	ebb1 050a 	subs.w	r5, r1, sl
 8000818:	eb64 0403 	sbc.w	r4, r4, r3
 800081c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000820:	40fd      	lsrs	r5, r7
 8000822:	40fc      	lsrs	r4, r7
 8000824:	ea4c 0505 	orr.w	r5, ip, r5
 8000828:	e9c6 5400 	strd	r5, r4, [r6]
 800082c:	2700      	movs	r7, #0
 800082e:	e747      	b.n	80006c0 <__udivmoddi4+0xa0>
 8000830:	f1c2 0320 	rsb	r3, r2, #32
 8000834:	fa20 f703 	lsr.w	r7, r0, r3
 8000838:	4095      	lsls	r5, r2
 800083a:	fa01 f002 	lsl.w	r0, r1, r2
 800083e:	fa21 f303 	lsr.w	r3, r1, r3
 8000842:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000846:	4338      	orrs	r0, r7
 8000848:	0c01      	lsrs	r1, r0, #16
 800084a:	fbb3 f7fe 	udiv	r7, r3, lr
 800084e:	fa1f f885 	uxth.w	r8, r5
 8000852:	fb0e 3317 	mls	r3, lr, r7, r3
 8000856:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800085a:	fb07 f308 	mul.w	r3, r7, r8
 800085e:	428b      	cmp	r3, r1
 8000860:	fa04 f402 	lsl.w	r4, r4, r2
 8000864:	d907      	bls.n	8000876 <__udivmoddi4+0x256>
 8000866:	1869      	adds	r1, r5, r1
 8000868:	f107 3cff 	add.w	ip, r7, #4294967295
 800086c:	d22f      	bcs.n	80008ce <__udivmoddi4+0x2ae>
 800086e:	428b      	cmp	r3, r1
 8000870:	d92d      	bls.n	80008ce <__udivmoddi4+0x2ae>
 8000872:	3f02      	subs	r7, #2
 8000874:	4429      	add	r1, r5
 8000876:	1acb      	subs	r3, r1, r3
 8000878:	b281      	uxth	r1, r0
 800087a:	fbb3 f0fe 	udiv	r0, r3, lr
 800087e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000882:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000886:	fb00 f308 	mul.w	r3, r0, r8
 800088a:	428b      	cmp	r3, r1
 800088c:	d907      	bls.n	800089e <__udivmoddi4+0x27e>
 800088e:	1869      	adds	r1, r5, r1
 8000890:	f100 3cff 	add.w	ip, r0, #4294967295
 8000894:	d217      	bcs.n	80008c6 <__udivmoddi4+0x2a6>
 8000896:	428b      	cmp	r3, r1
 8000898:	d915      	bls.n	80008c6 <__udivmoddi4+0x2a6>
 800089a:	3802      	subs	r0, #2
 800089c:	4429      	add	r1, r5
 800089e:	1ac9      	subs	r1, r1, r3
 80008a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008a4:	e73b      	b.n	800071e <__udivmoddi4+0xfe>
 80008a6:	4637      	mov	r7, r6
 80008a8:	4630      	mov	r0, r6
 80008aa:	e709      	b.n	80006c0 <__udivmoddi4+0xa0>
 80008ac:	4607      	mov	r7, r0
 80008ae:	e6e7      	b.n	8000680 <__udivmoddi4+0x60>
 80008b0:	4618      	mov	r0, r3
 80008b2:	e6fb      	b.n	80006ac <__udivmoddi4+0x8c>
 80008b4:	4541      	cmp	r1, r8
 80008b6:	d2ab      	bcs.n	8000810 <__udivmoddi4+0x1f0>
 80008b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80008bc:	eb69 020e 	sbc.w	r2, r9, lr
 80008c0:	3801      	subs	r0, #1
 80008c2:	4613      	mov	r3, r2
 80008c4:	e7a4      	b.n	8000810 <__udivmoddi4+0x1f0>
 80008c6:	4660      	mov	r0, ip
 80008c8:	e7e9      	b.n	800089e <__udivmoddi4+0x27e>
 80008ca:	4618      	mov	r0, r3
 80008cc:	e795      	b.n	80007fa <__udivmoddi4+0x1da>
 80008ce:	4667      	mov	r7, ip
 80008d0:	e7d1      	b.n	8000876 <__udivmoddi4+0x256>
 80008d2:	4681      	mov	r9, r0
 80008d4:	e77c      	b.n	80007d0 <__udivmoddi4+0x1b0>
 80008d6:	3802      	subs	r0, #2
 80008d8:	442c      	add	r4, r5
 80008da:	e747      	b.n	800076c <__udivmoddi4+0x14c>
 80008dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80008e0:	442b      	add	r3, r5
 80008e2:	e72f      	b.n	8000744 <__udivmoddi4+0x124>
 80008e4:	4638      	mov	r0, r7
 80008e6:	e708      	b.n	80006fa <__udivmoddi4+0xda>
 80008e8:	4637      	mov	r7, r6
 80008ea:	e6e9      	b.n	80006c0 <__udivmoddi4+0xa0>

080008ec <__aeabi_idiv0>:
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop

080008f0 <encRead>:
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim4;


void encRead(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0


  oldLeftEncoder = leftEncoder;
 80008f4:	4b3a      	ldr	r3, [pc, #232]	; (80009e0 <encRead+0xf0>)
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	b21a      	sxth	r2, r3
 80008fa:	4b3a      	ldr	r3, [pc, #232]	; (80009e4 <encRead+0xf4>)
 80008fc:	801a      	strh	r2, [r3, #0]
  leftEncoder = TIM2->CNT; // przepisanie wartosci z rejestru timera 2 do zmiennej
 80008fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000904:	b21a      	sxth	r2, r3
 8000906:	4b36      	ldr	r3, [pc, #216]	; (80009e0 <encRead+0xf0>)
 8000908:	801a      	strh	r2, [r3, #0]
  oldRightEncoder = rightEncoder;
 800090a:	4b37      	ldr	r3, [pc, #220]	; (80009e8 <encRead+0xf8>)
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	b21a      	sxth	r2, r3
 8000910:	4b36      	ldr	r3, [pc, #216]	; (80009ec <encRead+0xfc>)
 8000912:	801a      	strh	r2, [r3, #0]
  rightEncoder = -TIM4->CNT; // przepisanie wartosci z rejestru timera 4 do zmiennej
 8000914:	4b36      	ldr	r3, [pc, #216]	; (80009f0 <encRead+0x100>)
 8000916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000918:	b29b      	uxth	r3, r3
 800091a:	425b      	negs	r3, r3
 800091c:	b29b      	uxth	r3, r3
 800091e:	b21a      	sxth	r2, r3
 8000920:	4b31      	ldr	r3, [pc, #196]	; (80009e8 <encRead+0xf8>)
 8000922:	801a      	strh	r2, [r3, #0]
  leftCount = leftEncoder - oldLeftEncoder;
 8000924:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <encRead+0xf0>)
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	b21b      	sxth	r3, r3
 800092a:	b29a      	uxth	r2, r3
 800092c:	4b2d      	ldr	r3, [pc, #180]	; (80009e4 <encRead+0xf4>)
 800092e:	881b      	ldrh	r3, [r3, #0]
 8000930:	b21b      	sxth	r3, r3
 8000932:	b29b      	uxth	r3, r3
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	b29b      	uxth	r3, r3
 8000938:	b21a      	sxth	r2, r3
 800093a:	4b2e      	ldr	r3, [pc, #184]	; (80009f4 <encRead+0x104>)
 800093c:	801a      	strh	r2, [r3, #0]
  rightCount = rightEncoder - oldRightEncoder;
 800093e:	4b2a      	ldr	r3, [pc, #168]	; (80009e8 <encRead+0xf8>)
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	b21b      	sxth	r3, r3
 8000944:	b29a      	uxth	r2, r3
 8000946:	4b29      	ldr	r3, [pc, #164]	; (80009ec <encRead+0xfc>)
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	b21b      	sxth	r3, r3
 800094c:	b29b      	uxth	r3, r3
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	b29b      	uxth	r3, r3
 8000952:	b21a      	sxth	r2, r3
 8000954:	4b28      	ldr	r3, [pc, #160]	; (80009f8 <encRead+0x108>)
 8000956:	801a      	strh	r2, [r3, #0]
  fwdCount = leftCount + rightCount;
 8000958:	4b26      	ldr	r3, [pc, #152]	; (80009f4 <encRead+0x104>)
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	b21b      	sxth	r3, r3
 800095e:	b29a      	uxth	r2, r3
 8000960:	4b25      	ldr	r3, [pc, #148]	; (80009f8 <encRead+0x108>)
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	b21b      	sxth	r3, r3
 8000966:	b29b      	uxth	r3, r3
 8000968:	4413      	add	r3, r2
 800096a:	b29b      	uxth	r3, r3
 800096c:	b21a      	sxth	r2, r3
 800096e:	4b23      	ldr	r3, [pc, #140]	; (80009fc <encRead+0x10c>)
 8000970:	801a      	strh	r2, [r3, #0]
  rotCount = - (leftCount - rightCount);
 8000972:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <encRead+0x108>)
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	b21b      	sxth	r3, r3
 8000978:	b29a      	uxth	r2, r3
 800097a:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <encRead+0x104>)
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	b21b      	sxth	r3, r3
 8000980:	b29b      	uxth	r3, r3
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	b29b      	uxth	r3, r3
 8000986:	b21a      	sxth	r2, r3
 8000988:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <encRead+0x110>)
 800098a:	801a      	strh	r2, [r3, #0]
  fwdTotal += fwdCount;
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <encRead+0x10c>)
 800098e:	881b      	ldrh	r3, [r3, #0]
 8000990:	b21b      	sxth	r3, r3
 8000992:	461a      	mov	r2, r3
 8000994:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <encRead+0x114>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4413      	add	r3, r2
 800099a:	4a1a      	ldr	r2, [pc, #104]	; (8000a04 <encRead+0x114>)
 800099c:	6013      	str	r3, [r2, #0]
  rotTotal += rotCount;
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <encRead+0x110>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	b21b      	sxth	r3, r3
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <encRead+0x118>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	4a16      	ldr	r2, [pc, #88]	; (8000a08 <encRead+0x118>)
 80009ae:	6013      	str	r3, [r2, #0]
  leftTotal += leftCount;
 80009b0:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <encRead+0x104>)
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	b21b      	sxth	r3, r3
 80009b6:	461a      	mov	r2, r3
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <encRead+0x11c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4413      	add	r3, r2
 80009be:	4a13      	ldr	r2, [pc, #76]	; (8000a0c <encRead+0x11c>)
 80009c0:	6013      	str	r3, [r2, #0]
  rightTotal += rightCount;
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <encRead+0x108>)
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	b21b      	sxth	r3, r3
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <encRead+0x120>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4413      	add	r3, r2
 80009d0:	4a0f      	ldr	r2, [pc, #60]	; (8000a10 <encRead+0x120>)
 80009d2:	6013      	str	r3, [r2, #0]


}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	2000006c 	.word	0x2000006c
 80009e4:	20000068 	.word	0x20000068
 80009e8:	2000006e 	.word	0x2000006e
 80009ec:	2000006a 	.word	0x2000006a
 80009f0:	40000800 	.word	0x40000800
 80009f4:	20000080 	.word	0x20000080
 80009f8:	2000008c 	.word	0x2000008c
 80009fc:	20000078 	.word	0x20000078
 8000a00:	20000070 	.word	0x20000070
 8000a04:	20000074 	.word	0x20000074
 8000a08:	2000007c 	.word	0x2000007c
 8000a0c:	20000088 	.word	0x20000088
 8000a10:	20000084 	.word	0x20000084

08000a14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a1a:	f000 fc43 	bl	80012a4 <HAL_Init>

  /* USER CODE BEGIN Init */
  MPU6050_Init(&hi2c1);
 8000a1e:	4838      	ldr	r0, [pc, #224]	; (8000b00 <main+0xec>)
 8000a20:	f003 f8de 	bl	8003be0 <MPU6050_Init>

  MPU6050_SetInterruptMode(MPU6050_INTMODE_ACTIVEHIGH);
 8000a24:	2000      	movs	r0, #0
 8000a26:	f002 ffe5 	bl	80039f4 <MPU6050_SetInterruptMode>
  MPU6050_SetInterruptDrive(MPU6050_INTDRV_PUSHPULL);
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f003 f818 	bl	8003a60 <MPU6050_SetInterruptDrive>
  MPU6050_SetInterruptLatch(MPU6050_INTLATCH_WAITCLEAR);
 8000a30:	2001      	movs	r0, #1
 8000a32:	f003 f84d 	bl	8003ad0 <MPU6050_SetInterruptLatch>
  MPU6050_SetInterruptLatchClear(MPU6050_INTCLEAR_STATUSREAD);
 8000a36:	2000      	movs	r0, #0
 8000a38:	f003 f882 	bl	8003b40 <MPU6050_SetInterruptLatchClear>

  MPU6050_SetIntEnableRegister(0);
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f003 f8b7 	bl	8003bb0 <MPU6050_SetIntEnableRegister>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a42:	f000 f877 	bl	8000b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a46:	f000 f9a9 	bl	8000d9c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a4a:	f000 f8d1 	bl	8000bf0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000a4e:	f000 f8fd 	bl	8000c4c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000a52:	f000 f94f 	bl	8000cf4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  int EncValR;
  int EncValL;
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000a56:	213c      	movs	r1, #60	; 0x3c
 8000a58:	482a      	ldr	r0, [pc, #168]	; (8000b04 <main+0xf0>)
 8000a5a:	f002 fba3 	bl	80031a4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000a5e:	213c      	movs	r1, #60	; 0x3c
 8000a60:	4829      	ldr	r0, [pc, #164]	; (8000b08 <main+0xf4>)
 8000a62:	f002 fb9f 	bl	80031a4 <HAL_TIM_Encoder_Start>

  encRead();
 8000a66:	f7ff ff43 	bl	80008f0 <encRead>

  	turn_left();
 8000a6a:	f000 fa75 	bl	8000f58 <turn_left>
  	HAL_Delay(800);
 8000a6e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000a72:	f000 fc89 	bl	8001388 <HAL_Delay>
  	turn_left();
 8000a76:	f000 fa6f 	bl	8000f58 <turn_left>
  	HAL_Delay(800);
 8000a7a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000a7e:	f000 fc83 	bl	8001388 <HAL_Delay>
  	turn_right();
 8000a82:	f000 fa3d 	bl	8000f00 <turn_right>
  	HAL_Delay(800);
 8000a86:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000a8a:	f000 fc7d 	bl	8001388 <HAL_Delay>
  	turn_right();
 8000a8e:	f000 fa37 	bl	8000f00 <turn_right>

  	HAL_Delay(800);
 8000a92:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000a96:	f000 fc77 	bl	8001388 <HAL_Delay>

  	setMoveR(1,0);
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f000 f9d7 	bl	8000e50 <setMoveR>
  	setMoveL(1,0);
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f000 f9ff 	bl	8000ea8 <setMoveL>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  pulse_count_encL = TIM2->CNT; // przepisanie wartosci z rejestru timera 2 do zmiennej
 8000aaa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <main+0xf8>)
 8000ab4:	801a      	strh	r2, [r3, #0]
	  EncValR = pulse_count_encR;
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <main+0xfc>)
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	607b      	str	r3, [r7, #4]
	  pulse_count_encR = TIM4->CNT; // przepisanie wartosci z rejestru timera 4 do zmiennej
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <main+0x100>)
 8000ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <main+0xfc>)
 8000ac6:	801a      	strh	r2, [r3, #0]
	  EncValL = pulse_count_encR;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <main+0xfc>)
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	603b      	str	r3, [r7, #0]

	  encRead();
 8000ad0:	f7ff ff0e 	bl	80008f0 <encRead>




	  MPU6050_GetAccelerometerScaled(&ax, &ay, &az);
 8000ad4:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <main+0x104>)
 8000ad6:	4911      	ldr	r1, [pc, #68]	; (8000b1c <main+0x108>)
 8000ad8:	4811      	ldr	r0, [pc, #68]	; (8000b20 <main+0x10c>)
 8000ada:	f002 fed5 	bl	8003888 <MPU6050_GetAccelerometerScaled>
	  MPU6050_GetGyroscopeScaled(&gx, &gy, &gz);
 8000ade:	4a11      	ldr	r2, [pc, #68]	; (8000b24 <main+0x110>)
 8000ae0:	4911      	ldr	r1, [pc, #68]	; (8000b28 <main+0x114>)
 8000ae2:	4812      	ldr	r0, [pc, #72]	; (8000b2c <main+0x118>)
 8000ae4:	f002 ff46 	bl	8003974 <MPU6050_GetGyroscopeScaled>
	  temperature = MPU6050_GetTemperatureCelsius();
 8000ae8:	f002 fe6a 	bl	80037c0 <MPU6050_GetTemperatureCelsius>
 8000aec:	eef0 7a40 	vmov.f32	s15, s0
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <main+0x11c>)
 8000af2:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(100);
 8000af6:	2064      	movs	r0, #100	; 0x64
 8000af8:	f000 fc46 	bl	8001388 <HAL_Delay>
	  pulse_count_encL = TIM2->CNT; // przepisanie wartosci z rejestru timera 2 do zmiennej
 8000afc:	e7d5      	b.n	8000aaa <main+0x96>
 8000afe:	bf00      	nop
 8000b00:	200000d0 	.word	0x200000d0
 8000b04:	2000013c 	.word	0x2000013c
 8000b08:	20000090 	.word	0x20000090
 8000b0c:	20000136 	.word	0x20000136
 8000b10:	20000134 	.word	0x20000134
 8000b14:	40000800 	.word	0x40000800
 8000b18:	20000128 	.word	0x20000128
 8000b1c:	20000180 	.word	0x20000180
 8000b20:	20000130 	.word	0x20000130
 8000b24:	20000138 	.word	0x20000138
 8000b28:	20000124 	.word	0x20000124
 8000b2c:	2000017c 	.word	0x2000017c
 8000b30:	2000012c 	.word	0x2000012c

08000b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b094      	sub	sp, #80	; 0x50
 8000b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3a:	f107 0320 	add.w	r3, r7, #32
 8000b3e:	2230      	movs	r2, #48	; 0x30
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f003 f890 	bl	8003c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	4b22      	ldr	r3, [pc, #136]	; (8000be8 <SystemClock_Config+0xb4>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	4a21      	ldr	r2, [pc, #132]	; (8000be8 <SystemClock_Config+0xb4>)
 8000b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b66:	6413      	str	r3, [r2, #64]	; 0x40
 8000b68:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <SystemClock_Config+0xb4>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <SystemClock_Config+0xb8>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a1b      	ldr	r2, [pc, #108]	; (8000bec <SystemClock_Config+0xb8>)
 8000b7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b82:	6013      	str	r3, [r2, #0]
 8000b84:	4b19      	ldr	r3, [pc, #100]	; (8000bec <SystemClock_Config+0xb8>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b90:	2302      	movs	r3, #2
 8000b92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b94:	2301      	movs	r3, #1
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b98:	2310      	movs	r3, #16
 8000b9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba0:	f107 0320 	add.w	r3, r7, #32
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f001 fe43 	bl	8002830 <HAL_RCC_OscConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000bb0:	f000 f946 	bl	8000e40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f002 f89e 	bl	8002d10 <HAL_RCC_ClockConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000bda:	f000 f931 	bl	8000e40 <Error_Handler>
  }
}
 8000bde:	bf00      	nop
 8000be0:	3750      	adds	r7, #80	; 0x50
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40007000 	.word	0x40007000

08000bf0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <MX_I2C1_Init+0x50>)
 8000bf6:	4a13      	ldr	r2, [pc, #76]	; (8000c44 <MX_I2C1_Init+0x54>)
 8000bf8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_I2C1_Init+0x50>)
 8000bfc:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <MX_I2C1_Init+0x58>)
 8000bfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_I2C1_Init+0x50>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_I2C1_Init+0x50>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_I2C1_Init+0x50>)
 8000c0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <MX_I2C1_Init+0x50>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_I2C1_Init+0x50>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <MX_I2C1_Init+0x50>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_I2C1_Init+0x50>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c2c:	4804      	ldr	r0, [pc, #16]	; (8000c40 <MX_I2C1_Init+0x50>)
 8000c2e:	f000 fe4f 	bl	80018d0 <HAL_I2C_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c38:	f000 f902 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	200000d0 	.word	0x200000d0
 8000c44:	40005400 	.word	0x40005400
 8000c48:	000186a0 	.word	0x000186a0

08000c4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08c      	sub	sp, #48	; 0x30
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	2224      	movs	r2, #36	; 0x24
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f003 f804 	bl	8003c68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c68:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <MX_TIM2_Init+0xa4>)
 8000c6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c70:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <MX_TIM2_Init+0xa4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c76:	4b1e      	ldr	r3, [pc, #120]	; (8000cf0 <MX_TIM2_Init+0xa4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c7c:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <MX_TIM2_Init+0xa4>)
 8000c7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c84:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <MX_TIM2_Init+0xa4>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8a:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <MX_TIM2_Init+0xa4>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c90:	2303      	movs	r3, #3
 8000c92:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c94:	2300      	movs	r3, #0
 8000c96:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000ca0:	230f      	movs	r3, #15
 8000ca2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000cb0:	230f      	movs	r3, #15
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <MX_TIM2_Init+0xa4>)
 8000cbc:	f002 f9e0 	bl	8003080 <HAL_TIM_Encoder_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000cc6:	f000 f8bb 	bl	8000e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <MX_TIM2_Init+0xa4>)
 8000cd8:	f002 fb42 	bl	8003360 <HAL_TIMEx_MasterConfigSynchronization>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000ce2:	f000 f8ad 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	3730      	adds	r7, #48	; 0x30
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2000013c 	.word	0x2000013c

08000cf4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08c      	sub	sp, #48	; 0x30
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cfa:	f107 030c 	add.w	r3, r7, #12
 8000cfe:	2224      	movs	r2, #36	; 0x24
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f002 ffb0 	bl	8003c68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d10:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <MX_TIM4_Init+0xa0>)
 8000d12:	4a21      	ldr	r2, [pc, #132]	; (8000d98 <MX_TIM4_Init+0xa4>)
 8000d14:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d16:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <MX_TIM4_Init+0xa0>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1c:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <MX_TIM4_Init+0xa0>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d22:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <MX_TIM4_Init+0xa0>)
 8000d24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d28:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <MX_TIM4_Init+0xa0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d30:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <MX_TIM4_Init+0xa0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d36:	2303      	movs	r3, #3
 8000d38:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000d46:	230f      	movs	r3, #15
 8000d48:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000d56:	230f      	movs	r3, #15
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000d5a:	f107 030c 	add.w	r3, r7, #12
 8000d5e:	4619      	mov	r1, r3
 8000d60:	480c      	ldr	r0, [pc, #48]	; (8000d94 <MX_TIM4_Init+0xa0>)
 8000d62:	f002 f98d 	bl	8003080 <HAL_TIM_Encoder_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000d6c:	f000 f868 	bl	8000e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d70:	2300      	movs	r3, #0
 8000d72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_TIM4_Init+0xa0>)
 8000d7e:	f002 faef 	bl	8003360 <HAL_TIMEx_MasterConfigSynchronization>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000d88:	f000 f85a 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	3730      	adds	r7, #48	; 0x30
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000090 	.word	0x20000090
 8000d98:	40000800 	.word	0x40000800

08000d9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b088      	sub	sp, #32
 8000da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <MX_GPIO_Init+0x9c>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a1f      	ldr	r2, [pc, #124]	; (8000e38 <MX_GPIO_Init+0x9c>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <MX_GPIO_Init+0x9c>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <MX_GPIO_Init+0x9c>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a18      	ldr	r2, [pc, #96]	; (8000e38 <MX_GPIO_Init+0x9c>)
 8000dd8:	f043 0304 	orr.w	r3, r3, #4
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <MX_GPIO_Init+0x9c>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	603b      	str	r3, [r7, #0]
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <MX_GPIO_Init+0x9c>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a11      	ldr	r2, [pc, #68]	; (8000e38 <MX_GPIO_Init+0x9c>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_GPIO_Init+0x9c>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR_L_Pin|DIR_R_Pin, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8000e0c:	480b      	ldr	r0, [pc, #44]	; (8000e3c <MX_GPIO_Init+0xa0>)
 8000e0e:	f000 fd45 	bl	800189c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIR_L_Pin DIR_R_Pin */
  GPIO_InitStruct.Pin = DIR_L_Pin|DIR_R_Pin;
 8000e12:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4804      	ldr	r0, [pc, #16]	; (8000e3c <MX_GPIO_Init+0xa0>)
 8000e2c:	f000 fbb4 	bl	8001598 <HAL_GPIO_Init>

}
 8000e30:	bf00      	nop
 8000e32:	3720      	adds	r7, #32
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020800 	.word	0x40020800

08000e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <setMoveR>:
 *
 *  Prędkosc ustawiana jest w 0.1% wypelnienia PWM
 *  Kierunek - naprzód: 1, wstecz: -1.
 */
void setMoveR(int8_t movementDir, uint32_t Comp)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	6039      	str	r1, [r7, #0]
 8000e5a:	71fb      	strb	r3, [r7, #7]
	switch(movementDir)
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e64:	d002      	beq.n	8000e6c <setMoveR+0x1c>
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d00b      	beq.n	8000e82 <setMoveR+0x32>
		case 1:
			HAL_GPIO_WritePin(DIR_R_GPIO_Port,DIR_R_Pin,0);
			MOTR_SetCompare(Comp);
			break;
		default:
			return;
 8000e6a:	e015      	b.n	8000e98 <setMoveR+0x48>
			HAL_GPIO_WritePin(DIR_R_GPIO_Port,DIR_R_Pin,1);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e72:	480b      	ldr	r0, [pc, #44]	; (8000ea0 <setMoveR+0x50>)
 8000e74:	f000 fd12 	bl	800189c <HAL_GPIO_WritePin>
			MOTR_SetCompare(Comp);
 8000e78:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <setMoveR+0x54>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	683a      	ldr	r2, [r7, #0]
 8000e7e:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000e80:	e00a      	b.n	8000e98 <setMoveR+0x48>
			HAL_GPIO_WritePin(DIR_R_GPIO_Port,DIR_R_Pin,0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e88:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <setMoveR+0x50>)
 8000e8a:	f000 fd07 	bl	800189c <HAL_GPIO_WritePin>
			MOTR_SetCompare(Comp);
 8000e8e:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <setMoveR+0x54>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	683a      	ldr	r2, [r7, #0]
 8000e94:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000e96:	bf00      	nop
	}
}
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40020800 	.word	0x40020800
 8000ea4:	20000000 	.word	0x20000000

08000ea8 <setMoveL>:

void setMoveL(int8_t movementDir, uint32_t Comp)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
	switch(movementDir)
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ebc:	d002      	beq.n	8000ec4 <setMoveL+0x1c>
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d00b      	beq.n	8000eda <setMoveL+0x32>
		case 1:
			HAL_GPIO_WritePin(DIR_L_GPIO_Port, DIR_L_Pin, 1);
			MOTL_SetCompare(Comp);
			break;
		default:
			return;
 8000ec2:	e015      	b.n	8000ef0 <setMoveL+0x48>
			HAL_GPIO_WritePin(DIR_L_GPIO_Port, DIR_L_Pin, 1);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eca:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <setMoveL+0x50>)
 8000ecc:	f000 fce6 	bl	800189c <HAL_GPIO_WritePin>
			MOTL_SetCompare(Comp);
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <setMoveL+0x54>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000ed8:	e00a      	b.n	8000ef0 <setMoveL+0x48>
			HAL_GPIO_WritePin(DIR_L_GPIO_Port, DIR_L_Pin, 1);
 8000eda:	2201      	movs	r2, #1
 8000edc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee0:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <setMoveL+0x50>)
 8000ee2:	f000 fcdb 	bl	800189c <HAL_GPIO_WritePin>
			MOTL_SetCompare(Comp);
 8000ee6:	4b05      	ldr	r3, [pc, #20]	; (8000efc <setMoveL+0x54>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	683a      	ldr	r2, [r7, #0]
 8000eec:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000eee:	bf00      	nop
	}
}
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40020800 	.word	0x40020800
 8000efc:	20000000 	.word	0x20000000

08000f00 <turn_right>:
		setMoveL(1,0);

}

void turn_right()
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
	encRead();
 8000f06:	f7ff fcf3 	bl	80008f0 <encRead>

	int16_t rotTmp = rotTotal;
 8000f0a:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <turn_right+0x54>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	80fb      	strh	r3, [r7, #6]

	while(rotTotal > rotTmp-911) { //Wartosc obr do zwrotu o 90 deg
 8000f10:	e00b      	b.n	8000f2a <turn_right+0x2a>
	setMoveR(-1,200);
 8000f12:	21c8      	movs	r1, #200	; 0xc8
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f7ff ff9a 	bl	8000e50 <setMoveR>
	setMoveL(1,200);
 8000f1c:	21c8      	movs	r1, #200	; 0xc8
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f7ff ffc2 	bl	8000ea8 <setMoveL>

	//encodersRead();

	HAL_Delay(10);
 8000f24:	200a      	movs	r0, #10
 8000f26:	f000 fa2f 	bl	8001388 <HAL_Delay>
	while(rotTotal > rotTmp-911) { //Wartosc obr do zwrotu o 90 deg
 8000f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f2e:	f2a3 328f 	subw	r2, r3, #911	; 0x38f
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <turn_right+0x54>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	dbeb      	blt.n	8000f12 <turn_right+0x12>
	}

	setMoveR(1,0);
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	f7ff ff87 	bl	8000e50 <setMoveR>
	setMoveL(1,0);
 8000f42:	2100      	movs	r1, #0
 8000f44:	2001      	movs	r0, #1
 8000f46:	f7ff ffaf 	bl	8000ea8 <setMoveL>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2000007c 	.word	0x2000007c

08000f58 <turn_left>:

void turn_left()
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
	encRead();
 8000f5e:	f7ff fcc7 	bl	80008f0 <encRead>

	int16_t rotTmp = rotTotal;
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <turn_left+0x58>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	80fb      	strh	r3, [r7, #6]

	while(rotTotal < rotTmp+980) { //Wartosc obr do zwrotu o 90 deg
 8000f68:	e00d      	b.n	8000f86 <turn_left+0x2e>
	setMoveR(1,200);
 8000f6a:	21c8      	movs	r1, #200	; 0xc8
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f7ff ff6f 	bl	8000e50 <setMoveR>
	setMoveL(-1,200);
 8000f72:	21c8      	movs	r1, #200	; 0xc8
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f7ff ff96 	bl	8000ea8 <setMoveL>

	encRead();
 8000f7c:	f7ff fcb8 	bl	80008f0 <encRead>

	HAL_Delay(10);
 8000f80:	200a      	movs	r0, #10
 8000f82:	f000 fa01 	bl	8001388 <HAL_Delay>
	while(rotTotal < rotTmp+980) { //Wartosc obr do zwrotu o 90 deg
 8000f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f8a:	f503 7275 	add.w	r2, r3, #980	; 0x3d4
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <turn_left+0x58>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	dce9      	bgt.n	8000f6a <turn_left+0x12>
	}

	setMoveR(1,0);
 8000f96:	2100      	movs	r1, #0
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f7ff ff59 	bl	8000e50 <setMoveR>
	setMoveL(1,0);
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f7ff ff81 	bl	8000ea8 <setMoveL>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2000007c 	.word	0x2000007c

08000fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <HAL_MspInit+0x4c>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	4a0f      	ldr	r2, [pc, #60]	; (8001000 <HAL_MspInit+0x4c>)
 8000fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fca:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <HAL_MspInit+0x4c>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	603b      	str	r3, [r7, #0]
 8000fda:	4b09      	ldr	r3, [pc, #36]	; (8001000 <HAL_MspInit+0x4c>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	4a08      	ldr	r2, [pc, #32]	; (8001000 <HAL_MspInit+0x4c>)
 8000fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_MspInit+0x4c>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800

08001004 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	; 0x28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a19      	ldr	r2, [pc, #100]	; (8001088 <HAL_I2C_MspInit+0x84>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d12c      	bne.n	8001080 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <HAL_I2C_MspInit+0x88>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a17      	ldr	r2, [pc, #92]	; (800108c <HAL_I2C_MspInit+0x88>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <HAL_I2C_MspInit+0x88>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001042:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001048:	2312      	movs	r3, #18
 800104a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104c:	2301      	movs	r3, #1
 800104e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001054:	2304      	movs	r3, #4
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	480c      	ldr	r0, [pc, #48]	; (8001090 <HAL_I2C_MspInit+0x8c>)
 8001060:	f000 fa9a 	bl	8001598 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <HAL_I2C_MspInit+0x88>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	4a07      	ldr	r2, [pc, #28]	; (800108c <HAL_I2C_MspInit+0x88>)
 800106e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001072:	6413      	str	r3, [r2, #64]	; 0x40
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <HAL_I2C_MspInit+0x88>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001080:	bf00      	nop
 8001082:	3728      	adds	r7, #40	; 0x28
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40005400 	.word	0x40005400
 800108c:	40023800 	.word	0x40023800
 8001090:	40020400 	.word	0x40020400

08001094 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08c      	sub	sp, #48	; 0x30
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010b4:	d14b      	bne.n	800114e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
 80010ba:	4b3f      	ldr	r3, [pc, #252]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x124>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	4a3e      	ldr	r2, [pc, #248]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x124>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6413      	str	r3, [r2, #64]	; 0x40
 80010c6:	4b3c      	ldr	r3, [pc, #240]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x124>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	61bb      	str	r3, [r7, #24]
 80010d0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	4b38      	ldr	r3, [pc, #224]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x124>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a37      	ldr	r2, [pc, #220]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x124>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b35      	ldr	r3, [pc, #212]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x124>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	4b31      	ldr	r3, [pc, #196]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x124>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a30      	ldr	r2, [pc, #192]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x124>)
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b2e      	ldr	r3, [pc, #184]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800110a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800110e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001114:	2301      	movs	r3, #1
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800111c:	2301      	movs	r3, #1
 800111e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	4619      	mov	r1, r3
 8001126:	4825      	ldr	r0, [pc, #148]	; (80011bc <HAL_TIM_Encoder_MspInit+0x128>)
 8001128:	f000 fa36 	bl	8001598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800112c:	2308      	movs	r3, #8
 800112e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001134:	2301      	movs	r3, #1
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800113c:	2301      	movs	r3, #1
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4619      	mov	r1, r3
 8001146:	481e      	ldr	r0, [pc, #120]	; (80011c0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001148:	f000 fa26 	bl	8001598 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800114c:	e030      	b.n	80011b0 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM4)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a1c      	ldr	r2, [pc, #112]	; (80011c4 <HAL_TIM_Encoder_MspInit+0x130>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d12b      	bne.n	80011b0 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x124>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	4a15      	ldr	r2, [pc, #84]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	6413      	str	r3, [r2, #64]	; 0x40
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x124>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x124>)
 800117a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117c:	4a0e      	ldr	r2, [pc, #56]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x124>)
 800117e:	f043 0302 	orr.w	r3, r3, #2
 8001182:	6313      	str	r3, [r2, #48]	; 0x30
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001190:	23c0      	movs	r3, #192	; 0xc0
 8001192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001198:	2301      	movs	r3, #1
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011a0:	2302      	movs	r3, #2
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	4619      	mov	r1, r3
 80011aa:	4805      	ldr	r0, [pc, #20]	; (80011c0 <HAL_TIM_Encoder_MspInit+0x12c>)
 80011ac:	f000 f9f4 	bl	8001598 <HAL_GPIO_Init>
}
 80011b0:	bf00      	nop
 80011b2:	3730      	adds	r7, #48	; 0x30
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40020000 	.word	0x40020000
 80011c0:	40020400 	.word	0x40020400
 80011c4:	40000800 	.word	0x40000800

080011c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <HardFault_Handler+0x4>

080011dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <MemManage_Handler+0x4>

080011e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <BusFault_Handler+0x4>

080011e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <UsageFault_Handler+0x4>

080011ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800121c:	f000 f894 	bl	8001348 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}

08001224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <SystemInit+0x28>)
 800122a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800122e:	4a07      	ldr	r2, [pc, #28]	; (800124c <SystemInit+0x28>)
 8001230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <SystemInit+0x28>)
 800123a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800123e:	609a      	str	r2, [r3, #8]
#endif
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001250:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001288 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001254:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001256:	e003      	b.n	8001260 <LoopCopyDataInit>

08001258 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800125a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800125c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800125e:	3104      	adds	r1, #4

08001260 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001260:	480b      	ldr	r0, [pc, #44]	; (8001290 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001264:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001266:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001268:	d3f6      	bcc.n	8001258 <CopyDataInit>
  ldr  r2, =_sbss
 800126a:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800126c:	e002      	b.n	8001274 <LoopFillZerobss>

0800126e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800126e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001270:	f842 3b04 	str.w	r3, [r2], #4

08001274 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001276:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001278:	d3f9      	bcc.n	800126e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800127a:	f7ff ffd3 	bl	8001224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800127e:	f002 fccf 	bl	8003c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001282:	f7ff fbc7 	bl	8000a14 <main>
  bx  lr    
 8001286:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001288:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800128c:	08003cb8 	.word	0x08003cb8
  ldr  r0, =_sdata
 8001290:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001294:	2000004c 	.word	0x2000004c
  ldr  r2, =_sbss
 8001298:	2000004c 	.word	0x2000004c
  ldr  r3, = _ebss
 800129c:	20000194 	.word	0x20000194

080012a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a0:	e7fe      	b.n	80012a0 <ADC_IRQHandler>
	...

080012a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <HAL_Init+0x40>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0d      	ldr	r2, [pc, #52]	; (80012e4 <HAL_Init+0x40>)
 80012ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <HAL_Init+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <HAL_Init+0x40>)
 80012ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <HAL_Init+0x40>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <HAL_Init+0x40>)
 80012c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012cc:	2003      	movs	r0, #3
 80012ce:	f000 f92f 	bl	8001530 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012d2:	2000      	movs	r0, #0
 80012d4:	f000 f808 	bl	80012e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d8:	f7ff fe6c 	bl	8000fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023c00 	.word	0x40023c00

080012e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_InitTick+0x54>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_InitTick+0x58>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001302:	fbb2 f3f3 	udiv	r3, r2, r3
 8001306:	4618      	mov	r0, r3
 8001308:	f000 f939 	bl	800157e <HAL_SYSTICK_Config>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e00e      	b.n	8001334 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b0f      	cmp	r3, #15
 800131a:	d80a      	bhi.n	8001332 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800131c:	2200      	movs	r2, #0
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	f04f 30ff 	mov.w	r0, #4294967295
 8001324:	f000 f90f 	bl	8001546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001328:	4a06      	ldr	r2, [pc, #24]	; (8001344 <HAL_InitTick+0x5c>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	e000      	b.n	8001334 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000040 	.word	0x20000040
 8001340:	20000048 	.word	0x20000048
 8001344:	20000044 	.word	0x20000044

08001348 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_IncTick+0x20>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_IncTick+0x24>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4413      	add	r3, r2
 8001358:	4a04      	ldr	r2, [pc, #16]	; (800136c <HAL_IncTick+0x24>)
 800135a:	6013      	str	r3, [r2, #0]
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20000048 	.word	0x20000048
 800136c:	20000184 	.word	0x20000184

08001370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return uwTick;
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <HAL_GetTick+0x14>)
 8001376:	681b      	ldr	r3, [r3, #0]
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000184 	.word	0x20000184

08001388 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001390:	f7ff ffee 	bl	8001370 <HAL_GetTick>
 8001394:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a0:	d005      	beq.n	80013ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_Delay+0x40>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4413      	add	r3, r2
 80013ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013ae:	bf00      	nop
 80013b0:	f7ff ffde 	bl	8001370 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d8f7      	bhi.n	80013b0 <HAL_Delay+0x28>
  {
  }
}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000048 	.word	0x20000048

080013cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e8:	4013      	ands	r3, r2
 80013ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fe:	4a04      	ldr	r2, [pc, #16]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	60d3      	str	r3, [r2, #12]
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <__NVIC_GetPriorityGrouping+0x18>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	0a1b      	lsrs	r3, r3, #8
 800141e:	f003 0307 	and.w	r3, r3, #7
}
 8001422:	4618      	mov	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001440:	2b00      	cmp	r3, #0
 8001442:	db0a      	blt.n	800145a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	490c      	ldr	r1, [pc, #48]	; (800147c <__NVIC_SetPriority+0x4c>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	0112      	lsls	r2, r2, #4
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	440b      	add	r3, r1
 8001454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001458:	e00a      	b.n	8001470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4908      	ldr	r1, [pc, #32]	; (8001480 <__NVIC_SetPriority+0x50>)
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	3b04      	subs	r3, #4
 8001468:	0112      	lsls	r2, r2, #4
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	440b      	add	r3, r1
 800146e:	761a      	strb	r2, [r3, #24]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000e100 	.word	0xe000e100
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001484:	b480      	push	{r7}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f1c3 0307 	rsb	r3, r3, #7
 800149e:	2b04      	cmp	r3, #4
 80014a0:	bf28      	it	cs
 80014a2:	2304      	movcs	r3, #4
 80014a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3304      	adds	r3, #4
 80014aa:	2b06      	cmp	r3, #6
 80014ac:	d902      	bls.n	80014b4 <NVIC_EncodePriority+0x30>
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3b03      	subs	r3, #3
 80014b2:	e000      	b.n	80014b6 <NVIC_EncodePriority+0x32>
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	f04f 32ff 	mov.w	r2, #4294967295
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	401a      	ands	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	43d9      	mvns	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	4313      	orrs	r3, r2
         );
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3724      	adds	r7, #36	; 0x24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014fc:	d301      	bcc.n	8001502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fe:	2301      	movs	r3, #1
 8001500:	e00f      	b.n	8001522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <SysTick_Config+0x40>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150a:	210f      	movs	r1, #15
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	f7ff ff8e 	bl	8001430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <SysTick_Config+0x40>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151a:	4b04      	ldr	r3, [pc, #16]	; (800152c <SysTick_Config+0x40>)
 800151c:	2207      	movs	r2, #7
 800151e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	e000e010 	.word	0xe000e010

08001530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ff47 	bl	80013cc <__NVIC_SetPriorityGrouping>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001558:	f7ff ff5c 	bl	8001414 <__NVIC_GetPriorityGrouping>
 800155c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f7ff ff8e 	bl	8001484 <NVIC_EncodePriority>
 8001568:	4602      	mov	r2, r0
 800156a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff5d 	bl	8001430 <__NVIC_SetPriority>
}
 8001576:	bf00      	nop
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ffb0 	bl	80014ec <SysTick_Config>
 800158c:	4603      	mov	r3, r0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	; 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
 80015b2:	e159      	b.n	8001868 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015b4:	2201      	movs	r2, #1
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	f040 8148 	bne.w	8001862 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d00b      	beq.n	80015f2 <HAL_GPIO_Init+0x5a>
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d007      	beq.n	80015f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015e6:	2b11      	cmp	r3, #17
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b12      	cmp	r3, #18
 80015f0:	d130      	bne.n	8001654 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	2203      	movs	r2, #3
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4013      	ands	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	68da      	ldr	r2, [r3, #12]
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001628:	2201      	movs	r2, #1
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	091b      	lsrs	r3, r3, #4
 800163e:	f003 0201 	and.w	r2, r3, #1
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	2203      	movs	r2, #3
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b02      	cmp	r3, #2
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0xfc>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b12      	cmp	r3, #18
 8001692:	d123      	bne.n	80016dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	08da      	lsrs	r2, r3, #3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3208      	adds	r2, #8
 800169c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	220f      	movs	r2, #15
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	691a      	ldr	r2, [r3, #16]
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	08da      	lsrs	r2, r3, #3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3208      	adds	r2, #8
 80016d6:	69b9      	ldr	r1, [r7, #24]
 80016d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	2203      	movs	r2, #3
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 0203 	and.w	r2, r3, #3
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 80a2 	beq.w	8001862 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	4b56      	ldr	r3, [pc, #344]	; (800187c <HAL_GPIO_Init+0x2e4>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	4a55      	ldr	r2, [pc, #340]	; (800187c <HAL_GPIO_Init+0x2e4>)
 8001728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800172c:	6453      	str	r3, [r2, #68]	; 0x44
 800172e:	4b53      	ldr	r3, [pc, #332]	; (800187c <HAL_GPIO_Init+0x2e4>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800173a:	4a51      	ldr	r2, [pc, #324]	; (8001880 <HAL_GPIO_Init+0x2e8>)
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	089b      	lsrs	r3, r3, #2
 8001740:	3302      	adds	r3, #2
 8001742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	220f      	movs	r2, #15
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a48      	ldr	r2, [pc, #288]	; (8001884 <HAL_GPIO_Init+0x2ec>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d019      	beq.n	800179a <HAL_GPIO_Init+0x202>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a47      	ldr	r2, [pc, #284]	; (8001888 <HAL_GPIO_Init+0x2f0>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d013      	beq.n	8001796 <HAL_GPIO_Init+0x1fe>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a46      	ldr	r2, [pc, #280]	; (800188c <HAL_GPIO_Init+0x2f4>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d00d      	beq.n	8001792 <HAL_GPIO_Init+0x1fa>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a45      	ldr	r2, [pc, #276]	; (8001890 <HAL_GPIO_Init+0x2f8>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d007      	beq.n	800178e <HAL_GPIO_Init+0x1f6>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a44      	ldr	r2, [pc, #272]	; (8001894 <HAL_GPIO_Init+0x2fc>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d101      	bne.n	800178a <HAL_GPIO_Init+0x1f2>
 8001786:	2304      	movs	r3, #4
 8001788:	e008      	b.n	800179c <HAL_GPIO_Init+0x204>
 800178a:	2307      	movs	r3, #7
 800178c:	e006      	b.n	800179c <HAL_GPIO_Init+0x204>
 800178e:	2303      	movs	r3, #3
 8001790:	e004      	b.n	800179c <HAL_GPIO_Init+0x204>
 8001792:	2302      	movs	r3, #2
 8001794:	e002      	b.n	800179c <HAL_GPIO_Init+0x204>
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <HAL_GPIO_Init+0x204>
 800179a:	2300      	movs	r3, #0
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	f002 0203 	and.w	r2, r2, #3
 80017a2:	0092      	lsls	r2, r2, #2
 80017a4:	4093      	lsls	r3, r2
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017ac:	4934      	ldr	r1, [pc, #208]	; (8001880 <HAL_GPIO_Init+0x2e8>)
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	089b      	lsrs	r3, r3, #2
 80017b2:	3302      	adds	r3, #2
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ba:	4b37      	ldr	r3, [pc, #220]	; (8001898 <HAL_GPIO_Init+0x300>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4013      	ands	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017de:	4a2e      	ldr	r2, [pc, #184]	; (8001898 <HAL_GPIO_Init+0x300>)
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017e4:	4b2c      	ldr	r3, [pc, #176]	; (8001898 <HAL_GPIO_Init+0x300>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001808:	4a23      	ldr	r2, [pc, #140]	; (8001898 <HAL_GPIO_Init+0x300>)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800180e:	4b22      	ldr	r3, [pc, #136]	; (8001898 <HAL_GPIO_Init+0x300>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	43db      	mvns	r3, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4013      	ands	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001832:	4a19      	ldr	r2, [pc, #100]	; (8001898 <HAL_GPIO_Init+0x300>)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001838:	4b17      	ldr	r3, [pc, #92]	; (8001898 <HAL_GPIO_Init+0x300>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800185c:	4a0e      	ldr	r2, [pc, #56]	; (8001898 <HAL_GPIO_Init+0x300>)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3301      	adds	r3, #1
 8001866:	61fb      	str	r3, [r7, #28]
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	2b0f      	cmp	r3, #15
 800186c:	f67f aea2 	bls.w	80015b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001870:	bf00      	nop
 8001872:	3724      	adds	r7, #36	; 0x24
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	40023800 	.word	0x40023800
 8001880:	40013800 	.word	0x40013800
 8001884:	40020000 	.word	0x40020000
 8001888:	40020400 	.word	0x40020400
 800188c:	40020800 	.word	0x40020800
 8001890:	40020c00 	.word	0x40020c00
 8001894:	40021000 	.word	0x40021000
 8001898:	40013c00 	.word	0x40013c00

0800189c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	807b      	strh	r3, [r7, #2]
 80018a8:	4613      	mov	r3, r2
 80018aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018ac:	787b      	ldrb	r3, [r7, #1]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018b2:	887a      	ldrh	r2, [r7, #2]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018b8:	e003      	b.n	80018c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018ba:	887b      	ldrh	r3, [r7, #2]
 80018bc:	041a      	lsls	r2, r3, #16
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	619a      	str	r2, [r3, #24]
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e11f      	b.n	8001b22 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d106      	bne.n	80018fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff fb84 	bl	8001004 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2224      	movs	r2, #36	; 0x24
 8001900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0201 	bic.w	r2, r2, #1
 8001912:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001922:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001932:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001934:	f001 fb90 	bl	8003058 <HAL_RCC_GetPCLK1Freq>
 8001938:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	4a7b      	ldr	r2, [pc, #492]	; (8001b2c <HAL_I2C_Init+0x25c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d807      	bhi.n	8001954 <HAL_I2C_Init+0x84>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4a7a      	ldr	r2, [pc, #488]	; (8001b30 <HAL_I2C_Init+0x260>)
 8001948:	4293      	cmp	r3, r2
 800194a:	bf94      	ite	ls
 800194c:	2301      	movls	r3, #1
 800194e:	2300      	movhi	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	e006      	b.n	8001962 <HAL_I2C_Init+0x92>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4a77      	ldr	r2, [pc, #476]	; (8001b34 <HAL_I2C_Init+0x264>)
 8001958:	4293      	cmp	r3, r2
 800195a:	bf94      	ite	ls
 800195c:	2301      	movls	r3, #1
 800195e:	2300      	movhi	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e0db      	b.n	8001b22 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4a72      	ldr	r2, [pc, #456]	; (8001b38 <HAL_I2C_Init+0x268>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	0c9b      	lsrs	r3, r3, #18
 8001974:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	430a      	orrs	r2, r1
 8001988:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	4a64      	ldr	r2, [pc, #400]	; (8001b2c <HAL_I2C_Init+0x25c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d802      	bhi.n	80019a4 <HAL_I2C_Init+0xd4>
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	3301      	adds	r3, #1
 80019a2:	e009      	b.n	80019b8 <HAL_I2C_Init+0xe8>
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019aa:	fb02 f303 	mul.w	r3, r2, r3
 80019ae:	4a63      	ldr	r2, [pc, #396]	; (8001b3c <HAL_I2C_Init+0x26c>)
 80019b0:	fba2 2303 	umull	r2, r3, r2, r3
 80019b4:	099b      	lsrs	r3, r3, #6
 80019b6:	3301      	adds	r3, #1
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6812      	ldr	r2, [r2, #0]
 80019bc:	430b      	orrs	r3, r1
 80019be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4956      	ldr	r1, [pc, #344]	; (8001b2c <HAL_I2C_Init+0x25c>)
 80019d4:	428b      	cmp	r3, r1
 80019d6:	d80d      	bhi.n	80019f4 <HAL_I2C_Init+0x124>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1e59      	subs	r1, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80019e6:	3301      	adds	r3, #1
 80019e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	bf38      	it	cc
 80019f0:	2304      	movcc	r3, #4
 80019f2:	e04f      	b.n	8001a94 <HAL_I2C_Init+0x1c4>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d111      	bne.n	8001a20 <HAL_I2C_Init+0x150>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	1e58      	subs	r0, r3, #1
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6859      	ldr	r1, [r3, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	440b      	add	r3, r1
 8001a0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a0e:	3301      	adds	r3, #1
 8001a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	bf0c      	ite	eq
 8001a18:	2301      	moveq	r3, #1
 8001a1a:	2300      	movne	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	e012      	b.n	8001a46 <HAL_I2C_Init+0x176>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	1e58      	subs	r0, r3, #1
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6859      	ldr	r1, [r3, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	0099      	lsls	r1, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a36:	3301      	adds	r3, #1
 8001a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	bf0c      	ite	eq
 8001a40:	2301      	moveq	r3, #1
 8001a42:	2300      	movne	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_I2C_Init+0x17e>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e022      	b.n	8001a94 <HAL_I2C_Init+0x1c4>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10e      	bne.n	8001a74 <HAL_I2C_Init+0x1a4>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1e58      	subs	r0, r3, #1
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6859      	ldr	r1, [r3, #4]
 8001a5e:	460b      	mov	r3, r1
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	440b      	add	r3, r1
 8001a64:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a68:	3301      	adds	r3, #1
 8001a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a72:	e00f      	b.n	8001a94 <HAL_I2C_Init+0x1c4>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	1e58      	subs	r0, r3, #1
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6859      	ldr	r1, [r3, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	0099      	lsls	r1, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	6809      	ldr	r1, [r1, #0]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69da      	ldr	r2, [r3, #28]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ac2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6911      	ldr	r1, [r2, #16]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	68d2      	ldr	r2, [r2, #12]
 8001ace:	4311      	orrs	r1, r2
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6812      	ldr	r2, [r2, #0]
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695a      	ldr	r2, [r3, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0201 	orr.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2220      	movs	r2, #32
 8001b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	000186a0 	.word	0x000186a0
 8001b30:	001e847f 	.word	0x001e847f
 8001b34:	003d08ff 	.word	0x003d08ff
 8001b38:	431bde83 	.word	0x431bde83
 8001b3c:	10624dd3 	.word	0x10624dd3

08001b40 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af02      	add	r7, sp, #8
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	4608      	mov	r0, r1
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4603      	mov	r3, r0
 8001b50:	817b      	strh	r3, [r7, #10]
 8001b52:	460b      	mov	r3, r1
 8001b54:	813b      	strh	r3, [r7, #8]
 8001b56:	4613      	mov	r3, r2
 8001b58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b5a:	f7ff fc09 	bl	8001370 <HAL_GetTick>
 8001b5e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b20      	cmp	r3, #32
 8001b6a:	f040 80d9 	bne.w	8001d20 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	2319      	movs	r3, #25
 8001b74:	2201      	movs	r2, #1
 8001b76:	496d      	ldr	r1, [pc, #436]	; (8001d2c <HAL_I2C_Mem_Write+0x1ec>)
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f000 fc7b 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001b84:	2302      	movs	r3, #2
 8001b86:	e0cc      	b.n	8001d22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d101      	bne.n	8001b96 <HAL_I2C_Mem_Write+0x56>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e0c5      	b.n	8001d22 <HAL_I2C_Mem_Write+0x1e2>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d007      	beq.n	8001bbc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0201 	orr.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2221      	movs	r2, #33	; 0x21
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2240      	movs	r2, #64	; 0x40
 8001bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6a3a      	ldr	r2, [r7, #32]
 8001be6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001bec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4a4d      	ldr	r2, [pc, #308]	; (8001d30 <HAL_I2C_Mem_Write+0x1f0>)
 8001bfc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bfe:	88f8      	ldrh	r0, [r7, #6]
 8001c00:	893a      	ldrh	r2, [r7, #8]
 8001c02:	8979      	ldrh	r1, [r7, #10]
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	9301      	str	r3, [sp, #4]
 8001c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 fab6 	bl	8002180 <I2C_RequestMemoryWrite>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d052      	beq.n	8001cc0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e081      	b.n	8001d22 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 fcfc 	bl	8002620 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00d      	beq.n	8001c4a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d107      	bne.n	8001c46 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e06b      	b.n	8001d22 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	781a      	ldrb	r2, [r3, #0]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c64:	3b01      	subs	r3, #1
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	3b01      	subs	r3, #1
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d11b      	bne.n	8001cc0 <HAL_I2C_Mem_Write+0x180>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d017      	beq.n	8001cc0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	781a      	ldrb	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001caa:	3b01      	subs	r3, #1
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1aa      	bne.n	8001c1e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f000 fce8 	bl	80026a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00d      	beq.n	8001cf4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d107      	bne.n	8001cf0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e016      	b.n	8001d22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2220      	movs	r2, #32
 8001d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	e000      	b.n	8001d22 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001d20:	2302      	movs	r3, #2
  }
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	00100002 	.word	0x00100002
 8001d30:	ffff0000 	.word	0xffff0000

08001d34 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08c      	sub	sp, #48	; 0x30
 8001d38:	af02      	add	r7, sp, #8
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	4608      	mov	r0, r1
 8001d3e:	4611      	mov	r1, r2
 8001d40:	461a      	mov	r2, r3
 8001d42:	4603      	mov	r3, r0
 8001d44:	817b      	strh	r3, [r7, #10]
 8001d46:	460b      	mov	r3, r1
 8001d48:	813b      	strh	r3, [r7, #8]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d4e:	f7ff fb0f 	bl	8001370 <HAL_GetTick>
 8001d52:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b20      	cmp	r3, #32
 8001d5e:	f040 8208 	bne.w	8002172 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2319      	movs	r3, #25
 8001d68:	2201      	movs	r2, #1
 8001d6a:	497b      	ldr	r1, [pc, #492]	; (8001f58 <HAL_I2C_Mem_Read+0x224>)
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f000 fb81 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e1fb      	b.n	8002174 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_I2C_Mem_Read+0x56>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e1f4      	b.n	8002174 <HAL_I2C_Mem_Read+0x440>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d007      	beq.n	8001db0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2222      	movs	r2, #34	; 0x22
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2240      	movs	r2, #64	; 0x40
 8001dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001de0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4a5b      	ldr	r2, [pc, #364]	; (8001f5c <HAL_I2C_Mem_Read+0x228>)
 8001df0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001df2:	88f8      	ldrh	r0, [r7, #6]
 8001df4:	893a      	ldrh	r2, [r7, #8]
 8001df6:	8979      	ldrh	r1, [r7, #10]
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	9301      	str	r3, [sp, #4]
 8001dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	4603      	mov	r3, r0
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 fa50 	bl	80022a8 <I2C_RequestMemoryRead>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e1b0      	b.n	8002174 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d113      	bne.n	8001e42 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	623b      	str	r3, [r7, #32]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	623b      	str	r3, [r7, #32]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	623b      	str	r3, [r7, #32]
 8001e2e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	e184      	b.n	800214c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d11b      	bne.n	8001e82 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	61fb      	str	r3, [r7, #28]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	61fb      	str	r3, [r7, #28]
 8001e6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	e164      	b.n	800214c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d11b      	bne.n	8001ec2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e98:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ea8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61bb      	str	r3, [r7, #24]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	61bb      	str	r3, [r7, #24]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	61bb      	str	r3, [r7, #24]
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	e144      	b.n	800214c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001ed8:	e138      	b.n	800214c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	f200 80f1 	bhi.w	80020c6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d123      	bne.n	8001f34 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 fc17 	bl	8002724 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e139      	b.n	8002174 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691a      	ldr	r2, [r3, #16]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f32:	e10b      	b.n	800214c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d14e      	bne.n	8001fda <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f42:	2200      	movs	r2, #0
 8001f44:	4906      	ldr	r1, [pc, #24]	; (8001f60 <HAL_I2C_Mem_Read+0x22c>)
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 fa94 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d008      	beq.n	8001f64 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e10e      	b.n	8002174 <HAL_I2C_Mem_Read+0x440>
 8001f56:	bf00      	nop
 8001f58:	00100002 	.word	0x00100002
 8001f5c:	ffff0000 	.word	0xffff0000
 8001f60:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691a      	ldr	r2, [r3, #16]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f90:	3b01      	subs	r3, #1
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	691a      	ldr	r2, [r3, #16]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	1c5a      	adds	r2, r3, #1
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fd8:	e0b8      	b.n	800214c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	4966      	ldr	r1, [pc, #408]	; (800217c <HAL_I2C_Mem_Read+0x448>)
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 fa45 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0bf      	b.n	8002174 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002002:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691a      	ldr	r2, [r3, #16]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002020:	3b01      	subs	r3, #1
 8002022:	b29a      	uxth	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202c:	b29b      	uxth	r3, r3
 800202e:	3b01      	subs	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800203c:	2200      	movs	r2, #0
 800203e:	494f      	ldr	r1, [pc, #316]	; (800217c <HAL_I2C_Mem_Read+0x448>)
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 fa17 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e091      	b.n	8002174 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800205e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691a      	ldr	r2, [r3, #16]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207c:	3b01      	subs	r3, #1
 800207e:	b29a      	uxth	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002088:	b29b      	uxth	r3, r3
 800208a:	3b01      	subs	r3, #1
 800208c:	b29a      	uxth	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	3b01      	subs	r3, #1
 80020be:	b29a      	uxth	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020c4:	e042      	b.n	800214c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 fb2a 	bl	8002724 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e04c      	b.n	8002174 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002102:	b29b      	uxth	r3, r3
 8002104:	3b01      	subs	r3, #1
 8002106:	b29a      	uxth	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b04      	cmp	r3, #4
 8002118:	d118      	bne.n	800214c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002136:	3b01      	subs	r3, #1
 8002138:	b29a      	uxth	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002142:	b29b      	uxth	r3, r3
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002150:	2b00      	cmp	r3, #0
 8002152:	f47f aec2 	bne.w	8001eda <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2220      	movs	r2, #32
 800215a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	e000      	b.n	8002174 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002172:	2302      	movs	r3, #2
  }
}
 8002174:	4618      	mov	r0, r3
 8002176:	3728      	adds	r7, #40	; 0x28
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	00010004 	.word	0x00010004

08002180 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af02      	add	r7, sp, #8
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	4608      	mov	r0, r1
 800218a:	4611      	mov	r1, r2
 800218c:	461a      	mov	r2, r3
 800218e:	4603      	mov	r3, r0
 8002190:	817b      	strh	r3, [r7, #10]
 8002192:	460b      	mov	r3, r1
 8002194:	813b      	strh	r3, [r7, #8]
 8002196:	4613      	mov	r3, r2
 8002198:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f95c 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00c      	beq.n	80021dc <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e05f      	b.n	800229c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021dc:	897b      	ldrh	r3, [r7, #10]
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	461a      	mov	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	6a3a      	ldr	r2, [r7, #32]
 80021f0:	492c      	ldr	r1, [pc, #176]	; (80022a4 <I2C_RequestMemoryWrite+0x124>)
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 f995 	bl	8002522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e04c      	b.n	800229c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800221a:	6a39      	ldr	r1, [r7, #32]
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 f9ff 	bl	8002620 <I2C_WaitOnTXEFlagUntilTimeout>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00d      	beq.n	8002244 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	2b04      	cmp	r3, #4
 800222e:	d107      	bne.n	8002240 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800223e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e02b      	b.n	800229c <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002244:	88fb      	ldrh	r3, [r7, #6]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d105      	bne.n	8002256 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800224a:	893b      	ldrh	r3, [r7, #8]
 800224c:	b2da      	uxtb	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	611a      	str	r2, [r3, #16]
 8002254:	e021      	b.n	800229a <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002256:	893b      	ldrh	r3, [r7, #8]
 8002258:	0a1b      	lsrs	r3, r3, #8
 800225a:	b29b      	uxth	r3, r3
 800225c:	b2da      	uxtb	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002266:	6a39      	ldr	r1, [r7, #32]
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 f9d9 	bl	8002620 <I2C_WaitOnTXEFlagUntilTimeout>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00d      	beq.n	8002290 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	2b04      	cmp	r3, #4
 800227a:	d107      	bne.n	800228c <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800228a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e005      	b.n	800229c <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002290:	893b      	ldrh	r3, [r7, #8]
 8002292:	b2da      	uxtb	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	00010002 	.word	0x00010002

080022a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af02      	add	r7, sp, #8
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	4608      	mov	r0, r1
 80022b2:	4611      	mov	r1, r2
 80022b4:	461a      	mov	r2, r3
 80022b6:	4603      	mov	r3, r0
 80022b8:	817b      	strh	r3, [r7, #10]
 80022ba:	460b      	mov	r3, r1
 80022bc:	813b      	strh	r3, [r7, #8]
 80022be:	4613      	mov	r3, r2
 80022c0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022d0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 f8c0 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00c      	beq.n	8002314 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800230e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e0a9      	b.n	8002468 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002314:	897b      	ldrh	r3, [r7, #10]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	461a      	mov	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002322:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	6a3a      	ldr	r2, [r7, #32]
 8002328:	4951      	ldr	r1, [pc, #324]	; (8002470 <I2C_RequestMemoryRead+0x1c8>)
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 f8f9 	bl	8002522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e096      	b.n	8002468 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002352:	6a39      	ldr	r1, [r7, #32]
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 f963 	bl	8002620 <I2C_WaitOnTXEFlagUntilTimeout>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00d      	beq.n	800237c <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	2b04      	cmp	r3, #4
 8002366:	d107      	bne.n	8002378 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002376:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e075      	b.n	8002468 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800237c:	88fb      	ldrh	r3, [r7, #6]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d105      	bne.n	800238e <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002382:	893b      	ldrh	r3, [r7, #8]
 8002384:	b2da      	uxtb	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	611a      	str	r2, [r3, #16]
 800238c:	e021      	b.n	80023d2 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800238e:	893b      	ldrh	r3, [r7, #8]
 8002390:	0a1b      	lsrs	r3, r3, #8
 8002392:	b29b      	uxth	r3, r3
 8002394:	b2da      	uxtb	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800239c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800239e:	6a39      	ldr	r1, [r7, #32]
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 f93d 	bl	8002620 <I2C_WaitOnTXEFlagUntilTimeout>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00d      	beq.n	80023c8 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d107      	bne.n	80023c4 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e04f      	b.n	8002468 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023c8:	893b      	ldrh	r3, [r7, #8]
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d4:	6a39      	ldr	r1, [r7, #32]
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 f922 	bl	8002620 <I2C_WaitOnTXEFlagUntilTimeout>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00d      	beq.n	80023fe <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d107      	bne.n	80023fa <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e034      	b.n	8002468 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800240c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	2200      	movs	r2, #0
 8002416:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f82a 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00c      	beq.n	8002440 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800243a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e013      	b.n	8002468 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002440:	897b      	ldrh	r3, [r7, #10]
 8002442:	b2db      	uxtb	r3, r3
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	b2da      	uxtb	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	6a3a      	ldr	r2, [r7, #32]
 8002454:	4906      	ldr	r1, [pc, #24]	; (8002470 <I2C_RequestMemoryRead+0x1c8>)
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f863 	bl	8002522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	00010002 	.word	0x00010002

08002474 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	4613      	mov	r3, r2
 8002482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002484:	e025      	b.n	80024d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248c:	d021      	beq.n	80024d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800248e:	f7fe ff6f 	bl	8001370 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d302      	bcc.n	80024a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d116      	bne.n	80024d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2220      	movs	r2, #32
 80024ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f043 0220 	orr.w	r2, r3, #32
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e023      	b.n	800251a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	0c1b      	lsrs	r3, r3, #16
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d10d      	bne.n	80024f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	43da      	mvns	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	4013      	ands	r3, r2
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	bf0c      	ite	eq
 80024ee:	2301      	moveq	r3, #1
 80024f0:	2300      	movne	r3, #0
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	e00c      	b.n	8002512 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	43da      	mvns	r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	4013      	ands	r3, r2
 8002504:	b29b      	uxth	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	bf0c      	ite	eq
 800250a:	2301      	moveq	r3, #1
 800250c:	2300      	movne	r3, #0
 800250e:	b2db      	uxtb	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	429a      	cmp	r2, r3
 8002516:	d0b6      	beq.n	8002486 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af00      	add	r7, sp, #0
 8002528:	60f8      	str	r0, [r7, #12]
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
 800252e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002530:	e051      	b.n	80025d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800253c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002540:	d123      	bne.n	800258a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002550:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800255a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2220      	movs	r2, #32
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f043 0204 	orr.w	r2, r3, #4
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e046      	b.n	8002618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002590:	d021      	beq.n	80025d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002592:	f7fe feed 	bl	8001370 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d302      	bcc.n	80025a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d116      	bne.n	80025d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2220      	movs	r2, #32
 80025b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f043 0220 	orr.w	r2, r3, #32
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e020      	b.n	8002618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	0c1b      	lsrs	r3, r3, #16
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d10c      	bne.n	80025fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	43da      	mvns	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	4013      	ands	r3, r2
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	bf14      	ite	ne
 80025f2:	2301      	movne	r3, #1
 80025f4:	2300      	moveq	r3, #0
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	e00b      	b.n	8002612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	43da      	mvns	r2, r3
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	4013      	ands	r3, r2
 8002606:	b29b      	uxth	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	bf14      	ite	ne
 800260c:	2301      	movne	r3, #1
 800260e:	2300      	moveq	r3, #0
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d18d      	bne.n	8002532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800262c:	e02d      	b.n	800268a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 f8ce 	bl	80027d0 <I2C_IsAcknowledgeFailed>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e02d      	b.n	800269a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002644:	d021      	beq.n	800268a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002646:	f7fe fe93 	bl	8001370 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	429a      	cmp	r2, r3
 8002654:	d302      	bcc.n	800265c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d116      	bne.n	800268a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2220      	movs	r2, #32
 8002666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f043 0220 	orr.w	r2, r3, #32
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e007      	b.n	800269a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002694:	2b80      	cmp	r3, #128	; 0x80
 8002696:	d1ca      	bne.n	800262e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b084      	sub	sp, #16
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026ae:	e02d      	b.n	800270c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 f88d 	bl	80027d0 <I2C_IsAcknowledgeFailed>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e02d      	b.n	800271c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c6:	d021      	beq.n	800270c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026c8:	f7fe fe52 	bl	8001370 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d302      	bcc.n	80026de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d116      	bne.n	800270c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	f043 0220 	orr.w	r2, r3, #32
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e007      	b.n	800271c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b04      	cmp	r3, #4
 8002718:	d1ca      	bne.n	80026b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002730:	e042      	b.n	80027b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	f003 0310 	and.w	r3, r3, #16
 800273c:	2b10      	cmp	r3, #16
 800273e:	d119      	bne.n	8002774 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f06f 0210 	mvn.w	r2, #16
 8002748:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2220      	movs	r2, #32
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e029      	b.n	80027c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002774:	f7fe fdfc 	bl	8001370 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	429a      	cmp	r2, r3
 8002782:	d302      	bcc.n	800278a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d116      	bne.n	80027b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2220      	movs	r2, #32
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	f043 0220 	orr.w	r2, r3, #32
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e007      	b.n	80027c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c2:	2b40      	cmp	r3, #64	; 0x40
 80027c4:	d1b5      	bne.n	8002732 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e6:	d11b      	bne.n	8002820 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2220      	movs	r2, #32
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	f043 0204 	orr.w	r2, r3, #4
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e000      	b.n	8002822 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
	...

08002830 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e25b      	b.n	8002cfa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d075      	beq.n	800293a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800284e:	4ba3      	ldr	r3, [pc, #652]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	2b04      	cmp	r3, #4
 8002858:	d00c      	beq.n	8002874 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800285a:	4ba0      	ldr	r3, [pc, #640]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002862:	2b08      	cmp	r3, #8
 8002864:	d112      	bne.n	800288c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002866:	4b9d      	ldr	r3, [pc, #628]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800286e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002872:	d10b      	bne.n	800288c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002874:	4b99      	ldr	r3, [pc, #612]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d05b      	beq.n	8002938 <HAL_RCC_OscConfig+0x108>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d157      	bne.n	8002938 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e236      	b.n	8002cfa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002894:	d106      	bne.n	80028a4 <HAL_RCC_OscConfig+0x74>
 8002896:	4b91      	ldr	r3, [pc, #580]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a90      	ldr	r2, [pc, #576]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 800289c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	e01d      	b.n	80028e0 <HAL_RCC_OscConfig+0xb0>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028ac:	d10c      	bne.n	80028c8 <HAL_RCC_OscConfig+0x98>
 80028ae:	4b8b      	ldr	r3, [pc, #556]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a8a      	ldr	r2, [pc, #552]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 80028b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	4b88      	ldr	r3, [pc, #544]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a87      	ldr	r2, [pc, #540]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 80028c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	e00b      	b.n	80028e0 <HAL_RCC_OscConfig+0xb0>
 80028c8:	4b84      	ldr	r3, [pc, #528]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a83      	ldr	r2, [pc, #524]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 80028ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	4b81      	ldr	r3, [pc, #516]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a80      	ldr	r2, [pc, #512]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 80028da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d013      	beq.n	8002910 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e8:	f7fe fd42 	bl	8001370 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028f0:	f7fe fd3e 	bl	8001370 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b64      	cmp	r3, #100	; 0x64
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e1fb      	b.n	8002cfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002902:	4b76      	ldr	r3, [pc, #472]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0xc0>
 800290e:	e014      	b.n	800293a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002910:	f7fe fd2e 	bl	8001370 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002918:	f7fe fd2a 	bl	8001370 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b64      	cmp	r3, #100	; 0x64
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e1e7      	b.n	8002cfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292a:	4b6c      	ldr	r3, [pc, #432]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0xe8>
 8002936:	e000      	b.n	800293a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d063      	beq.n	8002a0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002946:	4b65      	ldr	r3, [pc, #404]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00b      	beq.n	800296a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002952:	4b62      	ldr	r3, [pc, #392]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800295a:	2b08      	cmp	r3, #8
 800295c:	d11c      	bne.n	8002998 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800295e:	4b5f      	ldr	r3, [pc, #380]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d116      	bne.n	8002998 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800296a:	4b5c      	ldr	r3, [pc, #368]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d005      	beq.n	8002982 <HAL_RCC_OscConfig+0x152>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d001      	beq.n	8002982 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e1bb      	b.n	8002cfa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002982:	4b56      	ldr	r3, [pc, #344]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4952      	ldr	r1, [pc, #328]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 8002992:	4313      	orrs	r3, r2
 8002994:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002996:	e03a      	b.n	8002a0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d020      	beq.n	80029e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029a0:	4b4f      	ldr	r3, [pc, #316]	; (8002ae0 <HAL_RCC_OscConfig+0x2b0>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a6:	f7fe fce3 	bl	8001370 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ae:	f7fe fcdf 	bl	8001370 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e19c      	b.n	8002cfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c0:	4b46      	ldr	r3, [pc, #280]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f0      	beq.n	80029ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029cc:	4b43      	ldr	r3, [pc, #268]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	4940      	ldr	r1, [pc, #256]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	600b      	str	r3, [r1, #0]
 80029e0:	e015      	b.n	8002a0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029e2:	4b3f      	ldr	r3, [pc, #252]	; (8002ae0 <HAL_RCC_OscConfig+0x2b0>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7fe fcc2 	bl	8001370 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029f0:	f7fe fcbe 	bl	8001370 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e17b      	b.n	8002cfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a02:	4b36      	ldr	r3, [pc, #216]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d030      	beq.n	8002a7c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d016      	beq.n	8002a50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a22:	4b30      	ldr	r3, [pc, #192]	; (8002ae4 <HAL_RCC_OscConfig+0x2b4>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a28:	f7fe fca2 	bl	8001370 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a30:	f7fe fc9e 	bl	8001370 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e15b      	b.n	8002cfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a42:	4b26      	ldr	r3, [pc, #152]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 8002a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCC_OscConfig+0x200>
 8002a4e:	e015      	b.n	8002a7c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a50:	4b24      	ldr	r3, [pc, #144]	; (8002ae4 <HAL_RCC_OscConfig+0x2b4>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a56:	f7fe fc8b 	bl	8001370 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a5e:	f7fe fc87 	bl	8001370 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e144      	b.n	8002cfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a70:	4b1a      	ldr	r3, [pc, #104]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 8002a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1f0      	bne.n	8002a5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 80a0 	beq.w	8002bca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a8e:	4b13      	ldr	r3, [pc, #76]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10f      	bne.n	8002aba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	4a0e      	ldr	r2, [pc, #56]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 8002aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aaa:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	60bb      	str	r3, [r7, #8]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aba:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <HAL_RCC_OscConfig+0x2b8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d121      	bne.n	8002b0a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ac6:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <HAL_RCC_OscConfig+0x2b8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a07      	ldr	r2, [pc, #28]	; (8002ae8 <HAL_RCC_OscConfig+0x2b8>)
 8002acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ad2:	f7fe fc4d 	bl	8001370 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad8:	e011      	b.n	8002afe <HAL_RCC_OscConfig+0x2ce>
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	42470000 	.word	0x42470000
 8002ae4:	42470e80 	.word	0x42470e80
 8002ae8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aec:	f7fe fc40 	bl	8001370 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e0fd      	b.n	8002cfa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afe:	4b81      	ldr	r3, [pc, #516]	; (8002d04 <HAL_RCC_OscConfig+0x4d4>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d106      	bne.n	8002b20 <HAL_RCC_OscConfig+0x2f0>
 8002b12:	4b7d      	ldr	r3, [pc, #500]	; (8002d08 <HAL_RCC_OscConfig+0x4d8>)
 8002b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b16:	4a7c      	ldr	r2, [pc, #496]	; (8002d08 <HAL_RCC_OscConfig+0x4d8>)
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b1e:	e01c      	b.n	8002b5a <HAL_RCC_OscConfig+0x32a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b05      	cmp	r3, #5
 8002b26:	d10c      	bne.n	8002b42 <HAL_RCC_OscConfig+0x312>
 8002b28:	4b77      	ldr	r3, [pc, #476]	; (8002d08 <HAL_RCC_OscConfig+0x4d8>)
 8002b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2c:	4a76      	ldr	r2, [pc, #472]	; (8002d08 <HAL_RCC_OscConfig+0x4d8>)
 8002b2e:	f043 0304 	orr.w	r3, r3, #4
 8002b32:	6713      	str	r3, [r2, #112]	; 0x70
 8002b34:	4b74      	ldr	r3, [pc, #464]	; (8002d08 <HAL_RCC_OscConfig+0x4d8>)
 8002b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b38:	4a73      	ldr	r2, [pc, #460]	; (8002d08 <HAL_RCC_OscConfig+0x4d8>)
 8002b3a:	f043 0301 	orr.w	r3, r3, #1
 8002b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b40:	e00b      	b.n	8002b5a <HAL_RCC_OscConfig+0x32a>
 8002b42:	4b71      	ldr	r3, [pc, #452]	; (8002d08 <HAL_RCC_OscConfig+0x4d8>)
 8002b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b46:	4a70      	ldr	r2, [pc, #448]	; (8002d08 <HAL_RCC_OscConfig+0x4d8>)
 8002b48:	f023 0301 	bic.w	r3, r3, #1
 8002b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b4e:	4b6e      	ldr	r3, [pc, #440]	; (8002d08 <HAL_RCC_OscConfig+0x4d8>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	4a6d      	ldr	r2, [pc, #436]	; (8002d08 <HAL_RCC_OscConfig+0x4d8>)
 8002b54:	f023 0304 	bic.w	r3, r3, #4
 8002b58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d015      	beq.n	8002b8e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b62:	f7fe fc05 	bl	8001370 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b68:	e00a      	b.n	8002b80 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b6a:	f7fe fc01 	bl	8001370 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e0bc      	b.n	8002cfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b80:	4b61      	ldr	r3, [pc, #388]	; (8002d08 <HAL_RCC_OscConfig+0x4d8>)
 8002b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0ee      	beq.n	8002b6a <HAL_RCC_OscConfig+0x33a>
 8002b8c:	e014      	b.n	8002bb8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8e:	f7fe fbef 	bl	8001370 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b94:	e00a      	b.n	8002bac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b96:	f7fe fbeb 	bl	8001370 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e0a6      	b.n	8002cfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bac:	4b56      	ldr	r3, [pc, #344]	; (8002d08 <HAL_RCC_OscConfig+0x4d8>)
 8002bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1ee      	bne.n	8002b96 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bb8:	7dfb      	ldrb	r3, [r7, #23]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d105      	bne.n	8002bca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bbe:	4b52      	ldr	r3, [pc, #328]	; (8002d08 <HAL_RCC_OscConfig+0x4d8>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	4a51      	ldr	r2, [pc, #324]	; (8002d08 <HAL_RCC_OscConfig+0x4d8>)
 8002bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 8092 	beq.w	8002cf8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bd4:	4b4c      	ldr	r3, [pc, #304]	; (8002d08 <HAL_RCC_OscConfig+0x4d8>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 030c 	and.w	r3, r3, #12
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d05c      	beq.n	8002c9a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d141      	bne.n	8002c6c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be8:	4b48      	ldr	r3, [pc, #288]	; (8002d0c <HAL_RCC_OscConfig+0x4dc>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bee:	f7fe fbbf 	bl	8001370 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bf6:	f7fe fbbb 	bl	8001370 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e078      	b.n	8002cfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c08:	4b3f      	ldr	r3, [pc, #252]	; (8002d08 <HAL_RCC_OscConfig+0x4d8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f0      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69da      	ldr	r2, [r3, #28]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	019b      	lsls	r3, r3, #6
 8002c24:	431a      	orrs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2a:	085b      	lsrs	r3, r3, #1
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	041b      	lsls	r3, r3, #16
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c36:	061b      	lsls	r3, r3, #24
 8002c38:	4933      	ldr	r1, [pc, #204]	; (8002d08 <HAL_RCC_OscConfig+0x4d8>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c3e:	4b33      	ldr	r3, [pc, #204]	; (8002d0c <HAL_RCC_OscConfig+0x4dc>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c44:	f7fe fb94 	bl	8001370 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c4c:	f7fe fb90 	bl	8001370 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e04d      	b.n	8002cfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5e:	4b2a      	ldr	r3, [pc, #168]	; (8002d08 <HAL_RCC_OscConfig+0x4d8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0x41c>
 8002c6a:	e045      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6c:	4b27      	ldr	r3, [pc, #156]	; (8002d0c <HAL_RCC_OscConfig+0x4dc>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c72:	f7fe fb7d 	bl	8001370 <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c78:	e008      	b.n	8002c8c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c7a:	f7fe fb79 	bl	8001370 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e036      	b.n	8002cfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c8c:	4b1e      	ldr	r3, [pc, #120]	; (8002d08 <HAL_RCC_OscConfig+0x4d8>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1f0      	bne.n	8002c7a <HAL_RCC_OscConfig+0x44a>
 8002c98:	e02e      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e029      	b.n	8002cfa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ca6:	4b18      	ldr	r3, [pc, #96]	; (8002d08 <HAL_RCC_OscConfig+0x4d8>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d11c      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d115      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cce:	4013      	ands	r3, r2
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d10d      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d106      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d001      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40007000 	.word	0x40007000
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	42470060 	.word	0x42470060

08002d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0cc      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d24:	4b68      	ldr	r3, [pc, #416]	; (8002ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 030f 	and.w	r3, r3, #15
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d90c      	bls.n	8002d4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d32:	4b65      	ldr	r3, [pc, #404]	; (8002ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3a:	4b63      	ldr	r3, [pc, #396]	; (8002ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d001      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0b8      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d020      	beq.n	8002d9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d64:	4b59      	ldr	r3, [pc, #356]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	4a58      	ldr	r2, [pc, #352]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d7c:	4b53      	ldr	r3, [pc, #332]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	4a52      	ldr	r2, [pc, #328]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d88:	4b50      	ldr	r3, [pc, #320]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	494d      	ldr	r1, [pc, #308]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d044      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d107      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dae:	4b47      	ldr	r3, [pc, #284]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d119      	bne.n	8002dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e07f      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d003      	beq.n	8002dce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dca:	2b03      	cmp	r3, #3
 8002dcc:	d107      	bne.n	8002dde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dce:	4b3f      	ldr	r3, [pc, #252]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d109      	bne.n	8002dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e06f      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dde:	4b3b      	ldr	r3, [pc, #236]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e067      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dee:	4b37      	ldr	r3, [pc, #220]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f023 0203 	bic.w	r2, r3, #3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	4934      	ldr	r1, [pc, #208]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e00:	f7fe fab6 	bl	8001370 <HAL_GetTick>
 8002e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e06:	e00a      	b.n	8002e1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e08:	f7fe fab2 	bl	8001370 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e04f      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1e:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 020c 	and.w	r2, r3, #12
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d1eb      	bne.n	8002e08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e30:	4b25      	ldr	r3, [pc, #148]	; (8002ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 030f 	and.w	r3, r3, #15
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d20c      	bcs.n	8002e58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3e:	4b22      	ldr	r3, [pc, #136]	; (8002ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e46:	4b20      	ldr	r3, [pc, #128]	; (8002ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d001      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e032      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d008      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e64:	4b19      	ldr	r3, [pc, #100]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	4916      	ldr	r1, [pc, #88]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d009      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e82:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	490e      	ldr	r1, [pc, #56]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e96:	f000 f821 	bl	8002edc <HAL_RCC_GetSysClockFreq>
 8002e9a:	4601      	mov	r1, r0
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	091b      	lsrs	r3, r3, #4
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	4a0a      	ldr	r2, [pc, #40]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea8:	5cd3      	ldrb	r3, [r2, r3]
 8002eaa:	fa21 f303 	lsr.w	r3, r1, r3
 8002eae:	4a09      	ldr	r2, [pc, #36]	; (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002eb2:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fe fa16 	bl	80012e8 <HAL_InitTick>

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40023c00 	.word	0x40023c00
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	08003c90 	.word	0x08003c90
 8002ed4:	20000040 	.word	0x20000040
 8002ed8:	20000044 	.word	0x20000044

08002edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	607b      	str	r3, [r7, #4]
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	2300      	movs	r3, #0
 8002eec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ef2:	4b50      	ldr	r3, [pc, #320]	; (8003034 <HAL_RCC_GetSysClockFreq+0x158>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d007      	beq.n	8002f0e <HAL_RCC_GetSysClockFreq+0x32>
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d008      	beq.n	8002f14 <HAL_RCC_GetSysClockFreq+0x38>
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f040 808d 	bne.w	8003022 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f08:	4b4b      	ldr	r3, [pc, #300]	; (8003038 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002f0a:	60bb      	str	r3, [r7, #8]
       break;
 8002f0c:	e08c      	b.n	8003028 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f0e:	4b4b      	ldr	r3, [pc, #300]	; (800303c <HAL_RCC_GetSysClockFreq+0x160>)
 8002f10:	60bb      	str	r3, [r7, #8]
      break;
 8002f12:	e089      	b.n	8003028 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f14:	4b47      	ldr	r3, [pc, #284]	; (8003034 <HAL_RCC_GetSysClockFreq+0x158>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f1e:	4b45      	ldr	r3, [pc, #276]	; (8003034 <HAL_RCC_GetSysClockFreq+0x158>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d023      	beq.n	8002f72 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f2a:	4b42      	ldr	r3, [pc, #264]	; (8003034 <HAL_RCC_GetSysClockFreq+0x158>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	099b      	lsrs	r3, r3, #6
 8002f30:	f04f 0400 	mov.w	r4, #0
 8002f34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	ea03 0501 	and.w	r5, r3, r1
 8002f40:	ea04 0602 	and.w	r6, r4, r2
 8002f44:	4a3d      	ldr	r2, [pc, #244]	; (800303c <HAL_RCC_GetSysClockFreq+0x160>)
 8002f46:	fb02 f106 	mul.w	r1, r2, r6
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	fb02 f205 	mul.w	r2, r2, r5
 8002f50:	440a      	add	r2, r1
 8002f52:	493a      	ldr	r1, [pc, #232]	; (800303c <HAL_RCC_GetSysClockFreq+0x160>)
 8002f54:	fba5 0101 	umull	r0, r1, r5, r1
 8002f58:	1853      	adds	r3, r2, r1
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f04f 0400 	mov.w	r4, #0
 8002f62:	461a      	mov	r2, r3
 8002f64:	4623      	mov	r3, r4
 8002f66:	f7fd fb43 	bl	80005f0 <__aeabi_uldivmod>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	460c      	mov	r4, r1
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	e049      	b.n	8003006 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f72:	4b30      	ldr	r3, [pc, #192]	; (8003034 <HAL_RCC_GetSysClockFreq+0x158>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	099b      	lsrs	r3, r3, #6
 8002f78:	f04f 0400 	mov.w	r4, #0
 8002f7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	ea03 0501 	and.w	r5, r3, r1
 8002f88:	ea04 0602 	and.w	r6, r4, r2
 8002f8c:	4629      	mov	r1, r5
 8002f8e:	4632      	mov	r2, r6
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	f04f 0400 	mov.w	r4, #0
 8002f98:	0154      	lsls	r4, r2, #5
 8002f9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f9e:	014b      	lsls	r3, r1, #5
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4622      	mov	r2, r4
 8002fa4:	1b49      	subs	r1, r1, r5
 8002fa6:	eb62 0206 	sbc.w	r2, r2, r6
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	f04f 0400 	mov.w	r4, #0
 8002fb2:	0194      	lsls	r4, r2, #6
 8002fb4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002fb8:	018b      	lsls	r3, r1, #6
 8002fba:	1a5b      	subs	r3, r3, r1
 8002fbc:	eb64 0402 	sbc.w	r4, r4, r2
 8002fc0:	f04f 0100 	mov.w	r1, #0
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	00e2      	lsls	r2, r4, #3
 8002fca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002fce:	00d9      	lsls	r1, r3, #3
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4614      	mov	r4, r2
 8002fd4:	195b      	adds	r3, r3, r5
 8002fd6:	eb44 0406 	adc.w	r4, r4, r6
 8002fda:	f04f 0100 	mov.w	r1, #0
 8002fde:	f04f 0200 	mov.w	r2, #0
 8002fe2:	02a2      	lsls	r2, r4, #10
 8002fe4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002fe8:	0299      	lsls	r1, r3, #10
 8002fea:	460b      	mov	r3, r1
 8002fec:	4614      	mov	r4, r2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	4621      	mov	r1, r4
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f04f 0400 	mov.w	r4, #0
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4623      	mov	r3, r4
 8002ffc:	f7fd faf8 	bl	80005f0 <__aeabi_uldivmod>
 8003000:	4603      	mov	r3, r0
 8003002:	460c      	mov	r4, r1
 8003004:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003006:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <HAL_RCC_GetSysClockFreq+0x158>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	0c1b      	lsrs	r3, r3, #16
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	3301      	adds	r3, #1
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	fbb2 f3f3 	udiv	r3, r2, r3
 800301e:	60bb      	str	r3, [r7, #8]
      break;
 8003020:	e002      	b.n	8003028 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003022:	4b05      	ldr	r3, [pc, #20]	; (8003038 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003024:	60bb      	str	r3, [r7, #8]
      break;
 8003026:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003028:	68bb      	ldr	r3, [r7, #8]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003032:	bf00      	nop
 8003034:	40023800 	.word	0x40023800
 8003038:	00f42400 	.word	0x00f42400
 800303c:	017d7840 	.word	0x017d7840

08003040 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003044:	4b03      	ldr	r3, [pc, #12]	; (8003054 <HAL_RCC_GetHCLKFreq+0x14>)
 8003046:	681b      	ldr	r3, [r3, #0]
}
 8003048:	4618      	mov	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	20000040 	.word	0x20000040

08003058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800305c:	f7ff fff0 	bl	8003040 <HAL_RCC_GetHCLKFreq>
 8003060:	4601      	mov	r1, r0
 8003062:	4b05      	ldr	r3, [pc, #20]	; (8003078 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	0a9b      	lsrs	r3, r3, #10
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	4a03      	ldr	r2, [pc, #12]	; (800307c <HAL_RCC_GetPCLK1Freq+0x24>)
 800306e:	5cd3      	ldrb	r3, [r2, r3]
 8003070:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003074:	4618      	mov	r0, r3
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40023800 	.word	0x40023800
 800307c:	08003ca0 	.word	0x08003ca0

08003080 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e083      	b.n	800319c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d106      	bne.n	80030ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7fd fff3 	bl	8001094 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2202      	movs	r2, #2
 80030b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030c4:	f023 0307 	bic.w	r3, r3, #7
 80030c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3304      	adds	r3, #4
 80030d2:	4619      	mov	r1, r3
 80030d4:	4610      	mov	r0, r2
 80030d6:	f000 f89d 	bl	8003214 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003102:	f023 0303 	bic.w	r3, r3, #3
 8003106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	021b      	lsls	r3, r3, #8
 8003112:	4313      	orrs	r3, r2
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4313      	orrs	r3, r2
 8003118:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003120:	f023 030c 	bic.w	r3, r3, #12
 8003124:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800312c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003130:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	021b      	lsls	r3, r3, #8
 800313c:	4313      	orrs	r3, r2
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	011a      	lsls	r2, r3, #4
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	031b      	lsls	r3, r3, #12
 8003150:	4313      	orrs	r3, r2
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800315e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003166:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	4313      	orrs	r3, r2
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <HAL_TIM_Encoder_Start+0x16>
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	d008      	beq.n	80031ca <HAL_TIM_Encoder_Start+0x26>
 80031b8:	e00f      	b.n	80031da <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2201      	movs	r2, #1
 80031c0:	2100      	movs	r1, #0
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 f8a6 	bl	8003314 <TIM_CCxChannelCmd>
      break;
 80031c8:	e016      	b.n	80031f8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2201      	movs	r2, #1
 80031d0:	2104      	movs	r1, #4
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 f89e 	bl	8003314 <TIM_CCxChannelCmd>
      break;
 80031d8:	e00e      	b.n	80031f8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2201      	movs	r2, #1
 80031e0:	2100      	movs	r1, #0
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 f896 	bl	8003314 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2201      	movs	r2, #1
 80031ee:	2104      	movs	r1, #4
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 f88f 	bl	8003314 <TIM_CCxChannelCmd>
      break;
 80031f6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0201 	orr.w	r2, r2, #1
 8003206:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a34      	ldr	r2, [pc, #208]	; (80032f8 <TIM_Base_SetConfig+0xe4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d00f      	beq.n	800324c <TIM_Base_SetConfig+0x38>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003232:	d00b      	beq.n	800324c <TIM_Base_SetConfig+0x38>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a31      	ldr	r2, [pc, #196]	; (80032fc <TIM_Base_SetConfig+0xe8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d007      	beq.n	800324c <TIM_Base_SetConfig+0x38>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a30      	ldr	r2, [pc, #192]	; (8003300 <TIM_Base_SetConfig+0xec>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d003      	beq.n	800324c <TIM_Base_SetConfig+0x38>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a2f      	ldr	r2, [pc, #188]	; (8003304 <TIM_Base_SetConfig+0xf0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d108      	bne.n	800325e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	4313      	orrs	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a25      	ldr	r2, [pc, #148]	; (80032f8 <TIM_Base_SetConfig+0xe4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d01b      	beq.n	800329e <TIM_Base_SetConfig+0x8a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326c:	d017      	beq.n	800329e <TIM_Base_SetConfig+0x8a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a22      	ldr	r2, [pc, #136]	; (80032fc <TIM_Base_SetConfig+0xe8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d013      	beq.n	800329e <TIM_Base_SetConfig+0x8a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a21      	ldr	r2, [pc, #132]	; (8003300 <TIM_Base_SetConfig+0xec>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00f      	beq.n	800329e <TIM_Base_SetConfig+0x8a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a20      	ldr	r2, [pc, #128]	; (8003304 <TIM_Base_SetConfig+0xf0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00b      	beq.n	800329e <TIM_Base_SetConfig+0x8a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a1f      	ldr	r2, [pc, #124]	; (8003308 <TIM_Base_SetConfig+0xf4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d007      	beq.n	800329e <TIM_Base_SetConfig+0x8a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a1e      	ldr	r2, [pc, #120]	; (800330c <TIM_Base_SetConfig+0xf8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d003      	beq.n	800329e <TIM_Base_SetConfig+0x8a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a1d      	ldr	r2, [pc, #116]	; (8003310 <TIM_Base_SetConfig+0xfc>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d108      	bne.n	80032b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a08      	ldr	r2, [pc, #32]	; (80032f8 <TIM_Base_SetConfig+0xe4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d103      	bne.n	80032e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	615a      	str	r2, [r3, #20]
}
 80032ea:	bf00      	nop
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	40010000 	.word	0x40010000
 80032fc:	40000400 	.word	0x40000400
 8003300:	40000800 	.word	0x40000800
 8003304:	40000c00 	.word	0x40000c00
 8003308:	40014000 	.word	0x40014000
 800330c:	40014400 	.word	0x40014400
 8003310:	40014800 	.word	0x40014800

08003314 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003314:	b480      	push	{r7}
 8003316:	b087      	sub	sp, #28
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	2201      	movs	r2, #1
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a1a      	ldr	r2, [r3, #32]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	43db      	mvns	r3, r3
 8003336:	401a      	ands	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a1a      	ldr	r2, [r3, #32]
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f003 031f 	and.w	r3, r3, #31
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	fa01 f303 	lsl.w	r3, r1, r3
 800334c:	431a      	orrs	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	621a      	str	r2, [r3, #32]
}
 8003352:	bf00      	nop
 8003354:	371c      	adds	r7, #28
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003374:	2302      	movs	r3, #2
 8003376:	e050      	b.n	800341a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a1c      	ldr	r2, [pc, #112]	; (8003428 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d018      	beq.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c4:	d013      	beq.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a18      	ldr	r2, [pc, #96]	; (800342c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d00e      	beq.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a16      	ldr	r2, [pc, #88]	; (8003430 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d009      	beq.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a15      	ldr	r2, [pc, #84]	; (8003434 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d004      	beq.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a13      	ldr	r2, [pc, #76]	; (8003438 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d10c      	bne.n	8003408 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	40010000 	.word	0x40010000
 800342c:	40000400 	.word	0x40000400
 8003430:	40000800 	.word	0x40000800
 8003434:	40000c00 	.word	0x40000c00
 8003438:	40014000 	.word	0x40014000

0800343c <MPU6050_SetDlpf>:

//
// CONFIG
//
void MPU6050_SetDlpf(uint8_t Value)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af04      	add	r7, sp, #16
 8003442:	4603      	mov	r3, r0
 8003444:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 8003446:	4b18      	ldr	r3, [pc, #96]	; (80034a8 <MPU6050_SetDlpf+0x6c>)
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	230a      	movs	r3, #10
 800344c:	9302      	str	r3, [sp, #8]
 800344e:	2301      	movs	r3, #1
 8003450:	9301      	str	r3, [sp, #4]
 8003452:	f107 030f 	add.w	r3, r7, #15
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	2301      	movs	r3, #1
 800345a:	221a      	movs	r2, #26
 800345c:	21d0      	movs	r1, #208	; 0xd0
 800345e:	f7fe fc69 	bl	8001d34 <HAL_I2C_Mem_Read>
	tmp &= 0xF8;
 8003462:	7bfb      	ldrb	r3, [r7, #15]
 8003464:	f023 0307 	bic.w	r3, r3, #7
 8003468:	b2db      	uxtb	r3, r3
 800346a:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x7);
 800346c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	b25a      	sxtb	r2, r3
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	b25b      	sxtb	r3, r3
 800347a:	4313      	orrs	r3, r2
 800347c:	b25b      	sxtb	r3, r3
 800347e:	b2db      	uxtb	r3, r3
 8003480:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 8003482:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <MPU6050_SetDlpf+0x6c>)
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	230a      	movs	r3, #10
 8003488:	9302      	str	r3, [sp, #8]
 800348a:	2301      	movs	r3, #1
 800348c:	9301      	str	r3, [sp, #4]
 800348e:	f107 030f 	add.w	r3, r7, #15
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	2301      	movs	r3, #1
 8003496:	221a      	movs	r2, #26
 8003498:	21d0      	movs	r1, #208	; 0xd0
 800349a:	f7fe fb51 	bl	8001b40 <HAL_I2C_Mem_Write>
}
 800349e:	bf00      	nop
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000190 	.word	0x20000190

080034ac <MPU6050_DeviceReset>:

//
// PWR_MGMT_1
//
void MPU6050_DeviceReset(uint8_t Reset)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af04      	add	r7, sp, #16
 80034b2:	4603      	mov	r3, r0
 80034b4:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 80034b6:	4b17      	ldr	r3, [pc, #92]	; (8003514 <MPU6050_DeviceReset+0x68>)
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	230a      	movs	r3, #10
 80034bc:	9302      	str	r3, [sp, #8]
 80034be:	2301      	movs	r3, #1
 80034c0:	9301      	str	r3, [sp, #4]
 80034c2:	f107 030f 	add.w	r3, r7, #15
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	2301      	movs	r3, #1
 80034ca:	226b      	movs	r2, #107	; 0x6b
 80034cc:	21d0      	movs	r1, #208	; 0xd0
 80034ce:	f7fe fc31 	bl	8001d34 <HAL_I2C_Mem_Read>
	tmp &= ~(1<<MPU6050_PWR1_DEVICE_RESET_BIT);
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Reset & 0x1) << MPU6050_PWR1_DEVICE_RESET_BIT);
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	01db      	lsls	r3, r3, #7
 80034e0:	b25a      	sxtb	r2, r3
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
 80034e4:	b25b      	sxtb	r3, r3
 80034e6:	4313      	orrs	r3, r2
 80034e8:	b25b      	sxtb	r3, r3
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 80034ee:	4b09      	ldr	r3, [pc, #36]	; (8003514 <MPU6050_DeviceReset+0x68>)
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	230a      	movs	r3, #10
 80034f4:	9302      	str	r3, [sp, #8]
 80034f6:	2301      	movs	r3, #1
 80034f8:	9301      	str	r3, [sp, #4]
 80034fa:	f107 030f 	add.w	r3, r7, #15
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	2301      	movs	r3, #1
 8003502:	226b      	movs	r2, #107	; 0x6b
 8003504:	21d0      	movs	r1, #208	; 0xd0
 8003506:	f7fe fb1b 	bl	8001b40 <HAL_I2C_Mem_Write>
}
 800350a:	bf00      	nop
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20000190 	.word	0x20000190

08003518 <MPU6050_SetSleepEnabled>:

void MPU6050_SetSleepEnabled(uint8_t Enable)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af04      	add	r7, sp, #16
 800351e:	4603      	mov	r3, r0
 8003520:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 8003522:	4b18      	ldr	r3, [pc, #96]	; (8003584 <MPU6050_SetSleepEnabled+0x6c>)
 8003524:	6818      	ldr	r0, [r3, #0]
 8003526:	230a      	movs	r3, #10
 8003528:	9302      	str	r3, [sp, #8]
 800352a:	2301      	movs	r3, #1
 800352c:	9301      	str	r3, [sp, #4]
 800352e:	f107 030f 	add.w	r3, r7, #15
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	2301      	movs	r3, #1
 8003536:	226b      	movs	r2, #107	; 0x6b
 8003538:	21d0      	movs	r1, #208	; 0xd0
 800353a:	f7fe fbfb 	bl	8001d34 <HAL_I2C_Mem_Read>
	tmp &= ~(1<<MPU6050_PWR1_SLEEP_BIT);
 800353e:	7bfb      	ldrb	r3, [r7, #15]
 8003540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003544:	b2db      	uxtb	r3, r3
 8003546:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Enable & 0x1) << MPU6050_PWR1_SLEEP_BIT);
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	019b      	lsls	r3, r3, #6
 800354c:	b25b      	sxtb	r3, r3
 800354e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003552:	b25a      	sxtb	r2, r3
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	b25b      	sxtb	r3, r3
 8003558:	4313      	orrs	r3, r2
 800355a:	b25b      	sxtb	r3, r3
 800355c:	b2db      	uxtb	r3, r3
 800355e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 8003560:	4b08      	ldr	r3, [pc, #32]	; (8003584 <MPU6050_SetSleepEnabled+0x6c>)
 8003562:	6818      	ldr	r0, [r3, #0]
 8003564:	230a      	movs	r3, #10
 8003566:	9302      	str	r3, [sp, #8]
 8003568:	2301      	movs	r3, #1
 800356a:	9301      	str	r3, [sp, #4]
 800356c:	f107 030f 	add.w	r3, r7, #15
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	2301      	movs	r3, #1
 8003574:	226b      	movs	r2, #107	; 0x6b
 8003576:	21d0      	movs	r1, #208	; 0xd0
 8003578:	f7fe fae2 	bl	8001b40 <HAL_I2C_Mem_Write>
}
 800357c:	bf00      	nop
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	20000190 	.word	0x20000190

08003588 <MPU6050_SetClockSource>:
	tmp |= ((Disable & 0x1) << MPU6050_PWR1_TEMP_DIS_BIT);
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
}

void MPU6050_SetClockSource(uint8_t Source)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af04      	add	r7, sp, #16
 800358e:	4603      	mov	r3, r0
 8003590:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 8003592:	4b18      	ldr	r3, [pc, #96]	; (80035f4 <MPU6050_SetClockSource+0x6c>)
 8003594:	6818      	ldr	r0, [r3, #0]
 8003596:	230a      	movs	r3, #10
 8003598:	9302      	str	r3, [sp, #8]
 800359a:	2301      	movs	r3, #1
 800359c:	9301      	str	r3, [sp, #4]
 800359e:	f107 030f 	add.w	r3, r7, #15
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	2301      	movs	r3, #1
 80035a6:	226b      	movs	r2, #107	; 0x6b
 80035a8:	21d0      	movs	r1, #208	; 0xd0
 80035aa:	f7fe fbc3 	bl	8001d34 <HAL_I2C_Mem_Read>
	tmp &= 0xF8;
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
 80035b0:	f023 0307 	bic.w	r3, r3, #7
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	73fb      	strb	r3, [r7, #15]
	tmp |= (Source & 0x7);
 80035b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	b25a      	sxtb	r2, r3
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	b25b      	sxtb	r3, r3
 80035c6:	4313      	orrs	r3, r2
 80035c8:	b25b      	sxtb	r3, r3
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 80035ce:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <MPU6050_SetClockSource+0x6c>)
 80035d0:	6818      	ldr	r0, [r3, #0]
 80035d2:	230a      	movs	r3, #10
 80035d4:	9302      	str	r3, [sp, #8]
 80035d6:	2301      	movs	r3, #1
 80035d8:	9301      	str	r3, [sp, #4]
 80035da:	f107 030f 	add.w	r3, r7, #15
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	2301      	movs	r3, #1
 80035e2:	226b      	movs	r2, #107	; 0x6b
 80035e4:	21d0      	movs	r1, #208	; 0xd0
 80035e6:	f7fe faab 	bl	8001b40 <HAL_I2C_Mem_Write>
}
 80035ea:	bf00      	nop
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	20000190 	.word	0x20000190

080035f8 <MPU6050_SetFullScaleGyroRange>:

//
//	Measurement scale configuration
//
void MPU6050_SetFullScaleGyroRange(uint8_t Range)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af04      	add	r7, sp, #16
 80035fe:	4603      	mov	r3, r0
 8003600:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 8003602:	4b28      	ldr	r3, [pc, #160]	; (80036a4 <MPU6050_SetFullScaleGyroRange+0xac>)
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	230a      	movs	r3, #10
 8003608:	9302      	str	r3, [sp, #8]
 800360a:	2301      	movs	r3, #1
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	f107 030f 	add.w	r3, r7, #15
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	2301      	movs	r3, #1
 8003616:	221b      	movs	r2, #27
 8003618:	21d0      	movs	r1, #208	; 0xd0
 800361a:	f7fe fb8b 	bl	8001d34 <HAL_I2C_Mem_Read>
	tmp &= 0xE7;
 800361e:	7bfb      	ldrb	r3, [r7, #15]
 8003620:	f023 0318 	bic.w	r3, r3, #24
 8003624:	b2db      	uxtb	r3, r3
 8003626:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Range & 0x7) << 3);
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	b25b      	sxtb	r3, r3
 800362e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003632:	b25a      	sxtb	r2, r3
 8003634:	7bfb      	ldrb	r3, [r7, #15]
 8003636:	b25b      	sxtb	r3, r3
 8003638:	4313      	orrs	r3, r2
 800363a:	b25b      	sxtb	r3, r3
 800363c:	b2db      	uxtb	r3, r3
 800363e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 8003640:	4b18      	ldr	r3, [pc, #96]	; (80036a4 <MPU6050_SetFullScaleGyroRange+0xac>)
 8003642:	6818      	ldr	r0, [r3, #0]
 8003644:	230a      	movs	r3, #10
 8003646:	9302      	str	r3, [sp, #8]
 8003648:	2301      	movs	r3, #1
 800364a:	9301      	str	r3, [sp, #4]
 800364c:	f107 030f 	add.w	r3, r7, #15
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	2301      	movs	r3, #1
 8003654:	221b      	movs	r2, #27
 8003656:	21d0      	movs	r1, #208	; 0xd0
 8003658:	f7fe fa72 	bl	8001b40 <HAL_I2C_Mem_Write>

	switch(Range)
 800365c:	79fb      	ldrb	r3, [r7, #7]
 800365e:	2b03      	cmp	r3, #3
 8003660:	d81a      	bhi.n	8003698 <MPU6050_SetFullScaleGyroRange+0xa0>
 8003662:	a201      	add	r2, pc, #4	; (adr r2, 8003668 <MPU6050_SetFullScaleGyroRange+0x70>)
 8003664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003668:	08003679 	.word	0x08003679
 800366c:	08003681 	.word	0x08003681
 8003670:	08003689 	.word	0x08003689
 8003674:	08003691 	.word	0x08003691
	{
		case MPU6050_GYRO_FS_250:
			Gyr_Scale = 0.007633;
 8003678:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <MPU6050_SetFullScaleGyroRange+0xb0>)
 800367a:	4a0c      	ldr	r2, [pc, #48]	; (80036ac <MPU6050_SetFullScaleGyroRange+0xb4>)
 800367c:	601a      	str	r2, [r3, #0]
			break;
 800367e:	e00c      	b.n	800369a <MPU6050_SetFullScaleGyroRange+0xa2>
		case MPU6050_GYRO_FS_500:
			Gyr_Scale = 0.015267;
 8003680:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <MPU6050_SetFullScaleGyroRange+0xb0>)
 8003682:	4a0b      	ldr	r2, [pc, #44]	; (80036b0 <MPU6050_SetFullScaleGyroRange+0xb8>)
 8003684:	601a      	str	r2, [r3, #0]
			break;
 8003686:	e008      	b.n	800369a <MPU6050_SetFullScaleGyroRange+0xa2>
		case MPU6050_GYRO_FS_1000:
			Gyr_Scale = 0.030487;
 8003688:	4b07      	ldr	r3, [pc, #28]	; (80036a8 <MPU6050_SetFullScaleGyroRange+0xb0>)
 800368a:	4a0a      	ldr	r2, [pc, #40]	; (80036b4 <MPU6050_SetFullScaleGyroRange+0xbc>)
 800368c:	601a      	str	r2, [r3, #0]
			break;
 800368e:	e004      	b.n	800369a <MPU6050_SetFullScaleGyroRange+0xa2>
		case MPU6050_GYRO_FS_2000:
			Gyr_Scale = 0.060975;
 8003690:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <MPU6050_SetFullScaleGyroRange+0xb0>)
 8003692:	4a09      	ldr	r2, [pc, #36]	; (80036b8 <MPU6050_SetFullScaleGyroRange+0xc0>)
 8003694:	601a      	str	r2, [r3, #0]
			break;
 8003696:	e000      	b.n	800369a <MPU6050_SetFullScaleGyroRange+0xa2>
		default:
			break;
 8003698:	bf00      	nop
	}
}
 800369a:	bf00      	nop
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20000190 	.word	0x20000190
 80036a8:	2000018c 	.word	0x2000018c
 80036ac:	3bfa1e3f 	.word	0x3bfa1e3f
 80036b0:	3c7a2270 	.word	0x3c7a2270
 80036b4:	3cf9bfdf 	.word	0x3cf9bfdf
 80036b8:	3d79c0ec 	.word	0x3d79c0ec

080036bc <MPU6050_SetFullScaleAccelRange>:

void MPU6050_SetFullScaleAccelRange(uint8_t Range)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af04      	add	r7, sp, #16
 80036c2:	4603      	mov	r3, r0
 80036c4:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 80036c6:	4b28      	ldr	r3, [pc, #160]	; (8003768 <MPU6050_SetFullScaleAccelRange+0xac>)
 80036c8:	6818      	ldr	r0, [r3, #0]
 80036ca:	230a      	movs	r3, #10
 80036cc:	9302      	str	r3, [sp, #8]
 80036ce:	2301      	movs	r3, #1
 80036d0:	9301      	str	r3, [sp, #4]
 80036d2:	f107 030f 	add.w	r3, r7, #15
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	2301      	movs	r3, #1
 80036da:	221c      	movs	r2, #28
 80036dc:	21d0      	movs	r1, #208	; 0xd0
 80036de:	f7fe fb29 	bl	8001d34 <HAL_I2C_Mem_Read>
	tmp &= 0xE7;
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
 80036e4:	f023 0318 	bic.w	r3, r3, #24
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Range & 0x7) << 3);
 80036ec:	79fb      	ldrb	r3, [r7, #7]
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	b25b      	sxtb	r3, r3
 80036f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036f6:	b25a      	sxtb	r2, r3
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	b25b      	sxtb	r3, r3
 80036fc:	4313      	orrs	r3, r2
 80036fe:	b25b      	sxtb	r3, r3
 8003700:	b2db      	uxtb	r3, r3
 8003702:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 8003704:	4b18      	ldr	r3, [pc, #96]	; (8003768 <MPU6050_SetFullScaleAccelRange+0xac>)
 8003706:	6818      	ldr	r0, [r3, #0]
 8003708:	230a      	movs	r3, #10
 800370a:	9302      	str	r3, [sp, #8]
 800370c:	2301      	movs	r3, #1
 800370e:	9301      	str	r3, [sp, #4]
 8003710:	f107 030f 	add.w	r3, r7, #15
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	2301      	movs	r3, #1
 8003718:	221c      	movs	r2, #28
 800371a:	21d0      	movs	r1, #208	; 0xd0
 800371c:	f7fe fa10 	bl	8001b40 <HAL_I2C_Mem_Write>

	switch(Range)
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	2b03      	cmp	r3, #3
 8003724:	d81a      	bhi.n	800375c <MPU6050_SetFullScaleAccelRange+0xa0>
 8003726:	a201      	add	r2, pc, #4	; (adr r2, 800372c <MPU6050_SetFullScaleAccelRange+0x70>)
 8003728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372c:	0800373d 	.word	0x0800373d
 8003730:	08003745 	.word	0x08003745
 8003734:	0800374d 	.word	0x0800374d
 8003738:	08003755 	.word	0x08003755
	{
		case MPU6050_ACCEL_FS_2:
			Acc_Scale = 0.000061;
 800373c:	4b0b      	ldr	r3, [pc, #44]	; (800376c <MPU6050_SetFullScaleAccelRange+0xb0>)
 800373e:	4a0c      	ldr	r2, [pc, #48]	; (8003770 <MPU6050_SetFullScaleAccelRange+0xb4>)
 8003740:	601a      	str	r2, [r3, #0]
			break;
 8003742:	e00c      	b.n	800375e <MPU6050_SetFullScaleAccelRange+0xa2>
		case MPU6050_ACCEL_FS_4:
			Acc_Scale = 0.000122;
 8003744:	4b09      	ldr	r3, [pc, #36]	; (800376c <MPU6050_SetFullScaleAccelRange+0xb0>)
 8003746:	4a0b      	ldr	r2, [pc, #44]	; (8003774 <MPU6050_SetFullScaleAccelRange+0xb8>)
 8003748:	601a      	str	r2, [r3, #0]
			break;
 800374a:	e008      	b.n	800375e <MPU6050_SetFullScaleAccelRange+0xa2>
		case MPU6050_ACCEL_FS_8:
			Acc_Scale = 0.000244;
 800374c:	4b07      	ldr	r3, [pc, #28]	; (800376c <MPU6050_SetFullScaleAccelRange+0xb0>)
 800374e:	4a0a      	ldr	r2, [pc, #40]	; (8003778 <MPU6050_SetFullScaleAccelRange+0xbc>)
 8003750:	601a      	str	r2, [r3, #0]
			break;
 8003752:	e004      	b.n	800375e <MPU6050_SetFullScaleAccelRange+0xa2>
		case MPU6050_ACCEL_FS_16:
			Acc_Scale = 0.0004882;
 8003754:	4b05      	ldr	r3, [pc, #20]	; (800376c <MPU6050_SetFullScaleAccelRange+0xb0>)
 8003756:	4a09      	ldr	r2, [pc, #36]	; (800377c <MPU6050_SetFullScaleAccelRange+0xc0>)
 8003758:	601a      	str	r2, [r3, #0]
			break;
 800375a:	e000      	b.n	800375e <MPU6050_SetFullScaleAccelRange+0xa2>
		default:
			break;
 800375c:	bf00      	nop
	}
}
 800375e:	bf00      	nop
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20000190 	.word	0x20000190
 800376c:	20000188 	.word	0x20000188
 8003770:	387fda40 	.word	0x387fda40
 8003774:	38ffda40 	.word	0x38ffda40
 8003778:	397fda40 	.word	0x397fda40
 800377c:	39fff518 	.word	0x39fff518

08003780 <MPU6050_GetTemperatureRAW>:

//
// Reading data
//
int16_t MPU6050_GetTemperatureRAW(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af04      	add	r7, sp, #16
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_TEMP_OUT_H, 1, tmp, 2, I2C_TIMEOUT);
 8003786:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <MPU6050_GetTemperatureRAW+0x38>)
 8003788:	6818      	ldr	r0, [r3, #0]
 800378a:	230a      	movs	r3, #10
 800378c:	9302      	str	r3, [sp, #8]
 800378e:	2302      	movs	r3, #2
 8003790:	9301      	str	r3, [sp, #4]
 8003792:	1d3b      	adds	r3, r7, #4
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	2301      	movs	r3, #1
 8003798:	2241      	movs	r2, #65	; 0x41
 800379a:	21d0      	movs	r1, #208	; 0xd0
 800379c:	f7fe faca 	bl	8001d34 <HAL_I2C_Mem_Read>
	return (((int16_t)tmp[0]) << 8) | tmp[1];
 80037a0:	793b      	ldrb	r3, [r7, #4]
 80037a2:	021b      	lsls	r3, r3, #8
 80037a4:	b21a      	sxth	r2, r3
 80037a6:	797b      	ldrb	r3, [r7, #5]
 80037a8:	b21b      	sxth	r3, r3
 80037aa:	4313      	orrs	r3, r2
 80037ac:	b21b      	sxth	r3, r3
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20000190 	.word	0x20000190
 80037bc:	00000000 	.word	0x00000000

080037c0 <MPU6050_GetTemperatureCelsius>:

float MPU6050_GetTemperatureCelsius(void)
{
 80037c0:	b590      	push	{r4, r7, lr}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
	int16_t temp;

	temp = MPU6050_GetTemperatureRAW();
 80037c6:	f7ff ffdb 	bl	8003780 <MPU6050_GetTemperatureRAW>
 80037ca:	4603      	mov	r3, r0
 80037cc:	80fb      	strh	r3, [r7, #6]

	return (float)temp / 340 + 36.53;
 80037ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037da:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003818 <MPU6050_GetTemperatureCelsius+0x58>
 80037de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80037e2:	ee16 0a90 	vmov	r0, s13
 80037e6:	f7fc fe5b 	bl	80004a0 <__aeabi_f2d>
 80037ea:	a309      	add	r3, pc, #36	; (adr r3, 8003810 <MPU6050_GetTemperatureCelsius+0x50>)
 80037ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f0:	f7fc fcf8 	bl	80001e4 <__adddf3>
 80037f4:	4603      	mov	r3, r0
 80037f6:	460c      	mov	r4, r1
 80037f8:	4618      	mov	r0, r3
 80037fa:	4621      	mov	r1, r4
 80037fc:	f7fc fea8 	bl	8000550 <__aeabi_d2f>
 8003800:	4603      	mov	r3, r0
 8003802:	ee07 3a90 	vmov	s15, r3
}
 8003806:	eeb0 0a67 	vmov.f32	s0, s15
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	bd90      	pop	{r4, r7, pc}
 8003810:	0a3d70a4 	.word	0x0a3d70a4
 8003814:	404243d7 	.word	0x404243d7
 8003818:	43aa0000 	.word	0x43aa0000

0800381c <MPU6050_GetAccelerometerRAW>:
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, 1, tmp, 2, I2C_TIMEOUT);
	return (((int16_t)tmp[0]) << 8) | tmp[1];
}

void MPU6050_GetAccelerometerRAW(int16_t *x, int16_t *y, int16_t *z)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08a      	sub	sp, #40	; 0x28
 8003820:	af04      	add	r7, sp, #16
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
	uint8_t tmp[6];
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, tmp, 6, I2C_TIMEOUT);
 8003828:	4b16      	ldr	r3, [pc, #88]	; (8003884 <MPU6050_GetAccelerometerRAW+0x68>)
 800382a:	6818      	ldr	r0, [r3, #0]
 800382c:	230a      	movs	r3, #10
 800382e:	9302      	str	r3, [sp, #8]
 8003830:	2306      	movs	r3, #6
 8003832:	9301      	str	r3, [sp, #4]
 8003834:	f107 0310 	add.w	r3, r7, #16
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	2301      	movs	r3, #1
 800383c:	223b      	movs	r2, #59	; 0x3b
 800383e:	21d0      	movs	r1, #208	; 0xd0
 8003840:	f7fe fa78 	bl	8001d34 <HAL_I2C_Mem_Read>

	*x = (((int16_t)tmp[0]) << 8) | tmp[1];
 8003844:	7c3b      	ldrb	r3, [r7, #16]
 8003846:	021b      	lsls	r3, r3, #8
 8003848:	b21a      	sxth	r2, r3
 800384a:	7c7b      	ldrb	r3, [r7, #17]
 800384c:	b21b      	sxth	r3, r3
 800384e:	4313      	orrs	r3, r2
 8003850:	b21a      	sxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	801a      	strh	r2, [r3, #0]
	*y = (((int16_t)tmp[2]) << 8) | tmp[3];
 8003856:	7cbb      	ldrb	r3, [r7, #18]
 8003858:	021b      	lsls	r3, r3, #8
 800385a:	b21a      	sxth	r2, r3
 800385c:	7cfb      	ldrb	r3, [r7, #19]
 800385e:	b21b      	sxth	r3, r3
 8003860:	4313      	orrs	r3, r2
 8003862:	b21a      	sxth	r2, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	801a      	strh	r2, [r3, #0]
	*z = (((int16_t)tmp[4]) << 8) | tmp[5];
 8003868:	7d3b      	ldrb	r3, [r7, #20]
 800386a:	021b      	lsls	r3, r3, #8
 800386c:	b21a      	sxth	r2, r3
 800386e:	7d7b      	ldrb	r3, [r7, #21]
 8003870:	b21b      	sxth	r3, r3
 8003872:	4313      	orrs	r3, r2
 8003874:	b21a      	sxth	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	801a      	strh	r2, [r3, #0]
}
 800387a:	bf00      	nop
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20000190 	.word	0x20000190

08003888 <MPU6050_GetAccelerometerScaled>:

void MPU6050_GetAccelerometerScaled(float* x, float* y, float* z)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
	int16_t tmp_x, tmp_y, tmp_z;
	MPU6050_GetAccelerometerRAW(&tmp_x, &tmp_y, &tmp_z);
 8003894:	f107 0212 	add.w	r2, r7, #18
 8003898:	f107 0114 	add.w	r1, r7, #20
 800389c:	f107 0316 	add.w	r3, r7, #22
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff ffbb 	bl	800381c <MPU6050_GetAccelerometerRAW>

	*x = (float)tmp_x * Acc_Scale;
 80038a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80038aa:	ee07 3a90 	vmov	s15, r3
 80038ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038b2:	4b14      	ldr	r3, [pc, #80]	; (8003904 <MPU6050_GetAccelerometerScaled+0x7c>)
 80038b4:	edd3 7a00 	vldr	s15, [r3]
 80038b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	edc3 7a00 	vstr	s15, [r3]
	*y = (float)tmp_y * Acc_Scale;
 80038c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80038c6:	ee07 3a90 	vmov	s15, r3
 80038ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038ce:	4b0d      	ldr	r3, [pc, #52]	; (8003904 <MPU6050_GetAccelerometerScaled+0x7c>)
 80038d0:	edd3 7a00 	vldr	s15, [r3]
 80038d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	edc3 7a00 	vstr	s15, [r3]
	*z = (float)tmp_z * Acc_Scale;
 80038de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80038e2:	ee07 3a90 	vmov	s15, r3
 80038e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038ea:	4b06      	ldr	r3, [pc, #24]	; (8003904 <MPU6050_GetAccelerometerScaled+0x7c>)
 80038ec:	edd3 7a00 	vldr	s15, [r3]
 80038f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	edc3 7a00 	vstr	s15, [r3]
}
 80038fa:	bf00      	nop
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	20000188 	.word	0x20000188

08003908 <MPU6050_GetGyroscopeRAW>:
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, 1, tmp, 2, I2C_TIMEOUT);
	return (((int16_t)tmp[0]) << 8) | tmp[1];
}

void MPU6050_GetGyroscopeRAW(int16_t *x, int16_t *y, int16_t *z)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b08a      	sub	sp, #40	; 0x28
 800390c:	af04      	add	r7, sp, #16
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
	uint8_t tmp[6];
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 1, tmp, 6, I2C_TIMEOUT);
 8003914:	4b16      	ldr	r3, [pc, #88]	; (8003970 <MPU6050_GetGyroscopeRAW+0x68>)
 8003916:	6818      	ldr	r0, [r3, #0]
 8003918:	230a      	movs	r3, #10
 800391a:	9302      	str	r3, [sp, #8]
 800391c:	2306      	movs	r3, #6
 800391e:	9301      	str	r3, [sp, #4]
 8003920:	f107 0310 	add.w	r3, r7, #16
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	2301      	movs	r3, #1
 8003928:	2243      	movs	r2, #67	; 0x43
 800392a:	21d0      	movs	r1, #208	; 0xd0
 800392c:	f7fe fa02 	bl	8001d34 <HAL_I2C_Mem_Read>

	*x = (((int16_t)tmp[0]) << 8) | tmp[1];
 8003930:	7c3b      	ldrb	r3, [r7, #16]
 8003932:	021b      	lsls	r3, r3, #8
 8003934:	b21a      	sxth	r2, r3
 8003936:	7c7b      	ldrb	r3, [r7, #17]
 8003938:	b21b      	sxth	r3, r3
 800393a:	4313      	orrs	r3, r2
 800393c:	b21a      	sxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	801a      	strh	r2, [r3, #0]
	*y = (((int16_t)tmp[2]) << 8) | tmp[3];
 8003942:	7cbb      	ldrb	r3, [r7, #18]
 8003944:	021b      	lsls	r3, r3, #8
 8003946:	b21a      	sxth	r2, r3
 8003948:	7cfb      	ldrb	r3, [r7, #19]
 800394a:	b21b      	sxth	r3, r3
 800394c:	4313      	orrs	r3, r2
 800394e:	b21a      	sxth	r2, r3
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	801a      	strh	r2, [r3, #0]
	*z = (((int16_t)tmp[4]) << 8) | tmp[5];
 8003954:	7d3b      	ldrb	r3, [r7, #20]
 8003956:	021b      	lsls	r3, r3, #8
 8003958:	b21a      	sxth	r2, r3
 800395a:	7d7b      	ldrb	r3, [r7, #21]
 800395c:	b21b      	sxth	r3, r3
 800395e:	4313      	orrs	r3, r2
 8003960:	b21a      	sxth	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	801a      	strh	r2, [r3, #0]
}
 8003966:	bf00      	nop
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20000190 	.word	0x20000190

08003974 <MPU6050_GetGyroscopeScaled>:

void MPU6050_GetGyroscopeScaled(float* x, float* y, float* z)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
	int16_t tmp_x, tmp_y, tmp_z;

	MPU6050_GetGyroscopeRAW(&tmp_x, &tmp_y, &tmp_z);
 8003980:	f107 0212 	add.w	r2, r7, #18
 8003984:	f107 0114 	add.w	r1, r7, #20
 8003988:	f107 0316 	add.w	r3, r7, #22
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff ffbb 	bl	8003908 <MPU6050_GetGyroscopeRAW>

	*x = (float)tmp_x * Gyr_Scale;
 8003992:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003996:	ee07 3a90 	vmov	s15, r3
 800399a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800399e:	4b14      	ldr	r3, [pc, #80]	; (80039f0 <MPU6050_GetGyroscopeScaled+0x7c>)
 80039a0:	edd3 7a00 	vldr	s15, [r3]
 80039a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	edc3 7a00 	vstr	s15, [r3]
	*y = (float)tmp_y * Gyr_Scale;
 80039ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80039b2:	ee07 3a90 	vmov	s15, r3
 80039b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039ba:	4b0d      	ldr	r3, [pc, #52]	; (80039f0 <MPU6050_GetGyroscopeScaled+0x7c>)
 80039bc:	edd3 7a00 	vldr	s15, [r3]
 80039c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	edc3 7a00 	vstr	s15, [r3]
	*z = (float)tmp_z * Gyr_Scale;
 80039ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80039ce:	ee07 3a90 	vmov	s15, r3
 80039d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039d6:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <MPU6050_GetGyroscopeScaled+0x7c>)
 80039d8:	edd3 7a00 	vldr	s15, [r3]
 80039dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	edc3 7a00 	vstr	s15, [r3]
}
 80039e6:	bf00      	nop
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	2000018c 	.word	0x2000018c

080039f4 <MPU6050_SetInterruptMode>:

//
//	Setting INT pin
//
void MPU6050_SetInterruptMode(uint8_t Mode)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af04      	add	r7, sp, #16
 80039fa:	4603      	mov	r3, r0
 80039fc:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 80039fe:	4b17      	ldr	r3, [pc, #92]	; (8003a5c <MPU6050_SetInterruptMode+0x68>)
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	230a      	movs	r3, #10
 8003a04:	9302      	str	r3, [sp, #8]
 8003a06:	2301      	movs	r3, #1
 8003a08:	9301      	str	r3, [sp, #4]
 8003a0a:	f107 030f 	add.w	r3, r7, #15
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	2301      	movs	r3, #1
 8003a12:	2237      	movs	r2, #55	; 0x37
 8003a14:	21d0      	movs	r1, #208	; 0xd0
 8003a16:	f7fe f98d 	bl	8001d34 <HAL_I2C_Mem_Read>
	tmp &= ~(1 << MPU6050_INTCFG_INT_LEVEL_BIT);
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Mode & 0x1) << MPU6050_INTCFG_INT_LEVEL_BIT);
 8003a24:	79fb      	ldrb	r3, [r7, #7]
 8003a26:	01db      	lsls	r3, r3, #7
 8003a28:	b25a      	sxtb	r2, r3
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
 8003a2c:	b25b      	sxtb	r3, r3
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	b25b      	sxtb	r3, r3
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8003a36:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <MPU6050_SetInterruptMode+0x68>)
 8003a38:	6818      	ldr	r0, [r3, #0]
 8003a3a:	230a      	movs	r3, #10
 8003a3c:	9302      	str	r3, [sp, #8]
 8003a3e:	2301      	movs	r3, #1
 8003a40:	9301      	str	r3, [sp, #4]
 8003a42:	f107 030f 	add.w	r3, r7, #15
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	2301      	movs	r3, #1
 8003a4a:	2237      	movs	r2, #55	; 0x37
 8003a4c:	21d0      	movs	r1, #208	; 0xd0
 8003a4e:	f7fe f877 	bl	8001b40 <HAL_I2C_Mem_Write>
}
 8003a52:	bf00      	nop
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20000190 	.word	0x20000190

08003a60 <MPU6050_SetInterruptDrive>:

void MPU6050_SetInterruptDrive(uint8_t Drive)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b088      	sub	sp, #32
 8003a64:	af04      	add	r7, sp, #16
 8003a66:	4603      	mov	r3, r0
 8003a68:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8003a6a:	4b18      	ldr	r3, [pc, #96]	; (8003acc <MPU6050_SetInterruptDrive+0x6c>)
 8003a6c:	6818      	ldr	r0, [r3, #0]
 8003a6e:	230a      	movs	r3, #10
 8003a70:	9302      	str	r3, [sp, #8]
 8003a72:	2301      	movs	r3, #1
 8003a74:	9301      	str	r3, [sp, #4]
 8003a76:	f107 030f 	add.w	r3, r7, #15
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	2237      	movs	r2, #55	; 0x37
 8003a80:	21d0      	movs	r1, #208	; 0xd0
 8003a82:	f7fe f957 	bl	8001d34 <HAL_I2C_Mem_Read>
	tmp &= ~(1 << MPU6050_INTCFG_INT_OPEN_BIT);
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
 8003a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Drive & 0x1) << MPU6050_INTCFG_INT_OPEN_BIT);
 8003a90:	79fb      	ldrb	r3, [r7, #7]
 8003a92:	019b      	lsls	r3, r3, #6
 8003a94:	b25b      	sxtb	r3, r3
 8003a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9a:	b25a      	sxtb	r2, r3
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
 8003a9e:	b25b      	sxtb	r3, r3
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	b25b      	sxtb	r3, r3
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8003aa8:	4b08      	ldr	r3, [pc, #32]	; (8003acc <MPU6050_SetInterruptDrive+0x6c>)
 8003aaa:	6818      	ldr	r0, [r3, #0]
 8003aac:	230a      	movs	r3, #10
 8003aae:	9302      	str	r3, [sp, #8]
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	9301      	str	r3, [sp, #4]
 8003ab4:	f107 030f 	add.w	r3, r7, #15
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	2301      	movs	r3, #1
 8003abc:	2237      	movs	r2, #55	; 0x37
 8003abe:	21d0      	movs	r1, #208	; 0xd0
 8003ac0:	f7fe f83e 	bl	8001b40 <HAL_I2C_Mem_Write>
}
 8003ac4:	bf00      	nop
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	20000190 	.word	0x20000190

08003ad0 <MPU6050_SetInterruptLatch>:

void MPU6050_SetInterruptLatch(uint8_t Latch)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af04      	add	r7, sp, #16
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8003ada:	4b18      	ldr	r3, [pc, #96]	; (8003b3c <MPU6050_SetInterruptLatch+0x6c>)
 8003adc:	6818      	ldr	r0, [r3, #0]
 8003ade:	230a      	movs	r3, #10
 8003ae0:	9302      	str	r3, [sp, #8]
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	9301      	str	r3, [sp, #4]
 8003ae6:	f107 030f 	add.w	r3, r7, #15
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	2301      	movs	r3, #1
 8003aee:	2237      	movs	r2, #55	; 0x37
 8003af0:	21d0      	movs	r1, #208	; 0xd0
 8003af2:	f7fe f91f 	bl	8001d34 <HAL_I2C_Mem_Read>
	tmp &= ~(1 << MPU6050_INTCFG_INT_RD_CLEAR_BIT);
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	f023 0310 	bic.w	r3, r3, #16
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Latch & 0x1) << MPU6050_INTCFG_INT_RD_CLEAR_BIT);
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	b25b      	sxtb	r3, r3
 8003b06:	f003 0310 	and.w	r3, r3, #16
 8003b0a:	b25a      	sxtb	r2, r3
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	b25b      	sxtb	r3, r3
 8003b10:	4313      	orrs	r3, r2
 8003b12:	b25b      	sxtb	r3, r3
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8003b18:	4b08      	ldr	r3, [pc, #32]	; (8003b3c <MPU6050_SetInterruptLatch+0x6c>)
 8003b1a:	6818      	ldr	r0, [r3, #0]
 8003b1c:	230a      	movs	r3, #10
 8003b1e:	9302      	str	r3, [sp, #8]
 8003b20:	2301      	movs	r3, #1
 8003b22:	9301      	str	r3, [sp, #4]
 8003b24:	f107 030f 	add.w	r3, r7, #15
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	2237      	movs	r2, #55	; 0x37
 8003b2e:	21d0      	movs	r1, #208	; 0xd0
 8003b30:	f7fe f806 	bl	8001b40 <HAL_I2C_Mem_Write>
}
 8003b34:	bf00      	nop
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	20000190 	.word	0x20000190

08003b40 <MPU6050_SetInterruptLatchClear>:

void MPU6050_SetInterruptLatchClear(uint8_t Clear)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af04      	add	r7, sp, #16
 8003b46:	4603      	mov	r3, r0
 8003b48:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8003b4a:	4b18      	ldr	r3, [pc, #96]	; (8003bac <MPU6050_SetInterruptLatchClear+0x6c>)
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	230a      	movs	r3, #10
 8003b50:	9302      	str	r3, [sp, #8]
 8003b52:	2301      	movs	r3, #1
 8003b54:	9301      	str	r3, [sp, #4]
 8003b56:	f107 030f 	add.w	r3, r7, #15
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	2237      	movs	r2, #55	; 0x37
 8003b60:	21d0      	movs	r1, #208	; 0xd0
 8003b62:	f7fe f8e7 	bl	8001d34 <HAL_I2C_Mem_Read>
	tmp &= ~(1 << MPU6050_INTCFG_LATCH_INT_EN_BIT);
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
 8003b68:	f023 0320 	bic.w	r3, r3, #32
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Clear & 0x1) << MPU6050_INTCFG_LATCH_INT_EN_BIT);
 8003b70:	79fb      	ldrb	r3, [r7, #7]
 8003b72:	015b      	lsls	r3, r3, #5
 8003b74:	b25b      	sxtb	r3, r3
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	b25a      	sxtb	r2, r3
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
 8003b7e:	b25b      	sxtb	r3, r3
 8003b80:	4313      	orrs	r3, r2
 8003b82:	b25b      	sxtb	r3, r3
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8003b88:	4b08      	ldr	r3, [pc, #32]	; (8003bac <MPU6050_SetInterruptLatchClear+0x6c>)
 8003b8a:	6818      	ldr	r0, [r3, #0]
 8003b8c:	230a      	movs	r3, #10
 8003b8e:	9302      	str	r3, [sp, #8]
 8003b90:	2301      	movs	r3, #1
 8003b92:	9301      	str	r3, [sp, #4]
 8003b94:	f107 030f 	add.w	r3, r7, #15
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	2237      	movs	r2, #55	; 0x37
 8003b9e:	21d0      	movs	r1, #208	; 0xd0
 8003ba0:	f7fd ffce 	bl	8001b40 <HAL_I2C_Mem_Write>
}
 8003ba4:	bf00      	nop
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	20000190 	.word	0x20000190

08003bb0 <MPU6050_SetIntEnableRegister>:

void MPU6050_SetIntEnableRegister(uint8_t Value)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af04      	add	r7, sp, #16
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &Value, 1, I2C_TIMEOUT);
 8003bba:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <MPU6050_SetIntEnableRegister+0x2c>)
 8003bbc:	6818      	ldr	r0, [r3, #0]
 8003bbe:	230a      	movs	r3, #10
 8003bc0:	9302      	str	r3, [sp, #8]
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	9301      	str	r3, [sp, #4]
 8003bc6:	1dfb      	adds	r3, r7, #7
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	2301      	movs	r3, #1
 8003bcc:	2238      	movs	r2, #56	; 0x38
 8003bce:	21d0      	movs	r1, #208	; 0xd0
 8003bd0:	f7fd ffb6 	bl	8001b40 <HAL_I2C_Mem_Write>
}
 8003bd4:	bf00      	nop
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	20000190 	.word	0x20000190

08003be0 <MPU6050_Init>:

//
//	Initialization
//
void MPU6050_Init(I2C_HandleTypeDef *hi2c)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
	i2c = hi2c;
 8003be8:	4a0c      	ldr	r2, [pc, #48]	; (8003c1c <MPU6050_Init+0x3c>)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6013      	str	r3, [r2, #0]
	MPU6050_DeviceReset(1);
 8003bee:	2001      	movs	r0, #1
 8003bf0:	f7ff fc5c 	bl	80034ac <MPU6050_DeviceReset>
    MPU6050_SetSleepEnabled(0);
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	f7ff fc8f 	bl	8003518 <MPU6050_SetSleepEnabled>
    MPU6050_SetClockSource(MPU6050_CLOCK_INTERNAL);
 8003bfa:	2000      	movs	r0, #0
 8003bfc:	f7ff fcc4 	bl	8003588 <MPU6050_SetClockSource>
    MPU6050_SetDlpf(MPU6050_DLPF_BW_20);
 8003c00:	2004      	movs	r0, #4
 8003c02:	f7ff fc1b 	bl	800343c <MPU6050_SetDlpf>
    MPU6050_SetFullScaleGyroRange(MPU6050_GYRO_FS_500);
 8003c06:	2001      	movs	r0, #1
 8003c08:	f7ff fcf6 	bl	80035f8 <MPU6050_SetFullScaleGyroRange>
    MPU6050_SetFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	f7ff fd55 	bl	80036bc <MPU6050_SetFullScaleAccelRange>

}
 8003c12:	bf00      	nop
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20000190 	.word	0x20000190

08003c20 <__libc_init_array>:
 8003c20:	b570      	push	{r4, r5, r6, lr}
 8003c22:	4e0d      	ldr	r6, [pc, #52]	; (8003c58 <__libc_init_array+0x38>)
 8003c24:	4c0d      	ldr	r4, [pc, #52]	; (8003c5c <__libc_init_array+0x3c>)
 8003c26:	1ba4      	subs	r4, r4, r6
 8003c28:	10a4      	asrs	r4, r4, #2
 8003c2a:	2500      	movs	r5, #0
 8003c2c:	42a5      	cmp	r5, r4
 8003c2e:	d109      	bne.n	8003c44 <__libc_init_array+0x24>
 8003c30:	4e0b      	ldr	r6, [pc, #44]	; (8003c60 <__libc_init_array+0x40>)
 8003c32:	4c0c      	ldr	r4, [pc, #48]	; (8003c64 <__libc_init_array+0x44>)
 8003c34:	f000 f820 	bl	8003c78 <_init>
 8003c38:	1ba4      	subs	r4, r4, r6
 8003c3a:	10a4      	asrs	r4, r4, #2
 8003c3c:	2500      	movs	r5, #0
 8003c3e:	42a5      	cmp	r5, r4
 8003c40:	d105      	bne.n	8003c4e <__libc_init_array+0x2e>
 8003c42:	bd70      	pop	{r4, r5, r6, pc}
 8003c44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c48:	4798      	blx	r3
 8003c4a:	3501      	adds	r5, #1
 8003c4c:	e7ee      	b.n	8003c2c <__libc_init_array+0xc>
 8003c4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c52:	4798      	blx	r3
 8003c54:	3501      	adds	r5, #1
 8003c56:	e7f2      	b.n	8003c3e <__libc_init_array+0x1e>
 8003c58:	08003cb0 	.word	0x08003cb0
 8003c5c:	08003cb0 	.word	0x08003cb0
 8003c60:	08003cb0 	.word	0x08003cb0
 8003c64:	08003cb4 	.word	0x08003cb4

08003c68 <memset>:
 8003c68:	4402      	add	r2, r0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d100      	bne.n	8003c72 <memset+0xa>
 8003c70:	4770      	bx	lr
 8003c72:	f803 1b01 	strb.w	r1, [r3], #1
 8003c76:	e7f9      	b.n	8003c6c <memset+0x4>

08003c78 <_init>:
 8003c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7a:	bf00      	nop
 8003c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7e:	bc08      	pop	{r3}
 8003c80:	469e      	mov	lr, r3
 8003c82:	4770      	bx	lr

08003c84 <_fini>:
 8003c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c86:	bf00      	nop
 8003c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8a:	bc08      	pop	{r3}
 8003c8c:	469e      	mov	lr, r3
 8003c8e:	4770      	bx	lr
