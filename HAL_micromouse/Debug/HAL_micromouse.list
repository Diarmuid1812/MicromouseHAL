
HAL_micromouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ecc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006064  08006064  00016064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800607c  0800607c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800607c  0800607c  0001607c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006084  08006084  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006084  08006084  00016084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006088  08006088  00016088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800608c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  2000000c  08006098  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08006098  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011156  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000261f  00000000  00000000  00031192  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010f8  00000000  00000000  000337b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fd0  00000000  00000000  000348b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017c31  00000000  00000000  00035880  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d57e  00000000  00000000  0004d4b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091a74  00000000  00000000  0005aa2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ec4a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004880  00000000  00000000  000ec520  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800604c 	.word	0x0800604c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	0800604c 	.word	0x0800604c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__gedf2>:
 8000550:	f04f 3cff 	mov.w	ip, #4294967295
 8000554:	e006      	b.n	8000564 <__cmpdf2+0x4>
 8000556:	bf00      	nop

08000558 <__ledf2>:
 8000558:	f04f 0c01 	mov.w	ip, #1
 800055c:	e002      	b.n	8000564 <__cmpdf2+0x4>
 800055e:	bf00      	nop

08000560 <__cmpdf2>:
 8000560:	f04f 0c01 	mov.w	ip, #1
 8000564:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000568:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800056c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000570:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000574:	bf18      	it	ne
 8000576:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800057a:	d01b      	beq.n	80005b4 <__cmpdf2+0x54>
 800057c:	b001      	add	sp, #4
 800057e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000582:	bf0c      	ite	eq
 8000584:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000588:	ea91 0f03 	teqne	r1, r3
 800058c:	bf02      	ittt	eq
 800058e:	ea90 0f02 	teqeq	r0, r2
 8000592:	2000      	moveq	r0, #0
 8000594:	4770      	bxeq	lr
 8000596:	f110 0f00 	cmn.w	r0, #0
 800059a:	ea91 0f03 	teq	r1, r3
 800059e:	bf58      	it	pl
 80005a0:	4299      	cmppl	r1, r3
 80005a2:	bf08      	it	eq
 80005a4:	4290      	cmpeq	r0, r2
 80005a6:	bf2c      	ite	cs
 80005a8:	17d8      	asrcs	r0, r3, #31
 80005aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005ae:	f040 0001 	orr.w	r0, r0, #1
 80005b2:	4770      	bx	lr
 80005b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005bc:	d102      	bne.n	80005c4 <__cmpdf2+0x64>
 80005be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005c2:	d107      	bne.n	80005d4 <__cmpdf2+0x74>
 80005c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005cc:	d1d6      	bne.n	800057c <__cmpdf2+0x1c>
 80005ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005d2:	d0d3      	beq.n	800057c <__cmpdf2+0x1c>
 80005d4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__aeabi_cdrcmple>:
 80005dc:	4684      	mov	ip, r0
 80005de:	4610      	mov	r0, r2
 80005e0:	4662      	mov	r2, ip
 80005e2:	468c      	mov	ip, r1
 80005e4:	4619      	mov	r1, r3
 80005e6:	4663      	mov	r3, ip
 80005e8:	e000      	b.n	80005ec <__aeabi_cdcmpeq>
 80005ea:	bf00      	nop

080005ec <__aeabi_cdcmpeq>:
 80005ec:	b501      	push	{r0, lr}
 80005ee:	f7ff ffb7 	bl	8000560 <__cmpdf2>
 80005f2:	2800      	cmp	r0, #0
 80005f4:	bf48      	it	mi
 80005f6:	f110 0f00 	cmnmi.w	r0, #0
 80005fa:	bd01      	pop	{r0, pc}

080005fc <__aeabi_dcmpeq>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff fff4 	bl	80005ec <__aeabi_cdcmpeq>
 8000604:	bf0c      	ite	eq
 8000606:	2001      	moveq	r0, #1
 8000608:	2000      	movne	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_dcmplt>:
 8000610:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000614:	f7ff ffea 	bl	80005ec <__aeabi_cdcmpeq>
 8000618:	bf34      	ite	cc
 800061a:	2001      	movcc	r0, #1
 800061c:	2000      	movcs	r0, #0
 800061e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000622:	bf00      	nop

08000624 <__aeabi_dcmple>:
 8000624:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000628:	f7ff ffe0 	bl	80005ec <__aeabi_cdcmpeq>
 800062c:	bf94      	ite	ls
 800062e:	2001      	movls	r0, #1
 8000630:	2000      	movhi	r0, #0
 8000632:	f85d fb08 	ldr.w	pc, [sp], #8
 8000636:	bf00      	nop

08000638 <__aeabi_dcmpge>:
 8000638:	f84d ed08 	str.w	lr, [sp, #-8]!
 800063c:	f7ff ffce 	bl	80005dc <__aeabi_cdrcmple>
 8000640:	bf94      	ite	ls
 8000642:	2001      	movls	r0, #1
 8000644:	2000      	movhi	r0, #0
 8000646:	f85d fb08 	ldr.w	pc, [sp], #8
 800064a:	bf00      	nop

0800064c <__aeabi_dcmpgt>:
 800064c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000650:	f7ff ffc4 	bl	80005dc <__aeabi_cdrcmple>
 8000654:	bf34      	ite	cc
 8000656:	2001      	movcc	r0, #1
 8000658:	2000      	movcs	r0, #0
 800065a:	f85d fb08 	ldr.w	pc, [sp], #8
 800065e:	bf00      	nop

08000660 <__aeabi_d2f>:
 8000660:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000664:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000668:	bf24      	itt	cs
 800066a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800066e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000672:	d90d      	bls.n	8000690 <__aeabi_d2f+0x30>
 8000674:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000678:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800067c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000680:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000684:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000688:	bf08      	it	eq
 800068a:	f020 0001 	biceq.w	r0, r0, #1
 800068e:	4770      	bx	lr
 8000690:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000694:	d121      	bne.n	80006da <__aeabi_d2f+0x7a>
 8000696:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800069a:	bfbc      	itt	lt
 800069c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80006a0:	4770      	bxlt	lr
 80006a2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80006aa:	f1c2 0218 	rsb	r2, r2, #24
 80006ae:	f1c2 0c20 	rsb	ip, r2, #32
 80006b2:	fa10 f30c 	lsls.w	r3, r0, ip
 80006b6:	fa20 f002 	lsr.w	r0, r0, r2
 80006ba:	bf18      	it	ne
 80006bc:	f040 0001 	orrne.w	r0, r0, #1
 80006c0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006c4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80006c8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80006cc:	ea40 000c 	orr.w	r0, r0, ip
 80006d0:	fa23 f302 	lsr.w	r3, r3, r2
 80006d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006d8:	e7cc      	b.n	8000674 <__aeabi_d2f+0x14>
 80006da:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006de:	d107      	bne.n	80006f0 <__aeabi_d2f+0x90>
 80006e0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006e4:	bf1e      	ittt	ne
 80006e6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006ea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006ee:	4770      	bxne	lr
 80006f0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006f4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop

08000700 <__aeabi_uldivmod>:
 8000700:	b953      	cbnz	r3, 8000718 <__aeabi_uldivmod+0x18>
 8000702:	b94a      	cbnz	r2, 8000718 <__aeabi_uldivmod+0x18>
 8000704:	2900      	cmp	r1, #0
 8000706:	bf08      	it	eq
 8000708:	2800      	cmpeq	r0, #0
 800070a:	bf1c      	itt	ne
 800070c:	f04f 31ff 	movne.w	r1, #4294967295
 8000710:	f04f 30ff 	movne.w	r0, #4294967295
 8000714:	f000 b972 	b.w	80009fc <__aeabi_idiv0>
 8000718:	f1ad 0c08 	sub.w	ip, sp, #8
 800071c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000720:	f000 f806 	bl	8000730 <__udivmoddi4>
 8000724:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000728:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800072c:	b004      	add	sp, #16
 800072e:	4770      	bx	lr

08000730 <__udivmoddi4>:
 8000730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000734:	9e08      	ldr	r6, [sp, #32]
 8000736:	4604      	mov	r4, r0
 8000738:	4688      	mov	r8, r1
 800073a:	2b00      	cmp	r3, #0
 800073c:	d14b      	bne.n	80007d6 <__udivmoddi4+0xa6>
 800073e:	428a      	cmp	r2, r1
 8000740:	4615      	mov	r5, r2
 8000742:	d967      	bls.n	8000814 <__udivmoddi4+0xe4>
 8000744:	fab2 f282 	clz	r2, r2
 8000748:	b14a      	cbz	r2, 800075e <__udivmoddi4+0x2e>
 800074a:	f1c2 0720 	rsb	r7, r2, #32
 800074e:	fa01 f302 	lsl.w	r3, r1, r2
 8000752:	fa20 f707 	lsr.w	r7, r0, r7
 8000756:	4095      	lsls	r5, r2
 8000758:	ea47 0803 	orr.w	r8, r7, r3
 800075c:	4094      	lsls	r4, r2
 800075e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000762:	0c23      	lsrs	r3, r4, #16
 8000764:	fbb8 f7fe 	udiv	r7, r8, lr
 8000768:	fa1f fc85 	uxth.w	ip, r5
 800076c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000770:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000774:	fb07 f10c 	mul.w	r1, r7, ip
 8000778:	4299      	cmp	r1, r3
 800077a:	d909      	bls.n	8000790 <__udivmoddi4+0x60>
 800077c:	18eb      	adds	r3, r5, r3
 800077e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000782:	f080 811b 	bcs.w	80009bc <__udivmoddi4+0x28c>
 8000786:	4299      	cmp	r1, r3
 8000788:	f240 8118 	bls.w	80009bc <__udivmoddi4+0x28c>
 800078c:	3f02      	subs	r7, #2
 800078e:	442b      	add	r3, r5
 8000790:	1a5b      	subs	r3, r3, r1
 8000792:	b2a4      	uxth	r4, r4
 8000794:	fbb3 f0fe 	udiv	r0, r3, lr
 8000798:	fb0e 3310 	mls	r3, lr, r0, r3
 800079c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007a0:	fb00 fc0c 	mul.w	ip, r0, ip
 80007a4:	45a4      	cmp	ip, r4
 80007a6:	d909      	bls.n	80007bc <__udivmoddi4+0x8c>
 80007a8:	192c      	adds	r4, r5, r4
 80007aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80007ae:	f080 8107 	bcs.w	80009c0 <__udivmoddi4+0x290>
 80007b2:	45a4      	cmp	ip, r4
 80007b4:	f240 8104 	bls.w	80009c0 <__udivmoddi4+0x290>
 80007b8:	3802      	subs	r0, #2
 80007ba:	442c      	add	r4, r5
 80007bc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80007c0:	eba4 040c 	sub.w	r4, r4, ip
 80007c4:	2700      	movs	r7, #0
 80007c6:	b11e      	cbz	r6, 80007d0 <__udivmoddi4+0xa0>
 80007c8:	40d4      	lsrs	r4, r2
 80007ca:	2300      	movs	r3, #0
 80007cc:	e9c6 4300 	strd	r4, r3, [r6]
 80007d0:	4639      	mov	r1, r7
 80007d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007d6:	428b      	cmp	r3, r1
 80007d8:	d909      	bls.n	80007ee <__udivmoddi4+0xbe>
 80007da:	2e00      	cmp	r6, #0
 80007dc:	f000 80eb 	beq.w	80009b6 <__udivmoddi4+0x286>
 80007e0:	2700      	movs	r7, #0
 80007e2:	e9c6 0100 	strd	r0, r1, [r6]
 80007e6:	4638      	mov	r0, r7
 80007e8:	4639      	mov	r1, r7
 80007ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ee:	fab3 f783 	clz	r7, r3
 80007f2:	2f00      	cmp	r7, #0
 80007f4:	d147      	bne.n	8000886 <__udivmoddi4+0x156>
 80007f6:	428b      	cmp	r3, r1
 80007f8:	d302      	bcc.n	8000800 <__udivmoddi4+0xd0>
 80007fa:	4282      	cmp	r2, r0
 80007fc:	f200 80fa 	bhi.w	80009f4 <__udivmoddi4+0x2c4>
 8000800:	1a84      	subs	r4, r0, r2
 8000802:	eb61 0303 	sbc.w	r3, r1, r3
 8000806:	2001      	movs	r0, #1
 8000808:	4698      	mov	r8, r3
 800080a:	2e00      	cmp	r6, #0
 800080c:	d0e0      	beq.n	80007d0 <__udivmoddi4+0xa0>
 800080e:	e9c6 4800 	strd	r4, r8, [r6]
 8000812:	e7dd      	b.n	80007d0 <__udivmoddi4+0xa0>
 8000814:	b902      	cbnz	r2, 8000818 <__udivmoddi4+0xe8>
 8000816:	deff      	udf	#255	; 0xff
 8000818:	fab2 f282 	clz	r2, r2
 800081c:	2a00      	cmp	r2, #0
 800081e:	f040 808f 	bne.w	8000940 <__udivmoddi4+0x210>
 8000822:	1b49      	subs	r1, r1, r5
 8000824:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000828:	fa1f f885 	uxth.w	r8, r5
 800082c:	2701      	movs	r7, #1
 800082e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000832:	0c23      	lsrs	r3, r4, #16
 8000834:	fb0e 111c 	mls	r1, lr, ip, r1
 8000838:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800083c:	fb08 f10c 	mul.w	r1, r8, ip
 8000840:	4299      	cmp	r1, r3
 8000842:	d907      	bls.n	8000854 <__udivmoddi4+0x124>
 8000844:	18eb      	adds	r3, r5, r3
 8000846:	f10c 30ff 	add.w	r0, ip, #4294967295
 800084a:	d202      	bcs.n	8000852 <__udivmoddi4+0x122>
 800084c:	4299      	cmp	r1, r3
 800084e:	f200 80cd 	bhi.w	80009ec <__udivmoddi4+0x2bc>
 8000852:	4684      	mov	ip, r0
 8000854:	1a59      	subs	r1, r3, r1
 8000856:	b2a3      	uxth	r3, r4
 8000858:	fbb1 f0fe 	udiv	r0, r1, lr
 800085c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000860:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000864:	fb08 f800 	mul.w	r8, r8, r0
 8000868:	45a0      	cmp	r8, r4
 800086a:	d907      	bls.n	800087c <__udivmoddi4+0x14c>
 800086c:	192c      	adds	r4, r5, r4
 800086e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000872:	d202      	bcs.n	800087a <__udivmoddi4+0x14a>
 8000874:	45a0      	cmp	r8, r4
 8000876:	f200 80b6 	bhi.w	80009e6 <__udivmoddi4+0x2b6>
 800087a:	4618      	mov	r0, r3
 800087c:	eba4 0408 	sub.w	r4, r4, r8
 8000880:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000884:	e79f      	b.n	80007c6 <__udivmoddi4+0x96>
 8000886:	f1c7 0c20 	rsb	ip, r7, #32
 800088a:	40bb      	lsls	r3, r7
 800088c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000890:	ea4e 0e03 	orr.w	lr, lr, r3
 8000894:	fa01 f407 	lsl.w	r4, r1, r7
 8000898:	fa20 f50c 	lsr.w	r5, r0, ip
 800089c:	fa21 f30c 	lsr.w	r3, r1, ip
 80008a0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80008a4:	4325      	orrs	r5, r4
 80008a6:	fbb3 f9f8 	udiv	r9, r3, r8
 80008aa:	0c2c      	lsrs	r4, r5, #16
 80008ac:	fb08 3319 	mls	r3, r8, r9, r3
 80008b0:	fa1f fa8e 	uxth.w	sl, lr
 80008b4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80008b8:	fb09 f40a 	mul.w	r4, r9, sl
 80008bc:	429c      	cmp	r4, r3
 80008be:	fa02 f207 	lsl.w	r2, r2, r7
 80008c2:	fa00 f107 	lsl.w	r1, r0, r7
 80008c6:	d90b      	bls.n	80008e0 <__udivmoddi4+0x1b0>
 80008c8:	eb1e 0303 	adds.w	r3, lr, r3
 80008cc:	f109 30ff 	add.w	r0, r9, #4294967295
 80008d0:	f080 8087 	bcs.w	80009e2 <__udivmoddi4+0x2b2>
 80008d4:	429c      	cmp	r4, r3
 80008d6:	f240 8084 	bls.w	80009e2 <__udivmoddi4+0x2b2>
 80008da:	f1a9 0902 	sub.w	r9, r9, #2
 80008de:	4473      	add	r3, lr
 80008e0:	1b1b      	subs	r3, r3, r4
 80008e2:	b2ad      	uxth	r5, r5
 80008e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80008e8:	fb08 3310 	mls	r3, r8, r0, r3
 80008ec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80008f0:	fb00 fa0a 	mul.w	sl, r0, sl
 80008f4:	45a2      	cmp	sl, r4
 80008f6:	d908      	bls.n	800090a <__udivmoddi4+0x1da>
 80008f8:	eb1e 0404 	adds.w	r4, lr, r4
 80008fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000900:	d26b      	bcs.n	80009da <__udivmoddi4+0x2aa>
 8000902:	45a2      	cmp	sl, r4
 8000904:	d969      	bls.n	80009da <__udivmoddi4+0x2aa>
 8000906:	3802      	subs	r0, #2
 8000908:	4474      	add	r4, lr
 800090a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800090e:	fba0 8902 	umull	r8, r9, r0, r2
 8000912:	eba4 040a 	sub.w	r4, r4, sl
 8000916:	454c      	cmp	r4, r9
 8000918:	46c2      	mov	sl, r8
 800091a:	464b      	mov	r3, r9
 800091c:	d354      	bcc.n	80009c8 <__udivmoddi4+0x298>
 800091e:	d051      	beq.n	80009c4 <__udivmoddi4+0x294>
 8000920:	2e00      	cmp	r6, #0
 8000922:	d069      	beq.n	80009f8 <__udivmoddi4+0x2c8>
 8000924:	ebb1 050a 	subs.w	r5, r1, sl
 8000928:	eb64 0403 	sbc.w	r4, r4, r3
 800092c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000930:	40fd      	lsrs	r5, r7
 8000932:	40fc      	lsrs	r4, r7
 8000934:	ea4c 0505 	orr.w	r5, ip, r5
 8000938:	e9c6 5400 	strd	r5, r4, [r6]
 800093c:	2700      	movs	r7, #0
 800093e:	e747      	b.n	80007d0 <__udivmoddi4+0xa0>
 8000940:	f1c2 0320 	rsb	r3, r2, #32
 8000944:	fa20 f703 	lsr.w	r7, r0, r3
 8000948:	4095      	lsls	r5, r2
 800094a:	fa01 f002 	lsl.w	r0, r1, r2
 800094e:	fa21 f303 	lsr.w	r3, r1, r3
 8000952:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000956:	4338      	orrs	r0, r7
 8000958:	0c01      	lsrs	r1, r0, #16
 800095a:	fbb3 f7fe 	udiv	r7, r3, lr
 800095e:	fa1f f885 	uxth.w	r8, r5
 8000962:	fb0e 3317 	mls	r3, lr, r7, r3
 8000966:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800096a:	fb07 f308 	mul.w	r3, r7, r8
 800096e:	428b      	cmp	r3, r1
 8000970:	fa04 f402 	lsl.w	r4, r4, r2
 8000974:	d907      	bls.n	8000986 <__udivmoddi4+0x256>
 8000976:	1869      	adds	r1, r5, r1
 8000978:	f107 3cff 	add.w	ip, r7, #4294967295
 800097c:	d22f      	bcs.n	80009de <__udivmoddi4+0x2ae>
 800097e:	428b      	cmp	r3, r1
 8000980:	d92d      	bls.n	80009de <__udivmoddi4+0x2ae>
 8000982:	3f02      	subs	r7, #2
 8000984:	4429      	add	r1, r5
 8000986:	1acb      	subs	r3, r1, r3
 8000988:	b281      	uxth	r1, r0
 800098a:	fbb3 f0fe 	udiv	r0, r3, lr
 800098e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000992:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000996:	fb00 f308 	mul.w	r3, r0, r8
 800099a:	428b      	cmp	r3, r1
 800099c:	d907      	bls.n	80009ae <__udivmoddi4+0x27e>
 800099e:	1869      	adds	r1, r5, r1
 80009a0:	f100 3cff 	add.w	ip, r0, #4294967295
 80009a4:	d217      	bcs.n	80009d6 <__udivmoddi4+0x2a6>
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d915      	bls.n	80009d6 <__udivmoddi4+0x2a6>
 80009aa:	3802      	subs	r0, #2
 80009ac:	4429      	add	r1, r5
 80009ae:	1ac9      	subs	r1, r1, r3
 80009b0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80009b4:	e73b      	b.n	800082e <__udivmoddi4+0xfe>
 80009b6:	4637      	mov	r7, r6
 80009b8:	4630      	mov	r0, r6
 80009ba:	e709      	b.n	80007d0 <__udivmoddi4+0xa0>
 80009bc:	4607      	mov	r7, r0
 80009be:	e6e7      	b.n	8000790 <__udivmoddi4+0x60>
 80009c0:	4618      	mov	r0, r3
 80009c2:	e6fb      	b.n	80007bc <__udivmoddi4+0x8c>
 80009c4:	4541      	cmp	r1, r8
 80009c6:	d2ab      	bcs.n	8000920 <__udivmoddi4+0x1f0>
 80009c8:	ebb8 0a02 	subs.w	sl, r8, r2
 80009cc:	eb69 020e 	sbc.w	r2, r9, lr
 80009d0:	3801      	subs	r0, #1
 80009d2:	4613      	mov	r3, r2
 80009d4:	e7a4      	b.n	8000920 <__udivmoddi4+0x1f0>
 80009d6:	4660      	mov	r0, ip
 80009d8:	e7e9      	b.n	80009ae <__udivmoddi4+0x27e>
 80009da:	4618      	mov	r0, r3
 80009dc:	e795      	b.n	800090a <__udivmoddi4+0x1da>
 80009de:	4667      	mov	r7, ip
 80009e0:	e7d1      	b.n	8000986 <__udivmoddi4+0x256>
 80009e2:	4681      	mov	r9, r0
 80009e4:	e77c      	b.n	80008e0 <__udivmoddi4+0x1b0>
 80009e6:	3802      	subs	r0, #2
 80009e8:	442c      	add	r4, r5
 80009ea:	e747      	b.n	800087c <__udivmoddi4+0x14c>
 80009ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80009f0:	442b      	add	r3, r5
 80009f2:	e72f      	b.n	8000854 <__udivmoddi4+0x124>
 80009f4:	4638      	mov	r0, r7
 80009f6:	e708      	b.n	800080a <__udivmoddi4+0xda>
 80009f8:	4637      	mov	r7, r6
 80009fa:	e6e9      	b.n	80007d0 <__udivmoddi4+0xa0>

080009fc <__aeabi_idiv0>:
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <ToF_writeReg>:


//Zapisywanie do rejestrów

void ToF_writeReg(struct ToF_struct *ToF, uint8_t reg, uint8_t value)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af04      	add	r7, sp, #16
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	70fb      	strb	r3, [r7, #3]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(&hi2c1, (ToF->bus_address)<<1, reg, 1, (uint8_t*)&value, 1, HAL_MAX_DELAY);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	b299      	uxth	r1, r3
 8000a1a:	78fb      	ldrb	r3, [r7, #3]
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a22:	9302      	str	r3, [sp, #8]
 8000a24:	2301      	movs	r3, #1
 8000a26:	9301      	str	r3, [sp, #4]
 8000a28:	1cbb      	adds	r3, r7, #2
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	4803      	ldr	r0, [pc, #12]	; (8000a3c <ToF_writeReg+0x3c>)
 8000a30:	f002 fe28 	bl	8003684 <HAL_I2C_Mem_Write>
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000094 	.word	0x20000094

08000a40 <ToF_writeReg16Bit>:

void ToF_writeReg16Bit(struct ToF_struct *ToF, uint8_t reg, uint16_t value)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af04      	add	r7, sp, #16
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	70fb      	strb	r3, [r7, #3]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	803b      	strh	r3, [r7, #0]
	uint8_t tmp[2];
	tmp[0]=(uint8_t)value>>8 & 0xFF; //MSB
 8000a50:	2300      	movs	r3, #0
 8000a52:	733b      	strb	r3, [r7, #12]
	tmp[1]=(uint8_t)value    & 0xFF; //LSB
 8000a54:	883b      	ldrh	r3, [r7, #0]
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(&hi2c1, (ToF->bus_address)<<1, reg, 1, tmp, 2, HAL_MAX_DELAY);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	b299      	uxth	r1, r3
 8000a64:	78fb      	ldrb	r3, [r7, #3]
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6c:	9302      	str	r3, [sp, #8]
 8000a6e:	2302      	movs	r3, #2
 8000a70:	9301      	str	r3, [sp, #4]
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	2301      	movs	r3, #1
 8000a7a:	4803      	ldr	r0, [pc, #12]	; (8000a88 <ToF_writeReg16Bit+0x48>)
 8000a7c:	f002 fe02 	bl	8003684 <HAL_I2C_Mem_Write>
}
 8000a80:	bf00      	nop
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000094 	.word	0x20000094

08000a8c <ToF_writeMulti>:
	tmp[1]=(uint8_t)value     & 0xFF; //LSB
	HAL_I2C_Mem_Write(&hi2c1, (ToF->bus_address)<<1, reg, 1, tmp, 4, HAL_MAX_DELAY);
}

void ToF_writeMulti(struct ToF_struct *ToF, uint8_t reg, uint8_t *src, uint8_t count)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af04      	add	r7, sp, #16
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	607a      	str	r2, [r7, #4]
 8000a96:	461a      	mov	r2, r3
 8000a98:	460b      	mov	r3, r1
 8000a9a:	72fb      	strb	r3, [r7, #11]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Mem_Write(&hi2c1, (ToF->bus_address)<<1, reg, 1, src, count, HAL_MAX_DELAY);
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	b299      	uxth	r1, r3
 8000aaa:	7afb      	ldrb	r3, [r7, #11]
 8000aac:	b298      	uxth	r0, r3
 8000aae:	7abb      	ldrb	r3, [r7, #10]
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab6:	9202      	str	r2, [sp, #8]
 8000ab8:	9301      	str	r3, [sp, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	2301      	movs	r3, #1
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	4803      	ldr	r0, [pc, #12]	; (8000ad0 <ToF_writeMulti+0x44>)
 8000ac4:	f002 fdde 	bl	8003684 <HAL_I2C_Mem_Write>
}
 8000ac8:	bf00      	nop
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000094 	.word	0x20000094

08000ad4 <ToF_readReg>:
//HAL_I2C_Mem_Read (I2C_HandleTypeDef *hi2c, uint16_t DevAddress   , uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
//HAL_I2C_Mem_Read (&hi2c1                 ,  (ToF->bus_address)<<1, reg                , 1                  , &value        , sizeof(value), HAL_MAX_DELAY   )


uint8_t ToF_readReg(struct ToF_struct *ToF, uint8_t reg)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af04      	add	r7, sp, #16
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	70fb      	strb	r3, [r7, #3]
	uint8_t value = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Read(&hi2c1, (ToF->bus_address)<<1, reg, 1, &value, 1, HAL_MAX_DELAY);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	b299      	uxth	r1, r3
 8000aee:	78fb      	ldrb	r3, [r7, #3]
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	f04f 33ff 	mov.w	r3, #4294967295
 8000af6:	9302      	str	r3, [sp, #8]
 8000af8:	2301      	movs	r3, #1
 8000afa:	9301      	str	r3, [sp, #4]
 8000afc:	f107 030f 	add.w	r3, r7, #15
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	2301      	movs	r3, #1
 8000b04:	4803      	ldr	r0, [pc, #12]	; (8000b14 <ToF_readReg+0x40>)
 8000b06:	f002 feb7 	bl	8003878 <HAL_I2C_Mem_Read>

	return value;
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000094 	.word	0x20000094

08000b18 <ToF_readReg16Bit>:

uint16_t ToF_readReg16Bit(struct ToF_struct *ToF, uint8_t reg)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af04      	add	r7, sp, #16
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	460b      	mov	r3, r1
 8000b22:	70fb      	strb	r3, [r7, #3]
	uint8_t value_tab[2];

	HAL_I2C_Mem_Read(&hi2c1, (ToF->bus_address)<<1, reg, 1, value_tab, 2, HAL_MAX_DELAY);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	b299      	uxth	r1, r3
 8000b2e:	78fb      	ldrb	r3, [r7, #3]
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
 8000b36:	9302      	str	r3, [sp, #8]
 8000b38:	2302      	movs	r3, #2
 8000b3a:	9301      	str	r3, [sp, #4]
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	2301      	movs	r3, #1
 8000b44:	4807      	ldr	r0, [pc, #28]	; (8000b64 <ToF_readReg16Bit+0x4c>)
 8000b46:	f002 fe97 	bl	8003878 <HAL_I2C_Mem_Read>

	uint16_t value = (value_tab[0] << 8) | value_tab[1];
 8000b4a:	7b3b      	ldrb	r3, [r7, #12]
 8000b4c:	021b      	lsls	r3, r3, #8
 8000b4e:	b21a      	sxth	r2, r3
 8000b50:	7b7b      	ldrb	r3, [r7, #13]
 8000b52:	b21b      	sxth	r3, r3
 8000b54:	4313      	orrs	r3, r2
 8000b56:	b21b      	sxth	r3, r3
 8000b58:	81fb      	strh	r3, [r7, #14]

	return value;
 8000b5a:	89fb      	ldrh	r3, [r7, #14]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000094 	.word	0x20000094

08000b68 <ToF_readMulti>:

void ToF_readMulti(struct ToF_struct *ToF, uint8_t reg, uint8_t *dst, uint8_t count)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af04      	add	r7, sp, #16
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	461a      	mov	r2, r3
 8000b74:	460b      	mov	r3, r1
 8000b76:	72fb      	strb	r3, [r7, #11]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Mem_Read(&hi2c1, (ToF->bus_address)<<1, reg, 1, dst, count, HAL_MAX_DELAY);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	b299      	uxth	r1, r3
 8000b86:	7afb      	ldrb	r3, [r7, #11]
 8000b88:	b298      	uxth	r0, r3
 8000b8a:	7abb      	ldrb	r3, [r7, #10]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b92:	9202      	str	r2, [sp, #8]
 8000b94:	9301      	str	r3, [sp, #4]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	4803      	ldr	r0, [pc, #12]	; (8000bac <ToF_readMulti+0x44>)
 8000ba0:	f002 fe6a 	bl	8003878 <HAL_I2C_Mem_Read>
}
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000094 	.word	0x20000094

08000bb0 <ToF_setSignalRateLimit>:

uint8_t ToF_setSignalRateLimit(struct ToF_struct *ToF, float limit_Mcps)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	ed87 0a00 	vstr	s0, [r7]
	if (limit_Mcps < 0 || limit_Mcps > 511.99) { return 0; }
 8000bbc:	edd7 7a00 	vldr	s15, [r7]
 8000bc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bc8:	d40a      	bmi.n	8000be0 <ToF_setSignalRateLimit+0x30>
 8000bca:	6838      	ldr	r0, [r7, #0]
 8000bcc:	f7ff fc68 	bl	80004a0 <__aeabi_f2d>
 8000bd0:	a310      	add	r3, pc, #64	; (adr r3, 8000c14 <ToF_setSignalRateLimit+0x64>)
 8000bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd6:	f7ff fd39 	bl	800064c <__aeabi_dcmpgt>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <ToF_setSignalRateLimit+0x34>
 8000be0:	2300      	movs	r3, #0
 8000be2:	e010      	b.n	8000c06 <ToF_setSignalRateLimit+0x56>
	// Q9.7 fixed point format (9 integer bits, 7 fractional bits)
	ToF_writeReg16Bit(ToF, FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 8000be4:	edd7 7a00 	vldr	s15, [r7]
 8000be8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000c10 <ToF_setSignalRateLimit+0x60>
 8000bec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bf4:	ee17 3a90 	vmov	r3, s15
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	2144      	movs	r1, #68	; 0x44
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff ff1e 	bl	8000a40 <ToF_writeReg16Bit>
	return 1;
 8000c04:	2301      	movs	r3, #1
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	43000000 	.word	0x43000000
 8000c14:	0a3d70a4 	.word	0x0a3d70a4
 8000c18:	407fffd7 	.word	0x407fffd7

08000c1c <ToF_getSpadInfo>:

uint8_t ToF_getSpadInfo(struct ToF_struct *ToF, uint8_t *count, uint8_t *type_is_aperture)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
	uint8_t tmp;

	tmp = ToF_readReg(ToF, 0xC0);
 8000c28:	21c0      	movs	r1, #192	; 0xc0
 8000c2a:	68f8      	ldr	r0, [r7, #12]
 8000c2c:	f7ff ff52 	bl	8000ad4 <ToF_readReg>
 8000c30:	4603      	mov	r3, r0
 8000c32:	75fb      	strb	r3, [r7, #23]
	ToF_writeReg(ToF, 0x80, 0x01);
 8000c34:	2201      	movs	r2, #1
 8000c36:	2180      	movs	r1, #128	; 0x80
 8000c38:	68f8      	ldr	r0, [r7, #12]
 8000c3a:	f7ff fee1 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x01);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	21ff      	movs	r1, #255	; 0xff
 8000c42:	68f8      	ldr	r0, [r7, #12]
 8000c44:	f7ff fedc 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x00, 0x00);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	68f8      	ldr	r0, [r7, #12]
 8000c4e:	f7ff fed7 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x06);
 8000c52:	2206      	movs	r2, #6
 8000c54:	21ff      	movs	r1, #255	; 0xff
 8000c56:	68f8      	ldr	r0, [r7, #12]
 8000c58:	f7ff fed2 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x83, ToF_readReg(ToF, 0x83) | 0x04);
 8000c5c:	2183      	movs	r1, #131	; 0x83
 8000c5e:	68f8      	ldr	r0, [r7, #12]
 8000c60:	f7ff ff38 	bl	8000ad4 <ToF_readReg>
 8000c64:	4603      	mov	r3, r0
 8000c66:	f043 0304 	orr.w	r3, r3, #4
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	2183      	movs	r1, #131	; 0x83
 8000c70:	68f8      	ldr	r0, [r7, #12]
 8000c72:	f7ff fec5 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x07);
 8000c76:	2207      	movs	r2, #7
 8000c78:	21ff      	movs	r1, #255	; 0xff
 8000c7a:	68f8      	ldr	r0, [r7, #12]
 8000c7c:	f7ff fec0 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x81, 0x01);
 8000c80:	2201      	movs	r2, #1
 8000c82:	2181      	movs	r1, #129	; 0x81
 8000c84:	68f8      	ldr	r0, [r7, #12]
 8000c86:	f7ff febb 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0x80, 0x01);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	2180      	movs	r1, #128	; 0x80
 8000c8e:	68f8      	ldr	r0, [r7, #12]
 8000c90:	f7ff feb6 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0x94, 0x6b);
 8000c94:	226b      	movs	r2, #107	; 0x6b
 8000c96:	2194      	movs	r1, #148	; 0x94
 8000c98:	68f8      	ldr	r0, [r7, #12]
 8000c9a:	f7ff feb1 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x83, 0x00);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2183      	movs	r1, #131	; 0x83
 8000ca2:	68f8      	ldr	r0, [r7, #12]
 8000ca4:	f7ff feac 	bl	8000a00 <ToF_writeReg>
	while (ToF_readReg(ToF, 0x83) == 0x00)
	{

	}
	*/
	ToF_writeReg(ToF, 0x83, 0x01);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2183      	movs	r1, #131	; 0x83
 8000cac:	68f8      	ldr	r0, [r7, #12]
 8000cae:	f7ff fea7 	bl	8000a00 <ToF_writeReg>
	tmp = ToF_readReg(ToF, 0x92);
 8000cb2:	2192      	movs	r1, #146	; 0x92
 8000cb4:	68f8      	ldr	r0, [r7, #12]
 8000cb6:	f7ff ff0d 	bl	8000ad4 <ToF_readReg>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	75fb      	strb	r3, [r7, #23]

	*count = tmp & 0x7f;
 8000cbe:	7dfb      	ldrb	r3, [r7, #23]
 8000cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	701a      	strb	r2, [r3, #0]
	*type_is_aperture = (tmp >> 7) & 0x01;
 8000cca:	7dfb      	ldrb	r3, [r7, #23]
 8000ccc:	09db      	lsrs	r3, r3, #7
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	701a      	strb	r2, [r3, #0]

	ToF_writeReg(ToF, 0x81, 0x00);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2181      	movs	r1, #129	; 0x81
 8000cd8:	68f8      	ldr	r0, [r7, #12]
 8000cda:	f7ff fe91 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x06);
 8000cde:	2206      	movs	r2, #6
 8000ce0:	21ff      	movs	r1, #255	; 0xff
 8000ce2:	68f8      	ldr	r0, [r7, #12]
 8000ce4:	f7ff fe8c 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x83, ToF_readReg(ToF, 0x83)  & ~0x04);
 8000ce8:	2183      	movs	r1, #131	; 0x83
 8000cea:	68f8      	ldr	r0, [r7, #12]
 8000cec:	f7ff fef2 	bl	8000ad4 <ToF_readReg>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	f023 0304 	bic.w	r3, r3, #4
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	2183      	movs	r1, #131	; 0x83
 8000cfc:	68f8      	ldr	r0, [r7, #12]
 8000cfe:	f7ff fe7f 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x01);
 8000d02:	2201      	movs	r2, #1
 8000d04:	21ff      	movs	r1, #255	; 0xff
 8000d06:	68f8      	ldr	r0, [r7, #12]
 8000d08:	f7ff fe7a 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x00, 0x01);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2100      	movs	r1, #0
 8000d10:	68f8      	ldr	r0, [r7, #12]
 8000d12:	f7ff fe75 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x00);
 8000d16:	2200      	movs	r2, #0
 8000d18:	21ff      	movs	r1, #255	; 0xff
 8000d1a:	68f8      	ldr	r0, [r7, #12]
 8000d1c:	f7ff fe70 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x80, 0x00);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2180      	movs	r1, #128	; 0x80
 8000d24:	68f8      	ldr	r0, [r7, #12]
 8000d26:	f7ff fe6b 	bl	8000a00 <ToF_writeReg>

	return 1;
 8000d2a:	2301      	movs	r3, #1
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <ToF_decodeTimeout>:

uint16_t ToF_decodeTimeout(struct ToF_struct *ToF, uint16_t reg_val)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	807b      	strh	r3, [r7, #2]
	  // format: "(LSByte * 2^MSByte) + 1"
	  return (uint16_t)((reg_val & 0x00FF) <<
 8000d40:	887b      	ldrh	r3, [r7, #2]
 8000d42:	b2db      	uxtb	r3, r3
	         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8000d44:	887a      	ldrh	r2, [r7, #2]
 8000d46:	0a12      	lsrs	r2, r2, #8
 8000d48:	b292      	uxth	r2, r2
	  return (uint16_t)((reg_val & 0x00FF) <<
 8000d4a:	4093      	lsls	r3, r2
 8000d4c:	b29b      	uxth	r3, r3
	         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8000d4e:	3301      	adds	r3, #1
 8000d50:	b29b      	uxth	r3, r3
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <ToF_encodeTimeout>:
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.

uint16_t ToF_encodeTimeout(struct ToF_struct *ToF, uint16_t timeout_mclks)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b085      	sub	sp, #20
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
 8000d66:	460b      	mov	r3, r1
 8000d68:	807b      	strh	r3, [r7, #2]
	  // format: "(LSByte * 2^MSByte) + 1"

	  uint32_t ls_byte = 0;                     // Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
	  uint16_t ms_byte = 0;                     // based on VL53L0X_calc_timeout_us()
 8000d6e:	2300      	movs	r3, #0
 8000d70:	817b      	strh	r3, [r7, #10]

	  if (timeout_mclks > 0)
 8000d72:	887b      	ldrh	r3, [r7, #2]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d018      	beq.n	8000daa <ToF_encodeTimeout+0x4c>
	  {
	    ls_byte = timeout_mclks - 1;
 8000d78:	887b      	ldrh	r3, [r7, #2]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	60fb      	str	r3, [r7, #12]
	    while ((ls_byte & 0xFFFFFF00) > 0)
 8000d7e:	e005      	b.n	8000d8c <ToF_encodeTimeout+0x2e>
	    {
	      ls_byte >>= 1;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	085b      	lsrs	r3, r3, #1
 8000d84:	60fb      	str	r3, [r7, #12]
	      ms_byte++;
 8000d86:	897b      	ldrh	r3, [r7, #10]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	817b      	strh	r3, [r7, #10]
	    while ((ls_byte & 0xFFFFFF00) > 0)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1f4      	bne.n	8000d80 <ToF_encodeTimeout+0x22>
	    }
	    return (ms_byte << 8) | (ls_byte & 0xFF);
 8000d96:	897b      	ldrh	r3, [r7, #10]
 8000d98:	021b      	lsls	r3, r3, #8
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	4313      	orrs	r3, r2
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	e000      	b.n	8000dac <ToF_encodeTimeout+0x4e>
	  }
	  else { return 0; }
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <ToF_timeoutMclksToMicroseconds>:

uint32_t ToF_timeoutMclksToMicroseconds(struct ToF_struct *ToF, uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	807b      	strh	r3, [r7, #2]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	707b      	strb	r3, [r7, #1]
	  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8000dc8:	787b      	ldrb	r3, [r7, #1]
 8000dca:	4a0d      	ldr	r2, [pc, #52]	; (8000e00 <ToF_timeoutMclksToMicroseconds+0x48>)
 8000dcc:	fb02 f303 	mul.w	r3, r2, r3
 8000dd0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000dd4:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <ToF_timeoutMclksToMicroseconds+0x4c>)
 8000dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dda:	099b      	lsrs	r3, r3, #6
 8000ddc:	60fb      	str	r3, [r7, #12]

	  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8000dde:	887b      	ldrh	r3, [r7, #2]
 8000de0:	68fa      	ldr	r2, [r7, #12]
 8000de2:	fb02 f203 	mul.w	r2, r2, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	085b      	lsrs	r3, r3, #1
 8000dea:	4413      	add	r3, r2
 8000dec:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <ToF_timeoutMclksToMicroseconds+0x4c>)
 8000dee:	fba2 2303 	umull	r2, r3, r2, r3
 8000df2:	099b      	lsrs	r3, r3, #6
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	003a2f00 	.word	0x003a2f00
 8000e04:	10624dd3 	.word	0x10624dd3

08000e08 <ToF_timeoutMicrosecondsToMclks>:
// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()

uint32_t ToF_timeoutMicrosecondsToMclks(struct ToF_struct *ToF, uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b087      	sub	sp, #28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	4613      	mov	r3, r2
 8000e14:	71fb      	strb	r3, [r7, #7]
	  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	4a0d      	ldr	r2, [pc, #52]	; (8000e50 <ToF_timeoutMicrosecondsToMclks+0x48>)
 8000e1a:	fb02 f303 	mul.w	r3, r2, r3
 8000e1e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000e22:	4a0c      	ldr	r2, [pc, #48]	; (8000e54 <ToF_timeoutMicrosecondsToMclks+0x4c>)
 8000e24:	fba2 2303 	umull	r2, r3, r2, r3
 8000e28:	099b      	lsrs	r3, r3, #6
 8000e2a:	617b      	str	r3, [r7, #20]

	  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e32:	fb02 f203 	mul.w	r2, r2, r3
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	085b      	lsrs	r3, r3, #1
 8000e3a:	441a      	add	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	371c      	adds	r7, #28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	003a2f00 	.word	0x003a2f00
 8000e54:	10624dd3 	.word	0x10624dd3

08000e58 <ToF_getSequenceStepEnables>:

void ToF_getSequenceStepEnables(struct ToF_struct *ToF, struct SequenceStepEnables *enables)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
	uint8_t sequence_config = ToF_readReg(ToF, SYSTEM_SEQUENCE_CONFIG);
 8000e62:	2101      	movs	r1, #1
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff fe35 	bl	8000ad4 <ToF_readReg>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	73fb      	strb	r3, [r7, #15]

	enables->tcc          = (sequence_config >> 4) & 0x1;
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	091b      	lsrs	r3, r3, #4
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	701a      	strb	r2, [r3, #0]
	enables->dss          = (sequence_config >> 3) & 0x1;
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
 8000e80:	08db      	lsrs	r3, r3, #3
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	709a      	strb	r2, [r3, #2]
	enables->msrc         = (sequence_config >> 2) & 0x1;
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
 8000e90:	089b      	lsrs	r3, r3, #2
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	705a      	strb	r2, [r3, #1]
	enables->pre_range    = (sequence_config >> 6) & 0x1;
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	099b      	lsrs	r3, r3, #6
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	70da      	strb	r2, [r3, #3]
	enables->final_range  = (sequence_config >> 7) & 0x1;
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	09db      	lsrs	r3, r3, #7
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	711a      	strb	r2, [r3, #4]
}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <ToF_getVcselPulsePeriod>:

uint8_t ToF_getVcselPulsePeriod(struct ToF_struct *ToF, enum vcselPeriodType type)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	70fb      	strb	r3, [r7, #3]
	  if (type == VcselPeriodPreRange)
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d109      	bne.n	8000ee6 <ToF_getVcselPulsePeriod+0x26>
	  {
	    return decodeVcselPeriod(ToF_readReg(ToF, PRE_RANGE_CONFIG_VCSEL_PERIOD));
 8000ed2:	2150      	movs	r1, #80	; 0x50
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff fdfd 	bl	8000ad4 <ToF_readReg>
 8000eda:	4603      	mov	r3, r0
 8000edc:	3301      	adds	r3, #1
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	e00d      	b.n	8000f02 <ToF_getVcselPulsePeriod+0x42>
	  }
	  else if (type == VcselPeriodFinalRange)
 8000ee6:	78fb      	ldrb	r3, [r7, #3]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d109      	bne.n	8000f00 <ToF_getVcselPulsePeriod+0x40>
	  {
	    return decodeVcselPeriod(ToF_readReg(ToF, FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 8000eec:	2170      	movs	r1, #112	; 0x70
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff fdf0 	bl	8000ad4 <ToF_readReg>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	e000      	b.n	8000f02 <ToF_getVcselPulsePeriod+0x42>
	  }
	  else { return 255; }
 8000f00:	23ff      	movs	r3, #255	; 0xff
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <ToF_getSequenceStepTimeouts>:

void ToF_getSequenceStepTimeouts(struct ToF_struct *ToF, struct SequenceStepEnables *enables, struct SequenceStepTimeouts *timeouts)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b084      	sub	sp, #16
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	60f8      	str	r0, [r7, #12]
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
	timeouts->pre_range_vcsel_period_pclks = ToF_getVcselPulsePeriod(ToF, VcselPeriodPreRange);
 8000f16:	2100      	movs	r1, #0
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f7ff ffd1 	bl	8000ec0 <ToF_getVcselPulsePeriod>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	801a      	strh	r2, [r3, #0]

		timeouts->msrc_dss_tcc_mclks = ToF_readReg(ToF, MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8000f26:	2146      	movs	r1, #70	; 0x46
 8000f28:	68f8      	ldr	r0, [r7, #12]
 8000f2a:	f7ff fdd3 	bl	8000ad4 <ToF_readReg>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	3301      	adds	r3, #1
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	809a      	strh	r2, [r3, #4]
		timeouts->msrc_dss_tcc_us =
		  ToF_timeoutMclksToMicroseconds(ToF, timeouts->msrc_dss_tcc_mclks,
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	8899      	ldrh	r1, [r3, #4]
		                             timeouts->pre_range_vcsel_period_pclks);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	881b      	ldrh	r3, [r3, #0]
		  ToF_timeoutMclksToMicroseconds(ToF, timeouts->msrc_dss_tcc_mclks,
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	461a      	mov	r2, r3
 8000f46:	68f8      	ldr	r0, [r7, #12]
 8000f48:	f7ff ff36 	bl	8000db8 <ToF_timeoutMclksToMicroseconds>
 8000f4c:	4602      	mov	r2, r0
		timeouts->msrc_dss_tcc_us =
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	60da      	str	r2, [r3, #12]

		timeouts->pre_range_mclks =
		  ToF_decodeTimeout(ToF, ToF_readReg16Bit(ToF, PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8000f52:	2151      	movs	r1, #81	; 0x51
 8000f54:	68f8      	ldr	r0, [r7, #12]
 8000f56:	f7ff fddf 	bl	8000b18 <ToF_readReg16Bit>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f7ff fee8 	bl	8000d34 <ToF_decodeTimeout>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
		timeouts->pre_range_mclks =
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	80da      	strh	r2, [r3, #6]
		timeouts->pre_range_us =
			ToF_timeoutMclksToMicroseconds(ToF, timeouts->pre_range_mclks,
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	88d9      	ldrh	r1, [r3, #6]
		                             timeouts->pre_range_vcsel_period_pclks);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	881b      	ldrh	r3, [r3, #0]
			ToF_timeoutMclksToMicroseconds(ToF, timeouts->pre_range_mclks,
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	461a      	mov	r2, r3
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f7ff ff1d 	bl	8000db8 <ToF_timeoutMclksToMicroseconds>
 8000f7e:	4602      	mov	r2, r0
		timeouts->pre_range_us =
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	611a      	str	r2, [r3, #16]

		timeouts->final_range_vcsel_period_pclks = ToF_getVcselPulsePeriod(ToF, VcselPeriodFinalRange);
 8000f84:	2101      	movs	r1, #1
 8000f86:	68f8      	ldr	r0, [r7, #12]
 8000f88:	f7ff ff9a 	bl	8000ec0 <ToF_getVcselPulsePeriod>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	805a      	strh	r2, [r3, #2]

		timeouts->final_range_mclks =
			ToF_decodeTimeout(ToF, ToF_readReg16Bit(ToF, FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8000f94:	2171      	movs	r1, #113	; 0x71
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f7ff fdbe 	bl	8000b18 <ToF_readReg16Bit>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f7ff fec7 	bl	8000d34 <ToF_decodeTimeout>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
		timeouts->final_range_mclks =
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	811a      	strh	r2, [r3, #8]

		if (enables->pre_range)
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	78db      	ldrb	r3, [r3, #3]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d007      	beq.n	8000fc6 <ToF_getSequenceStepTimeouts+0xbc>
		{
		  timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	891a      	ldrh	r2, [r3, #8]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	88db      	ldrh	r3, [r3, #6]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	811a      	strh	r2, [r3, #8]
		}

		timeouts->final_range_us =
			ToF_timeoutMclksToMicroseconds(ToF, timeouts->final_range_mclks,
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	8919      	ldrh	r1, [r3, #8]
		                               timeouts->final_range_vcsel_period_pclks);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	885b      	ldrh	r3, [r3, #2]
			ToF_timeoutMclksToMicroseconds(ToF, timeouts->final_range_mclks,
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f7ff fef0 	bl	8000db8 <ToF_timeoutMclksToMicroseconds>
 8000fd8:	4602      	mov	r2, r0
		timeouts->final_range_us =
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	615a      	str	r2, [r3, #20]
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <ToF_getMeasurementTimingBudget>:

uint32_t ToF_getMeasurementTimingBudget(struct ToF_struct *ToF)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b08e      	sub	sp, #56	; 0x38
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
	struct SequenceStepEnables enables;
		struct SequenceStepTimeouts timeouts;

		uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 8000fee:	f240 7376 	movw	r3, #1910	; 0x776
 8000ff2:	867b      	strh	r3, [r7, #50]	; 0x32
		uint16_t const EndOverhead        = 960;
 8000ff4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000ff8:	863b      	strh	r3, [r7, #48]	; 0x30
		uint16_t const MsrcOverhead       = 660;
 8000ffa:	f44f 7325 	mov.w	r3, #660	; 0x294
 8000ffe:	85fb      	strh	r3, [r7, #46]	; 0x2e
		uint16_t const TccOverhead        = 590;
 8001000:	f240 234e 	movw	r3, #590	; 0x24e
 8001004:	85bb      	strh	r3, [r7, #44]	; 0x2c
		uint16_t const DssOverhead        = 690;
 8001006:	f240 23b2 	movw	r3, #690	; 0x2b2
 800100a:	857b      	strh	r3, [r7, #42]	; 0x2a
		uint16_t const PreRangeOverhead   = 660;
 800100c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001010:	853b      	strh	r3, [r7, #40]	; 0x28
		uint16_t const FinalRangeOverhead = 550;
 8001012:	f240 2326 	movw	r3, #550	; 0x226
 8001016:	84fb      	strh	r3, [r7, #38]	; 0x26

		uint32_t budget_us = StartOverhead + EndOverhead;
 8001018:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800101a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800101c:	4413      	add	r3, r2
 800101e:	637b      	str	r3, [r7, #52]	; 0x34

		ToF_getSequenceStepEnables(ToF, &enables);
 8001020:	f107 0320 	add.w	r3, r7, #32
 8001024:	4619      	mov	r1, r3
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ff16 	bl	8000e58 <ToF_getSequenceStepEnables>
		ToF_getSequenceStepTimeouts(ToF, &enables, &timeouts);
 800102c:	f107 0208 	add.w	r2, r7, #8
 8001030:	f107 0320 	add.w	r3, r7, #32
 8001034:	4619      	mov	r1, r3
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ff67 	bl	8000f0a <ToF_getSequenceStepTimeouts>

		if (enables.tcc)
 800103c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d005      	beq.n	8001050 <ToF_getMeasurementTimingBudget+0x6a>
		{
		  budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001048:	4413      	add	r3, r2
 800104a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800104c:	4413      	add	r3, r2
 800104e:	637b      	str	r3, [r7, #52]	; 0x34
		}
	    if (enables.dss)
 8001050:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001054:	2b00      	cmp	r3, #0
 8001056:	d007      	beq.n	8001068 <ToF_getMeasurementTimingBudget+0x82>
		{
		  budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800105c:	4413      	add	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001062:	4413      	add	r3, r2
 8001064:	637b      	str	r3, [r7, #52]	; 0x34
 8001066:	e009      	b.n	800107c <ToF_getMeasurementTimingBudget+0x96>
		}
		else if (enables.msrc)
 8001068:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800106c:	2b00      	cmp	r3, #0
 800106e:	d005      	beq.n	800107c <ToF_getMeasurementTimingBudget+0x96>
		{
		  budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001074:	4413      	add	r3, r2
 8001076:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001078:	4413      	add	r3, r2
 800107a:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if (enables.pre_range)
 800107c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001080:	2b00      	cmp	r3, #0
 8001082:	d005      	beq.n	8001090 <ToF_getMeasurementTimingBudget+0xaa>
		{
		  budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001088:	4413      	add	r3, r2
 800108a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800108c:	4413      	add	r3, r2
 800108e:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if (enables.final_range)
 8001090:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001094:	2b00      	cmp	r3, #0
 8001096:	d005      	beq.n	80010a4 <ToF_getMeasurementTimingBudget+0xbe>
		{
		  budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 8001098:	69fa      	ldr	r2, [r7, #28]
 800109a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800109c:	4413      	add	r3, r2
 800109e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010a0:	4413      	add	r3, r2
 80010a2:	637b      	str	r3, [r7, #52]	; 0x34
		}

		ToF->measurement_timing_budget_us = budget_us; // store for internal reuse
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010a8:	605a      	str	r2, [r3, #4]
		return budget_us;
 80010aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3738      	adds	r7, #56	; 0x38
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <ToF_setMeasurementTimingBudget>:

uint8_t ToF_setMeasurementTimingBudget(struct ToF_struct *ToF, uint32_t budget_us)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b092      	sub	sp, #72	; 0x48
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
	  struct SequenceStepEnables enables;
	  struct SequenceStepTimeouts timeouts;

	  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 80010be:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 80010c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	  uint16_t const EndOverhead        = 960;
 80010c6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80010ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  uint16_t const MsrcOverhead       = 660;
 80010cc:	f44f 7325 	mov.w	r3, #660	; 0x294
 80010d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
	  uint16_t const TccOverhead        = 590;
 80010d2:	f240 234e 	movw	r3, #590	; 0x24e
 80010d6:	877b      	strh	r3, [r7, #58]	; 0x3a
	  uint16_t const DssOverhead        = 690;
 80010d8:	f240 23b2 	movw	r3, #690	; 0x2b2
 80010dc:	873b      	strh	r3, [r7, #56]	; 0x38
	  uint16_t const PreRangeOverhead   = 660;
 80010de:	f44f 7325 	mov.w	r3, #660	; 0x294
 80010e2:	86fb      	strh	r3, [r7, #54]	; 0x36
	  uint16_t const FinalRangeOverhead = 550;
 80010e4:	f240 2326 	movw	r3, #550	; 0x226
 80010e8:	86bb      	strh	r3, [r7, #52]	; 0x34

	  uint32_t const MinTimingBudget = 20000;
 80010ea:	f644 6320 	movw	r3, #20000	; 0x4e20
 80010ee:	633b      	str	r3, [r7, #48]	; 0x30

	  if (budget_us < MinTimingBudget) { return 0; }
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d201      	bcs.n	80010fc <ToF_setMeasurementTimingBudget+0x48>
 80010f8:	2300      	movs	r3, #0
 80010fa:	e072      	b.n	80011e2 <ToF_setMeasurementTimingBudget+0x12e>

	  uint32_t used_budget_us = StartOverhead + EndOverhead;
 80010fc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001100:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001102:	4413      	add	r3, r2
 8001104:	647b      	str	r3, [r7, #68]	; 0x44

	  ToF_getSequenceStepEnables(ToF, &enables);
 8001106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110a:	4619      	mov	r1, r3
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff fea3 	bl	8000e58 <ToF_getSequenceStepEnables>
	  ToF_getSequenceStepTimeouts(ToF, &enables, &timeouts);
 8001112:	f107 020c 	add.w	r2, r7, #12
 8001116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111a:	4619      	mov	r1, r3
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff fef4 	bl	8000f0a <ToF_getSequenceStepTimeouts>

	  if (enables.tcc)
 8001122:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001126:	2b00      	cmp	r3, #0
 8001128:	d005      	beq.n	8001136 <ToF_setMeasurementTimingBudget+0x82>
	  {
	    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800112e:	4413      	add	r3, r2
 8001130:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001132:	4413      	add	r3, r2
 8001134:	647b      	str	r3, [r7, #68]	; 0x44
	  }

	  if (enables.dss)
 8001136:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800113a:	2b00      	cmp	r3, #0
 800113c:	d007      	beq.n	800114e <ToF_setMeasurementTimingBudget+0x9a>
	  {
	    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001142:	4413      	add	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001148:	4413      	add	r3, r2
 800114a:	647b      	str	r3, [r7, #68]	; 0x44
 800114c:	e009      	b.n	8001162 <ToF_setMeasurementTimingBudget+0xae>
	  }
	  else if (enables.msrc)
 800114e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001152:	2b00      	cmp	r3, #0
 8001154:	d005      	beq.n	8001162 <ToF_setMeasurementTimingBudget+0xae>
	  {
	    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800115a:	4413      	add	r3, r2
 800115c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800115e:	4413      	add	r3, r2
 8001160:	647b      	str	r3, [r7, #68]	; 0x44
	  }

	  if (enables.pre_range)
 8001162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001166:	2b00      	cmp	r3, #0
 8001168:	d005      	beq.n	8001176 <ToF_setMeasurementTimingBudget+0xc2>
	  {
	    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 800116a:	69fa      	ldr	r2, [r7, #28]
 800116c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800116e:	4413      	add	r3, r2
 8001170:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001172:	4413      	add	r3, r2
 8001174:	647b      	str	r3, [r7, #68]	; 0x44
	  }

	  if (enables.final_range)
 8001176:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800117a:	2b00      	cmp	r3, #0
 800117c:	d030      	beq.n	80011e0 <ToF_setMeasurementTimingBudget+0x12c>
	  {
	    used_budget_us += FinalRangeOverhead;
 800117e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001180:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001182:	4413      	add	r3, r2
 8001184:	647b      	str	r3, [r7, #68]	; 0x44
	    // budget and the sum of all other timeouts within the sequence.
	    // If there is no room for the final range timeout, then an error
	    // will be set. Otherwise the remaining time will be applied to
	    // the final range."

	    if (used_budget_us > budget_us)
 8001186:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	429a      	cmp	r2, r3
 800118c:	d901      	bls.n	8001192 <ToF_setMeasurementTimingBudget+0xde>
	    {
	      // "Requested timeout too big."
	      return 0;
 800118e:	2300      	movs	r3, #0
 8001190:	e027      	b.n	80011e2 <ToF_setMeasurementTimingBudget+0x12e>
	    }

	    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
	    //  timeouts must be expressed in macro periods MClks
	    //  because they have different vcsel periods."

	    uint16_t final_range_timeout_mclks =
	      ToF_timeoutMicrosecondsToMclks(ToF, final_range_timeout_us,
	                                 timeouts.final_range_vcsel_period_pclks);
 800119a:	89fb      	ldrh	r3, [r7, #14]
	      ToF_timeoutMicrosecondsToMclks(ToF, final_range_timeout_us,
 800119c:	b2db      	uxtb	r3, r3
 800119e:	461a      	mov	r2, r3
 80011a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff fe30 	bl	8000e08 <ToF_timeoutMicrosecondsToMclks>
 80011a8:	4603      	mov	r3, r0
	    uint16_t final_range_timeout_mclks =
 80011aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	    if (enables.pre_range)
 80011ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d005      	beq.n	80011c2 <ToF_setMeasurementTimingBudget+0x10e>
	    {
	      final_range_timeout_mclks += timeouts.pre_range_mclks;
 80011b6:	8a7a      	ldrh	r2, [r7, #18]
 80011b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80011bc:	4413      	add	r3, r2
 80011be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	    }

	    ToF_writeReg16Bit(ToF, FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80011c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80011c6:	4619      	mov	r1, r3
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff fdc8 	bl	8000d5e <ToF_encodeTimeout>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	2171      	movs	r1, #113	; 0x71
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff fc33 	bl	8000a40 <ToF_writeReg16Bit>
	      ToF_encodeTimeout(ToF, final_range_timeout_mclks));

	    // set_sequence_step_timeout() end

	    ToF->measurement_timing_budget_us = budget_us; // store for internal reuse
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	605a      	str	r2, [r3, #4]
	  }
	  return 1;
 80011e0:	2301      	movs	r3, #1
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3748      	adds	r7, #72	; 0x48
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <ToF_performSingleRefCalibration>:

uint8_t ToF_performSingleRefCalibration(struct ToF_struct *ToF, uint8_t vhv_init_byte)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	460b      	mov	r3, r1
 80011f4:	70fb      	strb	r3, [r7, #3]
	ToF_writeReg(ToF, SYSRANGE_START, 0x01 | vhv_init_byte);
 80011f6:	78fb      	ldrb	r3, [r7, #3]
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	461a      	mov	r2, r3
 8001200:	2100      	movs	r1, #0
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff fbfc 	bl	8000a00 <ToF_writeReg>

	  while ((ToF_readReg(ToF, RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8001208:	bf00      	nop
 800120a:	2113      	movs	r1, #19
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff fc61 	bl	8000ad4 <ToF_readReg>
 8001212:	4603      	mov	r3, r0
 8001214:	f003 0307 	and.w	r3, r3, #7
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0f6      	beq.n	800120a <ToF_performSingleRefCalibration+0x20>
	  {
	    //timeout
	  }

	  ToF_writeReg(ToF, SYSTEM_INTERRUPT_CLEAR, 0x01);
 800121c:	2201      	movs	r2, #1
 800121e:	210b      	movs	r1, #11
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff fbed 	bl	8000a00 <ToF_writeReg>

	  ToF_writeReg(ToF, SYSRANGE_START, 0x00);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff fbe8 	bl	8000a00 <ToF_writeReg>

	  return 1;
 8001230:	2301      	movs	r3, #1
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <ToF_init>:

uint8_t ToF_init(struct ToF_struct *ToF)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
	ToF->bus_address = 0x29;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2229      	movs	r2, #41	; 0x29
 8001246:	701a      	strb	r2, [r3, #0]

	ToF_writeReg(ToF, 0x80, 0x01);
 8001248:	2201      	movs	r2, #1
 800124a:	2180      	movs	r1, #128	; 0x80
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff fbd7 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x01);
 8001252:	2201      	movs	r2, #1
 8001254:	21ff      	movs	r1, #255	; 0xff
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff fbd2 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x00, 0x00);
 800125c:	2200      	movs	r2, #0
 800125e:	2100      	movs	r1, #0
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff fbcd 	bl	8000a00 <ToF_writeReg>
	ToF->stop_variable = ToF_readReg(ToF, 0x91);
 8001266:	2191      	movs	r1, #145	; 0x91
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff fc33 	bl	8000ad4 <ToF_readReg>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	705a      	strb	r2, [r3, #1]
	ToF_writeReg(ToF, 0x00, 0x01);
 8001276:	2201      	movs	r2, #1
 8001278:	2100      	movs	r1, #0
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff fbc0 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x00);
 8001280:	2200      	movs	r2, #0
 8001282:	21ff      	movs	r1, #255	; 0xff
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff fbbb 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x80, 0x00);
 800128a:	2200      	movs	r2, #0
 800128c:	2180      	movs	r1, #128	; 0x80
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff fbb6 	bl	8000a00 <ToF_writeReg>

	// disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
	ToF_writeReg(ToF, MSRC_CONFIG_CONTROL, ToF_readReg(ToF, MSRC_CONFIG_CONTROL) | 0x12);
 8001294:	2160      	movs	r1, #96	; 0x60
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff fc1c 	bl	8000ad4 <ToF_readReg>
 800129c:	4603      	mov	r3, r0
 800129e:	f043 0312 	orr.w	r3, r3, #18
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	461a      	mov	r2, r3
 80012a6:	2160      	movs	r1, #96	; 0x60
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff fba9 	bl	8000a00 <ToF_writeReg>

	// set final range signal rate limit to 0.25 MCPS (million counts per second)
	ToF_setSignalRateLimit(ToF, 0.25);
 80012ae:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff fc7c 	bl	8000bb0 <ToF_setSignalRateLimit>

	ToF_writeReg(ToF, SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80012b8:	22ff      	movs	r2, #255	; 0xff
 80012ba:	2101      	movs	r1, #1
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff fb9f 	bl	8000a00 <ToF_writeReg>
	uint8_t spad_count;
	uint8_t spad_type_is_aperture;

	if (ToF_getSpadInfo(ToF, &spad_count, &spad_type_is_aperture) == 0)
 80012c2:	f107 0213 	add.w	r2, r7, #19
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff fca5 	bl	8000c1c <ToF_getSpadInfo>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d101      	bne.n	80012dc <ToF_init+0xa2>
	{
		return 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	e24c      	b.n	8001776 <ToF_init+0x53c>
	}

	uint8_t ref_spad_map[6];
	ToF_readMulti(ToF, GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80012dc:	f107 020c 	add.w	r2, r7, #12
 80012e0:	2306      	movs	r3, #6
 80012e2:	21b0      	movs	r1, #176	; 0xb0
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff fc3f 	bl	8000b68 <ToF_readMulti>

	ToF_writeReg(ToF, 0xFF, 0x01);
 80012ea:	2201      	movs	r2, #1
 80012ec:	21ff      	movs	r1, #255	; 0xff
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff fb86 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80012f4:	2200      	movs	r2, #0
 80012f6:	214f      	movs	r1, #79	; 0x4f
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff fb81 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 80012fe:	222c      	movs	r2, #44	; 0x2c
 8001300:	214e      	movs	r1, #78	; 0x4e
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff fb7c 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x00);
 8001308:	2200      	movs	r2, #0
 800130a:	21ff      	movs	r1, #255	; 0xff
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff fb77 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8001312:	22b4      	movs	r2, #180	; 0xb4
 8001314:	21b6      	movs	r1, #182	; 0xb6
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff fb72 	bl	8000a00 <ToF_writeReg>

	uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 800131c:	7cfb      	ldrb	r3, [r7, #19]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <ToF_init+0xec>
 8001322:	230c      	movs	r3, #12
 8001324:	e000      	b.n	8001328 <ToF_init+0xee>
 8001326:	2300      	movs	r3, #0
 8001328:	757b      	strb	r3, [r7, #21]
	uint8_t spads_enabled = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	75fb      	strb	r3, [r7, #23]

	for (uint8_t i = 0; i < 48; i++)
 800132e:	2300      	movs	r3, #0
 8001330:	75bb      	strb	r3, [r7, #22]
 8001332:	e03c      	b.n	80013ae <ToF_init+0x174>
	{
	  if (i < first_spad_to_enable || spads_enabled == spad_count)
 8001334:	7dba      	ldrb	r2, [r7, #22]
 8001336:	7d7b      	ldrb	r3, [r7, #21]
 8001338:	429a      	cmp	r2, r3
 800133a:	d303      	bcc.n	8001344 <ToF_init+0x10a>
 800133c:	7d3b      	ldrb	r3, [r7, #20]
 800133e:	7dfa      	ldrb	r2, [r7, #23]
 8001340:	429a      	cmp	r2, r3
 8001342:	d11c      	bne.n	800137e <ToF_init+0x144>
	  {
	    // This bit is lower than the first one that should be enabled, or
	    // (reference_spad_count) bits have already been enabled, so zero this bit
	    ref_spad_map[i / 8] &= ~(1 << (i % 8));
 8001344:	7dbb      	ldrb	r3, [r7, #22]
 8001346:	08db      	lsrs	r3, r3, #3
 8001348:	b2d8      	uxtb	r0, r3
 800134a:	4603      	mov	r3, r0
 800134c:	f107 0218 	add.w	r2, r7, #24
 8001350:	4413      	add	r3, r2
 8001352:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001356:	b25a      	sxtb	r2, r3
 8001358:	7dbb      	ldrb	r3, [r7, #22]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	2101      	movs	r1, #1
 8001360:	fa01 f303 	lsl.w	r3, r1, r3
 8001364:	b25b      	sxtb	r3, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	b25b      	sxtb	r3, r3
 800136a:	4013      	ands	r3, r2
 800136c:	b25a      	sxtb	r2, r3
 800136e:	4603      	mov	r3, r0
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	f107 0118 	add.w	r1, r7, #24
 8001376:	440b      	add	r3, r1
 8001378:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800137c:	e014      	b.n	80013a8 <ToF_init+0x16e>
	  }
	  else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 800137e:	7dbb      	ldrb	r3, [r7, #22]
 8001380:	08db      	lsrs	r3, r3, #3
 8001382:	b2db      	uxtb	r3, r3
 8001384:	f107 0218 	add.w	r2, r7, #24
 8001388:	4413      	add	r3, r2
 800138a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800138e:	461a      	mov	r2, r3
 8001390:	7dbb      	ldrb	r3, [r7, #22]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	fa42 f303 	asr.w	r3, r2, r3
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d002      	beq.n	80013a8 <ToF_init+0x16e>
	  {
		  spads_enabled++;
 80013a2:	7dfb      	ldrb	r3, [r7, #23]
 80013a4:	3301      	adds	r3, #1
 80013a6:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < 48; i++)
 80013a8:	7dbb      	ldrb	r3, [r7, #22]
 80013aa:	3301      	adds	r3, #1
 80013ac:	75bb      	strb	r3, [r7, #22]
 80013ae:	7dbb      	ldrb	r3, [r7, #22]
 80013b0:	2b2f      	cmp	r3, #47	; 0x2f
 80013b2:	d9bf      	bls.n	8001334 <ToF_init+0xfa>
	  }
	}
	ToF_writeMulti(ToF, GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80013b4:	f107 020c 	add.w	r2, r7, #12
 80013b8:	2306      	movs	r3, #6
 80013ba:	21b0      	movs	r1, #176	; 0xb0
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff fb65 	bl	8000a8c <ToF_writeMulti>

	ToF_writeReg(ToF, 0xFF, 0x01);
 80013c2:	2201      	movs	r2, #1
 80013c4:	21ff      	movs	r1, #255	; 0xff
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff fb1a 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x00, 0x00);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2100      	movs	r1, #0
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff fb15 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x00);
 80013d6:	2200      	movs	r2, #0
 80013d8:	21ff      	movs	r1, #255	; 0xff
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff fb10 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x09, 0x00);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2109      	movs	r1, #9
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fb0b 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x10, 0x00);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2110      	movs	r1, #16
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff fb06 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x11, 0x00);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2111      	movs	r1, #17
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff fb01 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0x24, 0x01);
 80013fe:	2201      	movs	r2, #1
 8001400:	2124      	movs	r1, #36	; 0x24
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff fafc 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x25, 0xFF);
 8001408:	22ff      	movs	r2, #255	; 0xff
 800140a:	2125      	movs	r1, #37	; 0x25
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff faf7 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x75, 0x00);
 8001412:	2200      	movs	r2, #0
 8001414:	2175      	movs	r1, #117	; 0x75
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff faf2 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x01);
 800141c:	2201      	movs	r2, #1
 800141e:	21ff      	movs	r1, #255	; 0xff
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff faed 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x4E, 0x2C);
 8001426:	222c      	movs	r2, #44	; 0x2c
 8001428:	214e      	movs	r1, #78	; 0x4e
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff fae8 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x48, 0x00);
 8001430:	2200      	movs	r2, #0
 8001432:	2148      	movs	r1, #72	; 0x48
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff fae3 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x30, 0x20);
 800143a:	2220      	movs	r2, #32
 800143c:	2130      	movs	r1, #48	; 0x30
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff fade 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x00);
 8001444:	2200      	movs	r2, #0
 8001446:	21ff      	movs	r1, #255	; 0xff
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff fad9 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x30, 0x09);
 800144e:	2209      	movs	r2, #9
 8001450:	2130      	movs	r1, #48	; 0x30
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff fad4 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x54, 0x00);
 8001458:	2200      	movs	r2, #0
 800145a:	2154      	movs	r1, #84	; 0x54
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff facf 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x31, 0x04);
 8001462:	2204      	movs	r2, #4
 8001464:	2131      	movs	r1, #49	; 0x31
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff faca 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x32, 0x03);
 800146c:	2203      	movs	r2, #3
 800146e:	2132      	movs	r1, #50	; 0x32
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff fac5 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x40, 0x83);
 8001476:	2283      	movs	r2, #131	; 0x83
 8001478:	2140      	movs	r1, #64	; 0x40
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fac0 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x46, 0x25);
 8001480:	2225      	movs	r2, #37	; 0x25
 8001482:	2146      	movs	r1, #70	; 0x46
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff fabb 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x60, 0x00);
 800148a:	2200      	movs	r2, #0
 800148c:	2160      	movs	r1, #96	; 0x60
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff fab6 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x27, 0x00);
 8001494:	2200      	movs	r2, #0
 8001496:	2127      	movs	r1, #39	; 0x27
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff fab1 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x50, 0x06);
 800149e:	2206      	movs	r2, #6
 80014a0:	2150      	movs	r1, #80	; 0x50
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff faac 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x51, 0x00);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2151      	movs	r1, #81	; 0x51
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff faa7 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x52, 0x96);
 80014b2:	2296      	movs	r2, #150	; 0x96
 80014b4:	2152      	movs	r1, #82	; 0x52
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff faa2 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x56, 0x08);
 80014bc:	2208      	movs	r2, #8
 80014be:	2156      	movs	r1, #86	; 0x56
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff fa9d 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x57, 0x30);
 80014c6:	2230      	movs	r2, #48	; 0x30
 80014c8:	2157      	movs	r1, #87	; 0x57
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff fa98 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x61, 0x00);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2161      	movs	r1, #97	; 0x61
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff fa93 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x62, 0x00);
 80014da:	2200      	movs	r2, #0
 80014dc:	2162      	movs	r1, #98	; 0x62
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff fa8e 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x64, 0x00);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2164      	movs	r1, #100	; 0x64
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff fa89 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x65, 0x00);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2165      	movs	r1, #101	; 0x65
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff fa84 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x66, 0xA0);
 80014f8:	22a0      	movs	r2, #160	; 0xa0
 80014fa:	2166      	movs	r1, #102	; 0x66
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff fa7f 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x01);
 8001502:	2201      	movs	r2, #1
 8001504:	21ff      	movs	r1, #255	; 0xff
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff fa7a 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x22, 0x32);
 800150c:	2232      	movs	r2, #50	; 0x32
 800150e:	2122      	movs	r1, #34	; 0x22
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff fa75 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x47, 0x14);
 8001516:	2214      	movs	r2, #20
 8001518:	2147      	movs	r1, #71	; 0x47
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff fa70 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x49, 0xFF);
 8001520:	22ff      	movs	r2, #255	; 0xff
 8001522:	2149      	movs	r1, #73	; 0x49
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff fa6b 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x4A, 0x00);
 800152a:	2200      	movs	r2, #0
 800152c:	214a      	movs	r1, #74	; 0x4a
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff fa66 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x00);
 8001534:	2200      	movs	r2, #0
 8001536:	21ff      	movs	r1, #255	; 0xff
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff fa61 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x7A, 0x0A);
 800153e:	220a      	movs	r2, #10
 8001540:	217a      	movs	r1, #122	; 0x7a
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff fa5c 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x7B, 0x00);
 8001548:	2200      	movs	r2, #0
 800154a:	217b      	movs	r1, #123	; 0x7b
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff fa57 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x78, 0x21);
 8001552:	2221      	movs	r2, #33	; 0x21
 8001554:	2178      	movs	r1, #120	; 0x78
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff fa52 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x01);
 800155c:	2201      	movs	r2, #1
 800155e:	21ff      	movs	r1, #255	; 0xff
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff fa4d 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x23, 0x34);
 8001566:	2234      	movs	r2, #52	; 0x34
 8001568:	2123      	movs	r1, #35	; 0x23
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff fa48 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x42, 0x00);
 8001570:	2200      	movs	r2, #0
 8001572:	2142      	movs	r1, #66	; 0x42
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff fa43 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x44, 0xFF);
 800157a:	22ff      	movs	r2, #255	; 0xff
 800157c:	2144      	movs	r1, #68	; 0x44
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff fa3e 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x45, 0x26);
 8001584:	2226      	movs	r2, #38	; 0x26
 8001586:	2145      	movs	r1, #69	; 0x45
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff fa39 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x46, 0x05);
 800158e:	2205      	movs	r2, #5
 8001590:	2146      	movs	r1, #70	; 0x46
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff fa34 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x40, 0x40);
 8001598:	2240      	movs	r2, #64	; 0x40
 800159a:	2140      	movs	r1, #64	; 0x40
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff fa2f 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x0E, 0x06);
 80015a2:	2206      	movs	r2, #6
 80015a4:	210e      	movs	r1, #14
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fa2a 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x20, 0x1A);
 80015ac:	221a      	movs	r2, #26
 80015ae:	2120      	movs	r1, #32
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff fa25 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x43, 0x40);
 80015b6:	2240      	movs	r2, #64	; 0x40
 80015b8:	2143      	movs	r1, #67	; 0x43
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff fa20 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x00);
 80015c0:	2200      	movs	r2, #0
 80015c2:	21ff      	movs	r1, #255	; 0xff
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff fa1b 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x34, 0x03);
 80015ca:	2203      	movs	r2, #3
 80015cc:	2134      	movs	r1, #52	; 0x34
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff fa16 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x35, 0x44);
 80015d4:	2244      	movs	r2, #68	; 0x44
 80015d6:	2135      	movs	r1, #53	; 0x35
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff fa11 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x01);
 80015de:	2201      	movs	r2, #1
 80015e0:	21ff      	movs	r1, #255	; 0xff
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff fa0c 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x31, 0x04);
 80015e8:	2204      	movs	r2, #4
 80015ea:	2131      	movs	r1, #49	; 0x31
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff fa07 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x4B, 0x09);
 80015f2:	2209      	movs	r2, #9
 80015f4:	214b      	movs	r1, #75	; 0x4b
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fa02 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x4C, 0x05);
 80015fc:	2205      	movs	r2, #5
 80015fe:	214c      	movs	r1, #76	; 0x4c
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff f9fd 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x4D, 0x04);
 8001606:	2204      	movs	r2, #4
 8001608:	214d      	movs	r1, #77	; 0x4d
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff f9f8 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x00);
 8001610:	2200      	movs	r2, #0
 8001612:	21ff      	movs	r1, #255	; 0xff
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff f9f3 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x44, 0x00);
 800161a:	2200      	movs	r2, #0
 800161c:	2144      	movs	r1, #68	; 0x44
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff f9ee 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x45, 0x20);
 8001624:	2220      	movs	r2, #32
 8001626:	2145      	movs	r1, #69	; 0x45
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff f9e9 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x47, 0x08);
 800162e:	2208      	movs	r2, #8
 8001630:	2147      	movs	r1, #71	; 0x47
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff f9e4 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x48, 0x28);
 8001638:	2228      	movs	r2, #40	; 0x28
 800163a:	2148      	movs	r1, #72	; 0x48
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff f9df 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x67, 0x00);
 8001642:	2200      	movs	r2, #0
 8001644:	2167      	movs	r1, #103	; 0x67
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff f9da 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x70, 0x04);
 800164c:	2204      	movs	r2, #4
 800164e:	2170      	movs	r1, #112	; 0x70
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff f9d5 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x71, 0x01);
 8001656:	2201      	movs	r2, #1
 8001658:	2171      	movs	r1, #113	; 0x71
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff f9d0 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x72, 0xFE);
 8001660:	22fe      	movs	r2, #254	; 0xfe
 8001662:	2172      	movs	r1, #114	; 0x72
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff f9cb 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x76, 0x00);
 800166a:	2200      	movs	r2, #0
 800166c:	2176      	movs	r1, #118	; 0x76
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff f9c6 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x77, 0x00);
 8001674:	2200      	movs	r2, #0
 8001676:	2177      	movs	r1, #119	; 0x77
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff f9c1 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x01);
 800167e:	2201      	movs	r2, #1
 8001680:	21ff      	movs	r1, #255	; 0xff
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff f9bc 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x0D, 0x01);
 8001688:	2201      	movs	r2, #1
 800168a:	210d      	movs	r1, #13
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff f9b7 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x00);
 8001692:	2200      	movs	r2, #0
 8001694:	21ff      	movs	r1, #255	; 0xff
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff f9b2 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x80, 0x01);
 800169c:	2201      	movs	r2, #1
 800169e:	2180      	movs	r1, #128	; 0x80
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff f9ad 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x01, 0xF8);
 80016a6:	22f8      	movs	r2, #248	; 0xf8
 80016a8:	2101      	movs	r1, #1
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff f9a8 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x01);
 80016b0:	2201      	movs	r2, #1
 80016b2:	21ff      	movs	r1, #255	; 0xff
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff f9a3 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x8E, 0x01);
 80016ba:	2201      	movs	r2, #1
 80016bc:	218e      	movs	r1, #142	; 0x8e
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff f99e 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x00, 0x01);
 80016c4:	2201      	movs	r2, #1
 80016c6:	2100      	movs	r1, #0
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff f999 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x00);
 80016ce:	2200      	movs	r2, #0
 80016d0:	21ff      	movs	r1, #255	; 0xff
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff f994 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x80, 0x00);
 80016d8:	2200      	movs	r2, #0
 80016da:	2180      	movs	r1, #128	; 0x80
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff f98f 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80016e2:	2204      	movs	r2, #4
 80016e4:	210a      	movs	r1, #10
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff f98a 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, GPIO_HV_MUX_ACTIVE_HIGH, ToF_readReg(ToF, GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80016ec:	2184      	movs	r1, #132	; 0x84
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff f9f0 	bl	8000ad4 <ToF_readReg>
 80016f4:	4603      	mov	r3, r0
 80016f6:	f023 0310 	bic.w	r3, r3, #16
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	2184      	movs	r1, #132	; 0x84
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff f97d 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001706:	2201      	movs	r2, #1
 8001708:	210b      	movs	r1, #11
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff f978 	bl	8000a00 <ToF_writeReg>

	ToF->measurement_timing_budget_us = ToF_getMeasurementTimingBudget(ToF);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff fc68 	bl	8000fe6 <ToF_getMeasurementTimingBudget>
 8001716:	4602      	mov	r2, r0
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	605a      	str	r2, [r3, #4]

	ToF_writeReg(ToF, SYSTEM_SEQUENCE_CONFIG, 0xE8);
 800171c:	22e8      	movs	r2, #232	; 0xe8
 800171e:	2101      	movs	r1, #1
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff f96d 	bl	8000a00 <ToF_writeReg>

	ToF_setMeasurementTimingBudget(ToF, ToF->measurement_timing_budget_us);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	4619      	mov	r1, r3
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff fcc1 	bl	80010b4 <ToF_setMeasurementTimingBudget>

	ToF_writeReg(ToF, SYSTEM_SEQUENCE_CONFIG, 0x01);
 8001732:	2201      	movs	r2, #1
 8001734:	2101      	movs	r1, #1
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff f962 	bl	8000a00 <ToF_writeReg>

	if (!ToF_performSingleRefCalibration(ToF, 0x40)) { return 0; }
 800173c:	2140      	movs	r1, #64	; 0x40
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff fd53 	bl	80011ea <ToF_performSingleRefCalibration>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <ToF_init+0x514>
 800174a:	2300      	movs	r3, #0
 800174c:	e013      	b.n	8001776 <ToF_init+0x53c>

	ToF_writeReg(ToF, SYSTEM_SEQUENCE_CONFIG, 0x02);
 800174e:	2202      	movs	r2, #2
 8001750:	2101      	movs	r1, #1
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff f954 	bl	8000a00 <ToF_writeReg>

    if (!ToF_performSingleRefCalibration(ToF, 0x00)) { return 0; }
 8001758:	2100      	movs	r1, #0
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff fd45 	bl	80011ea <ToF_performSingleRefCalibration>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <ToF_init+0x530>
 8001766:	2300      	movs	r3, #0
 8001768:	e005      	b.n	8001776 <ToF_init+0x53c>

    ToF_writeReg(ToF, SYSTEM_SEQUENCE_CONFIG, 0xE8);
 800176a:	22e8      	movs	r2, #232	; 0xe8
 800176c:	2101      	movs	r1, #1
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff f946 	bl	8000a00 <ToF_writeReg>

	return 1;
 8001774:	2301      	movs	r3, #1
}
 8001776:	4618      	mov	r0, r3
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <ToF_setAddress>:

void ToF_setAddress(struct ToF_struct *ToF, uint8_t new_addr)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	460b      	mov	r3, r1
 8001788:	70fb      	strb	r3, [r7, #3]
	ToF_writeReg(ToF, I2C_SLAVE_DEVICE_ADDRESS, new_addr & 0x7F);
 800178a:	78fb      	ldrb	r3, [r7, #3]
 800178c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001790:	b2db      	uxtb	r3, r3
 8001792:	461a      	mov	r2, r3
 8001794:	218a      	movs	r1, #138	; 0x8a
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff f932 	bl	8000a00 <ToF_writeReg>
	ToF->bus_address = new_addr;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	78fa      	ldrb	r2, [r7, #3]
 80017a0:	701a      	strb	r2, [r3, #0]
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <ToF_startContinuous>:

void ToF_startContinuous(struct ToF_struct *ToF)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
	ToF_writeReg(ToF, 0x80, 0x01);
 80017b2:	2201      	movs	r2, #1
 80017b4:	2180      	movs	r1, #128	; 0x80
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff f922 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x01);
 80017bc:	2201      	movs	r2, #1
 80017be:	21ff      	movs	r1, #255	; 0xff
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff f91d 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x00, 0x00);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2100      	movs	r1, #0
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff f918 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x91, ToF->stop_variable);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	785b      	ldrb	r3, [r3, #1]
 80017d4:	461a      	mov	r2, r3
 80017d6:	2191      	movs	r1, #145	; 0x91
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff f911 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x00, 0x01);
 80017de:	2201      	movs	r2, #1
 80017e0:	2100      	movs	r1, #0
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff f90c 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x00);
 80017e8:	2200      	movs	r2, #0
 80017ea:	21ff      	movs	r1, #255	; 0xff
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff f907 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x80, 0x00);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2180      	movs	r1, #128	; 0x80
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff f902 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, SYSRANGE_START, 0x02);
 80017fc:	2202      	movs	r2, #2
 80017fe:	2100      	movs	r1, #0
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff f8fd 	bl	8000a00 <ToF_writeReg>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <initMicromouseVL53L0x>:
 *
 */


void initMicromouseVL53L0x()
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	  //////////////////////////////////////////////////////////////////////////
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_F_Pin, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2110      	movs	r1, #16
 8001818:	4863      	ldr	r0, [pc, #396]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 800181a:	f001 fde1 	bl	80033e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FR_Pin, 1);
 800181e:	2201      	movs	r2, #1
 8001820:	2101      	movs	r1, #1
 8001822:	4861      	ldr	r0, [pc, #388]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 8001824:	f001 fddc 	bl	80033e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FL_Pin, 0);
 8001828:	2200      	movs	r2, #0
 800182a:	2102      	movs	r1, #2
 800182c:	485e      	ldr	r0, [pc, #376]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 800182e:	f001 fdd7 	bl	80033e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_R_Pin, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2104      	movs	r1, #4
 8001836:	485c      	ldr	r0, [pc, #368]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 8001838:	f001 fdd2 	bl	80033e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_L_Pin, 0);
 800183c:	2200      	movs	r2, #0
 800183e:	2108      	movs	r1, #8
 8001840:	4859      	ldr	r0, [pc, #356]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 8001842:	f001 fdcd 	bl	80033e0 <HAL_GPIO_WritePin>

	  ToF_init(&ToF_FR);                      //inicjalizacja czujnika FR
 8001846:	4859      	ldr	r0, [pc, #356]	; (80019ac <initMicromouseVL53L0x+0x19c>)
 8001848:	f7ff fcf7 	bl	800123a <ToF_init>
	  ToF_setAddress(&ToF_FR, 0x30);
 800184c:	2130      	movs	r1, #48	; 0x30
 800184e:	4857      	ldr	r0, [pc, #348]	; (80019ac <initMicromouseVL53L0x+0x19c>)
 8001850:	f7ff ff95 	bl	800177e <ToF_setAddress>

	  //////////////////////////////////////////////////////////////////////////
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_F_Pin, 0);
 8001854:	2200      	movs	r2, #0
 8001856:	2110      	movs	r1, #16
 8001858:	4853      	ldr	r0, [pc, #332]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 800185a:	f001 fdc1 	bl	80033e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FR_Pin, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2101      	movs	r1, #1
 8001862:	4851      	ldr	r0, [pc, #324]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 8001864:	f001 fdbc 	bl	80033e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FL_Pin, 1);
 8001868:	2201      	movs	r2, #1
 800186a:	2102      	movs	r1, #2
 800186c:	484e      	ldr	r0, [pc, #312]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 800186e:	f001 fdb7 	bl	80033e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_R_Pin, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2104      	movs	r1, #4
 8001876:	484c      	ldr	r0, [pc, #304]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 8001878:	f001 fdb2 	bl	80033e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_L_Pin, 0);
 800187c:	2200      	movs	r2, #0
 800187e:	2108      	movs	r1, #8
 8001880:	4849      	ldr	r0, [pc, #292]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 8001882:	f001 fdad 	bl	80033e0 <HAL_GPIO_WritePin>

	  ToF_init(&ToF_FL);                      //inicjalizacja czujnika FL
 8001886:	484a      	ldr	r0, [pc, #296]	; (80019b0 <initMicromouseVL53L0x+0x1a0>)
 8001888:	f7ff fcd7 	bl	800123a <ToF_init>
	  ToF_setAddress(&ToF_FL, 0x31);
 800188c:	2131      	movs	r1, #49	; 0x31
 800188e:	4848      	ldr	r0, [pc, #288]	; (80019b0 <initMicromouseVL53L0x+0x1a0>)
 8001890:	f7ff ff75 	bl	800177e <ToF_setAddress>

	  //////////////////////////////////////////////////////////////////////////
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_F_Pin, 0);
 8001894:	2200      	movs	r2, #0
 8001896:	2110      	movs	r1, #16
 8001898:	4843      	ldr	r0, [pc, #268]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 800189a:	f001 fda1 	bl	80033e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FR_Pin, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	2101      	movs	r1, #1
 80018a2:	4841      	ldr	r0, [pc, #260]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 80018a4:	f001 fd9c 	bl	80033e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FL_Pin, 0);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2102      	movs	r1, #2
 80018ac:	483e      	ldr	r0, [pc, #248]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 80018ae:	f001 fd97 	bl	80033e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_R_Pin, 1);
 80018b2:	2201      	movs	r2, #1
 80018b4:	2104      	movs	r1, #4
 80018b6:	483c      	ldr	r0, [pc, #240]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 80018b8:	f001 fd92 	bl	80033e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_L_Pin, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	2108      	movs	r1, #8
 80018c0:	4839      	ldr	r0, [pc, #228]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 80018c2:	f001 fd8d 	bl	80033e0 <HAL_GPIO_WritePin>

	  ToF_init(&ToF_R);                     //inicjalizacja czujnika R
 80018c6:	483b      	ldr	r0, [pc, #236]	; (80019b4 <initMicromouseVL53L0x+0x1a4>)
 80018c8:	f7ff fcb7 	bl	800123a <ToF_init>
	  ToF_setAddress(&ToF_R, 0x32);
 80018cc:	2132      	movs	r1, #50	; 0x32
 80018ce:	4839      	ldr	r0, [pc, #228]	; (80019b4 <initMicromouseVL53L0x+0x1a4>)
 80018d0:	f7ff ff55 	bl	800177e <ToF_setAddress>

	  //////////////////////////////////////////////////////////////////////////
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_F_Pin, 0);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2110      	movs	r1, #16
 80018d8:	4833      	ldr	r0, [pc, #204]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 80018da:	f001 fd81 	bl	80033e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FR_Pin, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2101      	movs	r1, #1
 80018e2:	4831      	ldr	r0, [pc, #196]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 80018e4:	f001 fd7c 	bl	80033e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FL_Pin, 0);
 80018e8:	2200      	movs	r2, #0
 80018ea:	2102      	movs	r1, #2
 80018ec:	482e      	ldr	r0, [pc, #184]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 80018ee:	f001 fd77 	bl	80033e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_R_Pin, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2104      	movs	r1, #4
 80018f6:	482c      	ldr	r0, [pc, #176]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 80018f8:	f001 fd72 	bl	80033e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_L_Pin, 1);
 80018fc:	2201      	movs	r2, #1
 80018fe:	2108      	movs	r1, #8
 8001900:	4829      	ldr	r0, [pc, #164]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 8001902:	f001 fd6d 	bl	80033e0 <HAL_GPIO_WritePin>

	  ToF_init(&ToF_L);                     //inicjalizacja czujnika L
 8001906:	482c      	ldr	r0, [pc, #176]	; (80019b8 <initMicromouseVL53L0x+0x1a8>)
 8001908:	f7ff fc97 	bl	800123a <ToF_init>
	  ToF_setAddress(&ToF_L, 0x33);
 800190c:	2133      	movs	r1, #51	; 0x33
 800190e:	482a      	ldr	r0, [pc, #168]	; (80019b8 <initMicromouseVL53L0x+0x1a8>)
 8001910:	f7ff ff35 	bl	800177e <ToF_setAddress>

	  //////////////////////////////////////////////////////////////////////////
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_F_Pin, 1);
 8001914:	2201      	movs	r2, #1
 8001916:	2110      	movs	r1, #16
 8001918:	4823      	ldr	r0, [pc, #140]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 800191a:	f001 fd61 	bl	80033e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FR_Pin, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2101      	movs	r1, #1
 8001922:	4821      	ldr	r0, [pc, #132]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 8001924:	f001 fd5c 	bl	80033e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FL_Pin, 0);
 8001928:	2200      	movs	r2, #0
 800192a:	2102      	movs	r1, #2
 800192c:	481e      	ldr	r0, [pc, #120]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 800192e:	f001 fd57 	bl	80033e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_R_Pin, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2104      	movs	r1, #4
 8001936:	481c      	ldr	r0, [pc, #112]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 8001938:	f001 fd52 	bl	80033e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_L_Pin, 0);
 800193c:	2200      	movs	r2, #0
 800193e:	2108      	movs	r1, #8
 8001940:	4819      	ldr	r0, [pc, #100]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 8001942:	f001 fd4d 	bl	80033e0 <HAL_GPIO_WritePin>

	  ToF_init(&ToF_F);                     //inicjalizacja czujnika F
 8001946:	481d      	ldr	r0, [pc, #116]	; (80019bc <initMicromouseVL53L0x+0x1ac>)
 8001948:	f7ff fc77 	bl	800123a <ToF_init>
	  ToF_setAddress(&ToF_F, 0x34);
 800194c:	2134      	movs	r1, #52	; 0x34
 800194e:	481b      	ldr	r0, [pc, #108]	; (80019bc <initMicromouseVL53L0x+0x1ac>)
 8001950:	f7ff ff15 	bl	800177e <ToF_setAddress>
	  //////////////////////////////////////////////////////////////////////////

	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_F_Pin, 1);     //uruchomienie wszystkich ToF
 8001954:	2201      	movs	r2, #1
 8001956:	2110      	movs	r1, #16
 8001958:	4813      	ldr	r0, [pc, #76]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 800195a:	f001 fd41 	bl	80033e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FR_Pin, 1);
 800195e:	2201      	movs	r2, #1
 8001960:	2101      	movs	r1, #1
 8001962:	4811      	ldr	r0, [pc, #68]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 8001964:	f001 fd3c 	bl	80033e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FL_Pin, 1);
 8001968:	2201      	movs	r2, #1
 800196a:	2102      	movs	r1, #2
 800196c:	480e      	ldr	r0, [pc, #56]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 800196e:	f001 fd37 	bl	80033e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_R_Pin, 1);
 8001972:	2201      	movs	r2, #1
 8001974:	2104      	movs	r1, #4
 8001976:	480c      	ldr	r0, [pc, #48]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 8001978:	f001 fd32 	bl	80033e0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_L_Pin, 1);
 800197c:	2201      	movs	r2, #1
 800197e:	2108      	movs	r1, #8
 8001980:	4809      	ldr	r0, [pc, #36]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 8001982:	f001 fd2d 	bl	80033e0 <HAL_GPIO_WritePin>

	  ToF_startContinuous(&ToF_F);                     //uruchomienie trybu pomiaru ciągłego
 8001986:	480d      	ldr	r0, [pc, #52]	; (80019bc <initMicromouseVL53L0x+0x1ac>)
 8001988:	f7ff ff0f 	bl	80017aa <ToF_startContinuous>
	  ToF_startContinuous(&ToF_R);
 800198c:	4809      	ldr	r0, [pc, #36]	; (80019b4 <initMicromouseVL53L0x+0x1a4>)
 800198e:	f7ff ff0c 	bl	80017aa <ToF_startContinuous>
	  ToF_startContinuous(&ToF_L);
 8001992:	4809      	ldr	r0, [pc, #36]	; (80019b8 <initMicromouseVL53L0x+0x1a8>)
 8001994:	f7ff ff09 	bl	80017aa <ToF_startContinuous>
	  ToF_startContinuous(&ToF_FR);
 8001998:	4804      	ldr	r0, [pc, #16]	; (80019ac <initMicromouseVL53L0x+0x19c>)
 800199a:	f7ff ff06 	bl	80017aa <ToF_startContinuous>
	  ToF_startContinuous(&ToF_FL);
 800199e:	4804      	ldr	r0, [pc, #16]	; (80019b0 <initMicromouseVL53L0x+0x1a0>)
 80019a0:	f7ff ff03 	bl	80017aa <ToF_startContinuous>
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40020800 	.word	0x40020800
 80019ac:	20000038 	.word	0x20000038
 80019b0:	20000044 	.word	0x20000044
 80019b4:	2000005c 	.word	0x2000005c
 80019b8:	2000006c 	.word	0x2000006c
 80019bc:	20000054 	.word	0x20000054

080019c0 <encRead>:
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim4;


void encRead(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0


  oldLeftEncoder = leftEncoder;
 80019c4:	4b3a      	ldr	r3, [pc, #232]	; (8001ab0 <encRead+0xf0>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	b21a      	sxth	r2, r3
 80019ca:	4b3a      	ldr	r3, [pc, #232]	; (8001ab4 <encRead+0xf4>)
 80019cc:	801a      	strh	r2, [r3, #0]
  leftEncoder = TIM4->CNT; // przepisanie wartosci z rejestru timera 2 do zmiennej
 80019ce:	4b3a      	ldr	r3, [pc, #232]	; (8001ab8 <encRead+0xf8>)
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	b21a      	sxth	r2, r3
 80019d4:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <encRead+0xf0>)
 80019d6:	801a      	strh	r2, [r3, #0]
  oldRightEncoder = rightEncoder;
 80019d8:	4b38      	ldr	r3, [pc, #224]	; (8001abc <encRead+0xfc>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	b21a      	sxth	r2, r3
 80019de:	4b38      	ldr	r3, [pc, #224]	; (8001ac0 <encRead+0x100>)
 80019e0:	801a      	strh	r2, [r3, #0]
  rightEncoder = -TIM2->CNT; // przepisanie wartosci z rejestru timera 4 do zmiennej
 80019e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	425b      	negs	r3, r3
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	b21a      	sxth	r2, r3
 80019f0:	4b32      	ldr	r3, [pc, #200]	; (8001abc <encRead+0xfc>)
 80019f2:	801a      	strh	r2, [r3, #0]
  leftCount = leftEncoder - oldLeftEncoder;
 80019f4:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <encRead+0xf0>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	4b2d      	ldr	r3, [pc, #180]	; (8001ab4 <encRead+0xf4>)
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	b21b      	sxth	r3, r3
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	b21a      	sxth	r2, r3
 8001a0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ac4 <encRead+0x104>)
 8001a0c:	801a      	strh	r2, [r3, #0]
  rightCount = rightEncoder - oldRightEncoder;
 8001a0e:	4b2b      	ldr	r3, [pc, #172]	; (8001abc <encRead+0xfc>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	b21b      	sxth	r3, r3
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <encRead+0x100>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	b21b      	sxth	r3, r3
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	b21a      	sxth	r2, r3
 8001a24:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <encRead+0x108>)
 8001a26:	801a      	strh	r2, [r3, #0]
  fwdCount = leftCount + rightCount;
 8001a28:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <encRead+0x104>)
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	b21b      	sxth	r3, r3
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	4b25      	ldr	r3, [pc, #148]	; (8001ac8 <encRead+0x108>)
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	b21b      	sxth	r3, r3
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	4413      	add	r3, r2
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	b21a      	sxth	r2, r3
 8001a3e:	4b23      	ldr	r3, [pc, #140]	; (8001acc <encRead+0x10c>)
 8001a40:	801a      	strh	r2, [r3, #0]
  rotCount = - (leftCount - rightCount);
 8001a42:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <encRead+0x108>)
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	b21b      	sxth	r3, r3
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <encRead+0x104>)
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	b21b      	sxth	r3, r3
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	b21a      	sxth	r2, r3
 8001a58:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <encRead+0x110>)
 8001a5a:	801a      	strh	r2, [r3, #0]
  fwdTotal += fwdCount;
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <encRead+0x10c>)
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	b21b      	sxth	r3, r3
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <encRead+0x114>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4413      	add	r3, r2
 8001a6a:	4a1a      	ldr	r2, [pc, #104]	; (8001ad4 <encRead+0x114>)
 8001a6c:	6013      	str	r3, [r2, #0]
  rotTotal += rotCount;
 8001a6e:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <encRead+0x110>)
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	b21b      	sxth	r3, r3
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <encRead+0x118>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4a16      	ldr	r2, [pc, #88]	; (8001ad8 <encRead+0x118>)
 8001a7e:	6013      	str	r3, [r2, #0]
  leftTotal += leftCount;
 8001a80:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <encRead+0x104>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	b21b      	sxth	r3, r3
 8001a86:	461a      	mov	r2, r3
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <encRead+0x11c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4a13      	ldr	r2, [pc, #76]	; (8001adc <encRead+0x11c>)
 8001a90:	6013      	str	r3, [r2, #0]
  rightTotal += rightCount;
 8001a92:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <encRead+0x108>)
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	b21b      	sxth	r3, r3
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <encRead+0x120>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	4a0f      	ldr	r2, [pc, #60]	; (8001ae0 <encRead+0x120>)
 8001aa2:	6013      	str	r3, [r2, #0]


}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	2000002c 	.word	0x2000002c
 8001ab4:	20000028 	.word	0x20000028
 8001ab8:	40000800 	.word	0x40000800
 8001abc:	2000002e 	.word	0x2000002e
 8001ac0:	2000002a 	.word	0x2000002a
 8001ac4:	20000084 	.word	0x20000084
 8001ac8:	20000090 	.word	0x20000090
 8001acc:	2000007c 	.word	0x2000007c
 8001ad0:	20000074 	.word	0x20000074
 8001ad4:	20000078 	.word	0x20000078
 8001ad8:	20000080 	.word	0x20000080
 8001adc:	2000008c 	.word	0x2000008c
 8001ae0:	20000088 	.word	0x20000088

08001ae4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	; 0x28
 8001ae8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
 8001af8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	4b3e      	ldr	r3, [pc, #248]	; (8001bf8 <MX_GPIO_Init+0x114>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a3d      	ldr	r2, [pc, #244]	; (8001bf8 <MX_GPIO_Init+0x114>)
 8001b04:	f043 0304 	orr.w	r3, r3, #4
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <MX_GPIO_Init+0x114>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <MX_GPIO_Init+0x114>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a36      	ldr	r2, [pc, #216]	; (8001bf8 <MX_GPIO_Init+0x114>)
 8001b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b34      	ldr	r3, [pc, #208]	; (8001bf8 <MX_GPIO_Init+0x114>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	4b30      	ldr	r3, [pc, #192]	; (8001bf8 <MX_GPIO_Init+0x114>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a2f      	ldr	r2, [pc, #188]	; (8001bf8 <MX_GPIO_Init+0x114>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b2d      	ldr	r3, [pc, #180]	; (8001bf8 <MX_GPIO_Init+0x114>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	4b29      	ldr	r3, [pc, #164]	; (8001bf8 <MX_GPIO_Init+0x114>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a28      	ldr	r2, [pc, #160]	; (8001bf8 <MX_GPIO_Init+0x114>)
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <MX_GPIO_Init+0x114>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FR_Pin|TOF_GPIO_FL_Pin|TOF_GPIO_R_Pin|TOF_GPIO_L_Pin 
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f241 411f 	movw	r1, #5151	; 0x141f
 8001b70:	4822      	ldr	r0, [pc, #136]	; (8001bfc <MX_GPIO_Init+0x118>)
 8001b72:	f001 fc35 	bl	80033e0 <HAL_GPIO_WritePin>
                          |TOF_GPIO_F_Pin|DIR_L_Pin|DIR_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001b76:	2200      	movs	r2, #0
 8001b78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b7c:	4820      	ldr	r0, [pc, #128]	; (8001c00 <MX_GPIO_Init+0x11c>)
 8001b7e:	f001 fc2f 	bl	80033e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b88:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <MX_GPIO_Init+0x120>)
 8001b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	4619      	mov	r1, r3
 8001b96:	4819      	ldr	r0, [pc, #100]	; (8001bfc <MX_GPIO_Init+0x118>)
 8001b98:	f001 faa0 	bl	80030dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = TOF_GPIO_FR_Pin|TOF_GPIO_FL_Pin|TOF_GPIO_R_Pin|TOF_GPIO_L_Pin 
 8001b9c:	f241 431f 	movw	r3, #5151	; 0x141f
 8001ba0:	617b      	str	r3, [r7, #20]
                          |TOF_GPIO_F_Pin|DIR_L_Pin|DIR_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4811      	ldr	r0, [pc, #68]	; (8001bfc <MX_GPIO_Init+0x118>)
 8001bb6:	f001 fa91 	bl	80030dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001bba:	2310      	movs	r3, #16
 8001bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	4619      	mov	r1, r3
 8001bcc:	480e      	ldr	r0, [pc, #56]	; (8001c08 <MX_GPIO_Init+0x124>)
 8001bce:	f001 fa85 	bl	80030dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8001bd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be0:	2300      	movs	r3, #0
 8001be2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4619      	mov	r1, r3
 8001bea:	4805      	ldr	r0, [pc, #20]	; (8001c00 <MX_GPIO_Init+0x11c>)
 8001bec:	f001 fa76 	bl	80030dc <HAL_GPIO_Init>

}
 8001bf0:	bf00      	nop
 8001bf2:	3728      	adds	r7, #40	; 0x28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40020800 	.word	0x40020800
 8001c00:	40020400 	.word	0x40020400
 8001c04:	10210000 	.word	0x10210000
 8001c08:	40020000 	.word	0x40020000

08001c0c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c12:	4a13      	ldr	r2, [pc, #76]	; (8001c60 <MX_I2C1_Init+0x54>)
 8001c14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c16:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c18:	4a12      	ldr	r2, [pc, #72]	; (8001c64 <MX_I2C1_Init+0x58>)
 8001c1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c22:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c30:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c48:	4804      	ldr	r0, [pc, #16]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c4a:	f001 fbe3 	bl	8003414 <HAL_I2C_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c54:	f000 f942 	bl	8001edc <Error_Handler>
  }

}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000094 	.word	0x20000094
 8001c60:	40005400 	.word	0x40005400
 8001c64:	000186a0 	.word	0x000186a0

08001c68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	; 0x28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a19      	ldr	r2, [pc, #100]	; (8001cec <HAL_I2C_MspInit+0x84>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d12c      	bne.n	8001ce4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <HAL_I2C_MspInit+0x88>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a17      	ldr	r2, [pc, #92]	; (8001cf0 <HAL_I2C_MspInit+0x88>)
 8001c94:	f043 0302 	orr.w	r3, r3, #2
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <HAL_I2C_MspInit+0x88>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001ca6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cac:	2312      	movs	r3, #18
 8001cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cb8:	2304      	movs	r3, #4
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	480c      	ldr	r0, [pc, #48]	; (8001cf4 <HAL_I2C_MspInit+0x8c>)
 8001cc4:	f001 fa0a 	bl	80030dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <HAL_I2C_MspInit+0x88>)
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	4a07      	ldr	r2, [pc, #28]	; (8001cf0 <HAL_I2C_MspInit+0x88>)
 8001cd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_I2C_MspInit+0x88>)
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	3728      	adds	r7, #40	; 0x28
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40005400 	.word	0x40005400
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40020400 	.word	0x40020400

08001cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cfe:	f001 f873 	bl	8002de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d02:	f000 f881 	bl	8001e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d06:	f7ff feed 	bl	8001ae4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001d0a:	f000 ffd1 	bl	8002cb0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001d0e:	f7ff ff7d 	bl	8001c0c <MX_I2C1_Init>
  MX_TIM2_Init();
 8001d12:	f000 fdad 	bl	8002870 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001d16:	f000 fdff 	bl	8002918 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001d1a:	f000 fe7f 	bl	8002a1c <MX_TIM4_Init>

  //zmienne lokalne funkcji main - ustawione jako lokalne by były od razu widoczne w debuggerze
  /************************************************************************/

  //zmienne dla MPU6050
  float ax = 0, ay = 0, az = 0, gx = 0, gy = 0, gz = 0, temperature = 0;
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	61bb      	str	r3, [r7, #24]
 8001d24:	f04f 0300 	mov.w	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	f04f 0300 	mov.w	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	f04f 0300 	mov.w	r3, #0
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24

  //zmienne do podglądu enkoderów
  uint32_t prawy = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	623b      	str	r3, [r7, #32]
  uint32_t lewy = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61fb      	str	r3, [r7, #28]

  /************************************************************************/

  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin, 0);  //zapal LED
 8001d50:	2200      	movs	r2, #0
 8001d52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d56:	4826      	ldr	r0, [pc, #152]	; (8001df0 <main+0xf8>)
 8001d58:	f001 fb42 	bl	80033e0 <HAL_GPIO_WritePin>

  //inicjalizacja PWM dla silników
  motorsInit();
 8001d5c:	f000 f8c6 	bl	8001eec <motorsInit>

  //inicjalizacja czujników ToF
  initMicromouseVL53L0x();
 8001d60:	f7ff fd56 	bl	8001810 <initMicromouseVL53L0x>

  //inicjalizacja MPU6050
  MPU6050_Init(&hi2c1);
 8001d64:	4823      	ldr	r0, [pc, #140]	; (8001df4 <main+0xfc>)
 8001d66:	f000 fcf7 	bl	8002758 <MPU6050_Init>
  MPU6050_SetInterruptMode(MPU6050_INTMODE_ACTIVEHIGH);
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f000 fbfe 	bl	800256c <MPU6050_SetInterruptMode>
  MPU6050_SetInterruptDrive(MPU6050_INTDRV_PUSHPULL);
 8001d70:	2000      	movs	r0, #0
 8001d72:	f000 fc31 	bl	80025d8 <MPU6050_SetInterruptDrive>
  MPU6050_SetInterruptLatch(MPU6050_INTLATCH_WAITCLEAR);
 8001d76:	2001      	movs	r0, #1
 8001d78:	f000 fc66 	bl	8002648 <MPU6050_SetInterruptLatch>
  MPU6050_SetInterruptLatchClear(MPU6050_INTCLEAR_STATUSREAD);
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f000 fc9b 	bl	80026b8 <MPU6050_SetInterruptLatchClear>
  MPU6050_SetIntEnableRegister(0);
 8001d82:	2000      	movs	r0, #0
 8001d84:	f000 fcd0 	bl	8002728 <MPU6050_SetIntEnableRegister>
  dist_L = ToF_readRangeContinuousMillimeters(&ToF_L);
  dist_FL = ToF_readRangeContinuousMillimeters(&ToF_FL);
  dist_FR = ToF_readRangeContinuousMillimeters(&ToF_FR);
*/
  //inicjalizacja enkoderów
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001d88:	213c      	movs	r1, #60	; 0x3c
 8001d8a:	481b      	ldr	r0, [pc, #108]	; (8001df8 <main+0x100>)
 8001d8c:	f003 f878 	bl	8004e80 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001d90:	213c      	movs	r1, #60	; 0x3c
 8001d92:	481a      	ldr	r0, [pc, #104]	; (8001dfc <main+0x104>)
 8001d94:	f003 f874 	bl	8004e80 <HAL_TIM_Encoder_Start>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  //odczyt danych z mpu6050
	  MPU6050_GetAccelerometerScaled(&ax, &ay, &az);
 8001d98:	f107 0210 	add.w	r2, r7, #16
 8001d9c:	f107 0114 	add.w	r1, r7, #20
 8001da0:	f107 0318 	add.w	r3, r7, #24
 8001da4:	4618      	mov	r0, r3
 8001da6:	f000 fb2b 	bl	8002400 <MPU6050_GetAccelerometerScaled>
	  MPU6050_GetGyroscopeScaled(&gx, &gy, &gz);
 8001daa:	1d3a      	adds	r2, r7, #4
 8001dac:	f107 0108 	add.w	r1, r7, #8
 8001db0:	f107 030c 	add.w	r3, r7, #12
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 fb99 	bl	80024ec <MPU6050_GetGyroscopeScaled>
	  temperature = MPU6050_GetTemperatureCelsius();
 8001dba:	f000 fabd 	bl	8002338 <MPU6050_GetTemperatureCelsius>
 8001dbe:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

	  //odczyt z enkoderów
	  encRead();
 8001dc2:	f7ff fdfd 	bl	80019c0 <encRead>

	  prawy = leftTotal;
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <main+0x108>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	623b      	str	r3, [r7, #32]
	  lewy = rightTotal;
 8001dcc:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <main+0x10c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	61fb      	str	r3, [r7, #28]


	  HAL_Delay(100);
 8001dd2:	2064      	movs	r0, #100	; 0x64
 8001dd4:	f001 f87a 	bl	8002ecc <HAL_Delay>

	  //testowe ustawienie prędkości silników - nie odkomentowywać bo ucieka ze stołu
	  setMoveR(1, 500);
 8001dd8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001ddc:	2001      	movs	r0, #1
 8001dde:	f000 f893 	bl	8001f08 <setMoveR>
	  setMoveL(1, 500);
 8001de2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001de6:	2001      	movs	r0, #1
 8001de8:	f000 f8ba 	bl	8001f60 <setMoveL>
	  MPU6050_GetAccelerometerScaled(&ax, &ay, &az);
 8001dec:	e7d4      	b.n	8001d98 <main+0xa0>
 8001dee:	bf00      	nop
 8001df0:	40020400 	.word	0x40020400
 8001df4:	20000094 	.word	0x20000094
 8001df8:	20000174 	.word	0x20000174
 8001dfc:	200000f4 	.word	0x200000f4
 8001e00:	2000008c 	.word	0x2000008c
 8001e04:	20000088 	.word	0x20000088

08001e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b094      	sub	sp, #80	; 0x50
 8001e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e0e:	f107 0320 	add.w	r3, r7, #32
 8001e12:	2230      	movs	r2, #48	; 0x30
 8001e14:	2100      	movs	r1, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f004 f910 	bl	800603c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e1c:	f107 030c 	add.w	r3, r7, #12
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	4b28      	ldr	r3, [pc, #160]	; (8001ed4 <SystemClock_Config+0xcc>)
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	4a27      	ldr	r2, [pc, #156]	; (8001ed4 <SystemClock_Config+0xcc>)
 8001e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3c:	4b25      	ldr	r3, [pc, #148]	; (8001ed4 <SystemClock_Config+0xcc>)
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e48:	2300      	movs	r3, #0
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	4b22      	ldr	r3, [pc, #136]	; (8001ed8 <SystemClock_Config+0xd0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a21      	ldr	r2, [pc, #132]	; (8001ed8 <SystemClock_Config+0xd0>)
 8001e52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	4b1f      	ldr	r3, [pc, #124]	; (8001ed8 <SystemClock_Config+0xd0>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e60:	607b      	str	r3, [r7, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e64:	2302      	movs	r3, #2
 8001e66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e6c:	2310      	movs	r3, #16
 8001e6e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e70:	2302      	movs	r3, #2
 8001e72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e74:	2300      	movs	r3, #0
 8001e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001e78:	2310      	movs	r3, #16
 8001e7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e7c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001e80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001e82:	2304      	movs	r3, #4
 8001e84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e86:	2304      	movs	r3, #4
 8001e88:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e8a:	f107 0320 	add.w	r3, r7, #32
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f002 fa70 	bl	8004374 <HAL_RCC_OscConfig>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001e9a:	f000 f81f 	bl	8001edc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e9e:	230f      	movs	r3, #15
 8001ea0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001eaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001eb4:	f107 030c 	add.w	r3, r7, #12
 8001eb8:	2102      	movs	r1, #2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f002 fcca 	bl	8004854 <HAL_RCC_ClockConfig>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001ec6:	f000 f809 	bl	8001edc <Error_Handler>
  }
}
 8001eca:	bf00      	nop
 8001ecc:	3750      	adds	r7, #80	; 0x50
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40007000 	.word	0x40007000

08001edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <motorsInit>:
#include "move.h"
#include "encoders.h"
#include "tim.h"

void motorsInit()
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4804      	ldr	r0, [pc, #16]	; (8001f04 <motorsInit+0x18>)
 8001ef4:	f002 ff00 	bl	8004cf8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001ef8:	2108      	movs	r1, #8
 8001efa:	4802      	ldr	r0, [pc, #8]	; (8001f04 <motorsInit+0x18>)
 8001efc:	f002 fefc 	bl	8004cf8 <HAL_TIM_PWM_Start>
}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20000134 	.word	0x20000134

08001f08 <setMoveR>:
 *
 *  Prędkosc ustawiana jest w 0.1% wypelnienia PWM
 *  Kierunek - naprzód: 1, wstecz: -1.
 */
void setMoveR(int8_t movementDir, uint32_t Comp)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	6039      	str	r1, [r7, #0]
 8001f12:	71fb      	strb	r3, [r7, #7]
	switch(movementDir)
 8001f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1c:	d002      	beq.n	8001f24 <setMoveR+0x1c>
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d00b      	beq.n	8001f3a <setMoveR+0x32>
		case 1:
			HAL_GPIO_WritePin(DIR_R_GPIO_Port,DIR_R_Pin,0);
			MOTR_SetCompare(Comp);
			break;
		default:
			return;
 8001f22:	e015      	b.n	8001f50 <setMoveR+0x48>
			HAL_GPIO_WritePin(DIR_R_GPIO_Port,DIR_R_Pin,1);
 8001f24:	2201      	movs	r2, #1
 8001f26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f2a:	480b      	ldr	r0, [pc, #44]	; (8001f58 <setMoveR+0x50>)
 8001f2c:	f001 fa58 	bl	80033e0 <HAL_GPIO_WritePin>
			MOTR_SetCompare(Comp);
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <setMoveR+0x54>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8001f38:	e00a      	b.n	8001f50 <setMoveR+0x48>
			HAL_GPIO_WritePin(DIR_R_GPIO_Port,DIR_R_Pin,0);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f40:	4805      	ldr	r0, [pc, #20]	; (8001f58 <setMoveR+0x50>)
 8001f42:	f001 fa4d 	bl	80033e0 <HAL_GPIO_WritePin>
			MOTR_SetCompare(Comp);
 8001f46:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <setMoveR+0x54>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8001f4e:	bf00      	nop
	}
}
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40020800 	.word	0x40020800
 8001f5c:	20000134 	.word	0x20000134

08001f60 <setMoveL>:

void setMoveL(int8_t movementDir, uint32_t Comp)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	6039      	str	r1, [r7, #0]
 8001f6a:	71fb      	strb	r3, [r7, #7]
	switch(movementDir)
 8001f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f74:	d002      	beq.n	8001f7c <setMoveL+0x1c>
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d00b      	beq.n	8001f92 <setMoveL+0x32>
		case 1:
			HAL_GPIO_WritePin(DIR_L_GPIO_Port, DIR_L_Pin, 0);
			MOTL_SetCompare(Comp);
			break;
		default:
			return;
 8001f7a:	e015      	b.n	8001fa8 <setMoveL+0x48>
			HAL_GPIO_WritePin(DIR_L_GPIO_Port, DIR_L_Pin, 1);
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f82:	480b      	ldr	r0, [pc, #44]	; (8001fb0 <setMoveL+0x50>)
 8001f84:	f001 fa2c 	bl	80033e0 <HAL_GPIO_WritePin>
			MOTL_SetCompare(Comp);
 8001f88:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <setMoveL+0x54>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8001f90:	e00a      	b.n	8001fa8 <setMoveL+0x48>
			HAL_GPIO_WritePin(DIR_L_GPIO_Port, DIR_L_Pin, 0);
 8001f92:	2200      	movs	r2, #0
 8001f94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f98:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <setMoveL+0x50>)
 8001f9a:	f001 fa21 	bl	80033e0 <HAL_GPIO_WritePin>
			MOTL_SetCompare(Comp);
 8001f9e:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <setMoveL+0x54>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8001fa6:	bf00      	nop
	}
}
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40020800 	.word	0x40020800
 8001fb4:	20000134 	.word	0x20000134

08001fb8 <MPU6050_SetDlpf>:

//
// CONFIG
//
void MPU6050_SetDlpf(uint8_t Value)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af04      	add	r7, sp, #16
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 8001fc2:	4b18      	ldr	r3, [pc, #96]	; (8002024 <MPU6050_SetDlpf+0x6c>)
 8001fc4:	6818      	ldr	r0, [r3, #0]
 8001fc6:	230a      	movs	r3, #10
 8001fc8:	9302      	str	r3, [sp, #8]
 8001fca:	2301      	movs	r3, #1
 8001fcc:	9301      	str	r3, [sp, #4]
 8001fce:	f107 030f 	add.w	r3, r7, #15
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	221a      	movs	r2, #26
 8001fd8:	21d0      	movs	r1, #208	; 0xd0
 8001fda:	f001 fc4d 	bl	8003878 <HAL_I2C_Mem_Read>
	tmp &= 0xF8;
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
 8001fe0:	f023 0307 	bic.w	r3, r3, #7
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x7);
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	b25a      	sxtb	r2, r3
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	b25b      	sxtb	r3, r3
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	b25b      	sxtb	r3, r3
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 8001ffe:	4b09      	ldr	r3, [pc, #36]	; (8002024 <MPU6050_SetDlpf+0x6c>)
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	230a      	movs	r3, #10
 8002004:	9302      	str	r3, [sp, #8]
 8002006:	2301      	movs	r3, #1
 8002008:	9301      	str	r3, [sp, #4]
 800200a:	f107 030f 	add.w	r3, r7, #15
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	2301      	movs	r3, #1
 8002012:	221a      	movs	r2, #26
 8002014:	21d0      	movs	r1, #208	; 0xd0
 8002016:	f001 fb35 	bl	8003684 <HAL_I2C_Mem_Write>
}
 800201a:	bf00      	nop
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	200000f0 	.word	0x200000f0

08002028 <MPU6050_DeviceReset>:

//
// PWR_MGMT_1
//
void MPU6050_DeviceReset(uint8_t Reset)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af04      	add	r7, sp, #16
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 8002032:	4b17      	ldr	r3, [pc, #92]	; (8002090 <MPU6050_DeviceReset+0x68>)
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	230a      	movs	r3, #10
 8002038:	9302      	str	r3, [sp, #8]
 800203a:	2301      	movs	r3, #1
 800203c:	9301      	str	r3, [sp, #4]
 800203e:	f107 030f 	add.w	r3, r7, #15
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	2301      	movs	r3, #1
 8002046:	226b      	movs	r2, #107	; 0x6b
 8002048:	21d0      	movs	r1, #208	; 0xd0
 800204a:	f001 fc15 	bl	8003878 <HAL_I2C_Mem_Read>
	tmp &= ~(1<<MPU6050_PWR1_DEVICE_RESET_BIT);
 800204e:	7bfb      	ldrb	r3, [r7, #15]
 8002050:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002054:	b2db      	uxtb	r3, r3
 8002056:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Reset & 0x1) << MPU6050_PWR1_DEVICE_RESET_BIT);
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	01db      	lsls	r3, r3, #7
 800205c:	b25a      	sxtb	r2, r3
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	b25b      	sxtb	r3, r3
 8002062:	4313      	orrs	r3, r2
 8002064:	b25b      	sxtb	r3, r3
 8002066:	b2db      	uxtb	r3, r3
 8002068:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 800206a:	4b09      	ldr	r3, [pc, #36]	; (8002090 <MPU6050_DeviceReset+0x68>)
 800206c:	6818      	ldr	r0, [r3, #0]
 800206e:	230a      	movs	r3, #10
 8002070:	9302      	str	r3, [sp, #8]
 8002072:	2301      	movs	r3, #1
 8002074:	9301      	str	r3, [sp, #4]
 8002076:	f107 030f 	add.w	r3, r7, #15
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	2301      	movs	r3, #1
 800207e:	226b      	movs	r2, #107	; 0x6b
 8002080:	21d0      	movs	r1, #208	; 0xd0
 8002082:	f001 faff 	bl	8003684 <HAL_I2C_Mem_Write>
}
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200000f0 	.word	0x200000f0

08002094 <MPU6050_SetSleepEnabled>:

void MPU6050_SetSleepEnabled(uint8_t Enable)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af04      	add	r7, sp, #16
 800209a:	4603      	mov	r3, r0
 800209c:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 800209e:	4b18      	ldr	r3, [pc, #96]	; (8002100 <MPU6050_SetSleepEnabled+0x6c>)
 80020a0:	6818      	ldr	r0, [r3, #0]
 80020a2:	230a      	movs	r3, #10
 80020a4:	9302      	str	r3, [sp, #8]
 80020a6:	2301      	movs	r3, #1
 80020a8:	9301      	str	r3, [sp, #4]
 80020aa:	f107 030f 	add.w	r3, r7, #15
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	2301      	movs	r3, #1
 80020b2:	226b      	movs	r2, #107	; 0x6b
 80020b4:	21d0      	movs	r1, #208	; 0xd0
 80020b6:	f001 fbdf 	bl	8003878 <HAL_I2C_Mem_Read>
	tmp &= ~(1<<MPU6050_PWR1_SLEEP_BIT);
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Enable & 0x1) << MPU6050_PWR1_SLEEP_BIT);
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	019b      	lsls	r3, r3, #6
 80020c8:	b25b      	sxtb	r3, r3
 80020ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ce:	b25a      	sxtb	r2, r3
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	b25b      	sxtb	r3, r3
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b25b      	sxtb	r3, r3
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 80020dc:	4b08      	ldr	r3, [pc, #32]	; (8002100 <MPU6050_SetSleepEnabled+0x6c>)
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	230a      	movs	r3, #10
 80020e2:	9302      	str	r3, [sp, #8]
 80020e4:	2301      	movs	r3, #1
 80020e6:	9301      	str	r3, [sp, #4]
 80020e8:	f107 030f 	add.w	r3, r7, #15
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	2301      	movs	r3, #1
 80020f0:	226b      	movs	r2, #107	; 0x6b
 80020f2:	21d0      	movs	r1, #208	; 0xd0
 80020f4:	f001 fac6 	bl	8003684 <HAL_I2C_Mem_Write>
}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	200000f0 	.word	0x200000f0

08002104 <MPU6050_SetClockSource>:
	tmp |= ((Disable & 0x1) << MPU6050_PWR1_TEMP_DIS_BIT);
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
}

void MPU6050_SetClockSource(uint8_t Source)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af04      	add	r7, sp, #16
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 800210e:	4b18      	ldr	r3, [pc, #96]	; (8002170 <MPU6050_SetClockSource+0x6c>)
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	230a      	movs	r3, #10
 8002114:	9302      	str	r3, [sp, #8]
 8002116:	2301      	movs	r3, #1
 8002118:	9301      	str	r3, [sp, #4]
 800211a:	f107 030f 	add.w	r3, r7, #15
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	2301      	movs	r3, #1
 8002122:	226b      	movs	r2, #107	; 0x6b
 8002124:	21d0      	movs	r1, #208	; 0xd0
 8002126:	f001 fba7 	bl	8003878 <HAL_I2C_Mem_Read>
	tmp &= 0xF8;
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	f023 0307 	bic.w	r3, r3, #7
 8002130:	b2db      	uxtb	r3, r3
 8002132:	73fb      	strb	r3, [r7, #15]
	tmp |= (Source & 0x7);
 8002134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	b25a      	sxtb	r2, r3
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	b25b      	sxtb	r3, r3
 8002142:	4313      	orrs	r3, r2
 8002144:	b25b      	sxtb	r3, r3
 8002146:	b2db      	uxtb	r3, r3
 8002148:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <MPU6050_SetClockSource+0x6c>)
 800214c:	6818      	ldr	r0, [r3, #0]
 800214e:	230a      	movs	r3, #10
 8002150:	9302      	str	r3, [sp, #8]
 8002152:	2301      	movs	r3, #1
 8002154:	9301      	str	r3, [sp, #4]
 8002156:	f107 030f 	add.w	r3, r7, #15
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	2301      	movs	r3, #1
 800215e:	226b      	movs	r2, #107	; 0x6b
 8002160:	21d0      	movs	r1, #208	; 0xd0
 8002162:	f001 fa8f 	bl	8003684 <HAL_I2C_Mem_Write>
}
 8002166:	bf00      	nop
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200000f0 	.word	0x200000f0

08002174 <MPU6050_SetFullScaleGyroRange>:

//
//	Measurement scale configuration
//
void MPU6050_SetFullScaleGyroRange(uint8_t Range)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b088      	sub	sp, #32
 8002178:	af04      	add	r7, sp, #16
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 800217e:	4b28      	ldr	r3, [pc, #160]	; (8002220 <MPU6050_SetFullScaleGyroRange+0xac>)
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	230a      	movs	r3, #10
 8002184:	9302      	str	r3, [sp, #8]
 8002186:	2301      	movs	r3, #1
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	f107 030f 	add.w	r3, r7, #15
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	2301      	movs	r3, #1
 8002192:	221b      	movs	r2, #27
 8002194:	21d0      	movs	r1, #208	; 0xd0
 8002196:	f001 fb6f 	bl	8003878 <HAL_I2C_Mem_Read>
	tmp &= 0xE7;
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	f023 0318 	bic.w	r3, r3, #24
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Range & 0x7) << 3);
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	b25b      	sxtb	r3, r3
 80021aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021ae:	b25a      	sxtb	r2, r3
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	b25b      	sxtb	r3, r3
 80021b4:	4313      	orrs	r3, r2
 80021b6:	b25b      	sxtb	r3, r3
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 80021bc:	4b18      	ldr	r3, [pc, #96]	; (8002220 <MPU6050_SetFullScaleGyroRange+0xac>)
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	230a      	movs	r3, #10
 80021c2:	9302      	str	r3, [sp, #8]
 80021c4:	2301      	movs	r3, #1
 80021c6:	9301      	str	r3, [sp, #4]
 80021c8:	f107 030f 	add.w	r3, r7, #15
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	2301      	movs	r3, #1
 80021d0:	221b      	movs	r2, #27
 80021d2:	21d0      	movs	r1, #208	; 0xd0
 80021d4:	f001 fa56 	bl	8003684 <HAL_I2C_Mem_Write>

	switch(Range)
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d81a      	bhi.n	8002214 <MPU6050_SetFullScaleGyroRange+0xa0>
 80021de:	a201      	add	r2, pc, #4	; (adr r2, 80021e4 <MPU6050_SetFullScaleGyroRange+0x70>)
 80021e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e4:	080021f5 	.word	0x080021f5
 80021e8:	080021fd 	.word	0x080021fd
 80021ec:	08002205 	.word	0x08002205
 80021f0:	0800220d 	.word	0x0800220d
	{
		case MPU6050_GYRO_FS_250:
			Gyr_Scale = 0.007633;
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <MPU6050_SetFullScaleGyroRange+0xb0>)
 80021f6:	4a0c      	ldr	r2, [pc, #48]	; (8002228 <MPU6050_SetFullScaleGyroRange+0xb4>)
 80021f8:	601a      	str	r2, [r3, #0]
			break;
 80021fa:	e00c      	b.n	8002216 <MPU6050_SetFullScaleGyroRange+0xa2>
		case MPU6050_GYRO_FS_500:
			Gyr_Scale = 0.015267;
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <MPU6050_SetFullScaleGyroRange+0xb0>)
 80021fe:	4a0b      	ldr	r2, [pc, #44]	; (800222c <MPU6050_SetFullScaleGyroRange+0xb8>)
 8002200:	601a      	str	r2, [r3, #0]
			break;
 8002202:	e008      	b.n	8002216 <MPU6050_SetFullScaleGyroRange+0xa2>
		case MPU6050_GYRO_FS_1000:
			Gyr_Scale = 0.030487;
 8002204:	4b07      	ldr	r3, [pc, #28]	; (8002224 <MPU6050_SetFullScaleGyroRange+0xb0>)
 8002206:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <MPU6050_SetFullScaleGyroRange+0xbc>)
 8002208:	601a      	str	r2, [r3, #0]
			break;
 800220a:	e004      	b.n	8002216 <MPU6050_SetFullScaleGyroRange+0xa2>
		case MPU6050_GYRO_FS_2000:
			Gyr_Scale = 0.060975;
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <MPU6050_SetFullScaleGyroRange+0xb0>)
 800220e:	4a09      	ldr	r2, [pc, #36]	; (8002234 <MPU6050_SetFullScaleGyroRange+0xc0>)
 8002210:	601a      	str	r2, [r3, #0]
			break;
 8002212:	e000      	b.n	8002216 <MPU6050_SetFullScaleGyroRange+0xa2>
		default:
			break;
 8002214:	bf00      	nop
	}
}
 8002216:	bf00      	nop
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	200000f0 	.word	0x200000f0
 8002224:	200000ec 	.word	0x200000ec
 8002228:	3bfa1e3f 	.word	0x3bfa1e3f
 800222c:	3c7a2270 	.word	0x3c7a2270
 8002230:	3cf9bfdf 	.word	0x3cf9bfdf
 8002234:	3d79c0ec 	.word	0x3d79c0ec

08002238 <MPU6050_SetFullScaleAccelRange>:

void MPU6050_SetFullScaleAccelRange(uint8_t Range)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b088      	sub	sp, #32
 800223c:	af04      	add	r7, sp, #16
 800223e:	4603      	mov	r3, r0
 8002240:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 8002242:	4b28      	ldr	r3, [pc, #160]	; (80022e4 <MPU6050_SetFullScaleAccelRange+0xac>)
 8002244:	6818      	ldr	r0, [r3, #0]
 8002246:	230a      	movs	r3, #10
 8002248:	9302      	str	r3, [sp, #8]
 800224a:	2301      	movs	r3, #1
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	f107 030f 	add.w	r3, r7, #15
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	2301      	movs	r3, #1
 8002256:	221c      	movs	r2, #28
 8002258:	21d0      	movs	r1, #208	; 0xd0
 800225a:	f001 fb0d 	bl	8003878 <HAL_I2C_Mem_Read>
	tmp &= 0xE7;
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	f023 0318 	bic.w	r3, r3, #24
 8002264:	b2db      	uxtb	r3, r3
 8002266:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Range & 0x7) << 3);
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	b25b      	sxtb	r3, r3
 800226e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002272:	b25a      	sxtb	r2, r3
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	b25b      	sxtb	r3, r3
 8002278:	4313      	orrs	r3, r2
 800227a:	b25b      	sxtb	r3, r3
 800227c:	b2db      	uxtb	r3, r3
 800227e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 8002280:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <MPU6050_SetFullScaleAccelRange+0xac>)
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	230a      	movs	r3, #10
 8002286:	9302      	str	r3, [sp, #8]
 8002288:	2301      	movs	r3, #1
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	f107 030f 	add.w	r3, r7, #15
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	2301      	movs	r3, #1
 8002294:	221c      	movs	r2, #28
 8002296:	21d0      	movs	r1, #208	; 0xd0
 8002298:	f001 f9f4 	bl	8003684 <HAL_I2C_Mem_Write>

	switch(Range)
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d81a      	bhi.n	80022d8 <MPU6050_SetFullScaleAccelRange+0xa0>
 80022a2:	a201      	add	r2, pc, #4	; (adr r2, 80022a8 <MPU6050_SetFullScaleAccelRange+0x70>)
 80022a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a8:	080022b9 	.word	0x080022b9
 80022ac:	080022c1 	.word	0x080022c1
 80022b0:	080022c9 	.word	0x080022c9
 80022b4:	080022d1 	.word	0x080022d1
	{
		case MPU6050_ACCEL_FS_2:
			Acc_Scale = 0.000061;
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <MPU6050_SetFullScaleAccelRange+0xb0>)
 80022ba:	4a0c      	ldr	r2, [pc, #48]	; (80022ec <MPU6050_SetFullScaleAccelRange+0xb4>)
 80022bc:	601a      	str	r2, [r3, #0]
			break;
 80022be:	e00c      	b.n	80022da <MPU6050_SetFullScaleAccelRange+0xa2>
		case MPU6050_ACCEL_FS_4:
			Acc_Scale = 0.000122;
 80022c0:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <MPU6050_SetFullScaleAccelRange+0xb0>)
 80022c2:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <MPU6050_SetFullScaleAccelRange+0xb8>)
 80022c4:	601a      	str	r2, [r3, #0]
			break;
 80022c6:	e008      	b.n	80022da <MPU6050_SetFullScaleAccelRange+0xa2>
		case MPU6050_ACCEL_FS_8:
			Acc_Scale = 0.000244;
 80022c8:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <MPU6050_SetFullScaleAccelRange+0xb0>)
 80022ca:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <MPU6050_SetFullScaleAccelRange+0xbc>)
 80022cc:	601a      	str	r2, [r3, #0]
			break;
 80022ce:	e004      	b.n	80022da <MPU6050_SetFullScaleAccelRange+0xa2>
		case MPU6050_ACCEL_FS_16:
			Acc_Scale = 0.0004882;
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <MPU6050_SetFullScaleAccelRange+0xb0>)
 80022d2:	4a09      	ldr	r2, [pc, #36]	; (80022f8 <MPU6050_SetFullScaleAccelRange+0xc0>)
 80022d4:	601a      	str	r2, [r3, #0]
			break;
 80022d6:	e000      	b.n	80022da <MPU6050_SetFullScaleAccelRange+0xa2>
		default:
			break;
 80022d8:	bf00      	nop
	}
}
 80022da:	bf00      	nop
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	200000f0 	.word	0x200000f0
 80022e8:	200000e8 	.word	0x200000e8
 80022ec:	387fda40 	.word	0x387fda40
 80022f0:	38ffda40 	.word	0x38ffda40
 80022f4:	397fda40 	.word	0x397fda40
 80022f8:	39fff518 	.word	0x39fff518

080022fc <MPU6050_GetTemperatureRAW>:

//
// Reading data
//
int16_t MPU6050_GetTemperatureRAW(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af04      	add	r7, sp, #16
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_TEMP_OUT_H, 1, tmp, 2, I2C_TIMEOUT);
 8002302:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <MPU6050_GetTemperatureRAW+0x38>)
 8002304:	6818      	ldr	r0, [r3, #0]
 8002306:	230a      	movs	r3, #10
 8002308:	9302      	str	r3, [sp, #8]
 800230a:	2302      	movs	r3, #2
 800230c:	9301      	str	r3, [sp, #4]
 800230e:	1d3b      	adds	r3, r7, #4
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	2301      	movs	r3, #1
 8002314:	2241      	movs	r2, #65	; 0x41
 8002316:	21d0      	movs	r1, #208	; 0xd0
 8002318:	f001 faae 	bl	8003878 <HAL_I2C_Mem_Read>
	return (((int16_t)tmp[0]) << 8) | tmp[1];
 800231c:	793b      	ldrb	r3, [r7, #4]
 800231e:	021b      	lsls	r3, r3, #8
 8002320:	b21a      	sxth	r2, r3
 8002322:	797b      	ldrb	r3, [r7, #5]
 8002324:	b21b      	sxth	r3, r3
 8002326:	4313      	orrs	r3, r2
 8002328:	b21b      	sxth	r3, r3
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200000f0 	.word	0x200000f0

08002338 <MPU6050_GetTemperatureCelsius>:

float MPU6050_GetTemperatureCelsius(void)
{
 8002338:	b590      	push	{r4, r7, lr}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
	int16_t temp;

	temp = MPU6050_GetTemperatureRAW();
 800233e:	f7ff ffdd 	bl	80022fc <MPU6050_GetTemperatureRAW>
 8002342:	4603      	mov	r3, r0
 8002344:	80fb      	strh	r3, [r7, #6]

	return (float)temp / 340 + 36.53;
 8002346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800234a:	ee07 3a90 	vmov	s15, r3
 800234e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002352:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002390 <MPU6050_GetTemperatureCelsius+0x58>
 8002356:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800235a:	ee16 0a90 	vmov	r0, s13
 800235e:	f7fe f89f 	bl	80004a0 <__aeabi_f2d>
 8002362:	a309      	add	r3, pc, #36	; (adr r3, 8002388 <MPU6050_GetTemperatureCelsius+0x50>)
 8002364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002368:	f7fd ff3c 	bl	80001e4 <__adddf3>
 800236c:	4603      	mov	r3, r0
 800236e:	460c      	mov	r4, r1
 8002370:	4618      	mov	r0, r3
 8002372:	4621      	mov	r1, r4
 8002374:	f7fe f974 	bl	8000660 <__aeabi_d2f>
 8002378:	4603      	mov	r3, r0
 800237a:	ee07 3a90 	vmov	s15, r3
}
 800237e:	eeb0 0a67 	vmov.f32	s0, s15
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	bd90      	pop	{r4, r7, pc}
 8002388:	0a3d70a4 	.word	0x0a3d70a4
 800238c:	404243d7 	.word	0x404243d7
 8002390:	43aa0000 	.word	0x43aa0000

08002394 <MPU6050_GetAccelerometerRAW>:
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, 1, tmp, 2, I2C_TIMEOUT);
	return (((int16_t)tmp[0]) << 8) | tmp[1];
}

void MPU6050_GetAccelerometerRAW(int16_t *x, int16_t *y, int16_t *z)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08a      	sub	sp, #40	; 0x28
 8002398:	af04      	add	r7, sp, #16
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
	uint8_t tmp[6];
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, tmp, 6, I2C_TIMEOUT);
 80023a0:	4b16      	ldr	r3, [pc, #88]	; (80023fc <MPU6050_GetAccelerometerRAW+0x68>)
 80023a2:	6818      	ldr	r0, [r3, #0]
 80023a4:	230a      	movs	r3, #10
 80023a6:	9302      	str	r3, [sp, #8]
 80023a8:	2306      	movs	r3, #6
 80023aa:	9301      	str	r3, [sp, #4]
 80023ac:	f107 0310 	add.w	r3, r7, #16
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	2301      	movs	r3, #1
 80023b4:	223b      	movs	r2, #59	; 0x3b
 80023b6:	21d0      	movs	r1, #208	; 0xd0
 80023b8:	f001 fa5e 	bl	8003878 <HAL_I2C_Mem_Read>

	*x = (((int16_t)tmp[0]) << 8) | tmp[1];
 80023bc:	7c3b      	ldrb	r3, [r7, #16]
 80023be:	021b      	lsls	r3, r3, #8
 80023c0:	b21a      	sxth	r2, r3
 80023c2:	7c7b      	ldrb	r3, [r7, #17]
 80023c4:	b21b      	sxth	r3, r3
 80023c6:	4313      	orrs	r3, r2
 80023c8:	b21a      	sxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	801a      	strh	r2, [r3, #0]
	*y = (((int16_t)tmp[2]) << 8) | tmp[3];
 80023ce:	7cbb      	ldrb	r3, [r7, #18]
 80023d0:	021b      	lsls	r3, r3, #8
 80023d2:	b21a      	sxth	r2, r3
 80023d4:	7cfb      	ldrb	r3, [r7, #19]
 80023d6:	b21b      	sxth	r3, r3
 80023d8:	4313      	orrs	r3, r2
 80023da:	b21a      	sxth	r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	801a      	strh	r2, [r3, #0]
	*z = (((int16_t)tmp[4]) << 8) | tmp[5];
 80023e0:	7d3b      	ldrb	r3, [r7, #20]
 80023e2:	021b      	lsls	r3, r3, #8
 80023e4:	b21a      	sxth	r2, r3
 80023e6:	7d7b      	ldrb	r3, [r7, #21]
 80023e8:	b21b      	sxth	r3, r3
 80023ea:	4313      	orrs	r3, r2
 80023ec:	b21a      	sxth	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	801a      	strh	r2, [r3, #0]
}
 80023f2:	bf00      	nop
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	200000f0 	.word	0x200000f0

08002400 <MPU6050_GetAccelerometerScaled>:

void MPU6050_GetAccelerometerScaled(float* x, float* y, float* z)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
	int16_t tmp_x, tmp_y, tmp_z;
	MPU6050_GetAccelerometerRAW(&tmp_x, &tmp_y, &tmp_z);
 800240c:	f107 0212 	add.w	r2, r7, #18
 8002410:	f107 0114 	add.w	r1, r7, #20
 8002414:	f107 0316 	add.w	r3, r7, #22
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ffbb 	bl	8002394 <MPU6050_GetAccelerometerRAW>

	*x = (float)tmp_x * Acc_Scale;
 800241e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002422:	ee07 3a90 	vmov	s15, r3
 8002426:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800242a:	4b14      	ldr	r3, [pc, #80]	; (800247c <MPU6050_GetAccelerometerScaled+0x7c>)
 800242c:	edd3 7a00 	vldr	s15, [r3]
 8002430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	edc3 7a00 	vstr	s15, [r3]
	*y = (float)tmp_y * Acc_Scale;
 800243a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800243e:	ee07 3a90 	vmov	s15, r3
 8002442:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002446:	4b0d      	ldr	r3, [pc, #52]	; (800247c <MPU6050_GetAccelerometerScaled+0x7c>)
 8002448:	edd3 7a00 	vldr	s15, [r3]
 800244c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	edc3 7a00 	vstr	s15, [r3]
	*z = (float)tmp_z * Acc_Scale;
 8002456:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <MPU6050_GetAccelerometerScaled+0x7c>)
 8002464:	edd3 7a00 	vldr	s15, [r3]
 8002468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	edc3 7a00 	vstr	s15, [r3]
}
 8002472:	bf00      	nop
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	200000e8 	.word	0x200000e8

08002480 <MPU6050_GetGyroscopeRAW>:
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, 1, tmp, 2, I2C_TIMEOUT);
	return (((int16_t)tmp[0]) << 8) | tmp[1];
}

void MPU6050_GetGyroscopeRAW(int16_t *x, int16_t *y, int16_t *z)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08a      	sub	sp, #40	; 0x28
 8002484:	af04      	add	r7, sp, #16
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
	uint8_t tmp[6];
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 1, tmp, 6, I2C_TIMEOUT);
 800248c:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <MPU6050_GetGyroscopeRAW+0x68>)
 800248e:	6818      	ldr	r0, [r3, #0]
 8002490:	230a      	movs	r3, #10
 8002492:	9302      	str	r3, [sp, #8]
 8002494:	2306      	movs	r3, #6
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	f107 0310 	add.w	r3, r7, #16
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	2301      	movs	r3, #1
 80024a0:	2243      	movs	r2, #67	; 0x43
 80024a2:	21d0      	movs	r1, #208	; 0xd0
 80024a4:	f001 f9e8 	bl	8003878 <HAL_I2C_Mem_Read>

	*x = (((int16_t)tmp[0]) << 8) | tmp[1];
 80024a8:	7c3b      	ldrb	r3, [r7, #16]
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	b21a      	sxth	r2, r3
 80024ae:	7c7b      	ldrb	r3, [r7, #17]
 80024b0:	b21b      	sxth	r3, r3
 80024b2:	4313      	orrs	r3, r2
 80024b4:	b21a      	sxth	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	801a      	strh	r2, [r3, #0]
	*y = (((int16_t)tmp[2]) << 8) | tmp[3];
 80024ba:	7cbb      	ldrb	r3, [r7, #18]
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	b21a      	sxth	r2, r3
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	b21b      	sxth	r3, r3
 80024c4:	4313      	orrs	r3, r2
 80024c6:	b21a      	sxth	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	801a      	strh	r2, [r3, #0]
	*z = (((int16_t)tmp[4]) << 8) | tmp[5];
 80024cc:	7d3b      	ldrb	r3, [r7, #20]
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	b21a      	sxth	r2, r3
 80024d2:	7d7b      	ldrb	r3, [r7, #21]
 80024d4:	b21b      	sxth	r3, r3
 80024d6:	4313      	orrs	r3, r2
 80024d8:	b21a      	sxth	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	801a      	strh	r2, [r3, #0]
}
 80024de:	bf00      	nop
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	200000f0 	.word	0x200000f0

080024ec <MPU6050_GetGyroscopeScaled>:

void MPU6050_GetGyroscopeScaled(float* x, float* y, float* z)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
	int16_t tmp_x, tmp_y, tmp_z;

	MPU6050_GetGyroscopeRAW(&tmp_x, &tmp_y, &tmp_z);
 80024f8:	f107 0212 	add.w	r2, r7, #18
 80024fc:	f107 0114 	add.w	r1, r7, #20
 8002500:	f107 0316 	add.w	r3, r7, #22
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ffbb 	bl	8002480 <MPU6050_GetGyroscopeRAW>

	*x = (float)tmp_x * Gyr_Scale;
 800250a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800250e:	ee07 3a90 	vmov	s15, r3
 8002512:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002516:	4b14      	ldr	r3, [pc, #80]	; (8002568 <MPU6050_GetGyroscopeScaled+0x7c>)
 8002518:	edd3 7a00 	vldr	s15, [r3]
 800251c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	edc3 7a00 	vstr	s15, [r3]
	*y = (float)tmp_y * Gyr_Scale;
 8002526:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800252a:	ee07 3a90 	vmov	s15, r3
 800252e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002532:	4b0d      	ldr	r3, [pc, #52]	; (8002568 <MPU6050_GetGyroscopeScaled+0x7c>)
 8002534:	edd3 7a00 	vldr	s15, [r3]
 8002538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	edc3 7a00 	vstr	s15, [r3]
	*z = (float)tmp_z * Gyr_Scale;
 8002542:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002546:	ee07 3a90 	vmov	s15, r3
 800254a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <MPU6050_GetGyroscopeScaled+0x7c>)
 8002550:	edd3 7a00 	vldr	s15, [r3]
 8002554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	edc3 7a00 	vstr	s15, [r3]
}
 800255e:	bf00      	nop
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	200000ec 	.word	0x200000ec

0800256c <MPU6050_SetInterruptMode>:

//
//	Setting INT pin
//
void MPU6050_SetInterruptMode(uint8_t Mode)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b088      	sub	sp, #32
 8002570:	af04      	add	r7, sp, #16
 8002572:	4603      	mov	r3, r0
 8002574:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8002576:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <MPU6050_SetInterruptMode+0x68>)
 8002578:	6818      	ldr	r0, [r3, #0]
 800257a:	230a      	movs	r3, #10
 800257c:	9302      	str	r3, [sp, #8]
 800257e:	2301      	movs	r3, #1
 8002580:	9301      	str	r3, [sp, #4]
 8002582:	f107 030f 	add.w	r3, r7, #15
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	2301      	movs	r3, #1
 800258a:	2237      	movs	r2, #55	; 0x37
 800258c:	21d0      	movs	r1, #208	; 0xd0
 800258e:	f001 f973 	bl	8003878 <HAL_I2C_Mem_Read>
	tmp &= ~(1 << MPU6050_INTCFG_INT_LEVEL_BIT);
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002598:	b2db      	uxtb	r3, r3
 800259a:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Mode & 0x1) << MPU6050_INTCFG_INT_LEVEL_BIT);
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	01db      	lsls	r3, r3, #7
 80025a0:	b25a      	sxtb	r2, r3
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	b25b      	sxtb	r3, r3
 80025a6:	4313      	orrs	r3, r2
 80025a8:	b25b      	sxtb	r3, r3
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 80025ae:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <MPU6050_SetInterruptMode+0x68>)
 80025b0:	6818      	ldr	r0, [r3, #0]
 80025b2:	230a      	movs	r3, #10
 80025b4:	9302      	str	r3, [sp, #8]
 80025b6:	2301      	movs	r3, #1
 80025b8:	9301      	str	r3, [sp, #4]
 80025ba:	f107 030f 	add.w	r3, r7, #15
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	2301      	movs	r3, #1
 80025c2:	2237      	movs	r2, #55	; 0x37
 80025c4:	21d0      	movs	r1, #208	; 0xd0
 80025c6:	f001 f85d 	bl	8003684 <HAL_I2C_Mem_Write>
}
 80025ca:	bf00      	nop
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	200000f0 	.word	0x200000f0

080025d8 <MPU6050_SetInterruptDrive>:

void MPU6050_SetInterruptDrive(uint8_t Drive)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b088      	sub	sp, #32
 80025dc:	af04      	add	r7, sp, #16
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 80025e2:	4b18      	ldr	r3, [pc, #96]	; (8002644 <MPU6050_SetInterruptDrive+0x6c>)
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	230a      	movs	r3, #10
 80025e8:	9302      	str	r3, [sp, #8]
 80025ea:	2301      	movs	r3, #1
 80025ec:	9301      	str	r3, [sp, #4]
 80025ee:	f107 030f 	add.w	r3, r7, #15
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	2301      	movs	r3, #1
 80025f6:	2237      	movs	r2, #55	; 0x37
 80025f8:	21d0      	movs	r1, #208	; 0xd0
 80025fa:	f001 f93d 	bl	8003878 <HAL_I2C_Mem_Read>
	tmp &= ~(1 << MPU6050_INTCFG_INT_OPEN_BIT);
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002604:	b2db      	uxtb	r3, r3
 8002606:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Drive & 0x1) << MPU6050_INTCFG_INT_OPEN_BIT);
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	019b      	lsls	r3, r3, #6
 800260c:	b25b      	sxtb	r3, r3
 800260e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002612:	b25a      	sxtb	r2, r3
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	b25b      	sxtb	r3, r3
 8002618:	4313      	orrs	r3, r2
 800261a:	b25b      	sxtb	r3, r3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8002620:	4b08      	ldr	r3, [pc, #32]	; (8002644 <MPU6050_SetInterruptDrive+0x6c>)
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	230a      	movs	r3, #10
 8002626:	9302      	str	r3, [sp, #8]
 8002628:	2301      	movs	r3, #1
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	f107 030f 	add.w	r3, r7, #15
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	2301      	movs	r3, #1
 8002634:	2237      	movs	r2, #55	; 0x37
 8002636:	21d0      	movs	r1, #208	; 0xd0
 8002638:	f001 f824 	bl	8003684 <HAL_I2C_Mem_Write>
}
 800263c:	bf00      	nop
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	200000f0 	.word	0x200000f0

08002648 <MPU6050_SetInterruptLatch>:

void MPU6050_SetInterruptLatch(uint8_t Latch)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af04      	add	r7, sp, #16
 800264e:	4603      	mov	r3, r0
 8002650:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8002652:	4b18      	ldr	r3, [pc, #96]	; (80026b4 <MPU6050_SetInterruptLatch+0x6c>)
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	230a      	movs	r3, #10
 8002658:	9302      	str	r3, [sp, #8]
 800265a:	2301      	movs	r3, #1
 800265c:	9301      	str	r3, [sp, #4]
 800265e:	f107 030f 	add.w	r3, r7, #15
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	2301      	movs	r3, #1
 8002666:	2237      	movs	r2, #55	; 0x37
 8002668:	21d0      	movs	r1, #208	; 0xd0
 800266a:	f001 f905 	bl	8003878 <HAL_I2C_Mem_Read>
	tmp &= ~(1 << MPU6050_INTCFG_INT_RD_CLEAR_BIT);
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	f023 0310 	bic.w	r3, r3, #16
 8002674:	b2db      	uxtb	r3, r3
 8002676:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Latch & 0x1) << MPU6050_INTCFG_INT_RD_CLEAR_BIT);
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	b25b      	sxtb	r3, r3
 800267e:	f003 0310 	and.w	r3, r3, #16
 8002682:	b25a      	sxtb	r2, r3
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	b25b      	sxtb	r3, r3
 8002688:	4313      	orrs	r3, r2
 800268a:	b25b      	sxtb	r3, r3
 800268c:	b2db      	uxtb	r3, r3
 800268e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <MPU6050_SetInterruptLatch+0x6c>)
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	230a      	movs	r3, #10
 8002696:	9302      	str	r3, [sp, #8]
 8002698:	2301      	movs	r3, #1
 800269a:	9301      	str	r3, [sp, #4]
 800269c:	f107 030f 	add.w	r3, r7, #15
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	2301      	movs	r3, #1
 80026a4:	2237      	movs	r2, #55	; 0x37
 80026a6:	21d0      	movs	r1, #208	; 0xd0
 80026a8:	f000 ffec 	bl	8003684 <HAL_I2C_Mem_Write>
}
 80026ac:	bf00      	nop
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	200000f0 	.word	0x200000f0

080026b8 <MPU6050_SetInterruptLatchClear>:

void MPU6050_SetInterruptLatchClear(uint8_t Clear)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af04      	add	r7, sp, #16
 80026be:	4603      	mov	r3, r0
 80026c0:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 80026c2:	4b18      	ldr	r3, [pc, #96]	; (8002724 <MPU6050_SetInterruptLatchClear+0x6c>)
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	230a      	movs	r3, #10
 80026c8:	9302      	str	r3, [sp, #8]
 80026ca:	2301      	movs	r3, #1
 80026cc:	9301      	str	r3, [sp, #4]
 80026ce:	f107 030f 	add.w	r3, r7, #15
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	2301      	movs	r3, #1
 80026d6:	2237      	movs	r2, #55	; 0x37
 80026d8:	21d0      	movs	r1, #208	; 0xd0
 80026da:	f001 f8cd 	bl	8003878 <HAL_I2C_Mem_Read>
	tmp &= ~(1 << MPU6050_INTCFG_LATCH_INT_EN_BIT);
 80026de:	7bfb      	ldrb	r3, [r7, #15]
 80026e0:	f023 0320 	bic.w	r3, r3, #32
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Clear & 0x1) << MPU6050_INTCFG_LATCH_INT_EN_BIT);
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	015b      	lsls	r3, r3, #5
 80026ec:	b25b      	sxtb	r3, r3
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	b25a      	sxtb	r2, r3
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
 80026f6:	b25b      	sxtb	r3, r3
 80026f8:	4313      	orrs	r3, r2
 80026fa:	b25b      	sxtb	r3, r3
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8002700:	4b08      	ldr	r3, [pc, #32]	; (8002724 <MPU6050_SetInterruptLatchClear+0x6c>)
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	230a      	movs	r3, #10
 8002706:	9302      	str	r3, [sp, #8]
 8002708:	2301      	movs	r3, #1
 800270a:	9301      	str	r3, [sp, #4]
 800270c:	f107 030f 	add.w	r3, r7, #15
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	2301      	movs	r3, #1
 8002714:	2237      	movs	r2, #55	; 0x37
 8002716:	21d0      	movs	r1, #208	; 0xd0
 8002718:	f000 ffb4 	bl	8003684 <HAL_I2C_Mem_Write>
}
 800271c:	bf00      	nop
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	200000f0 	.word	0x200000f0

08002728 <MPU6050_SetIntEnableRegister>:

void MPU6050_SetIntEnableRegister(uint8_t Value)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af04      	add	r7, sp, #16
 800272e:	4603      	mov	r3, r0
 8002730:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &Value, 1, I2C_TIMEOUT);
 8002732:	4b08      	ldr	r3, [pc, #32]	; (8002754 <MPU6050_SetIntEnableRegister+0x2c>)
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	230a      	movs	r3, #10
 8002738:	9302      	str	r3, [sp, #8]
 800273a:	2301      	movs	r3, #1
 800273c:	9301      	str	r3, [sp, #4]
 800273e:	1dfb      	adds	r3, r7, #7
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	2301      	movs	r3, #1
 8002744:	2238      	movs	r2, #56	; 0x38
 8002746:	21d0      	movs	r1, #208	; 0xd0
 8002748:	f000 ff9c 	bl	8003684 <HAL_I2C_Mem_Write>
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	200000f0 	.word	0x200000f0

08002758 <MPU6050_Init>:

//
//	Initialization
//
void MPU6050_Init(I2C_HandleTypeDef *hi2c)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
	i2c = hi2c;
 8002760:	4a0c      	ldr	r2, [pc, #48]	; (8002794 <MPU6050_Init+0x3c>)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6013      	str	r3, [r2, #0]
	MPU6050_DeviceReset(1);
 8002766:	2001      	movs	r0, #1
 8002768:	f7ff fc5e 	bl	8002028 <MPU6050_DeviceReset>
    MPU6050_SetSleepEnabled(0);
 800276c:	2000      	movs	r0, #0
 800276e:	f7ff fc91 	bl	8002094 <MPU6050_SetSleepEnabled>
    MPU6050_SetClockSource(MPU6050_CLOCK_INTERNAL);
 8002772:	2000      	movs	r0, #0
 8002774:	f7ff fcc6 	bl	8002104 <MPU6050_SetClockSource>
    MPU6050_SetDlpf(MPU6050_DLPF_BW_20);
 8002778:	2004      	movs	r0, #4
 800277a:	f7ff fc1d 	bl	8001fb8 <MPU6050_SetDlpf>
    MPU6050_SetFullScaleGyroRange(MPU6050_GYRO_FS_500);
 800277e:	2001      	movs	r0, #1
 8002780:	f7ff fcf8 	bl	8002174 <MPU6050_SetFullScaleGyroRange>
    MPU6050_SetFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 8002784:	2000      	movs	r0, #0
 8002786:	f7ff fd57 	bl	8002238 <MPU6050_SetFullScaleAccelRange>

}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	200000f0 	.word	0x200000f0

08002798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	607b      	str	r3, [r7, #4]
 80027a2:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <HAL_MspInit+0x4c>)
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	4a0f      	ldr	r2, [pc, #60]	; (80027e4 <HAL_MspInit+0x4c>)
 80027a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027ac:	6453      	str	r3, [r2, #68]	; 0x44
 80027ae:	4b0d      	ldr	r3, [pc, #52]	; (80027e4 <HAL_MspInit+0x4c>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027b6:	607b      	str	r3, [r7, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	603b      	str	r3, [r7, #0]
 80027be:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_MspInit+0x4c>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	4a08      	ldr	r2, [pc, #32]	; (80027e4 <HAL_MspInit+0x4c>)
 80027c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_MspInit+0x4c>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d2:	603b      	str	r3, [r7, #0]
 80027d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80027d6:	2007      	movs	r0, #7
 80027d8:	f000 fc4c 	bl	8003074 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027dc:	bf00      	nop
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40023800 	.word	0x40023800

080027e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027f6:	b480      	push	{r7}
 80027f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027fa:	e7fe      	b.n	80027fa <HardFault_Handler+0x4>

080027fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002800:	e7fe      	b.n	8002800 <MemManage_Handler+0x4>

08002802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002802:	b480      	push	{r7}
 8002804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002806:	e7fe      	b.n	8002806 <BusFault_Handler+0x4>

08002808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800280c:	e7fe      	b.n	800280c <UsageFault_Handler+0x4>

0800280e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800280e:	b480      	push	{r7}
 8002810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800282a:	b480      	push	{r7}
 800282c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800283c:	f000 fb26 	bl	8002e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002840:	bf00      	nop
 8002842:	bd80      	pop	{r7, pc}

08002844 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002848:	4b08      	ldr	r3, [pc, #32]	; (800286c <SystemInit+0x28>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284e:	4a07      	ldr	r2, [pc, #28]	; (800286c <SystemInit+0x28>)
 8002850:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002854:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <SystemInit+0x28>)
 800285a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800285e:	609a      	str	r2, [r3, #8]
#endif
}
 8002860:	bf00      	nop
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08c      	sub	sp, #48	; 0x30
 8002874:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002876:	f107 030c 	add.w	r3, r7, #12
 800287a:	2224      	movs	r2, #36	; 0x24
 800287c:	2100      	movs	r1, #0
 800287e:	4618      	mov	r0, r3
 8002880:	f003 fbdc 	bl	800603c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002884:	1d3b      	adds	r3, r7, #4
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800288c:	4b21      	ldr	r3, [pc, #132]	; (8002914 <MX_TIM2_Init+0xa4>)
 800288e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002892:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002894:	4b1f      	ldr	r3, [pc, #124]	; (8002914 <MX_TIM2_Init+0xa4>)
 8002896:	2200      	movs	r2, #0
 8002898:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800289a:	4b1e      	ldr	r3, [pc, #120]	; (8002914 <MX_TIM2_Init+0xa4>)
 800289c:	2200      	movs	r2, #0
 800289e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80028a0:	4b1c      	ldr	r3, [pc, #112]	; (8002914 <MX_TIM2_Init+0xa4>)
 80028a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028a8:	4b1a      	ldr	r3, [pc, #104]	; (8002914 <MX_TIM2_Init+0xa4>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ae:	4b19      	ldr	r3, [pc, #100]	; (8002914 <MX_TIM2_Init+0xa4>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80028b4:	2303      	movs	r3, #3
 80028b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80028b8:	2302      	movs	r3, #2
 80028ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80028bc:	2301      	movs	r3, #1
 80028be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80028c4:	230f      	movs	r3, #15
 80028c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80028c8:	2300      	movs	r3, #0
 80028ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80028cc:	2301      	movs	r3, #1
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80028d0:	2300      	movs	r3, #0
 80028d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80028d4:	230f      	movs	r3, #15
 80028d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80028d8:	f107 030c 	add.w	r3, r7, #12
 80028dc:	4619      	mov	r1, r3
 80028de:	480d      	ldr	r0, [pc, #52]	; (8002914 <MX_TIM2_Init+0xa4>)
 80028e0:	f002 fa3c 	bl	8004d5c <HAL_TIM_Encoder_Init>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80028ea:	f7ff faf7 	bl	8001edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028ee:	2300      	movs	r3, #0
 80028f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028f2:	2300      	movs	r3, #0
 80028f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028f6:	1d3b      	adds	r3, r7, #4
 80028f8:	4619      	mov	r1, r3
 80028fa:	4806      	ldr	r0, [pc, #24]	; (8002914 <MX_TIM2_Init+0xa4>)
 80028fc:	f002 ff42 	bl	8005784 <HAL_TIMEx_MasterConfigSynchronization>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002906:	f7ff fae9 	bl	8001edc <Error_Handler>
  }

}
 800290a:	bf00      	nop
 800290c:	3730      	adds	r7, #48	; 0x30
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20000174 	.word	0x20000174

08002918 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08e      	sub	sp, #56	; 0x38
 800291c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800291e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]
 8002928:	609a      	str	r2, [r3, #8]
 800292a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800292c:	f107 0320 	add.w	r3, r7, #32
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002936:	1d3b      	adds	r3, r7, #4
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	611a      	str	r2, [r3, #16]
 8002944:	615a      	str	r2, [r3, #20]
 8002946:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8002948:	4b32      	ldr	r3, [pc, #200]	; (8002a14 <MX_TIM3_Init+0xfc>)
 800294a:	4a33      	ldr	r2, [pc, #204]	; (8002a18 <MX_TIM3_Init+0x100>)
 800294c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 800294e:	4b31      	ldr	r3, [pc, #196]	; (8002a14 <MX_TIM3_Init+0xfc>)
 8002950:	2254      	movs	r2, #84	; 0x54
 8002952:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002954:	4b2f      	ldr	r3, [pc, #188]	; (8002a14 <MX_TIM3_Init+0xfc>)
 8002956:	2200      	movs	r2, #0
 8002958:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800295a:	4b2e      	ldr	r3, [pc, #184]	; (8002a14 <MX_TIM3_Init+0xfc>)
 800295c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002960:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002962:	4b2c      	ldr	r3, [pc, #176]	; (8002a14 <MX_TIM3_Init+0xfc>)
 8002964:	2200      	movs	r2, #0
 8002966:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002968:	4b2a      	ldr	r3, [pc, #168]	; (8002a14 <MX_TIM3_Init+0xfc>)
 800296a:	2200      	movs	r2, #0
 800296c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800296e:	4829      	ldr	r0, [pc, #164]	; (8002a14 <MX_TIM3_Init+0xfc>)
 8002970:	f002 f962 	bl	8004c38 <HAL_TIM_Base_Init>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800297a:	f7ff faaf 	bl	8001edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800297e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002984:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002988:	4619      	mov	r1, r3
 800298a:	4822      	ldr	r0, [pc, #136]	; (8002a14 <MX_TIM3_Init+0xfc>)
 800298c:	f002 fb76 	bl	800507c <HAL_TIM_ConfigClockSource>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002996:	f7ff faa1 	bl	8001edc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800299a:	481e      	ldr	r0, [pc, #120]	; (8002a14 <MX_TIM3_Init+0xfc>)
 800299c:	f002 f977 	bl	8004c8e <HAL_TIM_PWM_Init>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80029a6:	f7ff fa99 	bl	8001edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029aa:	2300      	movs	r3, #0
 80029ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029b2:	f107 0320 	add.w	r3, r7, #32
 80029b6:	4619      	mov	r1, r3
 80029b8:	4816      	ldr	r0, [pc, #88]	; (8002a14 <MX_TIM3_Init+0xfc>)
 80029ba:	f002 fee3 	bl	8005784 <HAL_TIMEx_MasterConfigSynchronization>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80029c4:	f7ff fa8a 	bl	8001edc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029c8:	2360      	movs	r3, #96	; 0x60
 80029ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029d8:	1d3b      	adds	r3, r7, #4
 80029da:	2200      	movs	r2, #0
 80029dc:	4619      	mov	r1, r3
 80029de:	480d      	ldr	r0, [pc, #52]	; (8002a14 <MX_TIM3_Init+0xfc>)
 80029e0:	f002 fa86 	bl	8004ef0 <HAL_TIM_PWM_ConfigChannel>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80029ea:	f7ff fa77 	bl	8001edc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029ee:	1d3b      	adds	r3, r7, #4
 80029f0:	2208      	movs	r2, #8
 80029f2:	4619      	mov	r1, r3
 80029f4:	4807      	ldr	r0, [pc, #28]	; (8002a14 <MX_TIM3_Init+0xfc>)
 80029f6:	f002 fa7b 	bl	8004ef0 <HAL_TIM_PWM_ConfigChannel>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002a00:	f7ff fa6c 	bl	8001edc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8002a04:	4803      	ldr	r0, [pc, #12]	; (8002a14 <MX_TIM3_Init+0xfc>)
 8002a06:	f000 f919 	bl	8002c3c <HAL_TIM_MspPostInit>

}
 8002a0a:	bf00      	nop
 8002a0c:	3738      	adds	r7, #56	; 0x38
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20000134 	.word	0x20000134
 8002a18:	40000400 	.word	0x40000400

08002a1c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08c      	sub	sp, #48	; 0x30
 8002a20:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a22:	f107 030c 	add.w	r3, r7, #12
 8002a26:	2224      	movs	r2, #36	; 0x24
 8002a28:	2100      	movs	r1, #0
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f003 fb06 	bl	800603c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a30:	1d3b      	adds	r3, r7, #4
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8002a38:	4b20      	ldr	r3, [pc, #128]	; (8002abc <MX_TIM4_Init+0xa0>)
 8002a3a:	4a21      	ldr	r2, [pc, #132]	; (8002ac0 <MX_TIM4_Init+0xa4>)
 8002a3c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002a3e:	4b1f      	ldr	r3, [pc, #124]	; (8002abc <MX_TIM4_Init+0xa0>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a44:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <MX_TIM4_Init+0xa0>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002a4a:	4b1c      	ldr	r3, [pc, #112]	; (8002abc <MX_TIM4_Init+0xa0>)
 8002a4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a52:	4b1a      	ldr	r3, [pc, #104]	; (8002abc <MX_TIM4_Init+0xa0>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a58:	4b18      	ldr	r3, [pc, #96]	; (8002abc <MX_TIM4_Init+0xa0>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002a62:	2302      	movs	r3, #2
 8002a64:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a66:	2301      	movs	r3, #1
 8002a68:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002a6e:	230f      	movs	r3, #15
 8002a70:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a72:	2300      	movs	r3, #0
 8002a74:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a76:	2301      	movs	r3, #1
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002a7e:	230f      	movs	r3, #15
 8002a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002a82:	f107 030c 	add.w	r3, r7, #12
 8002a86:	4619      	mov	r1, r3
 8002a88:	480c      	ldr	r0, [pc, #48]	; (8002abc <MX_TIM4_Init+0xa0>)
 8002a8a:	f002 f967 	bl	8004d5c <HAL_TIM_Encoder_Init>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002a94:	f7ff fa22 	bl	8001edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002aa0:	1d3b      	adds	r3, r7, #4
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4805      	ldr	r0, [pc, #20]	; (8002abc <MX_TIM4_Init+0xa0>)
 8002aa6:	f002 fe6d 	bl	8005784 <HAL_TIMEx_MasterConfigSynchronization>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002ab0:	f7ff fa14 	bl	8001edc <Error_Handler>
  }

}
 8002ab4:	bf00      	nop
 8002ab6:	3730      	adds	r7, #48	; 0x30
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	200000f4 	.word	0x200000f4
 8002ac0:	40000800 	.word	0x40000800

08002ac4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08c      	sub	sp, #48	; 0x30
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002acc:	f107 031c 	add.w	r3, r7, #28
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
 8002ada:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae4:	d14b      	bne.n	8002b7e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61bb      	str	r3, [r7, #24]
 8002aea:	4b3f      	ldr	r3, [pc, #252]	; (8002be8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	4a3e      	ldr	r2, [pc, #248]	; (8002be8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6413      	str	r3, [r2, #64]	; 0x40
 8002af6:	4b3c      	ldr	r3, [pc, #240]	; (8002be8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	61bb      	str	r3, [r7, #24]
 8002b00:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	4b38      	ldr	r3, [pc, #224]	; (8002be8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	4a37      	ldr	r2, [pc, #220]	; (8002be8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	6313      	str	r3, [r2, #48]	; 0x30
 8002b12:	4b35      	ldr	r3, [pc, #212]	; (8002be8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	4b31      	ldr	r3, [pc, #196]	; (8002be8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	4a30      	ldr	r2, [pc, #192]	; (8002be8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b28:	f043 0302 	orr.w	r3, r3, #2
 8002b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2e:	4b2e      	ldr	r3, [pc, #184]	; (8002be8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = ENC_L_A_Pin;
 8002b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b40:	2302      	movs	r3, #2
 8002b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_L_A_GPIO_Port, &GPIO_InitStruct);
 8002b50:	f107 031c 	add.w	r3, r7, #28
 8002b54:	4619      	mov	r1, r3
 8002b56:	4825      	ldr	r0, [pc, #148]	; (8002bec <HAL_TIM_Encoder_MspInit+0x128>)
 8002b58:	f000 fac0 	bl	80030dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_L_B_Pin;
 8002b5c:	2308      	movs	r3, #8
 8002b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b60:	2302      	movs	r3, #2
 8002b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_L_B_GPIO_Port, &GPIO_InitStruct);
 8002b70:	f107 031c 	add.w	r3, r7, #28
 8002b74:	4619      	mov	r1, r3
 8002b76:	481e      	ldr	r0, [pc, #120]	; (8002bf0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002b78:	f000 fab0 	bl	80030dc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002b7c:	e030      	b.n	8002be0 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(tim_encoderHandle->Instance==TIM4)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a1c      	ldr	r2, [pc, #112]	; (8002bf4 <HAL_TIM_Encoder_MspInit+0x130>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d12b      	bne.n	8002be0 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	4b16      	ldr	r3, [pc, #88]	; (8002be8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	4a15      	ldr	r2, [pc, #84]	; (8002be8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b92:	f043 0304 	orr.w	r3, r3, #4
 8002b96:	6413      	str	r3, [r2, #64]	; 0x40
 8002b98:	4b13      	ldr	r3, [pc, #76]	; (8002be8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	4a0e      	ldr	r2, [pc, #56]	; (8002be8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002bae:	f043 0302 	orr.w	r3, r3, #2
 8002bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_R_A_Pin|ENC_R_B_Pin;
 8002bc0:	23c0      	movs	r3, #192	; 0xc0
 8002bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd4:	f107 031c 	add.w	r3, r7, #28
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4805      	ldr	r0, [pc, #20]	; (8002bf0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002bdc:	f000 fa7e 	bl	80030dc <HAL_GPIO_Init>
}
 8002be0:	bf00      	nop
 8002be2:	3730      	adds	r7, #48	; 0x30
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40023800 	.word	0x40023800
 8002bec:	40020000 	.word	0x40020000
 8002bf0:	40020400 	.word	0x40020400
 8002bf4:	40000800 	.word	0x40000800

08002bf8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a0b      	ldr	r2, [pc, #44]	; (8002c34 <HAL_TIM_Base_MspInit+0x3c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d10d      	bne.n	8002c26 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <HAL_TIM_Base_MspInit+0x40>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	4a09      	ldr	r2, [pc, #36]	; (8002c38 <HAL_TIM_Base_MspInit+0x40>)
 8002c14:	f043 0302 	orr.w	r3, r3, #2
 8002c18:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1a:	4b07      	ldr	r3, [pc, #28]	; (8002c38 <HAL_TIM_Base_MspInit+0x40>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002c26:	bf00      	nop
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	40000400 	.word	0x40000400
 8002c38:	40023800 	.word	0x40023800

08002c3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	f107 030c 	add.w	r3, r7, #12
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a12      	ldr	r2, [pc, #72]	; (8002ca4 <HAL_TIM_MspPostInit+0x68>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d11e      	bne.n	8002c9c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <HAL_TIM_MspPostInit+0x6c>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	4a10      	ldr	r2, [pc, #64]	; (8002ca8 <HAL_TIM_MspPostInit+0x6c>)
 8002c68:	f043 0304 	orr.w	r3, r3, #4
 8002c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <HAL_TIM_MspPostInit+0x6c>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	f003 0304 	and.w	r3, r3, #4
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = PWML_Pin|PWMR_Pin;
 8002c7a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002c7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c80:	2302      	movs	r3, #2
 8002c82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c90:	f107 030c 	add.w	r3, r7, #12
 8002c94:	4619      	mov	r1, r3
 8002c96:	4805      	ldr	r0, [pc, #20]	; (8002cac <HAL_TIM_MspPostInit+0x70>)
 8002c98:	f000 fa20 	bl	80030dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002c9c:	bf00      	nop
 8002c9e:	3720      	adds	r7, #32
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40000400 	.word	0x40000400
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40020800 	.word	0x40020800

08002cb0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cb6:	4a12      	ldr	r2, [pc, #72]	; (8002d00 <MX_USART2_UART_Init+0x50>)
 8002cb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cba:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cce:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cd6:	220c      	movs	r2, #12
 8002cd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cda:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ce6:	4805      	ldr	r0, [pc, #20]	; (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002ce8:	f002 fdba 	bl	8005860 <HAL_UART_Init>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002cf2:	f7ff f8f3 	bl	8001edc <Error_Handler>
  }

}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	200001b4 	.word	0x200001b4
 8002d00:	40004400 	.word	0x40004400

08002d04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08a      	sub	sp, #40	; 0x28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d0c:	f107 0314 	add.w	r3, r7, #20
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	60da      	str	r2, [r3, #12]
 8002d1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a19      	ldr	r2, [pc, #100]	; (8002d88 <HAL_UART_MspInit+0x84>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d12b      	bne.n	8002d7e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	4b18      	ldr	r3, [pc, #96]	; (8002d8c <HAL_UART_MspInit+0x88>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	4a17      	ldr	r2, [pc, #92]	; (8002d8c <HAL_UART_MspInit+0x88>)
 8002d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d34:	6413      	str	r3, [r2, #64]	; 0x40
 8002d36:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <HAL_UART_MspInit+0x88>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <HAL_UART_MspInit+0x88>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	4a10      	ldr	r2, [pc, #64]	; (8002d8c <HAL_UART_MspInit+0x88>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	6313      	str	r3, [r2, #48]	; 0x30
 8002d52:	4b0e      	ldr	r3, [pc, #56]	; (8002d8c <HAL_UART_MspInit+0x88>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d5e:	230c      	movs	r3, #12
 8002d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d62:	2302      	movs	r3, #2
 8002d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d6e:	2307      	movs	r3, #7
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d72:	f107 0314 	add.w	r3, r7, #20
 8002d76:	4619      	mov	r1, r3
 8002d78:	4805      	ldr	r0, [pc, #20]	; (8002d90 <HAL_UART_MspInit+0x8c>)
 8002d7a:	f000 f9af 	bl	80030dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d7e:	bf00      	nop
 8002d80:	3728      	adds	r7, #40	; 0x28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40004400 	.word	0x40004400
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	40020000 	.word	0x40020000

08002d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dcc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002d98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d9a:	e003      	b.n	8002da4 <LoopCopyDataInit>

08002d9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002d9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002da0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002da2:	3104      	adds	r1, #4

08002da4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002da4:	480b      	ldr	r0, [pc, #44]	; (8002dd4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002da6:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002da8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002daa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002dac:	d3f6      	bcc.n	8002d9c <CopyDataInit>
  ldr  r2, =_sbss
 8002dae:	4a0b      	ldr	r2, [pc, #44]	; (8002ddc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002db0:	e002      	b.n	8002db8 <LoopFillZerobss>

08002db2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002db2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002db4:	f842 3b04 	str.w	r3, [r2], #4

08002db8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002db8:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002dba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002dbc:	d3f9      	bcc.n	8002db2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002dbe:	f7ff fd41 	bl	8002844 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dc2:	f003 f917 	bl	8005ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dc6:	f7fe ff97 	bl	8001cf8 <main>
  bx  lr    
 8002dca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002dcc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002dd0:	0800608c 	.word	0x0800608c
  ldr  r0, =_sdata
 8002dd4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002dd8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002ddc:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002de0:	200001f8 	.word	0x200001f8

08002de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002de4:	e7fe      	b.n	8002de4 <ADC_IRQHandler>
	...

08002de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dec:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <HAL_Init+0x40>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a0d      	ldr	r2, [pc, #52]	; (8002e28 <HAL_Init+0x40>)
 8002df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_Init+0x40>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a0a      	ldr	r2, [pc, #40]	; (8002e28 <HAL_Init+0x40>)
 8002dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e04:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <HAL_Init+0x40>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a07      	ldr	r2, [pc, #28]	; (8002e28 <HAL_Init+0x40>)
 8002e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e10:	2003      	movs	r0, #3
 8002e12:	f000 f92f 	bl	8003074 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e16:	2000      	movs	r0, #0
 8002e18:	f000 f808 	bl	8002e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e1c:	f7ff fcbc 	bl	8002798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40023c00 	.word	0x40023c00

08002e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e34:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <HAL_InitTick+0x54>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <HAL_InitTick+0x58>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 f939 	bl	80030c2 <HAL_SYSTICK_Config>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e00e      	b.n	8002e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b0f      	cmp	r3, #15
 8002e5e:	d80a      	bhi.n	8002e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e60:	2200      	movs	r2, #0
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	f04f 30ff 	mov.w	r0, #4294967295
 8002e68:	f000 f90f 	bl	800308a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e6c:	4a06      	ldr	r2, [pc, #24]	; (8002e88 <HAL_InitTick+0x5c>)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e000      	b.n	8002e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20000000 	.word	0x20000000
 8002e84:	20000008 	.word	0x20000008
 8002e88:	20000004 	.word	0x20000004

08002e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e90:	4b06      	ldr	r3, [pc, #24]	; (8002eac <HAL_IncTick+0x20>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <HAL_IncTick+0x24>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	4a04      	ldr	r2, [pc, #16]	; (8002eb0 <HAL_IncTick+0x24>)
 8002e9e:	6013      	str	r3, [r2, #0]
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	20000008 	.word	0x20000008
 8002eb0:	200001f4 	.word	0x200001f4

08002eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8002eb8:	4b03      	ldr	r3, [pc, #12]	; (8002ec8 <HAL_GetTick+0x14>)
 8002eba:	681b      	ldr	r3, [r3, #0]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	200001f4 	.word	0x200001f4

08002ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ed4:	f7ff ffee 	bl	8002eb4 <HAL_GetTick>
 8002ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee4:	d005      	beq.n	8002ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ee6:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <HAL_Delay+0x40>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4413      	add	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ef2:	bf00      	nop
 8002ef4:	f7ff ffde 	bl	8002eb4 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d8f7      	bhi.n	8002ef4 <HAL_Delay+0x28>
  {
  }
}
 8002f04:	bf00      	nop
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	20000008 	.word	0x20000008

08002f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f20:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <__NVIC_SetPriorityGrouping+0x44>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f42:	4a04      	ldr	r2, [pc, #16]	; (8002f54 <__NVIC_SetPriorityGrouping+0x44>)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	60d3      	str	r3, [r2, #12]
}
 8002f48:	bf00      	nop
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f5c:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <__NVIC_GetPriorityGrouping+0x18>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	0a1b      	lsrs	r3, r3, #8
 8002f62:	f003 0307 	and.w	r3, r3, #7
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	e000ed00 	.word	0xe000ed00

08002f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	6039      	str	r1, [r7, #0]
 8002f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	db0a      	blt.n	8002f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	490c      	ldr	r1, [pc, #48]	; (8002fc0 <__NVIC_SetPriority+0x4c>)
 8002f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f92:	0112      	lsls	r2, r2, #4
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	440b      	add	r3, r1
 8002f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f9c:	e00a      	b.n	8002fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	4908      	ldr	r1, [pc, #32]	; (8002fc4 <__NVIC_SetPriority+0x50>)
 8002fa4:	79fb      	ldrb	r3, [r7, #7]
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	3b04      	subs	r3, #4
 8002fac:	0112      	lsls	r2, r2, #4
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	761a      	strb	r2, [r3, #24]
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	e000e100 	.word	0xe000e100
 8002fc4:	e000ed00 	.word	0xe000ed00

08002fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b089      	sub	sp, #36	; 0x24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f1c3 0307 	rsb	r3, r3, #7
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	bf28      	it	cs
 8002fe6:	2304      	movcs	r3, #4
 8002fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	3304      	adds	r3, #4
 8002fee:	2b06      	cmp	r3, #6
 8002ff0:	d902      	bls.n	8002ff8 <NVIC_EncodePriority+0x30>
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	3b03      	subs	r3, #3
 8002ff6:	e000      	b.n	8002ffa <NVIC_EncodePriority+0x32>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43da      	mvns	r2, r3
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	401a      	ands	r2, r3
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003010:	f04f 31ff 	mov.w	r1, #4294967295
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	fa01 f303 	lsl.w	r3, r1, r3
 800301a:	43d9      	mvns	r1, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003020:	4313      	orrs	r3, r2
         );
}
 8003022:	4618      	mov	r0, r3
 8003024:	3724      	adds	r7, #36	; 0x24
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
	...

08003030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3b01      	subs	r3, #1
 800303c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003040:	d301      	bcc.n	8003046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003042:	2301      	movs	r3, #1
 8003044:	e00f      	b.n	8003066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003046:	4a0a      	ldr	r2, [pc, #40]	; (8003070 <SysTick_Config+0x40>)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3b01      	subs	r3, #1
 800304c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800304e:	210f      	movs	r1, #15
 8003050:	f04f 30ff 	mov.w	r0, #4294967295
 8003054:	f7ff ff8e 	bl	8002f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003058:	4b05      	ldr	r3, [pc, #20]	; (8003070 <SysTick_Config+0x40>)
 800305a:	2200      	movs	r2, #0
 800305c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800305e:	4b04      	ldr	r3, [pc, #16]	; (8003070 <SysTick_Config+0x40>)
 8003060:	2207      	movs	r2, #7
 8003062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	e000e010 	.word	0xe000e010

08003074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7ff ff47 	bl	8002f10 <__NVIC_SetPriorityGrouping>
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800308a:	b580      	push	{r7, lr}
 800308c:	b086      	sub	sp, #24
 800308e:	af00      	add	r7, sp, #0
 8003090:	4603      	mov	r3, r0
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	607a      	str	r2, [r7, #4]
 8003096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800309c:	f7ff ff5c 	bl	8002f58 <__NVIC_GetPriorityGrouping>
 80030a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	68b9      	ldr	r1, [r7, #8]
 80030a6:	6978      	ldr	r0, [r7, #20]
 80030a8:	f7ff ff8e 	bl	8002fc8 <NVIC_EncodePriority>
 80030ac:	4602      	mov	r2, r0
 80030ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030b2:	4611      	mov	r1, r2
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff ff5d 	bl	8002f74 <__NVIC_SetPriority>
}
 80030ba:	bf00      	nop
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b082      	sub	sp, #8
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7ff ffb0 	bl	8003030 <SysTick_Config>
 80030d0:	4603      	mov	r3, r0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
	...

080030dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030dc:	b480      	push	{r7}
 80030de:	b089      	sub	sp, #36	; 0x24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030f2:	2300      	movs	r3, #0
 80030f4:	61fb      	str	r3, [r7, #28]
 80030f6:	e159      	b.n	80033ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030f8:	2201      	movs	r2, #1
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	4013      	ands	r3, r2
 800310a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	429a      	cmp	r2, r3
 8003112:	f040 8148 	bne.w	80033a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d00b      	beq.n	8003136 <HAL_GPIO_Init+0x5a>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d007      	beq.n	8003136 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800312a:	2b11      	cmp	r3, #17
 800312c:	d003      	beq.n	8003136 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b12      	cmp	r3, #18
 8003134:	d130      	bne.n	8003198 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	2203      	movs	r2, #3
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4013      	ands	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4313      	orrs	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800316c:	2201      	movs	r2, #1
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	091b      	lsrs	r3, r3, #4
 8003182:	f003 0201 	and.w	r2, r3, #1
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4313      	orrs	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	2203      	movs	r2, #3
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4313      	orrs	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d003      	beq.n	80031d8 <HAL_GPIO_Init+0xfc>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b12      	cmp	r3, #18
 80031d6:	d123      	bne.n	8003220 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	08da      	lsrs	r2, r3, #3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3208      	adds	r2, #8
 80031e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	220f      	movs	r2, #15
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	08da      	lsrs	r2, r3, #3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3208      	adds	r2, #8
 800321a:	69b9      	ldr	r1, [r7, #24]
 800321c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	2203      	movs	r2, #3
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 0203 	and.w	r2, r3, #3
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 80a2 	beq.w	80033a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	4b56      	ldr	r3, [pc, #344]	; (80033c0 <HAL_GPIO_Init+0x2e4>)
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	4a55      	ldr	r2, [pc, #340]	; (80033c0 <HAL_GPIO_Init+0x2e4>)
 800326c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003270:	6453      	str	r3, [r2, #68]	; 0x44
 8003272:	4b53      	ldr	r3, [pc, #332]	; (80033c0 <HAL_GPIO_Init+0x2e4>)
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800327e:	4a51      	ldr	r2, [pc, #324]	; (80033c4 <HAL_GPIO_Init+0x2e8>)
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	089b      	lsrs	r3, r3, #2
 8003284:	3302      	adds	r3, #2
 8003286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800328a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	220f      	movs	r2, #15
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43db      	mvns	r3, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4013      	ands	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a48      	ldr	r2, [pc, #288]	; (80033c8 <HAL_GPIO_Init+0x2ec>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d019      	beq.n	80032de <HAL_GPIO_Init+0x202>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a47      	ldr	r2, [pc, #284]	; (80033cc <HAL_GPIO_Init+0x2f0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <HAL_GPIO_Init+0x1fe>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a46      	ldr	r2, [pc, #280]	; (80033d0 <HAL_GPIO_Init+0x2f4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00d      	beq.n	80032d6 <HAL_GPIO_Init+0x1fa>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a45      	ldr	r2, [pc, #276]	; (80033d4 <HAL_GPIO_Init+0x2f8>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d007      	beq.n	80032d2 <HAL_GPIO_Init+0x1f6>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a44      	ldr	r2, [pc, #272]	; (80033d8 <HAL_GPIO_Init+0x2fc>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d101      	bne.n	80032ce <HAL_GPIO_Init+0x1f2>
 80032ca:	2304      	movs	r3, #4
 80032cc:	e008      	b.n	80032e0 <HAL_GPIO_Init+0x204>
 80032ce:	2307      	movs	r3, #7
 80032d0:	e006      	b.n	80032e0 <HAL_GPIO_Init+0x204>
 80032d2:	2303      	movs	r3, #3
 80032d4:	e004      	b.n	80032e0 <HAL_GPIO_Init+0x204>
 80032d6:	2302      	movs	r3, #2
 80032d8:	e002      	b.n	80032e0 <HAL_GPIO_Init+0x204>
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <HAL_GPIO_Init+0x204>
 80032de:	2300      	movs	r3, #0
 80032e0:	69fa      	ldr	r2, [r7, #28]
 80032e2:	f002 0203 	and.w	r2, r2, #3
 80032e6:	0092      	lsls	r2, r2, #2
 80032e8:	4093      	lsls	r3, r2
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032f0:	4934      	ldr	r1, [pc, #208]	; (80033c4 <HAL_GPIO_Init+0x2e8>)
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	089b      	lsrs	r3, r3, #2
 80032f6:	3302      	adds	r3, #2
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032fe:	4b37      	ldr	r3, [pc, #220]	; (80033dc <HAL_GPIO_Init+0x300>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	43db      	mvns	r3, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4013      	ands	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003322:	4a2e      	ldr	r2, [pc, #184]	; (80033dc <HAL_GPIO_Init+0x300>)
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003328:	4b2c      	ldr	r3, [pc, #176]	; (80033dc <HAL_GPIO_Init+0x300>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	43db      	mvns	r3, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800334c:	4a23      	ldr	r2, [pc, #140]	; (80033dc <HAL_GPIO_Init+0x300>)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003352:	4b22      	ldr	r3, [pc, #136]	; (80033dc <HAL_GPIO_Init+0x300>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	43db      	mvns	r3, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4013      	ands	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	4313      	orrs	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003376:	4a19      	ldr	r2, [pc, #100]	; (80033dc <HAL_GPIO_Init+0x300>)
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800337c:	4b17      	ldr	r3, [pc, #92]	; (80033dc <HAL_GPIO_Init+0x300>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	43db      	mvns	r3, r3
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4013      	ands	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033a0:	4a0e      	ldr	r2, [pc, #56]	; (80033dc <HAL_GPIO_Init+0x300>)
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	3301      	adds	r3, #1
 80033aa:	61fb      	str	r3, [r7, #28]
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	2b0f      	cmp	r3, #15
 80033b0:	f67f aea2 	bls.w	80030f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033b4:	bf00      	nop
 80033b6:	3724      	adds	r7, #36	; 0x24
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40013800 	.word	0x40013800
 80033c8:	40020000 	.word	0x40020000
 80033cc:	40020400 	.word	0x40020400
 80033d0:	40020800 	.word	0x40020800
 80033d4:	40020c00 	.word	0x40020c00
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40013c00 	.word	0x40013c00

080033e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	807b      	strh	r3, [r7, #2]
 80033ec:	4613      	mov	r3, r2
 80033ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033f0:	787b      	ldrb	r3, [r7, #1]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033f6:	887a      	ldrh	r2, [r7, #2]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033fc:	e003      	b.n	8003406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033fe:	887b      	ldrh	r3, [r7, #2]
 8003400:	041a      	lsls	r2, r3, #16
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	619a      	str	r2, [r3, #24]
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
	...

08003414 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e11f      	b.n	8003666 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d106      	bne.n	8003440 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fe fc14 	bl	8001c68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2224      	movs	r2, #36	; 0x24
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0201 	bic.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003466:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003476:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003478:	f001 fbb6 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 800347c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	4a7b      	ldr	r2, [pc, #492]	; (8003670 <HAL_I2C_Init+0x25c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d807      	bhi.n	8003498 <HAL_I2C_Init+0x84>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4a7a      	ldr	r2, [pc, #488]	; (8003674 <HAL_I2C_Init+0x260>)
 800348c:	4293      	cmp	r3, r2
 800348e:	bf94      	ite	ls
 8003490:	2301      	movls	r3, #1
 8003492:	2300      	movhi	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	e006      	b.n	80034a6 <HAL_I2C_Init+0x92>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4a77      	ldr	r2, [pc, #476]	; (8003678 <HAL_I2C_Init+0x264>)
 800349c:	4293      	cmp	r3, r2
 800349e:	bf94      	ite	ls
 80034a0:	2301      	movls	r3, #1
 80034a2:	2300      	movhi	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e0db      	b.n	8003666 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4a72      	ldr	r2, [pc, #456]	; (800367c <HAL_I2C_Init+0x268>)
 80034b2:	fba2 2303 	umull	r2, r3, r2, r3
 80034b6:	0c9b      	lsrs	r3, r3, #18
 80034b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	4a64      	ldr	r2, [pc, #400]	; (8003670 <HAL_I2C_Init+0x25c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d802      	bhi.n	80034e8 <HAL_I2C_Init+0xd4>
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	3301      	adds	r3, #1
 80034e6:	e009      	b.n	80034fc <HAL_I2C_Init+0xe8>
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034ee:	fb02 f303 	mul.w	r3, r2, r3
 80034f2:	4a63      	ldr	r2, [pc, #396]	; (8003680 <HAL_I2C_Init+0x26c>)
 80034f4:	fba2 2303 	umull	r2, r3, r2, r3
 80034f8:	099b      	lsrs	r3, r3, #6
 80034fa:	3301      	adds	r3, #1
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6812      	ldr	r2, [r2, #0]
 8003500:	430b      	orrs	r3, r1
 8003502:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800350e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	4956      	ldr	r1, [pc, #344]	; (8003670 <HAL_I2C_Init+0x25c>)
 8003518:	428b      	cmp	r3, r1
 800351a:	d80d      	bhi.n	8003538 <HAL_I2C_Init+0x124>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	1e59      	subs	r1, r3, #1
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	fbb1 f3f3 	udiv	r3, r1, r3
 800352a:	3301      	adds	r3, #1
 800352c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003530:	2b04      	cmp	r3, #4
 8003532:	bf38      	it	cc
 8003534:	2304      	movcc	r3, #4
 8003536:	e04f      	b.n	80035d8 <HAL_I2C_Init+0x1c4>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d111      	bne.n	8003564 <HAL_I2C_Init+0x150>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	1e58      	subs	r0, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6859      	ldr	r1, [r3, #4]
 8003548:	460b      	mov	r3, r1
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	440b      	add	r3, r1
 800354e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003552:	3301      	adds	r3, #1
 8003554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003558:	2b00      	cmp	r3, #0
 800355a:	bf0c      	ite	eq
 800355c:	2301      	moveq	r3, #1
 800355e:	2300      	movne	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	e012      	b.n	800358a <HAL_I2C_Init+0x176>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	1e58      	subs	r0, r3, #1
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6859      	ldr	r1, [r3, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	0099      	lsls	r1, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	fbb0 f3f3 	udiv	r3, r0, r3
 800357a:	3301      	adds	r3, #1
 800357c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003580:	2b00      	cmp	r3, #0
 8003582:	bf0c      	ite	eq
 8003584:	2301      	moveq	r3, #1
 8003586:	2300      	movne	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <HAL_I2C_Init+0x17e>
 800358e:	2301      	movs	r3, #1
 8003590:	e022      	b.n	80035d8 <HAL_I2C_Init+0x1c4>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10e      	bne.n	80035b8 <HAL_I2C_Init+0x1a4>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1e58      	subs	r0, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6859      	ldr	r1, [r3, #4]
 80035a2:	460b      	mov	r3, r1
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	440b      	add	r3, r1
 80035a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ac:	3301      	adds	r3, #1
 80035ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035b6:	e00f      	b.n	80035d8 <HAL_I2C_Init+0x1c4>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	1e58      	subs	r0, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6859      	ldr	r1, [r3, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	0099      	lsls	r1, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ce:	3301      	adds	r3, #1
 80035d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	6809      	ldr	r1, [r1, #0]
 80035dc:	4313      	orrs	r3, r2
 80035de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69da      	ldr	r2, [r3, #28]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003606:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6911      	ldr	r1, [r2, #16]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	68d2      	ldr	r2, [r2, #12]
 8003612:	4311      	orrs	r1, r2
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6812      	ldr	r2, [r2, #0]
 8003618:	430b      	orrs	r3, r1
 800361a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	695a      	ldr	r2, [r3, #20]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	000186a0 	.word	0x000186a0
 8003674:	001e847f 	.word	0x001e847f
 8003678:	003d08ff 	.word	0x003d08ff
 800367c:	431bde83 	.word	0x431bde83
 8003680:	10624dd3 	.word	0x10624dd3

08003684 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b088      	sub	sp, #32
 8003688:	af02      	add	r7, sp, #8
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	4608      	mov	r0, r1
 800368e:	4611      	mov	r1, r2
 8003690:	461a      	mov	r2, r3
 8003692:	4603      	mov	r3, r0
 8003694:	817b      	strh	r3, [r7, #10]
 8003696:	460b      	mov	r3, r1
 8003698:	813b      	strh	r3, [r7, #8]
 800369a:	4613      	mov	r3, r2
 800369c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800369e:	f7ff fc09 	bl	8002eb4 <HAL_GetTick>
 80036a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b20      	cmp	r3, #32
 80036ae:	f040 80d9 	bne.w	8003864 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	2319      	movs	r3, #25
 80036b8:	2201      	movs	r2, #1
 80036ba:	496d      	ldr	r1, [pc, #436]	; (8003870 <HAL_I2C_Mem_Write+0x1ec>)
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 fc7b 	bl	8003fb8 <I2C_WaitOnFlagUntilTimeout>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80036c8:	2302      	movs	r3, #2
 80036ca:	e0cc      	b.n	8003866 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <HAL_I2C_Mem_Write+0x56>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e0c5      	b.n	8003866 <HAL_I2C_Mem_Write+0x1e2>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d007      	beq.n	8003700 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800370e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2221      	movs	r2, #33	; 0x21
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2240      	movs	r2, #64	; 0x40
 800371c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6a3a      	ldr	r2, [r7, #32]
 800372a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003730:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003736:	b29a      	uxth	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4a4d      	ldr	r2, [pc, #308]	; (8003874 <HAL_I2C_Mem_Write+0x1f0>)
 8003740:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003742:	88f8      	ldrh	r0, [r7, #6]
 8003744:	893a      	ldrh	r2, [r7, #8]
 8003746:	8979      	ldrh	r1, [r7, #10]
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	9301      	str	r3, [sp, #4]
 800374c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	4603      	mov	r3, r0
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 fab6 	bl	8003cc4 <I2C_RequestMemoryWrite>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d052      	beq.n	8003804 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e081      	b.n	8003866 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 fcfc 	bl	8004164 <I2C_WaitOnTXEFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00d      	beq.n	800378e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	2b04      	cmp	r3, #4
 8003778:	d107      	bne.n	800378a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003788:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e06b      	b.n	8003866 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	781a      	ldrb	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	3b01      	subs	r3, #1
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b04      	cmp	r3, #4
 80037ca:	d11b      	bne.n	8003804 <HAL_I2C_Mem_Write+0x180>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d017      	beq.n	8003804 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	781a      	ldrb	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1aa      	bne.n	8003762 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f000 fce8 	bl	80041e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00d      	beq.n	8003838 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	2b04      	cmp	r3, #4
 8003822:	d107      	bne.n	8003834 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003832:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e016      	b.n	8003866 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003846:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	e000      	b.n	8003866 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003864:	2302      	movs	r3, #2
  }
}
 8003866:	4618      	mov	r0, r3
 8003868:	3718      	adds	r7, #24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	00100002 	.word	0x00100002
 8003874:	ffff0000 	.word	0xffff0000

08003878 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08c      	sub	sp, #48	; 0x30
 800387c:	af02      	add	r7, sp, #8
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	4608      	mov	r0, r1
 8003882:	4611      	mov	r1, r2
 8003884:	461a      	mov	r2, r3
 8003886:	4603      	mov	r3, r0
 8003888:	817b      	strh	r3, [r7, #10]
 800388a:	460b      	mov	r3, r1
 800388c:	813b      	strh	r3, [r7, #8]
 800388e:	4613      	mov	r3, r2
 8003890:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003892:	f7ff fb0f 	bl	8002eb4 <HAL_GetTick>
 8003896:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	f040 8208 	bne.w	8003cb6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	2319      	movs	r3, #25
 80038ac:	2201      	movs	r2, #1
 80038ae:	497b      	ldr	r1, [pc, #492]	; (8003a9c <HAL_I2C_Mem_Read+0x224>)
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 fb81 	bl	8003fb8 <I2C_WaitOnFlagUntilTimeout>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80038bc:	2302      	movs	r3, #2
 80038be:	e1fb      	b.n	8003cb8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d101      	bne.n	80038ce <HAL_I2C_Mem_Read+0x56>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e1f4      	b.n	8003cb8 <HAL_I2C_Mem_Read+0x440>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d007      	beq.n	80038f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003902:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2222      	movs	r2, #34	; 0x22
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2240      	movs	r2, #64	; 0x40
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800391e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003924:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4a5b      	ldr	r2, [pc, #364]	; (8003aa0 <HAL_I2C_Mem_Read+0x228>)
 8003934:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003936:	88f8      	ldrh	r0, [r7, #6]
 8003938:	893a      	ldrh	r2, [r7, #8]
 800393a:	8979      	ldrh	r1, [r7, #10]
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	9301      	str	r3, [sp, #4]
 8003940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	4603      	mov	r3, r0
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 fa50 	bl	8003dec <I2C_RequestMemoryRead>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e1b0      	b.n	8003cb8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395a:	2b00      	cmp	r3, #0
 800395c:	d113      	bne.n	8003986 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800395e:	2300      	movs	r3, #0
 8003960:	623b      	str	r3, [r7, #32]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	623b      	str	r3, [r7, #32]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	623b      	str	r3, [r7, #32]
 8003972:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	e184      	b.n	8003c90 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398a:	2b01      	cmp	r3, #1
 800398c:	d11b      	bne.n	80039c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800399c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	61fb      	str	r3, [r7, #28]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	61fb      	str	r3, [r7, #28]
 80039b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	e164      	b.n	8003c90 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d11b      	bne.n	8003a06 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ee:	2300      	movs	r3, #0
 80039f0:	61bb      	str	r3, [r7, #24]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	61bb      	str	r3, [r7, #24]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	61bb      	str	r3, [r7, #24]
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	e144      	b.n	8003c90 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a06:	2300      	movs	r3, #0
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	617b      	str	r3, [r7, #20]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	617b      	str	r3, [r7, #20]
 8003a1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a1c:	e138      	b.n	8003c90 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	f200 80f1 	bhi.w	8003c0a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d123      	bne.n	8003a78 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 fc17 	bl	8004268 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e139      	b.n	8003cb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a76:	e10b      	b.n	8003c90 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d14e      	bne.n	8003b1e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a86:	2200      	movs	r2, #0
 8003a88:	4906      	ldr	r1, [pc, #24]	; (8003aa4 <HAL_I2C_Mem_Read+0x22c>)
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 fa94 	bl	8003fb8 <I2C_WaitOnFlagUntilTimeout>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d008      	beq.n	8003aa8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e10e      	b.n	8003cb8 <HAL_I2C_Mem_Read+0x440>
 8003a9a:	bf00      	nop
 8003a9c:	00100002 	.word	0x00100002
 8003aa0:	ffff0000 	.word	0xffff0000
 8003aa4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ab6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691a      	ldr	r2, [r3, #16]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b1c:	e0b8      	b.n	8003c90 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b24:	2200      	movs	r2, #0
 8003b26:	4966      	ldr	r1, [pc, #408]	; (8003cc0 <HAL_I2C_Mem_Read+0x448>)
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 fa45 	bl	8003fb8 <I2C_WaitOnFlagUntilTimeout>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e0bf      	b.n	8003cb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691a      	ldr	r2, [r3, #16]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	1c5a      	adds	r2, r3, #1
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b80:	2200      	movs	r2, #0
 8003b82:	494f      	ldr	r1, [pc, #316]	; (8003cc0 <HAL_I2C_Mem_Read+0x448>)
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 fa17 	bl	8003fb8 <I2C_WaitOnFlagUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e091      	b.n	8003cb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691a      	ldr	r2, [r3, #16]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c08:	e042      	b.n	8003c90 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 fb2a 	bl	8004268 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e04c      	b.n	8003cb8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	b2d2      	uxtb	r2, r2
 8003c2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	f003 0304 	and.w	r3, r3, #4
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d118      	bne.n	8003c90 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f47f aec2 	bne.w	8003a1e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	e000      	b.n	8003cb8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003cb6:	2302      	movs	r3, #2
  }
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3728      	adds	r7, #40	; 0x28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	00010004 	.word	0x00010004

08003cc4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b088      	sub	sp, #32
 8003cc8:	af02      	add	r7, sp, #8
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	4608      	mov	r0, r1
 8003cce:	4611      	mov	r1, r2
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	817b      	strh	r3, [r7, #10]
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	813b      	strh	r3, [r7, #8]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 f95c 	bl	8003fb8 <I2C_WaitOnFlagUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00c      	beq.n	8003d20 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e05f      	b.n	8003de0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d20:	897b      	ldrh	r3, [r7, #10]
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	461a      	mov	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d2e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	6a3a      	ldr	r2, [r7, #32]
 8003d34:	492c      	ldr	r1, [pc, #176]	; (8003de8 <I2C_RequestMemoryWrite+0x124>)
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 f995 	bl	8004066 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e04c      	b.n	8003de0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d5e:	6a39      	ldr	r1, [r7, #32]
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 f9ff 	bl	8004164 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00d      	beq.n	8003d88 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d107      	bne.n	8003d84 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e02b      	b.n	8003de0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d88:	88fb      	ldrh	r3, [r7, #6]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d105      	bne.n	8003d9a <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d8e:	893b      	ldrh	r3, [r7, #8]
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	611a      	str	r2, [r3, #16]
 8003d98:	e021      	b.n	8003dde <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d9a:	893b      	ldrh	r3, [r7, #8]
 8003d9c:	0a1b      	lsrs	r3, r3, #8
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003daa:	6a39      	ldr	r1, [r7, #32]
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f9d9 	bl	8004164 <I2C_WaitOnTXEFlagUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00d      	beq.n	8003dd4 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d107      	bne.n	8003dd0 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e005      	b.n	8003de0 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dd4:	893b      	ldrh	r3, [r7, #8]
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	00010002 	.word	0x00010002

08003dec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b088      	sub	sp, #32
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	4608      	mov	r0, r1
 8003df6:	4611      	mov	r1, r2
 8003df8:	461a      	mov	r2, r3
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	817b      	strh	r3, [r7, #10]
 8003dfe:	460b      	mov	r3, r1
 8003e00:	813b      	strh	r3, [r7, #8]
 8003e02:	4613      	mov	r3, r2
 8003e04:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e14:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f8c0 	bl	8003fb8 <I2C_WaitOnFlagUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00c      	beq.n	8003e58 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e0a9      	b.n	8003fac <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e58:	897b      	ldrh	r3, [r7, #10]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e66:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	6a3a      	ldr	r2, [r7, #32]
 8003e6c:	4951      	ldr	r1, [pc, #324]	; (8003fb4 <I2C_RequestMemoryRead+0x1c8>)
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 f8f9 	bl	8004066 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e096      	b.n	8003fac <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	617b      	str	r3, [r7, #20]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	617b      	str	r3, [r7, #20]
 8003e92:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e96:	6a39      	ldr	r1, [r7, #32]
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 f963 	bl	8004164 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00d      	beq.n	8003ec0 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d107      	bne.n	8003ebc <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e075      	b.n	8003fac <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ec0:	88fb      	ldrh	r3, [r7, #6]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d105      	bne.n	8003ed2 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ec6:	893b      	ldrh	r3, [r7, #8]
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	611a      	str	r2, [r3, #16]
 8003ed0:	e021      	b.n	8003f16 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ed2:	893b      	ldrh	r3, [r7, #8]
 8003ed4:	0a1b      	lsrs	r3, r3, #8
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee2:	6a39      	ldr	r1, [r7, #32]
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 f93d 	bl	8004164 <I2C_WaitOnTXEFlagUntilTimeout>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00d      	beq.n	8003f0c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	d107      	bne.n	8003f08 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f06:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e04f      	b.n	8003fac <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f0c:	893b      	ldrh	r3, [r7, #8]
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f18:	6a39      	ldr	r1, [r7, #32]
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f922 	bl	8004164 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00d      	beq.n	8003f42 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d107      	bne.n	8003f3e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e034      	b.n	8003fac <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 f82a 	bl	8003fb8 <I2C_WaitOnFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00c      	beq.n	8003f84 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e013      	b.n	8003fac <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f84:	897b      	ldrh	r3, [r7, #10]
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	6a3a      	ldr	r2, [r7, #32]
 8003f98:	4906      	ldr	r1, [pc, #24]	; (8003fb4 <I2C_RequestMemoryRead+0x1c8>)
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f863 	bl	8004066 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e000      	b.n	8003fac <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	00010002 	.word	0x00010002

08003fb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	603b      	str	r3, [r7, #0]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fc8:	e025      	b.n	8004016 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd0:	d021      	beq.n	8004016 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd2:	f7fe ff6f 	bl	8002eb4 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d302      	bcc.n	8003fe8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d116      	bne.n	8004016 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	f043 0220 	orr.w	r2, r3, #32
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e023      	b.n	800405e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	0c1b      	lsrs	r3, r3, #16
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b01      	cmp	r3, #1
 800401e:	d10d      	bne.n	800403c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	43da      	mvns	r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4013      	ands	r3, r2
 800402c:	b29b      	uxth	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	bf0c      	ite	eq
 8004032:	2301      	moveq	r3, #1
 8004034:	2300      	movne	r3, #0
 8004036:	b2db      	uxtb	r3, r3
 8004038:	461a      	mov	r2, r3
 800403a:	e00c      	b.n	8004056 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	43da      	mvns	r2, r3
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	4013      	ands	r3, r2
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	bf0c      	ite	eq
 800404e:	2301      	moveq	r3, #1
 8004050:	2300      	movne	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	461a      	mov	r2, r3
 8004056:	79fb      	ldrb	r3, [r7, #7]
 8004058:	429a      	cmp	r2, r3
 800405a:	d0b6      	beq.n	8003fca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b084      	sub	sp, #16
 800406a:	af00      	add	r7, sp, #0
 800406c:	60f8      	str	r0, [r7, #12]
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	607a      	str	r2, [r7, #4]
 8004072:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004074:	e051      	b.n	800411a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004084:	d123      	bne.n	80040ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004094:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800409e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	f043 0204 	orr.w	r2, r3, #4
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e046      	b.n	800415c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d4:	d021      	beq.n	800411a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d6:	f7fe feed 	bl	8002eb4 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d302      	bcc.n	80040ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d116      	bne.n	800411a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	f043 0220 	orr.w	r2, r3, #32
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e020      	b.n	800415c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	0c1b      	lsrs	r3, r3, #16
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	d10c      	bne.n	800413e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	43da      	mvns	r2, r3
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	4013      	ands	r3, r2
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	bf14      	ite	ne
 8004136:	2301      	movne	r3, #1
 8004138:	2300      	moveq	r3, #0
 800413a:	b2db      	uxtb	r3, r3
 800413c:	e00b      	b.n	8004156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	43da      	mvns	r2, r3
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	4013      	ands	r3, r2
 800414a:	b29b      	uxth	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	bf14      	ite	ne
 8004150:	2301      	movne	r3, #1
 8004152:	2300      	moveq	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d18d      	bne.n	8004076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004170:	e02d      	b.n	80041ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 f8ce 	bl	8004314 <I2C_IsAcknowledgeFailed>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e02d      	b.n	80041de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004188:	d021      	beq.n	80041ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800418a:	f7fe fe93 	bl	8002eb4 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	429a      	cmp	r2, r3
 8004198:	d302      	bcc.n	80041a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d116      	bne.n	80041ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2220      	movs	r2, #32
 80041aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	f043 0220 	orr.w	r2, r3, #32
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e007      	b.n	80041de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d8:	2b80      	cmp	r3, #128	; 0x80
 80041da:	d1ca      	bne.n	8004172 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b084      	sub	sp, #16
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	60f8      	str	r0, [r7, #12]
 80041ee:	60b9      	str	r1, [r7, #8]
 80041f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041f2:	e02d      	b.n	8004250 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 f88d 	bl	8004314 <I2C_IsAcknowledgeFailed>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e02d      	b.n	8004260 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420a:	d021      	beq.n	8004250 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800420c:	f7fe fe52 	bl	8002eb4 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	429a      	cmp	r2, r3
 800421a:	d302      	bcc.n	8004222 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d116      	bne.n	8004250 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423c:	f043 0220 	orr.w	r2, r3, #32
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e007      	b.n	8004260 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	2b04      	cmp	r3, #4
 800425c:	d1ca      	bne.n	80041f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004274:	e042      	b.n	80042fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	f003 0310 	and.w	r3, r3, #16
 8004280:	2b10      	cmp	r3, #16
 8004282:	d119      	bne.n	80042b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f06f 0210 	mvn.w	r2, #16
 800428c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e029      	b.n	800430c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b8:	f7fe fdfc 	bl	8002eb4 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d302      	bcc.n	80042ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d116      	bne.n	80042fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	f043 0220 	orr.w	r2, r3, #32
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e007      	b.n	800430c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004306:	2b40      	cmp	r3, #64	; 0x40
 8004308:	d1b5      	bne.n	8004276 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800432a:	d11b      	bne.n	8004364 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004334:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004350:	f043 0204 	orr.w	r2, r3, #4
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e000      	b.n	8004366 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
	...

08004374 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e25b      	b.n	800483e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d075      	beq.n	800447e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004392:	4ba3      	ldr	r3, [pc, #652]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 030c 	and.w	r3, r3, #12
 800439a:	2b04      	cmp	r3, #4
 800439c:	d00c      	beq.n	80043b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800439e:	4ba0      	ldr	r3, [pc, #640]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d112      	bne.n	80043d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043aa:	4b9d      	ldr	r3, [pc, #628]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043b6:	d10b      	bne.n	80043d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b8:	4b99      	ldr	r3, [pc, #612]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d05b      	beq.n	800447c <HAL_RCC_OscConfig+0x108>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d157      	bne.n	800447c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e236      	b.n	800483e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d8:	d106      	bne.n	80043e8 <HAL_RCC_OscConfig+0x74>
 80043da:	4b91      	ldr	r3, [pc, #580]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a90      	ldr	r2, [pc, #576]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 80043e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	e01d      	b.n	8004424 <HAL_RCC_OscConfig+0xb0>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043f0:	d10c      	bne.n	800440c <HAL_RCC_OscConfig+0x98>
 80043f2:	4b8b      	ldr	r3, [pc, #556]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a8a      	ldr	r2, [pc, #552]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 80043f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	4b88      	ldr	r3, [pc, #544]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a87      	ldr	r2, [pc, #540]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 8004404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	e00b      	b.n	8004424 <HAL_RCC_OscConfig+0xb0>
 800440c:	4b84      	ldr	r3, [pc, #528]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a83      	ldr	r2, [pc, #524]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 8004412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	4b81      	ldr	r3, [pc, #516]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a80      	ldr	r2, [pc, #512]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 800441e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d013      	beq.n	8004454 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442c:	f7fe fd42 	bl	8002eb4 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004434:	f7fe fd3e 	bl	8002eb4 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b64      	cmp	r3, #100	; 0x64
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e1fb      	b.n	800483e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004446:	4b76      	ldr	r3, [pc, #472]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0f0      	beq.n	8004434 <HAL_RCC_OscConfig+0xc0>
 8004452:	e014      	b.n	800447e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004454:	f7fe fd2e 	bl	8002eb4 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800445c:	f7fe fd2a 	bl	8002eb4 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b64      	cmp	r3, #100	; 0x64
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e1e7      	b.n	800483e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800446e:	4b6c      	ldr	r3, [pc, #432]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f0      	bne.n	800445c <HAL_RCC_OscConfig+0xe8>
 800447a:	e000      	b.n	800447e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800447c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d063      	beq.n	8004552 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800448a:	4b65      	ldr	r3, [pc, #404]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 030c 	and.w	r3, r3, #12
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00b      	beq.n	80044ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004496:	4b62      	ldr	r3, [pc, #392]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800449e:	2b08      	cmp	r3, #8
 80044a0:	d11c      	bne.n	80044dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044a2:	4b5f      	ldr	r3, [pc, #380]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d116      	bne.n	80044dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ae:	4b5c      	ldr	r3, [pc, #368]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d005      	beq.n	80044c6 <HAL_RCC_OscConfig+0x152>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d001      	beq.n	80044c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e1bb      	b.n	800483e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c6:	4b56      	ldr	r3, [pc, #344]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	4952      	ldr	r1, [pc, #328]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044da:	e03a      	b.n	8004552 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d020      	beq.n	8004526 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044e4:	4b4f      	ldr	r3, [pc, #316]	; (8004624 <HAL_RCC_OscConfig+0x2b0>)
 80044e6:	2201      	movs	r2, #1
 80044e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ea:	f7fe fce3 	bl	8002eb4 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044f2:	f7fe fcdf 	bl	8002eb4 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e19c      	b.n	800483e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004504:	4b46      	ldr	r3, [pc, #280]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0f0      	beq.n	80044f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004510:	4b43      	ldr	r3, [pc, #268]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	4940      	ldr	r1, [pc, #256]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 8004520:	4313      	orrs	r3, r2
 8004522:	600b      	str	r3, [r1, #0]
 8004524:	e015      	b.n	8004552 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004526:	4b3f      	ldr	r3, [pc, #252]	; (8004624 <HAL_RCC_OscConfig+0x2b0>)
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fe fcc2 	bl	8002eb4 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004534:	f7fe fcbe 	bl	8002eb4 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e17b      	b.n	800483e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004546:	4b36      	ldr	r3, [pc, #216]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b00      	cmp	r3, #0
 800455c:	d030      	beq.n	80045c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d016      	beq.n	8004594 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004566:	4b30      	ldr	r3, [pc, #192]	; (8004628 <HAL_RCC_OscConfig+0x2b4>)
 8004568:	2201      	movs	r2, #1
 800456a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456c:	f7fe fca2 	bl	8002eb4 <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004574:	f7fe fc9e 	bl	8002eb4 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e15b      	b.n	800483e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004586:	4b26      	ldr	r3, [pc, #152]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 8004588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0f0      	beq.n	8004574 <HAL_RCC_OscConfig+0x200>
 8004592:	e015      	b.n	80045c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004594:	4b24      	ldr	r3, [pc, #144]	; (8004628 <HAL_RCC_OscConfig+0x2b4>)
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800459a:	f7fe fc8b 	bl	8002eb4 <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045a0:	e008      	b.n	80045b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045a2:	f7fe fc87 	bl	8002eb4 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e144      	b.n	800483e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b4:	4b1a      	ldr	r3, [pc, #104]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 80045b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1f0      	bne.n	80045a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 80a0 	beq.w	800470e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ce:	2300      	movs	r3, #0
 80045d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045d2:	4b13      	ldr	r3, [pc, #76]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10f      	bne.n	80045fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045de:	2300      	movs	r3, #0
 80045e0:	60bb      	str	r3, [r7, #8]
 80045e2:	4b0f      	ldr	r3, [pc, #60]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	4a0e      	ldr	r2, [pc, #56]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 80045e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ec:	6413      	str	r3, [r2, #64]	; 0x40
 80045ee:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <HAL_RCC_OscConfig+0x2ac>)
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f6:	60bb      	str	r3, [r7, #8]
 80045f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045fa:	2301      	movs	r3, #1
 80045fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045fe:	4b0b      	ldr	r3, [pc, #44]	; (800462c <HAL_RCC_OscConfig+0x2b8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004606:	2b00      	cmp	r3, #0
 8004608:	d121      	bne.n	800464e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800460a:	4b08      	ldr	r3, [pc, #32]	; (800462c <HAL_RCC_OscConfig+0x2b8>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a07      	ldr	r2, [pc, #28]	; (800462c <HAL_RCC_OscConfig+0x2b8>)
 8004610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004616:	f7fe fc4d 	bl	8002eb4 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800461c:	e011      	b.n	8004642 <HAL_RCC_OscConfig+0x2ce>
 800461e:	bf00      	nop
 8004620:	40023800 	.word	0x40023800
 8004624:	42470000 	.word	0x42470000
 8004628:	42470e80 	.word	0x42470e80
 800462c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004630:	f7fe fc40 	bl	8002eb4 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e0fd      	b.n	800483e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004642:	4b81      	ldr	r3, [pc, #516]	; (8004848 <HAL_RCC_OscConfig+0x4d4>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0f0      	beq.n	8004630 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d106      	bne.n	8004664 <HAL_RCC_OscConfig+0x2f0>
 8004656:	4b7d      	ldr	r3, [pc, #500]	; (800484c <HAL_RCC_OscConfig+0x4d8>)
 8004658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465a:	4a7c      	ldr	r2, [pc, #496]	; (800484c <HAL_RCC_OscConfig+0x4d8>)
 800465c:	f043 0301 	orr.w	r3, r3, #1
 8004660:	6713      	str	r3, [r2, #112]	; 0x70
 8004662:	e01c      	b.n	800469e <HAL_RCC_OscConfig+0x32a>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2b05      	cmp	r3, #5
 800466a:	d10c      	bne.n	8004686 <HAL_RCC_OscConfig+0x312>
 800466c:	4b77      	ldr	r3, [pc, #476]	; (800484c <HAL_RCC_OscConfig+0x4d8>)
 800466e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004670:	4a76      	ldr	r2, [pc, #472]	; (800484c <HAL_RCC_OscConfig+0x4d8>)
 8004672:	f043 0304 	orr.w	r3, r3, #4
 8004676:	6713      	str	r3, [r2, #112]	; 0x70
 8004678:	4b74      	ldr	r3, [pc, #464]	; (800484c <HAL_RCC_OscConfig+0x4d8>)
 800467a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467c:	4a73      	ldr	r2, [pc, #460]	; (800484c <HAL_RCC_OscConfig+0x4d8>)
 800467e:	f043 0301 	orr.w	r3, r3, #1
 8004682:	6713      	str	r3, [r2, #112]	; 0x70
 8004684:	e00b      	b.n	800469e <HAL_RCC_OscConfig+0x32a>
 8004686:	4b71      	ldr	r3, [pc, #452]	; (800484c <HAL_RCC_OscConfig+0x4d8>)
 8004688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468a:	4a70      	ldr	r2, [pc, #448]	; (800484c <HAL_RCC_OscConfig+0x4d8>)
 800468c:	f023 0301 	bic.w	r3, r3, #1
 8004690:	6713      	str	r3, [r2, #112]	; 0x70
 8004692:	4b6e      	ldr	r3, [pc, #440]	; (800484c <HAL_RCC_OscConfig+0x4d8>)
 8004694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004696:	4a6d      	ldr	r2, [pc, #436]	; (800484c <HAL_RCC_OscConfig+0x4d8>)
 8004698:	f023 0304 	bic.w	r3, r3, #4
 800469c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d015      	beq.n	80046d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a6:	f7fe fc05 	bl	8002eb4 <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ac:	e00a      	b.n	80046c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ae:	f7fe fc01 	bl	8002eb4 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046bc:	4293      	cmp	r3, r2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e0bc      	b.n	800483e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c4:	4b61      	ldr	r3, [pc, #388]	; (800484c <HAL_RCC_OscConfig+0x4d8>)
 80046c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0ee      	beq.n	80046ae <HAL_RCC_OscConfig+0x33a>
 80046d0:	e014      	b.n	80046fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046d2:	f7fe fbef 	bl	8002eb4 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046d8:	e00a      	b.n	80046f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046da:	f7fe fbeb 	bl	8002eb4 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e0a6      	b.n	800483e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f0:	4b56      	ldr	r3, [pc, #344]	; (800484c <HAL_RCC_OscConfig+0x4d8>)
 80046f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1ee      	bne.n	80046da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046fc:	7dfb      	ldrb	r3, [r7, #23]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d105      	bne.n	800470e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004702:	4b52      	ldr	r3, [pc, #328]	; (800484c <HAL_RCC_OscConfig+0x4d8>)
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	4a51      	ldr	r2, [pc, #324]	; (800484c <HAL_RCC_OscConfig+0x4d8>)
 8004708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800470c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 8092 	beq.w	800483c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004718:	4b4c      	ldr	r3, [pc, #304]	; (800484c <HAL_RCC_OscConfig+0x4d8>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f003 030c 	and.w	r3, r3, #12
 8004720:	2b08      	cmp	r3, #8
 8004722:	d05c      	beq.n	80047de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	2b02      	cmp	r3, #2
 800472a:	d141      	bne.n	80047b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800472c:	4b48      	ldr	r3, [pc, #288]	; (8004850 <HAL_RCC_OscConfig+0x4dc>)
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004732:	f7fe fbbf 	bl	8002eb4 <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004738:	e008      	b.n	800474c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800473a:	f7fe fbbb 	bl	8002eb4 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e078      	b.n	800483e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800474c:	4b3f      	ldr	r3, [pc, #252]	; (800484c <HAL_RCC_OscConfig+0x4d8>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1f0      	bne.n	800473a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	69da      	ldr	r2, [r3, #28]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	431a      	orrs	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	019b      	lsls	r3, r3, #6
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476e:	085b      	lsrs	r3, r3, #1
 8004770:	3b01      	subs	r3, #1
 8004772:	041b      	lsls	r3, r3, #16
 8004774:	431a      	orrs	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	061b      	lsls	r3, r3, #24
 800477c:	4933      	ldr	r1, [pc, #204]	; (800484c <HAL_RCC_OscConfig+0x4d8>)
 800477e:	4313      	orrs	r3, r2
 8004780:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004782:	4b33      	ldr	r3, [pc, #204]	; (8004850 <HAL_RCC_OscConfig+0x4dc>)
 8004784:	2201      	movs	r2, #1
 8004786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004788:	f7fe fb94 	bl	8002eb4 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004790:	f7fe fb90 	bl	8002eb4 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e04d      	b.n	800483e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047a2:	4b2a      	ldr	r3, [pc, #168]	; (800484c <HAL_RCC_OscConfig+0x4d8>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0f0      	beq.n	8004790 <HAL_RCC_OscConfig+0x41c>
 80047ae:	e045      	b.n	800483c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b0:	4b27      	ldr	r3, [pc, #156]	; (8004850 <HAL_RCC_OscConfig+0x4dc>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b6:	f7fe fb7d 	bl	8002eb4 <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047be:	f7fe fb79 	bl	8002eb4 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e036      	b.n	800483e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d0:	4b1e      	ldr	r3, [pc, #120]	; (800484c <HAL_RCC_OscConfig+0x4d8>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1f0      	bne.n	80047be <HAL_RCC_OscConfig+0x44a>
 80047dc:	e02e      	b.n	800483c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d101      	bne.n	80047ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e029      	b.n	800483e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047ea:	4b18      	ldr	r3, [pc, #96]	; (800484c <HAL_RCC_OscConfig+0x4d8>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d11c      	bne.n	8004838 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004808:	429a      	cmp	r2, r3
 800480a:	d115      	bne.n	8004838 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004812:	4013      	ands	r3, r2
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004818:	4293      	cmp	r3, r2
 800481a:	d10d      	bne.n	8004838 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004826:	429a      	cmp	r2, r3
 8004828:	d106      	bne.n	8004838 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004834:	429a      	cmp	r2, r3
 8004836:	d001      	beq.n	800483c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	40007000 	.word	0x40007000
 800484c:	40023800 	.word	0x40023800
 8004850:	42470060 	.word	0x42470060

08004854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e0cc      	b.n	8004a02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004868:	4b68      	ldr	r3, [pc, #416]	; (8004a0c <HAL_RCC_ClockConfig+0x1b8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 030f 	and.w	r3, r3, #15
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	429a      	cmp	r2, r3
 8004874:	d90c      	bls.n	8004890 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004876:	4b65      	ldr	r3, [pc, #404]	; (8004a0c <HAL_RCC_ClockConfig+0x1b8>)
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800487e:	4b63      	ldr	r3, [pc, #396]	; (8004a0c <HAL_RCC_ClockConfig+0x1b8>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	429a      	cmp	r2, r3
 800488a:	d001      	beq.n	8004890 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e0b8      	b.n	8004a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d020      	beq.n	80048de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d005      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048a8:	4b59      	ldr	r3, [pc, #356]	; (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	4a58      	ldr	r2, [pc, #352]	; (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0308 	and.w	r3, r3, #8
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048c0:	4b53      	ldr	r3, [pc, #332]	; (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	4a52      	ldr	r2, [pc, #328]	; (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80048c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048cc:	4b50      	ldr	r3, [pc, #320]	; (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	494d      	ldr	r1, [pc, #308]	; (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d044      	beq.n	8004974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d107      	bne.n	8004902 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048f2:	4b47      	ldr	r3, [pc, #284]	; (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d119      	bne.n	8004932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e07f      	b.n	8004a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d003      	beq.n	8004912 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800490e:	2b03      	cmp	r3, #3
 8004910:	d107      	bne.n	8004922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004912:	4b3f      	ldr	r3, [pc, #252]	; (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d109      	bne.n	8004932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e06f      	b.n	8004a02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004922:	4b3b      	ldr	r3, [pc, #236]	; (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e067      	b.n	8004a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004932:	4b37      	ldr	r3, [pc, #220]	; (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f023 0203 	bic.w	r2, r3, #3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	4934      	ldr	r1, [pc, #208]	; (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 8004940:	4313      	orrs	r3, r2
 8004942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004944:	f7fe fab6 	bl	8002eb4 <HAL_GetTick>
 8004948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800494a:	e00a      	b.n	8004962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800494c:	f7fe fab2 	bl	8002eb4 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	f241 3288 	movw	r2, #5000	; 0x1388
 800495a:	4293      	cmp	r3, r2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e04f      	b.n	8004a02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004962:	4b2b      	ldr	r3, [pc, #172]	; (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 020c 	and.w	r2, r3, #12
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	429a      	cmp	r2, r3
 8004972:	d1eb      	bne.n	800494c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004974:	4b25      	ldr	r3, [pc, #148]	; (8004a0c <HAL_RCC_ClockConfig+0x1b8>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 030f 	and.w	r3, r3, #15
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	429a      	cmp	r2, r3
 8004980:	d20c      	bcs.n	800499c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004982:	4b22      	ldr	r3, [pc, #136]	; (8004a0c <HAL_RCC_ClockConfig+0x1b8>)
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800498a:	4b20      	ldr	r3, [pc, #128]	; (8004a0c <HAL_RCC_ClockConfig+0x1b8>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 030f 	and.w	r3, r3, #15
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	429a      	cmp	r2, r3
 8004996:	d001      	beq.n	800499c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e032      	b.n	8004a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d008      	beq.n	80049ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049a8:	4b19      	ldr	r3, [pc, #100]	; (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	4916      	ldr	r1, [pc, #88]	; (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0308 	and.w	r3, r3, #8
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d009      	beq.n	80049da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049c6:	4b12      	ldr	r3, [pc, #72]	; (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	490e      	ldr	r1, [pc, #56]	; (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049da:	f000 f821 	bl	8004a20 <HAL_RCC_GetSysClockFreq>
 80049de:	4601      	mov	r1, r0
 80049e0:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	091b      	lsrs	r3, r3, #4
 80049e6:	f003 030f 	and.w	r3, r3, #15
 80049ea:	4a0a      	ldr	r2, [pc, #40]	; (8004a14 <HAL_RCC_ClockConfig+0x1c0>)
 80049ec:	5cd3      	ldrb	r3, [r2, r3]
 80049ee:	fa21 f303 	lsr.w	r3, r1, r3
 80049f2:	4a09      	ldr	r2, [pc, #36]	; (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 80049f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049f6:	4b09      	ldr	r3, [pc, #36]	; (8004a1c <HAL_RCC_ClockConfig+0x1c8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fe fa16 	bl	8002e2c <HAL_InitTick>

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	40023c00 	.word	0x40023c00
 8004a10:	40023800 	.word	0x40023800
 8004a14:	08006064 	.word	0x08006064
 8004a18:	20000000 	.word	0x20000000
 8004a1c:	20000004 	.word	0x20000004

08004a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	607b      	str	r3, [r7, #4]
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60fb      	str	r3, [r7, #12]
 8004a2e:	2300      	movs	r3, #0
 8004a30:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a36:	4b63      	ldr	r3, [pc, #396]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f003 030c 	and.w	r3, r3, #12
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d007      	beq.n	8004a52 <HAL_RCC_GetSysClockFreq+0x32>
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d008      	beq.n	8004a58 <HAL_RCC_GetSysClockFreq+0x38>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f040 80b4 	bne.w	8004bb4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a4c:	4b5e      	ldr	r3, [pc, #376]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a4e:	60bb      	str	r3, [r7, #8]
       break;
 8004a50:	e0b3      	b.n	8004bba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a52:	4b5e      	ldr	r3, [pc, #376]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004a54:	60bb      	str	r3, [r7, #8]
      break;
 8004a56:	e0b0      	b.n	8004bba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a58:	4b5a      	ldr	r3, [pc, #360]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a60:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a62:	4b58      	ldr	r3, [pc, #352]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d04a      	beq.n	8004b04 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a6e:	4b55      	ldr	r3, [pc, #340]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	099b      	lsrs	r3, r3, #6
 8004a74:	f04f 0400 	mov.w	r4, #0
 8004a78:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	ea03 0501 	and.w	r5, r3, r1
 8004a84:	ea04 0602 	and.w	r6, r4, r2
 8004a88:	4629      	mov	r1, r5
 8004a8a:	4632      	mov	r2, r6
 8004a8c:	f04f 0300 	mov.w	r3, #0
 8004a90:	f04f 0400 	mov.w	r4, #0
 8004a94:	0154      	lsls	r4, r2, #5
 8004a96:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a9a:	014b      	lsls	r3, r1, #5
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	4622      	mov	r2, r4
 8004aa0:	1b49      	subs	r1, r1, r5
 8004aa2:	eb62 0206 	sbc.w	r2, r2, r6
 8004aa6:	f04f 0300 	mov.w	r3, #0
 8004aaa:	f04f 0400 	mov.w	r4, #0
 8004aae:	0194      	lsls	r4, r2, #6
 8004ab0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ab4:	018b      	lsls	r3, r1, #6
 8004ab6:	1a5b      	subs	r3, r3, r1
 8004ab8:	eb64 0402 	sbc.w	r4, r4, r2
 8004abc:	f04f 0100 	mov.w	r1, #0
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	00e2      	lsls	r2, r4, #3
 8004ac6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004aca:	00d9      	lsls	r1, r3, #3
 8004acc:	460b      	mov	r3, r1
 8004ace:	4614      	mov	r4, r2
 8004ad0:	195b      	adds	r3, r3, r5
 8004ad2:	eb44 0406 	adc.w	r4, r4, r6
 8004ad6:	f04f 0100 	mov.w	r1, #0
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	0262      	lsls	r2, r4, #9
 8004ae0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004ae4:	0259      	lsls	r1, r3, #9
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4614      	mov	r4, r2
 8004aea:	4618      	mov	r0, r3
 8004aec:	4621      	mov	r1, r4
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f04f 0400 	mov.w	r4, #0
 8004af4:	461a      	mov	r2, r3
 8004af6:	4623      	mov	r3, r4
 8004af8:	f7fb fe02 	bl	8000700 <__aeabi_uldivmod>
 8004afc:	4603      	mov	r3, r0
 8004afe:	460c      	mov	r4, r1
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	e049      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b04:	4b2f      	ldr	r3, [pc, #188]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	099b      	lsrs	r3, r3, #6
 8004b0a:	f04f 0400 	mov.w	r4, #0
 8004b0e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	ea03 0501 	and.w	r5, r3, r1
 8004b1a:	ea04 0602 	and.w	r6, r4, r2
 8004b1e:	4629      	mov	r1, r5
 8004b20:	4632      	mov	r2, r6
 8004b22:	f04f 0300 	mov.w	r3, #0
 8004b26:	f04f 0400 	mov.w	r4, #0
 8004b2a:	0154      	lsls	r4, r2, #5
 8004b2c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b30:	014b      	lsls	r3, r1, #5
 8004b32:	4619      	mov	r1, r3
 8004b34:	4622      	mov	r2, r4
 8004b36:	1b49      	subs	r1, r1, r5
 8004b38:	eb62 0206 	sbc.w	r2, r2, r6
 8004b3c:	f04f 0300 	mov.w	r3, #0
 8004b40:	f04f 0400 	mov.w	r4, #0
 8004b44:	0194      	lsls	r4, r2, #6
 8004b46:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b4a:	018b      	lsls	r3, r1, #6
 8004b4c:	1a5b      	subs	r3, r3, r1
 8004b4e:	eb64 0402 	sbc.w	r4, r4, r2
 8004b52:	f04f 0100 	mov.w	r1, #0
 8004b56:	f04f 0200 	mov.w	r2, #0
 8004b5a:	00e2      	lsls	r2, r4, #3
 8004b5c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b60:	00d9      	lsls	r1, r3, #3
 8004b62:	460b      	mov	r3, r1
 8004b64:	4614      	mov	r4, r2
 8004b66:	195b      	adds	r3, r3, r5
 8004b68:	eb44 0406 	adc.w	r4, r4, r6
 8004b6c:	f04f 0100 	mov.w	r1, #0
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	02a2      	lsls	r2, r4, #10
 8004b76:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b7a:	0299      	lsls	r1, r3, #10
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4614      	mov	r4, r2
 8004b80:	4618      	mov	r0, r3
 8004b82:	4621      	mov	r1, r4
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f04f 0400 	mov.w	r4, #0
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	4623      	mov	r3, r4
 8004b8e:	f7fb fdb7 	bl	8000700 <__aeabi_uldivmod>
 8004b92:	4603      	mov	r3, r0
 8004b94:	460c      	mov	r4, r1
 8004b96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b98:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	0c1b      	lsrs	r3, r3, #16
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb0:	60bb      	str	r3, [r7, #8]
      break;
 8004bb2:	e002      	b.n	8004bba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bb4:	4b04      	ldr	r3, [pc, #16]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004bb6:	60bb      	str	r3, [r7, #8]
      break;
 8004bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bba:	68bb      	ldr	r3, [r7, #8]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	00f42400 	.word	0x00f42400
 8004bcc:	007a1200 	.word	0x007a1200

08004bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bd4:	4b03      	ldr	r3, [pc, #12]	; (8004be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	20000000 	.word	0x20000000

08004be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bec:	f7ff fff0 	bl	8004bd0 <HAL_RCC_GetHCLKFreq>
 8004bf0:	4601      	mov	r1, r0
 8004bf2:	4b05      	ldr	r3, [pc, #20]	; (8004c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	0a9b      	lsrs	r3, r3, #10
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	4a03      	ldr	r2, [pc, #12]	; (8004c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bfe:	5cd3      	ldrb	r3, [r2, r3]
 8004c00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	08006074 	.word	0x08006074

08004c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c14:	f7ff ffdc 	bl	8004bd0 <HAL_RCC_GetHCLKFreq>
 8004c18:	4601      	mov	r1, r0
 8004c1a:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	0b5b      	lsrs	r3, r3, #13
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	4a03      	ldr	r2, [pc, #12]	; (8004c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c26:	5cd3      	ldrb	r3, [r2, r3]
 8004c28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40023800 	.word	0x40023800
 8004c34:	08006074 	.word	0x08006074

08004c38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e01d      	b.n	8004c86 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d106      	bne.n	8004c64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fd ffca 	bl	8002bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3304      	adds	r3, #4
 8004c74:	4619      	mov	r1, r3
 8004c76:	4610      	mov	r0, r2
 8004c78:	f000 fab8 	bl	80051ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b082      	sub	sp, #8
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e01d      	b.n	8004cdc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d106      	bne.n	8004cba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f815 	bl	8004ce4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3304      	adds	r3, #4
 8004cca:	4619      	mov	r1, r3
 8004ccc:	4610      	mov	r0, r2
 8004cce:	f000 fa8d 	bl	80051ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2201      	movs	r2, #1
 8004d08:	6839      	ldr	r1, [r7, #0]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 fd14 	bl	8005738 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a10      	ldr	r2, [pc, #64]	; (8004d58 <HAL_TIM_PWM_Start+0x60>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d107      	bne.n	8004d2a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f003 0307 	and.w	r3, r3, #7
 8004d34:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2b06      	cmp	r3, #6
 8004d3a:	d007      	beq.n	8004d4c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	40010000 	.word	0x40010000

08004d5c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e083      	b.n	8004e78 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d106      	bne.n	8004d8a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7fd fe9d 	bl	8002ac4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	6812      	ldr	r2, [r2, #0]
 8004d9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004da0:	f023 0307 	bic.w	r3, r3, #7
 8004da4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3304      	adds	r3, #4
 8004dae:	4619      	mov	r1, r3
 8004db0:	4610      	mov	r0, r2
 8004db2:	f000 fa1b 	bl	80051ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dde:	f023 0303 	bic.w	r3, r3, #3
 8004de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	021b      	lsls	r3, r3, #8
 8004dee:	4313      	orrs	r3, r2
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004dfc:	f023 030c 	bic.w	r3, r3, #12
 8004e00:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	021b      	lsls	r3, r3, #8
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	011a      	lsls	r2, r3, #4
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	031b      	lsls	r3, r3, #12
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004e3a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004e42:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	011b      	lsls	r3, r3, #4
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3718      	adds	r7, #24
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <HAL_TIM_Encoder_Start+0x16>
 8004e90:	2b04      	cmp	r3, #4
 8004e92:	d008      	beq.n	8004ea6 <HAL_TIM_Encoder_Start+0x26>
 8004e94:	e00f      	b.n	8004eb6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 fc4a 	bl	8005738 <TIM_CCxChannelCmd>
      break;
 8004ea4:	e016      	b.n	8004ed4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	2104      	movs	r1, #4
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 fc42 	bl	8005738 <TIM_CCxChannelCmd>
      break;
 8004eb4:	e00e      	b.n	8004ed4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 fc3a 	bl	8005738 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	2104      	movs	r1, #4
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 fc33 	bl	8005738 <TIM_CCxChannelCmd>
      break;
 8004ed2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0201 	orr.w	r2, r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d101      	bne.n	8004f0a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004f06:	2302      	movs	r3, #2
 8004f08:	e0b4      	b.n	8005074 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2202      	movs	r2, #2
 8004f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b0c      	cmp	r3, #12
 8004f1e:	f200 809f 	bhi.w	8005060 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004f22:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f28:	08004f5d 	.word	0x08004f5d
 8004f2c:	08005061 	.word	0x08005061
 8004f30:	08005061 	.word	0x08005061
 8004f34:	08005061 	.word	0x08005061
 8004f38:	08004f9d 	.word	0x08004f9d
 8004f3c:	08005061 	.word	0x08005061
 8004f40:	08005061 	.word	0x08005061
 8004f44:	08005061 	.word	0x08005061
 8004f48:	08004fdf 	.word	0x08004fdf
 8004f4c:	08005061 	.word	0x08005061
 8004f50:	08005061 	.word	0x08005061
 8004f54:	08005061 	.word	0x08005061
 8004f58:	0800501f 	.word	0x0800501f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68b9      	ldr	r1, [r7, #8]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 f9c2 	bl	80052ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	699a      	ldr	r2, [r3, #24]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f042 0208 	orr.w	r2, r2, #8
 8004f76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699a      	ldr	r2, [r3, #24]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0204 	bic.w	r2, r2, #4
 8004f86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6999      	ldr	r1, [r3, #24]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	691a      	ldr	r2, [r3, #16]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	619a      	str	r2, [r3, #24]
      break;
 8004f9a:	e062      	b.n	8005062 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68b9      	ldr	r1, [r7, #8]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 fa08 	bl	80053b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	699a      	ldr	r2, [r3, #24]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699a      	ldr	r2, [r3, #24]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6999      	ldr	r1, [r3, #24]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	021a      	lsls	r2, r3, #8
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	619a      	str	r2, [r3, #24]
      break;
 8004fdc:	e041      	b.n	8005062 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68b9      	ldr	r1, [r7, #8]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 fa53 	bl	8005490 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	69da      	ldr	r2, [r3, #28]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f042 0208 	orr.w	r2, r2, #8
 8004ff8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69da      	ldr	r2, [r3, #28]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0204 	bic.w	r2, r2, #4
 8005008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69d9      	ldr	r1, [r3, #28]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	691a      	ldr	r2, [r3, #16]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	61da      	str	r2, [r3, #28]
      break;
 800501c:	e021      	b.n	8005062 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68b9      	ldr	r1, [r7, #8]
 8005024:	4618      	mov	r0, r3
 8005026:	f000 fa9d 	bl	8005564 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	69da      	ldr	r2, [r3, #28]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	69da      	ldr	r2, [r3, #28]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69d9      	ldr	r1, [r3, #28]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	021a      	lsls	r2, r3, #8
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	61da      	str	r2, [r3, #28]
      break;
 800505e:	e000      	b.n	8005062 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005060:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800508c:	2b01      	cmp	r3, #1
 800508e:	d101      	bne.n	8005094 <HAL_TIM_ConfigClockSource+0x18>
 8005090:	2302      	movs	r3, #2
 8005092:	e0a6      	b.n	80051e2 <HAL_TIM_ConfigClockSource+0x166>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b40      	cmp	r3, #64	; 0x40
 80050ca:	d067      	beq.n	800519c <HAL_TIM_ConfigClockSource+0x120>
 80050cc:	2b40      	cmp	r3, #64	; 0x40
 80050ce:	d80b      	bhi.n	80050e8 <HAL_TIM_ConfigClockSource+0x6c>
 80050d0:	2b10      	cmp	r3, #16
 80050d2:	d073      	beq.n	80051bc <HAL_TIM_ConfigClockSource+0x140>
 80050d4:	2b10      	cmp	r3, #16
 80050d6:	d802      	bhi.n	80050de <HAL_TIM_ConfigClockSource+0x62>
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d06f      	beq.n	80051bc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80050dc:	e078      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050de:	2b20      	cmp	r3, #32
 80050e0:	d06c      	beq.n	80051bc <HAL_TIM_ConfigClockSource+0x140>
 80050e2:	2b30      	cmp	r3, #48	; 0x30
 80050e4:	d06a      	beq.n	80051bc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80050e6:	e073      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050e8:	2b70      	cmp	r3, #112	; 0x70
 80050ea:	d00d      	beq.n	8005108 <HAL_TIM_ConfigClockSource+0x8c>
 80050ec:	2b70      	cmp	r3, #112	; 0x70
 80050ee:	d804      	bhi.n	80050fa <HAL_TIM_ConfigClockSource+0x7e>
 80050f0:	2b50      	cmp	r3, #80	; 0x50
 80050f2:	d033      	beq.n	800515c <HAL_TIM_ConfigClockSource+0xe0>
 80050f4:	2b60      	cmp	r3, #96	; 0x60
 80050f6:	d041      	beq.n	800517c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80050f8:	e06a      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050fe:	d066      	beq.n	80051ce <HAL_TIM_ConfigClockSource+0x152>
 8005100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005104:	d017      	beq.n	8005136 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005106:	e063      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6818      	ldr	r0, [r3, #0]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	6899      	ldr	r1, [r3, #8]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f000 faee 	bl	80056f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800512a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	609a      	str	r2, [r3, #8]
      break;
 8005134:	e04c      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6818      	ldr	r0, [r3, #0]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	6899      	ldr	r1, [r3, #8]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f000 fad7 	bl	80056f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005158:	609a      	str	r2, [r3, #8]
      break;
 800515a:	e039      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6818      	ldr	r0, [r3, #0]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	6859      	ldr	r1, [r3, #4]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	461a      	mov	r2, r3
 800516a:	f000 fa4b 	bl	8005604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2150      	movs	r1, #80	; 0x50
 8005174:	4618      	mov	r0, r3
 8005176:	f000 faa4 	bl	80056c2 <TIM_ITRx_SetConfig>
      break;
 800517a:	e029      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6818      	ldr	r0, [r3, #0]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	6859      	ldr	r1, [r3, #4]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	461a      	mov	r2, r3
 800518a:	f000 fa6a 	bl	8005662 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2160      	movs	r1, #96	; 0x60
 8005194:	4618      	mov	r0, r3
 8005196:	f000 fa94 	bl	80056c2 <TIM_ITRx_SetConfig>
      break;
 800519a:	e019      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6818      	ldr	r0, [r3, #0]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	6859      	ldr	r1, [r3, #4]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	461a      	mov	r2, r3
 80051aa:	f000 fa2b 	bl	8005604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2140      	movs	r1, #64	; 0x40
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 fa84 	bl	80056c2 <TIM_ITRx_SetConfig>
      break;
 80051ba:	e009      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4619      	mov	r1, r3
 80051c6:	4610      	mov	r0, r2
 80051c8:	f000 fa7b 	bl	80056c2 <TIM_ITRx_SetConfig>
      break;
 80051cc:	e000      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80051ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
	...

080051ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a34      	ldr	r2, [pc, #208]	; (80052d0 <TIM_Base_SetConfig+0xe4>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d00f      	beq.n	8005224 <TIM_Base_SetConfig+0x38>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520a:	d00b      	beq.n	8005224 <TIM_Base_SetConfig+0x38>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a31      	ldr	r2, [pc, #196]	; (80052d4 <TIM_Base_SetConfig+0xe8>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d007      	beq.n	8005224 <TIM_Base_SetConfig+0x38>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a30      	ldr	r2, [pc, #192]	; (80052d8 <TIM_Base_SetConfig+0xec>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d003      	beq.n	8005224 <TIM_Base_SetConfig+0x38>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a2f      	ldr	r2, [pc, #188]	; (80052dc <TIM_Base_SetConfig+0xf0>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d108      	bne.n	8005236 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800522a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a25      	ldr	r2, [pc, #148]	; (80052d0 <TIM_Base_SetConfig+0xe4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d01b      	beq.n	8005276 <TIM_Base_SetConfig+0x8a>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005244:	d017      	beq.n	8005276 <TIM_Base_SetConfig+0x8a>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a22      	ldr	r2, [pc, #136]	; (80052d4 <TIM_Base_SetConfig+0xe8>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d013      	beq.n	8005276 <TIM_Base_SetConfig+0x8a>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a21      	ldr	r2, [pc, #132]	; (80052d8 <TIM_Base_SetConfig+0xec>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d00f      	beq.n	8005276 <TIM_Base_SetConfig+0x8a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a20      	ldr	r2, [pc, #128]	; (80052dc <TIM_Base_SetConfig+0xf0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d00b      	beq.n	8005276 <TIM_Base_SetConfig+0x8a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a1f      	ldr	r2, [pc, #124]	; (80052e0 <TIM_Base_SetConfig+0xf4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d007      	beq.n	8005276 <TIM_Base_SetConfig+0x8a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a1e      	ldr	r2, [pc, #120]	; (80052e4 <TIM_Base_SetConfig+0xf8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d003      	beq.n	8005276 <TIM_Base_SetConfig+0x8a>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a1d      	ldr	r2, [pc, #116]	; (80052e8 <TIM_Base_SetConfig+0xfc>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d108      	bne.n	8005288 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800527c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4313      	orrs	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	4313      	orrs	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a08      	ldr	r2, [pc, #32]	; (80052d0 <TIM_Base_SetConfig+0xe4>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d103      	bne.n	80052bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	691a      	ldr	r2, [r3, #16]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	615a      	str	r2, [r3, #20]
}
 80052c2:	bf00      	nop
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	40010000 	.word	0x40010000
 80052d4:	40000400 	.word	0x40000400
 80052d8:	40000800 	.word	0x40000800
 80052dc:	40000c00 	.word	0x40000c00
 80052e0:	40014000 	.word	0x40014000
 80052e4:	40014400 	.word	0x40014400
 80052e8:	40014800 	.word	0x40014800

080052ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	f023 0201 	bic.w	r2, r3, #1
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800531a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 0303 	bic.w	r3, r3, #3
 8005322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	4313      	orrs	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f023 0302 	bic.w	r3, r3, #2
 8005334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	4313      	orrs	r3, r2
 800533e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a1c      	ldr	r2, [pc, #112]	; (80053b4 <TIM_OC1_SetConfig+0xc8>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d10c      	bne.n	8005362 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f023 0308 	bic.w	r3, r3, #8
 800534e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	4313      	orrs	r3, r2
 8005358:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f023 0304 	bic.w	r3, r3, #4
 8005360:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a13      	ldr	r2, [pc, #76]	; (80053b4 <TIM_OC1_SetConfig+0xc8>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d111      	bne.n	800538e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005370:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005378:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	4313      	orrs	r3, r2
 8005382:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	4313      	orrs	r3, r2
 800538c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	621a      	str	r2, [r3, #32]
}
 80053a8:	bf00      	nop
 80053aa:	371c      	adds	r7, #28
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	40010000 	.word	0x40010000

080053b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	f023 0210 	bic.w	r2, r3, #16
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	021b      	lsls	r3, r3, #8
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f023 0320 	bic.w	r3, r3, #32
 8005402:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	4313      	orrs	r3, r2
 800540e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a1e      	ldr	r2, [pc, #120]	; (800548c <TIM_OC2_SetConfig+0xd4>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d10d      	bne.n	8005434 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800541e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	4313      	orrs	r3, r2
 800542a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005432:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a15      	ldr	r2, [pc, #84]	; (800548c <TIM_OC2_SetConfig+0xd4>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d113      	bne.n	8005464 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005442:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800544a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	4313      	orrs	r3, r2
 8005456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	4313      	orrs	r3, r2
 8005462:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	621a      	str	r2, [r3, #32]
}
 800547e:	bf00      	nop
 8005480:	371c      	adds	r7, #28
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	40010000 	.word	0x40010000

08005490 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f023 0303 	bic.w	r3, r3, #3
 80054c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	021b      	lsls	r3, r3, #8
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a1d      	ldr	r2, [pc, #116]	; (8005560 <TIM_OC3_SetConfig+0xd0>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d10d      	bne.n	800550a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	021b      	lsls	r3, r3, #8
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	4313      	orrs	r3, r2
 8005500:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005508:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a14      	ldr	r2, [pc, #80]	; (8005560 <TIM_OC3_SetConfig+0xd0>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d113      	bne.n	800553a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	011b      	lsls	r3, r3, #4
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	4313      	orrs	r3, r2
 800552c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	011b      	lsls	r3, r3, #4
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	4313      	orrs	r3, r2
 8005538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	621a      	str	r2, [r3, #32]
}
 8005554:	bf00      	nop
 8005556:	371c      	adds	r7, #28
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	40010000 	.word	0x40010000

08005564 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005564:	b480      	push	{r7}
 8005566:	b087      	sub	sp, #28
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800559a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	021b      	lsls	r3, r3, #8
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	031b      	lsls	r3, r3, #12
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a10      	ldr	r2, [pc, #64]	; (8005600 <TIM_OC4_SetConfig+0x9c>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d109      	bne.n	80055d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	019b      	lsls	r3, r3, #6
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	621a      	str	r2, [r3, #32]
}
 80055f2:	bf00      	nop
 80055f4:	371c      	adds	r7, #28
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	40010000 	.word	0x40010000

08005604 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	f023 0201 	bic.w	r2, r3, #1
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800562e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	4313      	orrs	r3, r2
 8005638:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f023 030a 	bic.w	r3, r3, #10
 8005640:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	4313      	orrs	r3, r2
 8005648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	621a      	str	r2, [r3, #32]
}
 8005656:	bf00      	nop
 8005658:	371c      	adds	r7, #28
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005662:	b480      	push	{r7}
 8005664:	b087      	sub	sp, #28
 8005666:	af00      	add	r7, sp, #0
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	f023 0210 	bic.w	r2, r3, #16
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800568c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	031b      	lsls	r3, r3, #12
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	4313      	orrs	r3, r2
 8005696:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800569e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	011b      	lsls	r3, r3, #4
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	621a      	str	r2, [r3, #32]
}
 80056b6:	bf00      	nop
 80056b8:	371c      	adds	r7, #28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b085      	sub	sp, #20
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	f043 0307 	orr.w	r3, r3, #7
 80056e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	609a      	str	r2, [r3, #8]
}
 80056ec:	bf00      	nop
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005712:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	021a      	lsls	r2, r3, #8
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	431a      	orrs	r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4313      	orrs	r3, r2
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	609a      	str	r2, [r3, #8]
}
 800572c:	bf00      	nop
 800572e:	371c      	adds	r7, #28
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f003 031f 	and.w	r3, r3, #31
 800574a:	2201      	movs	r2, #1
 800574c:	fa02 f303 	lsl.w	r3, r2, r3
 8005750:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a1a      	ldr	r2, [r3, #32]
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	43db      	mvns	r3, r3
 800575a:	401a      	ands	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6a1a      	ldr	r2, [r3, #32]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f003 031f 	and.w	r3, r3, #31
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	fa01 f303 	lsl.w	r3, r1, r3
 8005770:	431a      	orrs	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	621a      	str	r2, [r3, #32]
}
 8005776:	bf00      	nop
 8005778:	371c      	adds	r7, #28
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
	...

08005784 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005794:	2b01      	cmp	r3, #1
 8005796:	d101      	bne.n	800579c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005798:	2302      	movs	r3, #2
 800579a:	e050      	b.n	800583e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2202      	movs	r2, #2
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a1c      	ldr	r2, [pc, #112]	; (800584c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d018      	beq.n	8005812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e8:	d013      	beq.n	8005812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a18      	ldr	r2, [pc, #96]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d00e      	beq.n	8005812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a16      	ldr	r2, [pc, #88]	; (8005854 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d009      	beq.n	8005812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a15      	ldr	r2, [pc, #84]	; (8005858 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d004      	beq.n	8005812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a13      	ldr	r2, [pc, #76]	; (800585c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d10c      	bne.n	800582c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005818:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	4313      	orrs	r3, r2
 8005822:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	40010000 	.word	0x40010000
 8005850:	40000400 	.word	0x40000400
 8005854:	40000800 	.word	0x40000800
 8005858:	40000c00 	.word	0x40000c00
 800585c:	40014000 	.word	0x40014000

08005860 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e03f      	b.n	80058f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d106      	bne.n	800588c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7fd fa3c 	bl	8002d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2224      	movs	r2, #36	; 0x24
 8005890:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f829 	bl	80058fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	691a      	ldr	r2, [r3, #16]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	695a      	ldr	r2, [r3, #20]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68da      	ldr	r2, [r3, #12]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005900:	b085      	sub	sp, #20
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	431a      	orrs	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	431a      	orrs	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	4313      	orrs	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800593e:	f023 030c 	bic.w	r3, r3, #12
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	6812      	ldr	r2, [r2, #0]
 8005946:	68f9      	ldr	r1, [r7, #12]
 8005948:	430b      	orrs	r3, r1
 800594a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	699a      	ldr	r2, [r3, #24]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800596a:	f040 818b 	bne.w	8005c84 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4ac1      	ldr	r2, [pc, #772]	; (8005c78 <UART_SetConfig+0x37c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d005      	beq.n	8005984 <UART_SetConfig+0x88>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4abf      	ldr	r2, [pc, #764]	; (8005c7c <UART_SetConfig+0x380>)
 800597e:	4293      	cmp	r3, r2
 8005980:	f040 80bd 	bne.w	8005afe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005984:	f7ff f944 	bl	8004c10 <HAL_RCC_GetPCLK2Freq>
 8005988:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	461d      	mov	r5, r3
 800598e:	f04f 0600 	mov.w	r6, #0
 8005992:	46a8      	mov	r8, r5
 8005994:	46b1      	mov	r9, r6
 8005996:	eb18 0308 	adds.w	r3, r8, r8
 800599a:	eb49 0409 	adc.w	r4, r9, r9
 800599e:	4698      	mov	r8, r3
 80059a0:	46a1      	mov	r9, r4
 80059a2:	eb18 0805 	adds.w	r8, r8, r5
 80059a6:	eb49 0906 	adc.w	r9, r9, r6
 80059aa:	f04f 0100 	mov.w	r1, #0
 80059ae:	f04f 0200 	mov.w	r2, #0
 80059b2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80059b6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80059ba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80059be:	4688      	mov	r8, r1
 80059c0:	4691      	mov	r9, r2
 80059c2:	eb18 0005 	adds.w	r0, r8, r5
 80059c6:	eb49 0106 	adc.w	r1, r9, r6
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	461d      	mov	r5, r3
 80059d0:	f04f 0600 	mov.w	r6, #0
 80059d4:	196b      	adds	r3, r5, r5
 80059d6:	eb46 0406 	adc.w	r4, r6, r6
 80059da:	461a      	mov	r2, r3
 80059dc:	4623      	mov	r3, r4
 80059de:	f7fa fe8f 	bl	8000700 <__aeabi_uldivmod>
 80059e2:	4603      	mov	r3, r0
 80059e4:	460c      	mov	r4, r1
 80059e6:	461a      	mov	r2, r3
 80059e8:	4ba5      	ldr	r3, [pc, #660]	; (8005c80 <UART_SetConfig+0x384>)
 80059ea:	fba3 2302 	umull	r2, r3, r3, r2
 80059ee:	095b      	lsrs	r3, r3, #5
 80059f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	461d      	mov	r5, r3
 80059f8:	f04f 0600 	mov.w	r6, #0
 80059fc:	46a9      	mov	r9, r5
 80059fe:	46b2      	mov	sl, r6
 8005a00:	eb19 0309 	adds.w	r3, r9, r9
 8005a04:	eb4a 040a 	adc.w	r4, sl, sl
 8005a08:	4699      	mov	r9, r3
 8005a0a:	46a2      	mov	sl, r4
 8005a0c:	eb19 0905 	adds.w	r9, r9, r5
 8005a10:	eb4a 0a06 	adc.w	sl, sl, r6
 8005a14:	f04f 0100 	mov.w	r1, #0
 8005a18:	f04f 0200 	mov.w	r2, #0
 8005a1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a20:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a24:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a28:	4689      	mov	r9, r1
 8005a2a:	4692      	mov	sl, r2
 8005a2c:	eb19 0005 	adds.w	r0, r9, r5
 8005a30:	eb4a 0106 	adc.w	r1, sl, r6
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	461d      	mov	r5, r3
 8005a3a:	f04f 0600 	mov.w	r6, #0
 8005a3e:	196b      	adds	r3, r5, r5
 8005a40:	eb46 0406 	adc.w	r4, r6, r6
 8005a44:	461a      	mov	r2, r3
 8005a46:	4623      	mov	r3, r4
 8005a48:	f7fa fe5a 	bl	8000700 <__aeabi_uldivmod>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	460c      	mov	r4, r1
 8005a50:	461a      	mov	r2, r3
 8005a52:	4b8b      	ldr	r3, [pc, #556]	; (8005c80 <UART_SetConfig+0x384>)
 8005a54:	fba3 1302 	umull	r1, r3, r3, r2
 8005a58:	095b      	lsrs	r3, r3, #5
 8005a5a:	2164      	movs	r1, #100	; 0x64
 8005a5c:	fb01 f303 	mul.w	r3, r1, r3
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	3332      	adds	r3, #50	; 0x32
 8005a66:	4a86      	ldr	r2, [pc, #536]	; (8005c80 <UART_SetConfig+0x384>)
 8005a68:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6c:	095b      	lsrs	r3, r3, #5
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a74:	4498      	add	r8, r3
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	461d      	mov	r5, r3
 8005a7a:	f04f 0600 	mov.w	r6, #0
 8005a7e:	46a9      	mov	r9, r5
 8005a80:	46b2      	mov	sl, r6
 8005a82:	eb19 0309 	adds.w	r3, r9, r9
 8005a86:	eb4a 040a 	adc.w	r4, sl, sl
 8005a8a:	4699      	mov	r9, r3
 8005a8c:	46a2      	mov	sl, r4
 8005a8e:	eb19 0905 	adds.w	r9, r9, r5
 8005a92:	eb4a 0a06 	adc.w	sl, sl, r6
 8005a96:	f04f 0100 	mov.w	r1, #0
 8005a9a:	f04f 0200 	mov.w	r2, #0
 8005a9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005aa2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005aa6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005aaa:	4689      	mov	r9, r1
 8005aac:	4692      	mov	sl, r2
 8005aae:	eb19 0005 	adds.w	r0, r9, r5
 8005ab2:	eb4a 0106 	adc.w	r1, sl, r6
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	461d      	mov	r5, r3
 8005abc:	f04f 0600 	mov.w	r6, #0
 8005ac0:	196b      	adds	r3, r5, r5
 8005ac2:	eb46 0406 	adc.w	r4, r6, r6
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	4623      	mov	r3, r4
 8005aca:	f7fa fe19 	bl	8000700 <__aeabi_uldivmod>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	460c      	mov	r4, r1
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	4b6a      	ldr	r3, [pc, #424]	; (8005c80 <UART_SetConfig+0x384>)
 8005ad6:	fba3 1302 	umull	r1, r3, r3, r2
 8005ada:	095b      	lsrs	r3, r3, #5
 8005adc:	2164      	movs	r1, #100	; 0x64
 8005ade:	fb01 f303 	mul.w	r3, r1, r3
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	3332      	adds	r3, #50	; 0x32
 8005ae8:	4a65      	ldr	r2, [pc, #404]	; (8005c80 <UART_SetConfig+0x384>)
 8005aea:	fba2 2303 	umull	r2, r3, r2, r3
 8005aee:	095b      	lsrs	r3, r3, #5
 8005af0:	f003 0207 	and.w	r2, r3, #7
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4442      	add	r2, r8
 8005afa:	609a      	str	r2, [r3, #8]
 8005afc:	e26f      	b.n	8005fde <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005afe:	f7ff f873 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 8005b02:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	461d      	mov	r5, r3
 8005b08:	f04f 0600 	mov.w	r6, #0
 8005b0c:	46a8      	mov	r8, r5
 8005b0e:	46b1      	mov	r9, r6
 8005b10:	eb18 0308 	adds.w	r3, r8, r8
 8005b14:	eb49 0409 	adc.w	r4, r9, r9
 8005b18:	4698      	mov	r8, r3
 8005b1a:	46a1      	mov	r9, r4
 8005b1c:	eb18 0805 	adds.w	r8, r8, r5
 8005b20:	eb49 0906 	adc.w	r9, r9, r6
 8005b24:	f04f 0100 	mov.w	r1, #0
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b30:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b34:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b38:	4688      	mov	r8, r1
 8005b3a:	4691      	mov	r9, r2
 8005b3c:	eb18 0005 	adds.w	r0, r8, r5
 8005b40:	eb49 0106 	adc.w	r1, r9, r6
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	461d      	mov	r5, r3
 8005b4a:	f04f 0600 	mov.w	r6, #0
 8005b4e:	196b      	adds	r3, r5, r5
 8005b50:	eb46 0406 	adc.w	r4, r6, r6
 8005b54:	461a      	mov	r2, r3
 8005b56:	4623      	mov	r3, r4
 8005b58:	f7fa fdd2 	bl	8000700 <__aeabi_uldivmod>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	460c      	mov	r4, r1
 8005b60:	461a      	mov	r2, r3
 8005b62:	4b47      	ldr	r3, [pc, #284]	; (8005c80 <UART_SetConfig+0x384>)
 8005b64:	fba3 2302 	umull	r2, r3, r3, r2
 8005b68:	095b      	lsrs	r3, r3, #5
 8005b6a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	461d      	mov	r5, r3
 8005b72:	f04f 0600 	mov.w	r6, #0
 8005b76:	46a9      	mov	r9, r5
 8005b78:	46b2      	mov	sl, r6
 8005b7a:	eb19 0309 	adds.w	r3, r9, r9
 8005b7e:	eb4a 040a 	adc.w	r4, sl, sl
 8005b82:	4699      	mov	r9, r3
 8005b84:	46a2      	mov	sl, r4
 8005b86:	eb19 0905 	adds.w	r9, r9, r5
 8005b8a:	eb4a 0a06 	adc.w	sl, sl, r6
 8005b8e:	f04f 0100 	mov.w	r1, #0
 8005b92:	f04f 0200 	mov.w	r2, #0
 8005b96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ba2:	4689      	mov	r9, r1
 8005ba4:	4692      	mov	sl, r2
 8005ba6:	eb19 0005 	adds.w	r0, r9, r5
 8005baa:	eb4a 0106 	adc.w	r1, sl, r6
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	461d      	mov	r5, r3
 8005bb4:	f04f 0600 	mov.w	r6, #0
 8005bb8:	196b      	adds	r3, r5, r5
 8005bba:	eb46 0406 	adc.w	r4, r6, r6
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	4623      	mov	r3, r4
 8005bc2:	f7fa fd9d 	bl	8000700 <__aeabi_uldivmod>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	460c      	mov	r4, r1
 8005bca:	461a      	mov	r2, r3
 8005bcc:	4b2c      	ldr	r3, [pc, #176]	; (8005c80 <UART_SetConfig+0x384>)
 8005bce:	fba3 1302 	umull	r1, r3, r3, r2
 8005bd2:	095b      	lsrs	r3, r3, #5
 8005bd4:	2164      	movs	r1, #100	; 0x64
 8005bd6:	fb01 f303 	mul.w	r3, r1, r3
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	3332      	adds	r3, #50	; 0x32
 8005be0:	4a27      	ldr	r2, [pc, #156]	; (8005c80 <UART_SetConfig+0x384>)
 8005be2:	fba2 2303 	umull	r2, r3, r2, r3
 8005be6:	095b      	lsrs	r3, r3, #5
 8005be8:	005b      	lsls	r3, r3, #1
 8005bea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005bee:	4498      	add	r8, r3
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	461d      	mov	r5, r3
 8005bf4:	f04f 0600 	mov.w	r6, #0
 8005bf8:	46a9      	mov	r9, r5
 8005bfa:	46b2      	mov	sl, r6
 8005bfc:	eb19 0309 	adds.w	r3, r9, r9
 8005c00:	eb4a 040a 	adc.w	r4, sl, sl
 8005c04:	4699      	mov	r9, r3
 8005c06:	46a2      	mov	sl, r4
 8005c08:	eb19 0905 	adds.w	r9, r9, r5
 8005c0c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c10:	f04f 0100 	mov.w	r1, #0
 8005c14:	f04f 0200 	mov.w	r2, #0
 8005c18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c24:	4689      	mov	r9, r1
 8005c26:	4692      	mov	sl, r2
 8005c28:	eb19 0005 	adds.w	r0, r9, r5
 8005c2c:	eb4a 0106 	adc.w	r1, sl, r6
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	461d      	mov	r5, r3
 8005c36:	f04f 0600 	mov.w	r6, #0
 8005c3a:	196b      	adds	r3, r5, r5
 8005c3c:	eb46 0406 	adc.w	r4, r6, r6
 8005c40:	461a      	mov	r2, r3
 8005c42:	4623      	mov	r3, r4
 8005c44:	f7fa fd5c 	bl	8000700 <__aeabi_uldivmod>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	4b0c      	ldr	r3, [pc, #48]	; (8005c80 <UART_SetConfig+0x384>)
 8005c50:	fba3 1302 	umull	r1, r3, r3, r2
 8005c54:	095b      	lsrs	r3, r3, #5
 8005c56:	2164      	movs	r1, #100	; 0x64
 8005c58:	fb01 f303 	mul.w	r3, r1, r3
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	3332      	adds	r3, #50	; 0x32
 8005c62:	4a07      	ldr	r2, [pc, #28]	; (8005c80 <UART_SetConfig+0x384>)
 8005c64:	fba2 2303 	umull	r2, r3, r2, r3
 8005c68:	095b      	lsrs	r3, r3, #5
 8005c6a:	f003 0207 	and.w	r2, r3, #7
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4442      	add	r2, r8
 8005c74:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005c76:	e1b2      	b.n	8005fde <UART_SetConfig+0x6e2>
 8005c78:	40011000 	.word	0x40011000
 8005c7c:	40011400 	.word	0x40011400
 8005c80:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4ad7      	ldr	r2, [pc, #860]	; (8005fe8 <UART_SetConfig+0x6ec>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d005      	beq.n	8005c9a <UART_SetConfig+0x39e>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4ad6      	ldr	r2, [pc, #856]	; (8005fec <UART_SetConfig+0x6f0>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	f040 80d1 	bne.w	8005e3c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c9a:	f7fe ffb9 	bl	8004c10 <HAL_RCC_GetPCLK2Freq>
 8005c9e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	469a      	mov	sl, r3
 8005ca4:	f04f 0b00 	mov.w	fp, #0
 8005ca8:	46d0      	mov	r8, sl
 8005caa:	46d9      	mov	r9, fp
 8005cac:	eb18 0308 	adds.w	r3, r8, r8
 8005cb0:	eb49 0409 	adc.w	r4, r9, r9
 8005cb4:	4698      	mov	r8, r3
 8005cb6:	46a1      	mov	r9, r4
 8005cb8:	eb18 080a 	adds.w	r8, r8, sl
 8005cbc:	eb49 090b 	adc.w	r9, r9, fp
 8005cc0:	f04f 0100 	mov.w	r1, #0
 8005cc4:	f04f 0200 	mov.w	r2, #0
 8005cc8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ccc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005cd0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005cd4:	4688      	mov	r8, r1
 8005cd6:	4691      	mov	r9, r2
 8005cd8:	eb1a 0508 	adds.w	r5, sl, r8
 8005cdc:	eb4b 0609 	adc.w	r6, fp, r9
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	f04f 0200 	mov.w	r2, #0
 8005cea:	f04f 0300 	mov.w	r3, #0
 8005cee:	f04f 0400 	mov.w	r4, #0
 8005cf2:	0094      	lsls	r4, r2, #2
 8005cf4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005cf8:	008b      	lsls	r3, r1, #2
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	4623      	mov	r3, r4
 8005cfe:	4628      	mov	r0, r5
 8005d00:	4631      	mov	r1, r6
 8005d02:	f7fa fcfd 	bl	8000700 <__aeabi_uldivmod>
 8005d06:	4603      	mov	r3, r0
 8005d08:	460c      	mov	r4, r1
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	4bb8      	ldr	r3, [pc, #736]	; (8005ff0 <UART_SetConfig+0x6f4>)
 8005d0e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d12:	095b      	lsrs	r3, r3, #5
 8005d14:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	469b      	mov	fp, r3
 8005d1c:	f04f 0c00 	mov.w	ip, #0
 8005d20:	46d9      	mov	r9, fp
 8005d22:	46e2      	mov	sl, ip
 8005d24:	eb19 0309 	adds.w	r3, r9, r9
 8005d28:	eb4a 040a 	adc.w	r4, sl, sl
 8005d2c:	4699      	mov	r9, r3
 8005d2e:	46a2      	mov	sl, r4
 8005d30:	eb19 090b 	adds.w	r9, r9, fp
 8005d34:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d38:	f04f 0100 	mov.w	r1, #0
 8005d3c:	f04f 0200 	mov.w	r2, #0
 8005d40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d4c:	4689      	mov	r9, r1
 8005d4e:	4692      	mov	sl, r2
 8005d50:	eb1b 0509 	adds.w	r5, fp, r9
 8005d54:	eb4c 060a 	adc.w	r6, ip, sl
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	f04f 0200 	mov.w	r2, #0
 8005d62:	f04f 0300 	mov.w	r3, #0
 8005d66:	f04f 0400 	mov.w	r4, #0
 8005d6a:	0094      	lsls	r4, r2, #2
 8005d6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d70:	008b      	lsls	r3, r1, #2
 8005d72:	461a      	mov	r2, r3
 8005d74:	4623      	mov	r3, r4
 8005d76:	4628      	mov	r0, r5
 8005d78:	4631      	mov	r1, r6
 8005d7a:	f7fa fcc1 	bl	8000700 <__aeabi_uldivmod>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	460c      	mov	r4, r1
 8005d82:	461a      	mov	r2, r3
 8005d84:	4b9a      	ldr	r3, [pc, #616]	; (8005ff0 <UART_SetConfig+0x6f4>)
 8005d86:	fba3 1302 	umull	r1, r3, r3, r2
 8005d8a:	095b      	lsrs	r3, r3, #5
 8005d8c:	2164      	movs	r1, #100	; 0x64
 8005d8e:	fb01 f303 	mul.w	r3, r1, r3
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	011b      	lsls	r3, r3, #4
 8005d96:	3332      	adds	r3, #50	; 0x32
 8005d98:	4a95      	ldr	r2, [pc, #596]	; (8005ff0 <UART_SetConfig+0x6f4>)
 8005d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9e:	095b      	lsrs	r3, r3, #5
 8005da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005da4:	4498      	add	r8, r3
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	469b      	mov	fp, r3
 8005daa:	f04f 0c00 	mov.w	ip, #0
 8005dae:	46d9      	mov	r9, fp
 8005db0:	46e2      	mov	sl, ip
 8005db2:	eb19 0309 	adds.w	r3, r9, r9
 8005db6:	eb4a 040a 	adc.w	r4, sl, sl
 8005dba:	4699      	mov	r9, r3
 8005dbc:	46a2      	mov	sl, r4
 8005dbe:	eb19 090b 	adds.w	r9, r9, fp
 8005dc2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005dc6:	f04f 0100 	mov.w	r1, #0
 8005dca:	f04f 0200 	mov.w	r2, #0
 8005dce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dd2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005dd6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005dda:	4689      	mov	r9, r1
 8005ddc:	4692      	mov	sl, r2
 8005dde:	eb1b 0509 	adds.w	r5, fp, r9
 8005de2:	eb4c 060a 	adc.w	r6, ip, sl
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	4619      	mov	r1, r3
 8005dec:	f04f 0200 	mov.w	r2, #0
 8005df0:	f04f 0300 	mov.w	r3, #0
 8005df4:	f04f 0400 	mov.w	r4, #0
 8005df8:	0094      	lsls	r4, r2, #2
 8005dfa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005dfe:	008b      	lsls	r3, r1, #2
 8005e00:	461a      	mov	r2, r3
 8005e02:	4623      	mov	r3, r4
 8005e04:	4628      	mov	r0, r5
 8005e06:	4631      	mov	r1, r6
 8005e08:	f7fa fc7a 	bl	8000700 <__aeabi_uldivmod>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	460c      	mov	r4, r1
 8005e10:	461a      	mov	r2, r3
 8005e12:	4b77      	ldr	r3, [pc, #476]	; (8005ff0 <UART_SetConfig+0x6f4>)
 8005e14:	fba3 1302 	umull	r1, r3, r3, r2
 8005e18:	095b      	lsrs	r3, r3, #5
 8005e1a:	2164      	movs	r1, #100	; 0x64
 8005e1c:	fb01 f303 	mul.w	r3, r1, r3
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	3332      	adds	r3, #50	; 0x32
 8005e26:	4a72      	ldr	r2, [pc, #456]	; (8005ff0 <UART_SetConfig+0x6f4>)
 8005e28:	fba2 2303 	umull	r2, r3, r2, r3
 8005e2c:	095b      	lsrs	r3, r3, #5
 8005e2e:	f003 020f 	and.w	r2, r3, #15
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4442      	add	r2, r8
 8005e38:	609a      	str	r2, [r3, #8]
 8005e3a:	e0d0      	b.n	8005fde <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e3c:	f7fe fed4 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 8005e40:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	469a      	mov	sl, r3
 8005e46:	f04f 0b00 	mov.w	fp, #0
 8005e4a:	46d0      	mov	r8, sl
 8005e4c:	46d9      	mov	r9, fp
 8005e4e:	eb18 0308 	adds.w	r3, r8, r8
 8005e52:	eb49 0409 	adc.w	r4, r9, r9
 8005e56:	4698      	mov	r8, r3
 8005e58:	46a1      	mov	r9, r4
 8005e5a:	eb18 080a 	adds.w	r8, r8, sl
 8005e5e:	eb49 090b 	adc.w	r9, r9, fp
 8005e62:	f04f 0100 	mov.w	r1, #0
 8005e66:	f04f 0200 	mov.w	r2, #0
 8005e6a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e6e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e72:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e76:	4688      	mov	r8, r1
 8005e78:	4691      	mov	r9, r2
 8005e7a:	eb1a 0508 	adds.w	r5, sl, r8
 8005e7e:	eb4b 0609 	adc.w	r6, fp, r9
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	4619      	mov	r1, r3
 8005e88:	f04f 0200 	mov.w	r2, #0
 8005e8c:	f04f 0300 	mov.w	r3, #0
 8005e90:	f04f 0400 	mov.w	r4, #0
 8005e94:	0094      	lsls	r4, r2, #2
 8005e96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e9a:	008b      	lsls	r3, r1, #2
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	4623      	mov	r3, r4
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	4631      	mov	r1, r6
 8005ea4:	f7fa fc2c 	bl	8000700 <__aeabi_uldivmod>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	460c      	mov	r4, r1
 8005eac:	461a      	mov	r2, r3
 8005eae:	4b50      	ldr	r3, [pc, #320]	; (8005ff0 <UART_SetConfig+0x6f4>)
 8005eb0:	fba3 2302 	umull	r2, r3, r3, r2
 8005eb4:	095b      	lsrs	r3, r3, #5
 8005eb6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	469b      	mov	fp, r3
 8005ebe:	f04f 0c00 	mov.w	ip, #0
 8005ec2:	46d9      	mov	r9, fp
 8005ec4:	46e2      	mov	sl, ip
 8005ec6:	eb19 0309 	adds.w	r3, r9, r9
 8005eca:	eb4a 040a 	adc.w	r4, sl, sl
 8005ece:	4699      	mov	r9, r3
 8005ed0:	46a2      	mov	sl, r4
 8005ed2:	eb19 090b 	adds.w	r9, r9, fp
 8005ed6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005eda:	f04f 0100 	mov.w	r1, #0
 8005ede:	f04f 0200 	mov.w	r2, #0
 8005ee2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ee6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005eea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005eee:	4689      	mov	r9, r1
 8005ef0:	4692      	mov	sl, r2
 8005ef2:	eb1b 0509 	adds.w	r5, fp, r9
 8005ef6:	eb4c 060a 	adc.w	r6, ip, sl
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	4619      	mov	r1, r3
 8005f00:	f04f 0200 	mov.w	r2, #0
 8005f04:	f04f 0300 	mov.w	r3, #0
 8005f08:	f04f 0400 	mov.w	r4, #0
 8005f0c:	0094      	lsls	r4, r2, #2
 8005f0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f12:	008b      	lsls	r3, r1, #2
 8005f14:	461a      	mov	r2, r3
 8005f16:	4623      	mov	r3, r4
 8005f18:	4628      	mov	r0, r5
 8005f1a:	4631      	mov	r1, r6
 8005f1c:	f7fa fbf0 	bl	8000700 <__aeabi_uldivmod>
 8005f20:	4603      	mov	r3, r0
 8005f22:	460c      	mov	r4, r1
 8005f24:	461a      	mov	r2, r3
 8005f26:	4b32      	ldr	r3, [pc, #200]	; (8005ff0 <UART_SetConfig+0x6f4>)
 8005f28:	fba3 1302 	umull	r1, r3, r3, r2
 8005f2c:	095b      	lsrs	r3, r3, #5
 8005f2e:	2164      	movs	r1, #100	; 0x64
 8005f30:	fb01 f303 	mul.w	r3, r1, r3
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	011b      	lsls	r3, r3, #4
 8005f38:	3332      	adds	r3, #50	; 0x32
 8005f3a:	4a2d      	ldr	r2, [pc, #180]	; (8005ff0 <UART_SetConfig+0x6f4>)
 8005f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f40:	095b      	lsrs	r3, r3, #5
 8005f42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f46:	4498      	add	r8, r3
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	469b      	mov	fp, r3
 8005f4c:	f04f 0c00 	mov.w	ip, #0
 8005f50:	46d9      	mov	r9, fp
 8005f52:	46e2      	mov	sl, ip
 8005f54:	eb19 0309 	adds.w	r3, r9, r9
 8005f58:	eb4a 040a 	adc.w	r4, sl, sl
 8005f5c:	4699      	mov	r9, r3
 8005f5e:	46a2      	mov	sl, r4
 8005f60:	eb19 090b 	adds.w	r9, r9, fp
 8005f64:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f68:	f04f 0100 	mov.w	r1, #0
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f7c:	4689      	mov	r9, r1
 8005f7e:	4692      	mov	sl, r2
 8005f80:	eb1b 0509 	adds.w	r5, fp, r9
 8005f84:	eb4c 060a 	adc.w	r6, ip, sl
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	f04f 0200 	mov.w	r2, #0
 8005f92:	f04f 0300 	mov.w	r3, #0
 8005f96:	f04f 0400 	mov.w	r4, #0
 8005f9a:	0094      	lsls	r4, r2, #2
 8005f9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005fa0:	008b      	lsls	r3, r1, #2
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	4623      	mov	r3, r4
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	4631      	mov	r1, r6
 8005faa:	f7fa fba9 	bl	8000700 <__aeabi_uldivmod>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	460c      	mov	r4, r1
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	4b0e      	ldr	r3, [pc, #56]	; (8005ff0 <UART_SetConfig+0x6f4>)
 8005fb6:	fba3 1302 	umull	r1, r3, r3, r2
 8005fba:	095b      	lsrs	r3, r3, #5
 8005fbc:	2164      	movs	r1, #100	; 0x64
 8005fbe:	fb01 f303 	mul.w	r3, r1, r3
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	011b      	lsls	r3, r3, #4
 8005fc6:	3332      	adds	r3, #50	; 0x32
 8005fc8:	4a09      	ldr	r2, [pc, #36]	; (8005ff0 <UART_SetConfig+0x6f4>)
 8005fca:	fba2 2303 	umull	r2, r3, r2, r3
 8005fce:	095b      	lsrs	r3, r3, #5
 8005fd0:	f003 020f 	and.w	r2, r3, #15
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4442      	add	r2, r8
 8005fda:	609a      	str	r2, [r3, #8]
}
 8005fdc:	e7ff      	b.n	8005fde <UART_SetConfig+0x6e2>
 8005fde:	bf00      	nop
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe8:	40011000 	.word	0x40011000
 8005fec:	40011400 	.word	0x40011400
 8005ff0:	51eb851f 	.word	0x51eb851f

08005ff4 <__libc_init_array>:
 8005ff4:	b570      	push	{r4, r5, r6, lr}
 8005ff6:	4e0d      	ldr	r6, [pc, #52]	; (800602c <__libc_init_array+0x38>)
 8005ff8:	4c0d      	ldr	r4, [pc, #52]	; (8006030 <__libc_init_array+0x3c>)
 8005ffa:	1ba4      	subs	r4, r4, r6
 8005ffc:	10a4      	asrs	r4, r4, #2
 8005ffe:	2500      	movs	r5, #0
 8006000:	42a5      	cmp	r5, r4
 8006002:	d109      	bne.n	8006018 <__libc_init_array+0x24>
 8006004:	4e0b      	ldr	r6, [pc, #44]	; (8006034 <__libc_init_array+0x40>)
 8006006:	4c0c      	ldr	r4, [pc, #48]	; (8006038 <__libc_init_array+0x44>)
 8006008:	f000 f820 	bl	800604c <_init>
 800600c:	1ba4      	subs	r4, r4, r6
 800600e:	10a4      	asrs	r4, r4, #2
 8006010:	2500      	movs	r5, #0
 8006012:	42a5      	cmp	r5, r4
 8006014:	d105      	bne.n	8006022 <__libc_init_array+0x2e>
 8006016:	bd70      	pop	{r4, r5, r6, pc}
 8006018:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800601c:	4798      	blx	r3
 800601e:	3501      	adds	r5, #1
 8006020:	e7ee      	b.n	8006000 <__libc_init_array+0xc>
 8006022:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006026:	4798      	blx	r3
 8006028:	3501      	adds	r5, #1
 800602a:	e7f2      	b.n	8006012 <__libc_init_array+0x1e>
 800602c:	08006084 	.word	0x08006084
 8006030:	08006084 	.word	0x08006084
 8006034:	08006084 	.word	0x08006084
 8006038:	08006088 	.word	0x08006088

0800603c <memset>:
 800603c:	4402      	add	r2, r0
 800603e:	4603      	mov	r3, r0
 8006040:	4293      	cmp	r3, r2
 8006042:	d100      	bne.n	8006046 <memset+0xa>
 8006044:	4770      	bx	lr
 8006046:	f803 1b01 	strb.w	r1, [r3], #1
 800604a:	e7f9      	b.n	8006040 <memset+0x4>

0800604c <_init>:
 800604c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800604e:	bf00      	nop
 8006050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006052:	bc08      	pop	{r3}
 8006054:	469e      	mov	lr, r3
 8006056:	4770      	bx	lr

08006058 <_fini>:
 8006058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800605a:	bf00      	nop
 800605c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800605e:	bc08      	pop	{r3}
 8006060:	469e      	mov	lr, r3
 8006062:	4770      	bx	lr
