
HAL_micromouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cc4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  08007e64  08007e64  00017e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800834c  0800834c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800834c  0800834c  0001834c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008354  08008354  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008354  08008354  00018354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008358  08008358  00018358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800835c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000070  080083cc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  080083cc  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d11  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cd2  00000000  00000000  00033db1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011f0  00000000  00000000  00036a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001098  00000000  00000000  00037c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000195d3  00000000  00000000  00038d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ed39  00000000  00000000  000522e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093f0d  00000000  00000000  0006101c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f4f29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053a8  00000000  00000000  000f4fa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007e4c 	.word	0x08007e4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08007e4c 	.word	0x08007e4c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__gedf2>:
 80005f8:	f04f 3cff 	mov.w	ip, #4294967295
 80005fc:	e006      	b.n	800060c <__cmpdf2+0x4>
 80005fe:	bf00      	nop

08000600 <__ledf2>:
 8000600:	f04f 0c01 	mov.w	ip, #1
 8000604:	e002      	b.n	800060c <__cmpdf2+0x4>
 8000606:	bf00      	nop

08000608 <__cmpdf2>:
 8000608:	f04f 0c01 	mov.w	ip, #1
 800060c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000610:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000614:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000618:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800061c:	bf18      	it	ne
 800061e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000622:	d01b      	beq.n	800065c <__cmpdf2+0x54>
 8000624:	b001      	add	sp, #4
 8000626:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800062a:	bf0c      	ite	eq
 800062c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000630:	ea91 0f03 	teqne	r1, r3
 8000634:	bf02      	ittt	eq
 8000636:	ea90 0f02 	teqeq	r0, r2
 800063a:	2000      	moveq	r0, #0
 800063c:	4770      	bxeq	lr
 800063e:	f110 0f00 	cmn.w	r0, #0
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf58      	it	pl
 8000648:	4299      	cmppl	r1, r3
 800064a:	bf08      	it	eq
 800064c:	4290      	cmpeq	r0, r2
 800064e:	bf2c      	ite	cs
 8000650:	17d8      	asrcs	r0, r3, #31
 8000652:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000656:	f040 0001 	orr.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000660:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000664:	d102      	bne.n	800066c <__cmpdf2+0x64>
 8000666:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800066a:	d107      	bne.n	800067c <__cmpdf2+0x74>
 800066c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000670:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000674:	d1d6      	bne.n	8000624 <__cmpdf2+0x1c>
 8000676:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800067a:	d0d3      	beq.n	8000624 <__cmpdf2+0x1c>
 800067c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <__aeabi_cdrcmple>:
 8000684:	4684      	mov	ip, r0
 8000686:	4610      	mov	r0, r2
 8000688:	4662      	mov	r2, ip
 800068a:	468c      	mov	ip, r1
 800068c:	4619      	mov	r1, r3
 800068e:	4663      	mov	r3, ip
 8000690:	e000      	b.n	8000694 <__aeabi_cdcmpeq>
 8000692:	bf00      	nop

08000694 <__aeabi_cdcmpeq>:
 8000694:	b501      	push	{r0, lr}
 8000696:	f7ff ffb7 	bl	8000608 <__cmpdf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd01      	pop	{r0, pc}

080006a4 <__aeabi_dcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cdcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_dcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cdcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_dcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cdcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_dcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffce 	bl	8000684 <__aeabi_cdrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_dcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc4 	bl	8000684 <__aeabi_cdrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_d2f>:
 8000708:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800070c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000710:	bf24      	itt	cs
 8000712:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000716:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800071a:	d90d      	bls.n	8000738 <__aeabi_d2f+0x30>
 800071c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000720:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000724:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000728:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800072c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000730:	bf08      	it	eq
 8000732:	f020 0001 	biceq.w	r0, r0, #1
 8000736:	4770      	bx	lr
 8000738:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800073c:	d121      	bne.n	8000782 <__aeabi_d2f+0x7a>
 800073e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000742:	bfbc      	itt	lt
 8000744:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000748:	4770      	bxlt	lr
 800074a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800074e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000752:	f1c2 0218 	rsb	r2, r2, #24
 8000756:	f1c2 0c20 	rsb	ip, r2, #32
 800075a:	fa10 f30c 	lsls.w	r3, r0, ip
 800075e:	fa20 f002 	lsr.w	r0, r0, r2
 8000762:	bf18      	it	ne
 8000764:	f040 0001 	orrne.w	r0, r0, #1
 8000768:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800076c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000770:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000774:	ea40 000c 	orr.w	r0, r0, ip
 8000778:	fa23 f302 	lsr.w	r3, r3, r2
 800077c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000780:	e7cc      	b.n	800071c <__aeabi_d2f+0x14>
 8000782:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000786:	d107      	bne.n	8000798 <__aeabi_d2f+0x90>
 8000788:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800078c:	bf1e      	ittt	ne
 800078e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000792:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000796:	4770      	bxne	lr
 8000798:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800079c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <__aeabi_uldivmod>:
 80007a8:	b953      	cbnz	r3, 80007c0 <__aeabi_uldivmod+0x18>
 80007aa:	b94a      	cbnz	r2, 80007c0 <__aeabi_uldivmod+0x18>
 80007ac:	2900      	cmp	r1, #0
 80007ae:	bf08      	it	eq
 80007b0:	2800      	cmpeq	r0, #0
 80007b2:	bf1c      	itt	ne
 80007b4:	f04f 31ff 	movne.w	r1, #4294967295
 80007b8:	f04f 30ff 	movne.w	r0, #4294967295
 80007bc:	f000 b972 	b.w	8000aa4 <__aeabi_idiv0>
 80007c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007c8:	f000 f806 	bl	80007d8 <__udivmoddi4>
 80007cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007d4:	b004      	add	sp, #16
 80007d6:	4770      	bx	lr

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9e08      	ldr	r6, [sp, #32]
 80007de:	4604      	mov	r4, r0
 80007e0:	4688      	mov	r8, r1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d14b      	bne.n	800087e <__udivmoddi4+0xa6>
 80007e6:	428a      	cmp	r2, r1
 80007e8:	4615      	mov	r5, r2
 80007ea:	d967      	bls.n	80008bc <__udivmoddi4+0xe4>
 80007ec:	fab2 f282 	clz	r2, r2
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0720 	rsb	r7, r2, #32
 80007f6:	fa01 f302 	lsl.w	r3, r1, r2
 80007fa:	fa20 f707 	lsr.w	r7, r0, r7
 80007fe:	4095      	lsls	r5, r2
 8000800:	ea47 0803 	orr.w	r8, r7, r3
 8000804:	4094      	lsls	r4, r2
 8000806:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800080a:	0c23      	lsrs	r3, r4, #16
 800080c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000810:	fa1f fc85 	uxth.w	ip, r5
 8000814:	fb0e 8817 	mls	r8, lr, r7, r8
 8000818:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800081c:	fb07 f10c 	mul.w	r1, r7, ip
 8000820:	4299      	cmp	r1, r3
 8000822:	d909      	bls.n	8000838 <__udivmoddi4+0x60>
 8000824:	18eb      	adds	r3, r5, r3
 8000826:	f107 30ff 	add.w	r0, r7, #4294967295
 800082a:	f080 811b 	bcs.w	8000a64 <__udivmoddi4+0x28c>
 800082e:	4299      	cmp	r1, r3
 8000830:	f240 8118 	bls.w	8000a64 <__udivmoddi4+0x28c>
 8000834:	3f02      	subs	r7, #2
 8000836:	442b      	add	r3, r5
 8000838:	1a5b      	subs	r3, r3, r1
 800083a:	b2a4      	uxth	r4, r4
 800083c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000840:	fb0e 3310 	mls	r3, lr, r0, r3
 8000844:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000848:	fb00 fc0c 	mul.w	ip, r0, ip
 800084c:	45a4      	cmp	ip, r4
 800084e:	d909      	bls.n	8000864 <__udivmoddi4+0x8c>
 8000850:	192c      	adds	r4, r5, r4
 8000852:	f100 33ff 	add.w	r3, r0, #4294967295
 8000856:	f080 8107 	bcs.w	8000a68 <__udivmoddi4+0x290>
 800085a:	45a4      	cmp	ip, r4
 800085c:	f240 8104 	bls.w	8000a68 <__udivmoddi4+0x290>
 8000860:	3802      	subs	r0, #2
 8000862:	442c      	add	r4, r5
 8000864:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000868:	eba4 040c 	sub.w	r4, r4, ip
 800086c:	2700      	movs	r7, #0
 800086e:	b11e      	cbz	r6, 8000878 <__udivmoddi4+0xa0>
 8000870:	40d4      	lsrs	r4, r2
 8000872:	2300      	movs	r3, #0
 8000874:	e9c6 4300 	strd	r4, r3, [r6]
 8000878:	4639      	mov	r1, r7
 800087a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800087e:	428b      	cmp	r3, r1
 8000880:	d909      	bls.n	8000896 <__udivmoddi4+0xbe>
 8000882:	2e00      	cmp	r6, #0
 8000884:	f000 80eb 	beq.w	8000a5e <__udivmoddi4+0x286>
 8000888:	2700      	movs	r7, #0
 800088a:	e9c6 0100 	strd	r0, r1, [r6]
 800088e:	4638      	mov	r0, r7
 8000890:	4639      	mov	r1, r7
 8000892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000896:	fab3 f783 	clz	r7, r3
 800089a:	2f00      	cmp	r7, #0
 800089c:	d147      	bne.n	800092e <__udivmoddi4+0x156>
 800089e:	428b      	cmp	r3, r1
 80008a0:	d302      	bcc.n	80008a8 <__udivmoddi4+0xd0>
 80008a2:	4282      	cmp	r2, r0
 80008a4:	f200 80fa 	bhi.w	8000a9c <__udivmoddi4+0x2c4>
 80008a8:	1a84      	subs	r4, r0, r2
 80008aa:	eb61 0303 	sbc.w	r3, r1, r3
 80008ae:	2001      	movs	r0, #1
 80008b0:	4698      	mov	r8, r3
 80008b2:	2e00      	cmp	r6, #0
 80008b4:	d0e0      	beq.n	8000878 <__udivmoddi4+0xa0>
 80008b6:	e9c6 4800 	strd	r4, r8, [r6]
 80008ba:	e7dd      	b.n	8000878 <__udivmoddi4+0xa0>
 80008bc:	b902      	cbnz	r2, 80008c0 <__udivmoddi4+0xe8>
 80008be:	deff      	udf	#255	; 0xff
 80008c0:	fab2 f282 	clz	r2, r2
 80008c4:	2a00      	cmp	r2, #0
 80008c6:	f040 808f 	bne.w	80009e8 <__udivmoddi4+0x210>
 80008ca:	1b49      	subs	r1, r1, r5
 80008cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008d0:	fa1f f885 	uxth.w	r8, r5
 80008d4:	2701      	movs	r7, #1
 80008d6:	fbb1 fcfe 	udiv	ip, r1, lr
 80008da:	0c23      	lsrs	r3, r4, #16
 80008dc:	fb0e 111c 	mls	r1, lr, ip, r1
 80008e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008e4:	fb08 f10c 	mul.w	r1, r8, ip
 80008e8:	4299      	cmp	r1, r3
 80008ea:	d907      	bls.n	80008fc <__udivmoddi4+0x124>
 80008ec:	18eb      	adds	r3, r5, r3
 80008ee:	f10c 30ff 	add.w	r0, ip, #4294967295
 80008f2:	d202      	bcs.n	80008fa <__udivmoddi4+0x122>
 80008f4:	4299      	cmp	r1, r3
 80008f6:	f200 80cd 	bhi.w	8000a94 <__udivmoddi4+0x2bc>
 80008fa:	4684      	mov	ip, r0
 80008fc:	1a59      	subs	r1, r3, r1
 80008fe:	b2a3      	uxth	r3, r4
 8000900:	fbb1 f0fe 	udiv	r0, r1, lr
 8000904:	fb0e 1410 	mls	r4, lr, r0, r1
 8000908:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800090c:	fb08 f800 	mul.w	r8, r8, r0
 8000910:	45a0      	cmp	r8, r4
 8000912:	d907      	bls.n	8000924 <__udivmoddi4+0x14c>
 8000914:	192c      	adds	r4, r5, r4
 8000916:	f100 33ff 	add.w	r3, r0, #4294967295
 800091a:	d202      	bcs.n	8000922 <__udivmoddi4+0x14a>
 800091c:	45a0      	cmp	r8, r4
 800091e:	f200 80b6 	bhi.w	8000a8e <__udivmoddi4+0x2b6>
 8000922:	4618      	mov	r0, r3
 8000924:	eba4 0408 	sub.w	r4, r4, r8
 8000928:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800092c:	e79f      	b.n	800086e <__udivmoddi4+0x96>
 800092e:	f1c7 0c20 	rsb	ip, r7, #32
 8000932:	40bb      	lsls	r3, r7
 8000934:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000938:	ea4e 0e03 	orr.w	lr, lr, r3
 800093c:	fa01 f407 	lsl.w	r4, r1, r7
 8000940:	fa20 f50c 	lsr.w	r5, r0, ip
 8000944:	fa21 f30c 	lsr.w	r3, r1, ip
 8000948:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800094c:	4325      	orrs	r5, r4
 800094e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000952:	0c2c      	lsrs	r4, r5, #16
 8000954:	fb08 3319 	mls	r3, r8, r9, r3
 8000958:	fa1f fa8e 	uxth.w	sl, lr
 800095c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000960:	fb09 f40a 	mul.w	r4, r9, sl
 8000964:	429c      	cmp	r4, r3
 8000966:	fa02 f207 	lsl.w	r2, r2, r7
 800096a:	fa00 f107 	lsl.w	r1, r0, r7
 800096e:	d90b      	bls.n	8000988 <__udivmoddi4+0x1b0>
 8000970:	eb1e 0303 	adds.w	r3, lr, r3
 8000974:	f109 30ff 	add.w	r0, r9, #4294967295
 8000978:	f080 8087 	bcs.w	8000a8a <__udivmoddi4+0x2b2>
 800097c:	429c      	cmp	r4, r3
 800097e:	f240 8084 	bls.w	8000a8a <__udivmoddi4+0x2b2>
 8000982:	f1a9 0902 	sub.w	r9, r9, #2
 8000986:	4473      	add	r3, lr
 8000988:	1b1b      	subs	r3, r3, r4
 800098a:	b2ad      	uxth	r5, r5
 800098c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000990:	fb08 3310 	mls	r3, r8, r0, r3
 8000994:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000998:	fb00 fa0a 	mul.w	sl, r0, sl
 800099c:	45a2      	cmp	sl, r4
 800099e:	d908      	bls.n	80009b2 <__udivmoddi4+0x1da>
 80009a0:	eb1e 0404 	adds.w	r4, lr, r4
 80009a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80009a8:	d26b      	bcs.n	8000a82 <__udivmoddi4+0x2aa>
 80009aa:	45a2      	cmp	sl, r4
 80009ac:	d969      	bls.n	8000a82 <__udivmoddi4+0x2aa>
 80009ae:	3802      	subs	r0, #2
 80009b0:	4474      	add	r4, lr
 80009b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009b6:	fba0 8902 	umull	r8, r9, r0, r2
 80009ba:	eba4 040a 	sub.w	r4, r4, sl
 80009be:	454c      	cmp	r4, r9
 80009c0:	46c2      	mov	sl, r8
 80009c2:	464b      	mov	r3, r9
 80009c4:	d354      	bcc.n	8000a70 <__udivmoddi4+0x298>
 80009c6:	d051      	beq.n	8000a6c <__udivmoddi4+0x294>
 80009c8:	2e00      	cmp	r6, #0
 80009ca:	d069      	beq.n	8000aa0 <__udivmoddi4+0x2c8>
 80009cc:	ebb1 050a 	subs.w	r5, r1, sl
 80009d0:	eb64 0403 	sbc.w	r4, r4, r3
 80009d4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80009d8:	40fd      	lsrs	r5, r7
 80009da:	40fc      	lsrs	r4, r7
 80009dc:	ea4c 0505 	orr.w	r5, ip, r5
 80009e0:	e9c6 5400 	strd	r5, r4, [r6]
 80009e4:	2700      	movs	r7, #0
 80009e6:	e747      	b.n	8000878 <__udivmoddi4+0xa0>
 80009e8:	f1c2 0320 	rsb	r3, r2, #32
 80009ec:	fa20 f703 	lsr.w	r7, r0, r3
 80009f0:	4095      	lsls	r5, r2
 80009f2:	fa01 f002 	lsl.w	r0, r1, r2
 80009f6:	fa21 f303 	lsr.w	r3, r1, r3
 80009fa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80009fe:	4338      	orrs	r0, r7
 8000a00:	0c01      	lsrs	r1, r0, #16
 8000a02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000a06:	fa1f f885 	uxth.w	r8, r5
 8000a0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000a0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a12:	fb07 f308 	mul.w	r3, r7, r8
 8000a16:	428b      	cmp	r3, r1
 8000a18:	fa04 f402 	lsl.w	r4, r4, r2
 8000a1c:	d907      	bls.n	8000a2e <__udivmoddi4+0x256>
 8000a1e:	1869      	adds	r1, r5, r1
 8000a20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000a24:	d22f      	bcs.n	8000a86 <__udivmoddi4+0x2ae>
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d92d      	bls.n	8000a86 <__udivmoddi4+0x2ae>
 8000a2a:	3f02      	subs	r7, #2
 8000a2c:	4429      	add	r1, r5
 8000a2e:	1acb      	subs	r3, r1, r3
 8000a30:	b281      	uxth	r1, r0
 8000a32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a3e:	fb00 f308 	mul.w	r3, r0, r8
 8000a42:	428b      	cmp	r3, r1
 8000a44:	d907      	bls.n	8000a56 <__udivmoddi4+0x27e>
 8000a46:	1869      	adds	r1, r5, r1
 8000a48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a4c:	d217      	bcs.n	8000a7e <__udivmoddi4+0x2a6>
 8000a4e:	428b      	cmp	r3, r1
 8000a50:	d915      	bls.n	8000a7e <__udivmoddi4+0x2a6>
 8000a52:	3802      	subs	r0, #2
 8000a54:	4429      	add	r1, r5
 8000a56:	1ac9      	subs	r1, r1, r3
 8000a58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000a5c:	e73b      	b.n	80008d6 <__udivmoddi4+0xfe>
 8000a5e:	4637      	mov	r7, r6
 8000a60:	4630      	mov	r0, r6
 8000a62:	e709      	b.n	8000878 <__udivmoddi4+0xa0>
 8000a64:	4607      	mov	r7, r0
 8000a66:	e6e7      	b.n	8000838 <__udivmoddi4+0x60>
 8000a68:	4618      	mov	r0, r3
 8000a6a:	e6fb      	b.n	8000864 <__udivmoddi4+0x8c>
 8000a6c:	4541      	cmp	r1, r8
 8000a6e:	d2ab      	bcs.n	80009c8 <__udivmoddi4+0x1f0>
 8000a70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000a74:	eb69 020e 	sbc.w	r2, r9, lr
 8000a78:	3801      	subs	r0, #1
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	e7a4      	b.n	80009c8 <__udivmoddi4+0x1f0>
 8000a7e:	4660      	mov	r0, ip
 8000a80:	e7e9      	b.n	8000a56 <__udivmoddi4+0x27e>
 8000a82:	4618      	mov	r0, r3
 8000a84:	e795      	b.n	80009b2 <__udivmoddi4+0x1da>
 8000a86:	4667      	mov	r7, ip
 8000a88:	e7d1      	b.n	8000a2e <__udivmoddi4+0x256>
 8000a8a:	4681      	mov	r9, r0
 8000a8c:	e77c      	b.n	8000988 <__udivmoddi4+0x1b0>
 8000a8e:	3802      	subs	r0, #2
 8000a90:	442c      	add	r4, r5
 8000a92:	e747      	b.n	8000924 <__udivmoddi4+0x14c>
 8000a94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a98:	442b      	add	r3, r5
 8000a9a:	e72f      	b.n	80008fc <__udivmoddi4+0x124>
 8000a9c:	4638      	mov	r0, r7
 8000a9e:	e708      	b.n	80008b2 <__udivmoddi4+0xda>
 8000aa0:	4637      	mov	r7, r6
 8000aa2:	e6e9      	b.n	8000878 <__udivmoddi4+0xa0>

08000aa4 <__aeabi_idiv0>:
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <crc32>:
 */
#include "SoftwareCRC.h"
#include "stm32f4xx_hal.h"

uint32_t crc32(const void *buf, size_t size)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
	const uint8_t *p = buf;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	60fb      	str	r3, [r7, #12]
	uint32_t crc;

	crc = ~0U;
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aba:	60bb      	str	r3, [r7, #8]
	while (size--)
 8000abc:	e00e      	b.n	8000adc <crc32+0x34>
	crc = crc32_tab[(crc ^ *p++) & 0xFF] ^ (crc >> 8);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	1c5a      	adds	r2, r3, #1
 8000ac2:	60fa      	str	r2, [r7, #12]
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	4053      	eors	r3, r2
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <crc32+0x50>)
 8000ad0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	0a1b      	lsrs	r3, r3, #8
 8000ad8:	4053      	eors	r3, r2
 8000ada:	60bb      	str	r3, [r7, #8]
	while (size--)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	1e5a      	subs	r2, r3, #1
 8000ae0:	603a      	str	r2, [r7, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d1eb      	bne.n	8000abe <crc32+0x16>
	return crc ^ ~0U;
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	43db      	mvns	r3, r3
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	08007e9c 	.word	0x08007e9c

08000afc <makeFrame>:
		int16_t ToF_L,
		int16_t ToF_FL,
		int16_t ToF_F,
		int16_t ToF_FR,
		int16_t ToF_R)
{
 8000afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b00:	b08d      	sub	sp, #52	; 0x34
 8000b02:	af06      	add	r7, sp, #24
 8000b04:	6178      	str	r0, [r7, #20]
 8000b06:	4608      	mov	r0, r1
 8000b08:	4611      	mov	r1, r2
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	827b      	strh	r3, [r7, #18]
 8000b10:	460b      	mov	r3, r1
 8000b12:	823b      	strh	r3, [r7, #16]
 8000b14:	4613      	mov	r3, r2
 8000b16:	81fb      	strh	r3, [r7, #14]

	//sprintf jest dwa razy bo musi nadpisać starą zawartość crc

	sprintf(frameString, "X_%05d_%05d_%04d_%04d_%04d_%04d_%04d_%010lu",
 8000b18:	f9b7 8012 	ldrsh.w	r8, [r7, #18]
 8000b1c:	f9b7 9010 	ldrsh.w	r9, [r7, #16]
 8000b20:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8000b24:	f9b7 5038 	ldrsh.w	r5, [r7, #56]	; 0x38
 8000b28:	f9b7 603c 	ldrsh.w	r6, [r7, #60]	; 0x3c
 8000b2c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8000b36:	607a      	str	r2, [r7, #4]
 8000b38:	2126      	movs	r1, #38	; 0x26
 8000b3a:	6978      	ldr	r0, [r7, #20]
 8000b3c:	f7ff ffb4 	bl	8000aa8 <crc32>
 8000b40:	4603      	mov	r3, r0
 8000b42:	9305      	str	r3, [sp, #20]
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	9204      	str	r2, [sp, #16]
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	9303      	str	r3, [sp, #12]
 8000b4c:	9602      	str	r6, [sp, #8]
 8000b4e:	9501      	str	r5, [sp, #4]
 8000b50:	9400      	str	r4, [sp, #0]
 8000b52:	464b      	mov	r3, r9
 8000b54:	4642      	mov	r2, r8
 8000b56:	4916      	ldr	r1, [pc, #88]	; (8000bb0 <makeFrame+0xb4>)
 8000b58:	6978      	ldr	r0, [r7, #20]
 8000b5a:	f006 fa27 	bl	8006fac <siprintf>
			ToF_FL,
			ToF_F,
			ToF_FR,
			ToF_R,
			crc32(frameString,38));
	sprintf(frameString, "X_%05d_%05d_%04d_%04d_%04d_%04d_%04d_%010lu",
 8000b5e:	f9b7 8012 	ldrsh.w	r8, [r7, #18]
 8000b62:	f9b7 9010 	ldrsh.w	r9, [r7, #16]
 8000b66:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8000b6a:	f9b7 5038 	ldrsh.w	r5, [r7, #56]	; 0x38
 8000b6e:	f9b7 603c 	ldrsh.w	r6, [r7, #60]	; 0x3c
 8000b72:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	2126      	movs	r1, #38	; 0x26
 8000b80:	6978      	ldr	r0, [r7, #20]
 8000b82:	f7ff ff91 	bl	8000aa8 <crc32>
 8000b86:	4603      	mov	r3, r0
 8000b88:	9305      	str	r3, [sp, #20]
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	9204      	str	r2, [sp, #16]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	9303      	str	r3, [sp, #12]
 8000b92:	9602      	str	r6, [sp, #8]
 8000b94:	9501      	str	r5, [sp, #4]
 8000b96:	9400      	str	r4, [sp, #0]
 8000b98:	464b      	mov	r3, r9
 8000b9a:	4642      	mov	r2, r8
 8000b9c:	4904      	ldr	r1, [pc, #16]	; (8000bb0 <makeFrame+0xb4>)
 8000b9e:	6978      	ldr	r0, [r7, #20]
 8000ba0:	f006 fa04 	bl	8006fac <siprintf>
			ToF_FL,
			ToF_F,
			ToF_FR,
			ToF_R,
			crc32(frameString,38));
}
 8000ba4:	bf00      	nop
 8000ba6:	371c      	adds	r7, #28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000bae:	bf00      	nop
 8000bb0:	08007e64 	.word	0x08007e64

08000bb4 <ToF_writeReg>:


//Zapisywanie do rejestrów

void ToF_writeReg(struct ToF_struct *ToF, uint8_t reg, uint8_t value)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af02      	add	r7, sp, #8
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	70fb      	strb	r3, [r7, #3]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	70bb      	strb	r3, [r7, #2]
	uint8_t data[2];

    data[0] = reg;
 8000bc4:	78fb      	ldrb	r3, [r7, #3]
 8000bc6:	733b      	strb	r3, [r7, #12]
    data[1] = value;
 8000bc8:	78bb      	ldrb	r3, [r7, #2]
 8000bca:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, (ToF->bus_address)<<1, data, 2, 100);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	b299      	uxth	r1, r3
 8000bd6:	f107 020c 	add.w	r2, r7, #12
 8000bda:	2364      	movs	r3, #100	; 0x64
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	2302      	movs	r3, #2
 8000be0:	4803      	ldr	r0, [pc, #12]	; (8000bf0 <ToF_writeReg+0x3c>)
 8000be2:	f002 ff41 	bl	8003a68 <HAL_I2C_Master_Transmit>
}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000104 	.word	0x20000104

08000bf4 <ToF_writeReg16Bit>:

void ToF_writeReg16Bit(struct ToF_struct *ToF, uint8_t reg, uint16_t value)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af02      	add	r7, sp, #8
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	70fb      	strb	r3, [r7, #3]
 8000c00:	4613      	mov	r3, r2
 8000c02:	803b      	strh	r3, [r7, #0]
    uint8_t data[3];

    data[0] = reg;
 8000c04:	78fb      	ldrb	r3, [r7, #3]
 8000c06:	733b      	strb	r3, [r7, #12]
    data[1] = (uint8_t)(value >> 8);    // MSB
 8000c08:	883b      	ldrh	r3, [r7, #0]
 8000c0a:	0a1b      	lsrs	r3, r3, #8
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	737b      	strb	r3, [r7, #13]
    data[2] = (uint8_t)(value     );    // LSB
 8000c12:	883b      	ldrh	r3, [r7, #0]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	73bb      	strb	r3, [r7, #14]

    HAL_I2C_Master_Transmit(&hi2c1, (ToF->bus_address)<<1, data, 3, 100);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	b299      	uxth	r1, r3
 8000c22:	f107 020c 	add.w	r2, r7, #12
 8000c26:	2364      	movs	r3, #100	; 0x64
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	4803      	ldr	r0, [pc, #12]	; (8000c3c <ToF_writeReg16Bit+0x48>)
 8000c2e:	f002 ff1b 	bl	8003a68 <HAL_I2C_Master_Transmit>
}
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000104 	.word	0x20000104

08000c40 <ToF_writeMulti>:

    HAL_I2C_Master_Transmit(&hi2c1, (ToF->bus_address)<<1, data, 5, 100);
}

void ToF_writeMulti(struct ToF_struct *ToF, uint8_t reg, uint8_t *src, uint8_t count)
{
 8000c40:	b5b0      	push	{r4, r5, r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af02      	add	r7, sp, #8
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	607a      	str	r2, [r7, #4]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	72fb      	strb	r3, [r7, #11]
 8000c50:	4613      	mov	r3, r2
 8000c52:	72bb      	strb	r3, [r7, #10]
 8000c54:	466b      	mov	r3, sp
 8000c56:	461d      	mov	r5, r3
	uint8_t data[count+1];
 8000c58:	7abb      	ldrb	r3, [r7, #10]
 8000c5a:	1c58      	adds	r0, r3, #1
 8000c5c:	1e43      	subs	r3, r0, #1
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	4603      	mov	r3, r0
 8000c62:	4619      	mov	r1, r3
 8000c64:	f04f 0200 	mov.w	r2, #0
 8000c68:	f04f 0300 	mov.w	r3, #0
 8000c6c:	f04f 0400 	mov.w	r4, #0
 8000c70:	00d4      	lsls	r4, r2, #3
 8000c72:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000c76:	00cb      	lsls	r3, r1, #3
 8000c78:	4603      	mov	r3, r0
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f04f 0200 	mov.w	r2, #0
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	f04f 0400 	mov.w	r4, #0
 8000c88:	00d4      	lsls	r4, r2, #3
 8000c8a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000c8e:	00cb      	lsls	r3, r1, #3
 8000c90:	4603      	mov	r3, r0
 8000c92:	3307      	adds	r3, #7
 8000c94:	08db      	lsrs	r3, r3, #3
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	ebad 0d03 	sub.w	sp, sp, r3
 8000c9c:	ab02      	add	r3, sp, #8
 8000c9e:	3300      	adds	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]

	data[0] = reg;
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	7afa      	ldrb	r2, [r7, #11]
 8000ca6:	701a      	strb	r2, [r3, #0]
	data[1] = 211;
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	22d3      	movs	r2, #211	; 0xd3
 8000cac:	705a      	strb	r2, [r3, #1]
	data[2] = 0;
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	709a      	strb	r2, [r3, #2]
	data[3] = 0;
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	70da      	strb	r2, [r3, #3]
	data[4] = 0;
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	711a      	strb	r2, [r3, #4]
	data[5] = 0;
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	715a      	strb	r2, [r3, #5]
	data[6] = 0;
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	719a      	strb	r2, [r3, #6]
	{
		data[i+1] == src[count-i];
	}
*/

    HAL_I2C_Master_Transmit(&hi2c1, (ToF->bus_address)<<1, data, count+1, 100);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	b299      	uxth	r1, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	7abb      	ldrb	r3, [r7, #10]
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	3301      	adds	r3, #1
 8000cde:	b298      	uxth	r0, r3
 8000ce0:	2364      	movs	r3, #100	; 0x64
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <ToF_writeMulti+0xb8>)
 8000ce8:	f002 febe 	bl	8003a68 <HAL_I2C_Master_Transmit>
 8000cec:	46ad      	mov	sp, r5
}
 8000cee:	bf00      	nop
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bdb0      	pop	{r4, r5, r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000104 	.word	0x20000104

08000cfc <ToF_readReg>:


//czytanie z rejestrów
uint8_t ToF_readReg(struct ToF_struct *ToF, uint8_t reg)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af02      	add	r7, sp, #8
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	460b      	mov	r3, r1
 8000d06:	70fb      	strb	r3, [r7, #3]
	uint8_t value = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	73fb      	strb	r3, [r7, #15]

    HAL_I2C_Master_Transmit(&hi2c1, (ToF->bus_address)<<1, &reg, 1, 100);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	b299      	uxth	r1, r3
 8000d16:	1cfa      	adds	r2, r7, #3
 8000d18:	2364      	movs	r3, #100	; 0x64
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	480a      	ldr	r0, [pc, #40]	; (8000d48 <ToF_readReg+0x4c>)
 8000d20:	f002 fea2 	bl	8003a68 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, (ToF->bus_address)<<1,  &value, 1, 100);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	b299      	uxth	r1, r3
 8000d2e:	f107 020f 	add.w	r2, r7, #15
 8000d32:	2364      	movs	r3, #100	; 0x64
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	2301      	movs	r3, #1
 8000d38:	4803      	ldr	r0, [pc, #12]	; (8000d48 <ToF_readReg+0x4c>)
 8000d3a:	f002 ff93 	bl	8003c64 <HAL_I2C_Master_Receive>

    return value;
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000104 	.word	0x20000104

08000d4c <ToF_readReg16Bit>:

uint16_t ToF_readReg16Bit(struct ToF_struct *ToF, uint8_t reg)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af02      	add	r7, sp, #8
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	460b      	mov	r3, r1
 8000d56:	70fb      	strb	r3, [r7, #3]
	uint8_t value_tab[2];

    HAL_I2C_Master_Transmit(&hi2c1, (ToF->bus_address)<<1, &reg, 1, 100);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	b299      	uxth	r1, r3
 8000d62:	1cfa      	adds	r2, r7, #3
 8000d64:	2364      	movs	r3, #100	; 0x64
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	2301      	movs	r3, #1
 8000d6a:	480f      	ldr	r0, [pc, #60]	; (8000da8 <ToF_readReg16Bit+0x5c>)
 8000d6c:	f002 fe7c 	bl	8003a68 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, (ToF->bus_address)<<1,  value_tab, 2, 100);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	b299      	uxth	r1, r3
 8000d7a:	f107 020c 	add.w	r2, r7, #12
 8000d7e:	2364      	movs	r3, #100	; 0x64
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	2302      	movs	r3, #2
 8000d84:	4808      	ldr	r0, [pc, #32]	; (8000da8 <ToF_readReg16Bit+0x5c>)
 8000d86:	f002 ff6d 	bl	8003c64 <HAL_I2C_Master_Receive>

	uint16_t value = (uint16_t) value_tab[0] << 8;
 8000d8a:	7b3b      	ldrb	r3, [r7, #12]
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	81fb      	strh	r3, [r7, #14]
	value |= value_tab[1];
 8000d92:	7b7b      	ldrb	r3, [r7, #13]
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	89fb      	ldrh	r3, [r7, #14]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	81fb      	strh	r3, [r7, #14]

	return value;
 8000d9c:	89fb      	ldrh	r3, [r7, #14]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000104 	.word	0x20000104

08000dac <ToF_readMulti>:

void ToF_readMulti(struct ToF_struct *ToF, uint8_t reg, uint8_t *dst, uint8_t count)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af02      	add	r7, sp, #8
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	607a      	str	r2, [r7, #4]
 8000db6:	461a      	mov	r2, r3
 8000db8:	460b      	mov	r3, r1
 8000dba:	72fb      	strb	r3, [r7, #11]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(&hi2c1, (ToF->bus_address)<<1, reg, 1, 100);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	b299      	uxth	r1, r3
 8000dca:	7afb      	ldrb	r3, [r7, #11]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	2364      	movs	r3, #100	; 0x64
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	4815      	ldr	r0, [pc, #84]	; (8000e2c <ToF_readMulti+0x80>)
 8000dd6:	f002 fe47 	bl	8003a68 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (ToF->bus_address)<<1,  dst, count, 100);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	b299      	uxth	r1, r3
 8000de4:	7abb      	ldrb	r3, [r7, #10]
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	2364      	movs	r3, #100	; 0x64
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	4613      	mov	r3, r2
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	480e      	ldr	r0, [pc, #56]	; (8000e2c <ToF_readMulti+0x80>)
 8000df2:	f002 ff37 	bl	8003c64 <HAL_I2C_Master_Receive>

	dst[0] = 211;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	22d3      	movs	r2, #211	; 0xd3
 8000dfa:	701a      	strb	r2, [r3, #0]
	dst[1] = 0;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
	dst[2] = 0;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3302      	adds	r3, #2
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
	dst[3] = 0;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3303      	adds	r3, #3
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
	dst[4] = 0;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3304      	adds	r3, #4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
	dst[5] = 0;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3305      	adds	r3, #5
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
}
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000104 	.word	0x20000104

08000e30 <ToF_setSignalRateLimit>:

uint8_t ToF_setSignalRateLimit(struct ToF_struct *ToF, float limit_Mcps)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	ed87 0a00 	vstr	s0, [r7]
	if (limit_Mcps < 0 || limit_Mcps > 511.99) { return 0; }
 8000e3c:	edd7 7a00 	vldr	s15, [r7]
 8000e40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e48:	d40a      	bmi.n	8000e60 <ToF_setSignalRateLimit+0x30>
 8000e4a:	6838      	ldr	r0, [r7, #0]
 8000e4c:	f7ff fb7c 	bl	8000548 <__aeabi_f2d>
 8000e50:	a310      	add	r3, pc, #64	; (adr r3, 8000e94 <ToF_setSignalRateLimit+0x64>)
 8000e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e56:	f7ff fc4d 	bl	80006f4 <__aeabi_dcmpgt>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <ToF_setSignalRateLimit+0x34>
 8000e60:	2300      	movs	r3, #0
 8000e62:	e010      	b.n	8000e86 <ToF_setSignalRateLimit+0x56>
	// Q9.7 fixed point format (9 integer bits, 7 fractional bits)
	ToF_writeReg16Bit(ToF, FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 8000e64:	edd7 7a00 	vldr	s15, [r7]
 8000e68:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000e90 <ToF_setSignalRateLimit+0x60>
 8000e6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e74:	ee17 3a90 	vmov	r3, s15
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	2144      	movs	r1, #68	; 0x44
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff feb8 	bl	8000bf4 <ToF_writeReg16Bit>
	return 1;
 8000e84:	2301      	movs	r3, #1
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	43000000 	.word	0x43000000
 8000e94:	0a3d70a4 	.word	0x0a3d70a4
 8000e98:	407fffd7 	.word	0x407fffd7

08000e9c <ToF_getSpadInfo>:

uint8_t ToF_getSpadInfo(struct ToF_struct *ToF, uint8_t *count, uint8_t *type_is_aperture)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
	uint8_t tmp;

	ToF_writeReg(ToF, 0x80, 0x01);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2180      	movs	r1, #128	; 0x80
 8000eac:	68f8      	ldr	r0, [r7, #12]
 8000eae:	f7ff fe81 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x01);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	21ff      	movs	r1, #255	; 0xff
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f7ff fe7c 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x00, 0x00);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	68f8      	ldr	r0, [r7, #12]
 8000ec2:	f7ff fe77 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x06);
 8000ec6:	2206      	movs	r2, #6
 8000ec8:	21ff      	movs	r1, #255	; 0xff
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f7ff fe72 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x83, ToF_readReg(ToF, 0x83) | 0x04);
 8000ed0:	2183      	movs	r1, #131	; 0x83
 8000ed2:	68f8      	ldr	r0, [r7, #12]
 8000ed4:	f7ff ff12 	bl	8000cfc <ToF_readReg>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	f043 0304 	orr.w	r3, r3, #4
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	2183      	movs	r1, #131	; 0x83
 8000ee4:	68f8      	ldr	r0, [r7, #12]
 8000ee6:	f7ff fe65 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x07);
 8000eea:	2207      	movs	r2, #7
 8000eec:	21ff      	movs	r1, #255	; 0xff
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f7ff fe60 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x81, 0x01);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2181      	movs	r1, #129	; 0x81
 8000ef8:	68f8      	ldr	r0, [r7, #12]
 8000efa:	f7ff fe5b 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0x80, 0x01);
 8000efe:	2201      	movs	r2, #1
 8000f00:	2180      	movs	r1, #128	; 0x80
 8000f02:	68f8      	ldr	r0, [r7, #12]
 8000f04:	f7ff fe56 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0x94, 0x6b);
 8000f08:	226b      	movs	r2, #107	; 0x6b
 8000f0a:	2194      	movs	r1, #148	; 0x94
 8000f0c:	68f8      	ldr	r0, [r7, #12]
 8000f0e:	f7ff fe51 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x83, 0x00);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2183      	movs	r1, #131	; 0x83
 8000f16:	68f8      	ldr	r0, [r7, #12]
 8000f18:	f7ff fe4c 	bl	8000bb4 <ToF_writeReg>


	while (ToF_readReg(ToF, 0x83) == 0x00)
 8000f1c:	bf00      	nop
 8000f1e:	2183      	movs	r1, #131	; 0x83
 8000f20:	68f8      	ldr	r0, [r7, #12]
 8000f22:	f7ff feeb 	bl	8000cfc <ToF_readReg>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d0f8      	beq.n	8000f1e <ToF_getSpadInfo+0x82>
	{

	}

	ToF_writeReg(ToF, 0x83, 0x01);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2183      	movs	r1, #131	; 0x83
 8000f30:	68f8      	ldr	r0, [r7, #12]
 8000f32:	f7ff fe3f 	bl	8000bb4 <ToF_writeReg>
	tmp = ToF_readReg(ToF, 0x92);
 8000f36:	2192      	movs	r1, #146	; 0x92
 8000f38:	68f8      	ldr	r0, [r7, #12]
 8000f3a:	f7ff fedf 	bl	8000cfc <ToF_readReg>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	75fb      	strb	r3, [r7, #23]

	*count = tmp & 0x7f;
 8000f42:	7dfb      	ldrb	r3, [r7, #23]
 8000f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	701a      	strb	r2, [r3, #0]
	*type_is_aperture = (tmp >> 7) & 0x01;
 8000f4e:	7dfb      	ldrb	r3, [r7, #23]
 8000f50:	09db      	lsrs	r3, r3, #7
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	701a      	strb	r2, [r3, #0]

	ToF_writeReg(ToF, 0x81, 0x00);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2181      	movs	r1, #129	; 0x81
 8000f5c:	68f8      	ldr	r0, [r7, #12]
 8000f5e:	f7ff fe29 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x06);
 8000f62:	2206      	movs	r2, #6
 8000f64:	21ff      	movs	r1, #255	; 0xff
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f7ff fe24 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x83, ToF_readReg(ToF, 0x83)  & ~0x04);
 8000f6c:	2183      	movs	r1, #131	; 0x83
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f7ff fec4 	bl	8000cfc <ToF_readReg>
 8000f74:	4603      	mov	r3, r0
 8000f76:	f023 0304 	bic.w	r3, r3, #4
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	2183      	movs	r1, #131	; 0x83
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f7ff fe17 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x01);
 8000f86:	2201      	movs	r2, #1
 8000f88:	21ff      	movs	r1, #255	; 0xff
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f7ff fe12 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x00, 0x01);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2100      	movs	r1, #0
 8000f94:	68f8      	ldr	r0, [r7, #12]
 8000f96:	f7ff fe0d 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x00);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	21ff      	movs	r1, #255	; 0xff
 8000f9e:	68f8      	ldr	r0, [r7, #12]
 8000fa0:	f7ff fe08 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x80, 0x00);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2180      	movs	r1, #128	; 0x80
 8000fa8:	68f8      	ldr	r0, [r7, #12]
 8000faa:	f7ff fe03 	bl	8000bb4 <ToF_writeReg>

	return 1;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <ToF_decodeTimeout>:

uint16_t ToF_decodeTimeout(struct ToF_struct *ToF, uint16_t reg_val)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
	  // format: "(LSByte * 2^MSByte) + 1"
	  return (uint16_t)((reg_val & 0x00FF) <<
 8000fc4:	887b      	ldrh	r3, [r7, #2]
 8000fc6:	b2db      	uxtb	r3, r3
	         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8000fc8:	887a      	ldrh	r2, [r7, #2]
 8000fca:	0a12      	lsrs	r2, r2, #8
 8000fcc:	b292      	uxth	r2, r2
	  return (uint16_t)((reg_val & 0x00FF) <<
 8000fce:	4093      	lsls	r3, r2
 8000fd0:	b29b      	uxth	r3, r3
	         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	b29b      	uxth	r3, r3
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <ToF_encodeTimeout>:
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.

uint16_t ToF_encodeTimeout(struct ToF_struct *ToF, uint16_t timeout_mclks)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b085      	sub	sp, #20
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
 8000fea:	460b      	mov	r3, r1
 8000fec:	807b      	strh	r3, [r7, #2]
	  // format: "(LSByte * 2^MSByte) + 1"

	  uint32_t ls_byte = 0;                     // Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
	  uint16_t ms_byte = 0;                     // based on VL53L0X_calc_timeout_us()
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	817b      	strh	r3, [r7, #10]

	  if (timeout_mclks > 0)
 8000ff6:	887b      	ldrh	r3, [r7, #2]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d018      	beq.n	800102e <ToF_encodeTimeout+0x4c>
	  {
	    ls_byte = timeout_mclks - 1;
 8000ffc:	887b      	ldrh	r3, [r7, #2]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	60fb      	str	r3, [r7, #12]
	    while ((ls_byte & 0xFFFFFF00) > 0)
 8001002:	e005      	b.n	8001010 <ToF_encodeTimeout+0x2e>
	    {
	      ls_byte >>= 1;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	085b      	lsrs	r3, r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
	      ms_byte++;
 800100a:	897b      	ldrh	r3, [r7, #10]
 800100c:	3301      	adds	r3, #1
 800100e:	817b      	strh	r3, [r7, #10]
	    while ((ls_byte & 0xFFFFFF00) > 0)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1f4      	bne.n	8001004 <ToF_encodeTimeout+0x22>
	    }
	    return (ms_byte << 8) | (ls_byte & 0xFF);
 800101a:	897b      	ldrh	r3, [r7, #10]
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	b29a      	uxth	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	b29b      	uxth	r3, r3
 8001024:	b2db      	uxtb	r3, r3
 8001026:	b29b      	uxth	r3, r3
 8001028:	4313      	orrs	r3, r2
 800102a:	b29b      	uxth	r3, r3
 800102c:	e000      	b.n	8001030 <ToF_encodeTimeout+0x4e>
	  }
	  else { return 0; }
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <ToF_timeoutMclksToMicroseconds>:

uint32_t ToF_timeoutMclksToMicroseconds(struct ToF_struct *ToF, uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]
 8001048:	4613      	mov	r3, r2
 800104a:	707b      	strb	r3, [r7, #1]
	  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 800104c:	787b      	ldrb	r3, [r7, #1]
 800104e:	4a0d      	ldr	r2, [pc, #52]	; (8001084 <ToF_timeoutMclksToMicroseconds+0x48>)
 8001050:	fb02 f303 	mul.w	r3, r2, r3
 8001054:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001058:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <ToF_timeoutMclksToMicroseconds+0x4c>)
 800105a:	fba2 2303 	umull	r2, r3, r2, r3
 800105e:	099b      	lsrs	r3, r3, #6
 8001060:	60fb      	str	r3, [r7, #12]

	  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8001062:	887b      	ldrh	r3, [r7, #2]
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	fb02 f203 	mul.w	r2, r2, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	085b      	lsrs	r3, r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	4a05      	ldr	r2, [pc, #20]	; (8001088 <ToF_timeoutMclksToMicroseconds+0x4c>)
 8001072:	fba2 2303 	umull	r2, r3, r2, r3
 8001076:	099b      	lsrs	r3, r3, #6
}
 8001078:	4618      	mov	r0, r3
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	003a2f00 	.word	0x003a2f00
 8001088:	10624dd3 	.word	0x10624dd3

0800108c <ToF_timeoutMicrosecondsToMclks>:
// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()

uint32_t ToF_timeoutMicrosecondsToMclks(struct ToF_struct *ToF, uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 800108c:	b480      	push	{r7}
 800108e:	b087      	sub	sp, #28
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	4613      	mov	r3, r2
 8001098:	71fb      	strb	r3, [r7, #7]
	  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <ToF_timeoutMicrosecondsToMclks+0x48>)
 800109e:	fb02 f303 	mul.w	r3, r2, r3
 80010a2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80010a6:	4a0c      	ldr	r2, [pc, #48]	; (80010d8 <ToF_timeoutMicrosecondsToMclks+0x4c>)
 80010a8:	fba2 2303 	umull	r2, r3, r2, r3
 80010ac:	099b      	lsrs	r3, r3, #6
 80010ae:	617b      	str	r3, [r7, #20]

	  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010b6:	fb02 f203 	mul.w	r2, r2, r3
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	085b      	lsrs	r3, r3, #1
 80010be:	441a      	add	r2, r3
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	371c      	adds	r7, #28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	003a2f00 	.word	0x003a2f00
 80010d8:	10624dd3 	.word	0x10624dd3

080010dc <ToF_getSequenceStepEnables>:

void ToF_getSequenceStepEnables(struct ToF_struct *ToF, struct SequenceStepEnables *enables)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
	uint8_t sequence_config = ToF_readReg(ToF, SYSTEM_SEQUENCE_CONFIG);
 80010e6:	2101      	movs	r1, #1
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff fe07 	bl	8000cfc <ToF_readReg>
 80010ee:	4603      	mov	r3, r0
 80010f0:	73fb      	strb	r3, [r7, #15]

	enables->tcc          = (sequence_config >> 4) & 0x1;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	091b      	lsrs	r3, r3, #4
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	701a      	strb	r2, [r3, #0]
	enables->dss          = (sequence_config >> 3) & 0x1;
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	08db      	lsrs	r3, r3, #3
 8001106:	b2db      	uxtb	r3, r3
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	b2da      	uxtb	r2, r3
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	709a      	strb	r2, [r3, #2]
	enables->msrc         = (sequence_config >> 2) & 0x1;
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	b2db      	uxtb	r3, r3
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	b2da      	uxtb	r2, r3
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	705a      	strb	r2, [r3, #1]
	enables->pre_range    = (sequence_config >> 6) & 0x1;
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	099b      	lsrs	r3, r3, #6
 8001126:	b2db      	uxtb	r3, r3
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	b2da      	uxtb	r2, r3
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	70da      	strb	r2, [r3, #3]
	enables->final_range  = (sequence_config >> 7) & 0x1;
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	09db      	lsrs	r3, r3, #7
 8001136:	b2da      	uxtb	r2, r3
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	711a      	strb	r2, [r3, #4]
}
 800113c:	bf00      	nop
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <ToF_getVcselPulsePeriod>:

uint8_t ToF_getVcselPulsePeriod(struct ToF_struct *ToF, enum vcselPeriodType type)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	70fb      	strb	r3, [r7, #3]
	  if (type == VcselPeriodPreRange)
 8001150:	78fb      	ldrb	r3, [r7, #3]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d109      	bne.n	800116a <ToF_getVcselPulsePeriod+0x26>
	  {
	    return decodeVcselPeriod(ToF_readReg(ToF, PRE_RANGE_CONFIG_VCSEL_PERIOD));
 8001156:	2150      	movs	r1, #80	; 0x50
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff fdcf 	bl	8000cfc <ToF_readReg>
 800115e:	4603      	mov	r3, r0
 8001160:	3301      	adds	r3, #1
 8001162:	b2db      	uxtb	r3, r3
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	b2db      	uxtb	r3, r3
 8001168:	e00d      	b.n	8001186 <ToF_getVcselPulsePeriod+0x42>
	  }
	  else if (type == VcselPeriodFinalRange)
 800116a:	78fb      	ldrb	r3, [r7, #3]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d109      	bne.n	8001184 <ToF_getVcselPulsePeriod+0x40>
	  {
	    return decodeVcselPeriod(ToF_readReg(ToF, FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 8001170:	2170      	movs	r1, #112	; 0x70
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff fdc2 	bl	8000cfc <ToF_readReg>
 8001178:	4603      	mov	r3, r0
 800117a:	3301      	adds	r3, #1
 800117c:	b2db      	uxtb	r3, r3
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	b2db      	uxtb	r3, r3
 8001182:	e000      	b.n	8001186 <ToF_getVcselPulsePeriod+0x42>
	  }
	  else { return 255; }
 8001184:	23ff      	movs	r3, #255	; 0xff
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <ToF_getSequenceStepTimeouts>:

void ToF_getSequenceStepTimeouts(struct ToF_struct *ToF, struct SequenceStepEnables *enables, struct SequenceStepTimeouts *timeouts)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b084      	sub	sp, #16
 8001192:	af00      	add	r7, sp, #0
 8001194:	60f8      	str	r0, [r7, #12]
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	607a      	str	r2, [r7, #4]
	timeouts->pre_range_vcsel_period_pclks = ToF_getVcselPulsePeriod(ToF, VcselPeriodPreRange);
 800119a:	2100      	movs	r1, #0
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f7ff ffd1 	bl	8001144 <ToF_getVcselPulsePeriod>
 80011a2:	4603      	mov	r3, r0
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	801a      	strh	r2, [r3, #0]

		timeouts->msrc_dss_tcc_mclks = ToF_readReg(ToF, MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80011aa:	2146      	movs	r1, #70	; 0x46
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f7ff fda5 	bl	8000cfc <ToF_readReg>
 80011b2:	4603      	mov	r3, r0
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	3301      	adds	r3, #1
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	809a      	strh	r2, [r3, #4]
		timeouts->msrc_dss_tcc_us =
		  ToF_timeoutMclksToMicroseconds(ToF, timeouts->msrc_dss_tcc_mclks,
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	8899      	ldrh	r1, [r3, #4]
		                             timeouts->pre_range_vcsel_period_pclks);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	881b      	ldrh	r3, [r3, #0]
		  ToF_timeoutMclksToMicroseconds(ToF, timeouts->msrc_dss_tcc_mclks,
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	461a      	mov	r2, r3
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f7ff ff36 	bl	800103c <ToF_timeoutMclksToMicroseconds>
 80011d0:	4602      	mov	r2, r0
		timeouts->msrc_dss_tcc_us =
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	60da      	str	r2, [r3, #12]

		timeouts->pre_range_mclks =
		  ToF_decodeTimeout(ToF, ToF_readReg16Bit(ToF, PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80011d6:	2151      	movs	r1, #81	; 0x51
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f7ff fdb7 	bl	8000d4c <ToF_readReg16Bit>
 80011de:	4603      	mov	r3, r0
 80011e0:	4619      	mov	r1, r3
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	f7ff fee8 	bl	8000fb8 <ToF_decodeTimeout>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
		timeouts->pre_range_mclks =
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	80da      	strh	r2, [r3, #6]
		timeouts->pre_range_us =
			ToF_timeoutMclksToMicroseconds(ToF, timeouts->pre_range_mclks,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	88d9      	ldrh	r1, [r3, #6]
		                             timeouts->pre_range_vcsel_period_pclks);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	881b      	ldrh	r3, [r3, #0]
			ToF_timeoutMclksToMicroseconds(ToF, timeouts->pre_range_mclks,
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	461a      	mov	r2, r3
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	f7ff ff1d 	bl	800103c <ToF_timeoutMclksToMicroseconds>
 8001202:	4602      	mov	r2, r0
		timeouts->pre_range_us =
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	611a      	str	r2, [r3, #16]

		timeouts->final_range_vcsel_period_pclks = ToF_getVcselPulsePeriod(ToF, VcselPeriodFinalRange);
 8001208:	2101      	movs	r1, #1
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	f7ff ff9a 	bl	8001144 <ToF_getVcselPulsePeriod>
 8001210:	4603      	mov	r3, r0
 8001212:	b29a      	uxth	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	805a      	strh	r2, [r3, #2]

		timeouts->final_range_mclks =
			ToF_decodeTimeout(ToF, ToF_readReg16Bit(ToF, FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001218:	2171      	movs	r1, #113	; 0x71
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f7ff fd96 	bl	8000d4c <ToF_readReg16Bit>
 8001220:	4603      	mov	r3, r0
 8001222:	4619      	mov	r1, r3
 8001224:	68f8      	ldr	r0, [r7, #12]
 8001226:	f7ff fec7 	bl	8000fb8 <ToF_decodeTimeout>
 800122a:	4603      	mov	r3, r0
 800122c:	461a      	mov	r2, r3
		timeouts->final_range_mclks =
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	811a      	strh	r2, [r3, #8]

		if (enables->pre_range)
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	78db      	ldrb	r3, [r3, #3]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d007      	beq.n	800124a <ToF_getSequenceStepTimeouts+0xbc>
		{
		  timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	891a      	ldrh	r2, [r3, #8]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	88db      	ldrh	r3, [r3, #6]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	b29a      	uxth	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	811a      	strh	r2, [r3, #8]
		}

		timeouts->final_range_us =
			ToF_timeoutMclksToMicroseconds(ToF, timeouts->final_range_mclks,
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	8919      	ldrh	r1, [r3, #8]
		                               timeouts->final_range_vcsel_period_pclks);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	885b      	ldrh	r3, [r3, #2]
			ToF_timeoutMclksToMicroseconds(ToF, timeouts->final_range_mclks,
 8001252:	b2db      	uxtb	r3, r3
 8001254:	461a      	mov	r2, r3
 8001256:	68f8      	ldr	r0, [r7, #12]
 8001258:	f7ff fef0 	bl	800103c <ToF_timeoutMclksToMicroseconds>
 800125c:	4602      	mov	r2, r0
		timeouts->final_range_us =
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	615a      	str	r2, [r3, #20]
}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <ToF_getMeasurementTimingBudget>:

uint32_t ToF_getMeasurementTimingBudget(struct ToF_struct *ToF)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b08e      	sub	sp, #56	; 0x38
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
	struct SequenceStepEnables enables;
		struct SequenceStepTimeouts timeouts;

		uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 8001272:	f240 7376 	movw	r3, #1910	; 0x776
 8001276:	867b      	strh	r3, [r7, #50]	; 0x32
		uint16_t const EndOverhead        = 960;
 8001278:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800127c:	863b      	strh	r3, [r7, #48]	; 0x30
		uint16_t const MsrcOverhead       = 660;
 800127e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001282:	85fb      	strh	r3, [r7, #46]	; 0x2e
		uint16_t const TccOverhead        = 590;
 8001284:	f240 234e 	movw	r3, #590	; 0x24e
 8001288:	85bb      	strh	r3, [r7, #44]	; 0x2c
		uint16_t const DssOverhead        = 690;
 800128a:	f240 23b2 	movw	r3, #690	; 0x2b2
 800128e:	857b      	strh	r3, [r7, #42]	; 0x2a
		uint16_t const PreRangeOverhead   = 660;
 8001290:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001294:	853b      	strh	r3, [r7, #40]	; 0x28
		uint16_t const FinalRangeOverhead = 550;
 8001296:	f240 2326 	movw	r3, #550	; 0x226
 800129a:	84fb      	strh	r3, [r7, #38]	; 0x26

		uint32_t budget_us = StartOverhead + EndOverhead;
 800129c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800129e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80012a0:	4413      	add	r3, r2
 80012a2:	637b      	str	r3, [r7, #52]	; 0x34

		ToF_getSequenceStepEnables(ToF, &enables);
 80012a4:	f107 0320 	add.w	r3, r7, #32
 80012a8:	4619      	mov	r1, r3
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ff16 	bl	80010dc <ToF_getSequenceStepEnables>
		ToF_getSequenceStepTimeouts(ToF, &enables, &timeouts);
 80012b0:	f107 0208 	add.w	r2, r7, #8
 80012b4:	f107 0320 	add.w	r3, r7, #32
 80012b8:	4619      	mov	r1, r3
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ff67 	bl	800118e <ToF_getSequenceStepTimeouts>

		if (enables.tcc)
 80012c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <ToF_getMeasurementTimingBudget+0x6a>
		{
		  budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80012cc:	4413      	add	r3, r2
 80012ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012d0:	4413      	add	r3, r2
 80012d2:	637b      	str	r3, [r7, #52]	; 0x34
		}
	    if (enables.dss)
 80012d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d007      	beq.n	80012ec <ToF_getMeasurementTimingBudget+0x82>
		{
		  budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80012e0:	4413      	add	r3, r2
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012e6:	4413      	add	r3, r2
 80012e8:	637b      	str	r3, [r7, #52]	; 0x34
 80012ea:	e009      	b.n	8001300 <ToF_getMeasurementTimingBudget+0x96>
		}
		else if (enables.msrc)
 80012ec:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d005      	beq.n	8001300 <ToF_getMeasurementTimingBudget+0x96>
		{
		  budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80012f8:	4413      	add	r3, r2
 80012fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012fc:	4413      	add	r3, r2
 80012fe:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if (enables.pre_range)
 8001300:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001304:	2b00      	cmp	r3, #0
 8001306:	d005      	beq.n	8001314 <ToF_getMeasurementTimingBudget+0xaa>
		{
		  budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800130c:	4413      	add	r3, r2
 800130e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001310:	4413      	add	r3, r2
 8001312:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if (enables.final_range)
 8001314:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001318:	2b00      	cmp	r3, #0
 800131a:	d005      	beq.n	8001328 <ToF_getMeasurementTimingBudget+0xbe>
		{
		  budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 800131c:	69fa      	ldr	r2, [r7, #28]
 800131e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001320:	4413      	add	r3, r2
 8001322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001324:	4413      	add	r3, r2
 8001326:	637b      	str	r3, [r7, #52]	; 0x34
		}

		ToF->measurement_timing_budget_us = budget_us; // store for internal reuse
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800132c:	605a      	str	r2, [r3, #4]
		return budget_us;
 800132e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001330:	4618      	mov	r0, r3
 8001332:	3738      	adds	r7, #56	; 0x38
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <ToF_setMeasurementTimingBudget>:

uint8_t ToF_setMeasurementTimingBudget(struct ToF_struct *ToF, uint32_t budget_us)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b092      	sub	sp, #72	; 0x48
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
	  struct SequenceStepEnables enables;
	  struct SequenceStepTimeouts timeouts;

	  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 8001342:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 8001346:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	  uint16_t const EndOverhead        = 960;
 800134a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800134e:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  uint16_t const MsrcOverhead       = 660;
 8001350:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001354:	87bb      	strh	r3, [r7, #60]	; 0x3c
	  uint16_t const TccOverhead        = 590;
 8001356:	f240 234e 	movw	r3, #590	; 0x24e
 800135a:	877b      	strh	r3, [r7, #58]	; 0x3a
	  uint16_t const DssOverhead        = 690;
 800135c:	f240 23b2 	movw	r3, #690	; 0x2b2
 8001360:	873b      	strh	r3, [r7, #56]	; 0x38
	  uint16_t const PreRangeOverhead   = 660;
 8001362:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001366:	86fb      	strh	r3, [r7, #54]	; 0x36
	  uint16_t const FinalRangeOverhead = 550;
 8001368:	f240 2326 	movw	r3, #550	; 0x226
 800136c:	86bb      	strh	r3, [r7, #52]	; 0x34

	  uint32_t const MinTimingBudget = 20000;
 800136e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001372:	633b      	str	r3, [r7, #48]	; 0x30

	  if (budget_us < MinTimingBudget) { return 0; }
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001378:	429a      	cmp	r2, r3
 800137a:	d201      	bcs.n	8001380 <ToF_setMeasurementTimingBudget+0x48>
 800137c:	2300      	movs	r3, #0
 800137e:	e072      	b.n	8001466 <ToF_setMeasurementTimingBudget+0x12e>

	  uint32_t used_budget_us = StartOverhead + EndOverhead;
 8001380:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001384:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001386:	4413      	add	r3, r2
 8001388:	647b      	str	r3, [r7, #68]	; 0x44

	  ToF_getSequenceStepEnables(ToF, &enables);
 800138a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138e:	4619      	mov	r1, r3
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff fea3 	bl	80010dc <ToF_getSequenceStepEnables>
	  ToF_getSequenceStepTimeouts(ToF, &enables, &timeouts);
 8001396:	f107 020c 	add.w	r2, r7, #12
 800139a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139e:	4619      	mov	r1, r3
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff fef4 	bl	800118e <ToF_getSequenceStepTimeouts>

	  if (enables.tcc)
 80013a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d005      	beq.n	80013ba <ToF_setMeasurementTimingBudget+0x82>
	  {
	    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80013b2:	4413      	add	r3, r2
 80013b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013b6:	4413      	add	r3, r2
 80013b8:	647b      	str	r3, [r7, #68]	; 0x44
	  }

	  if (enables.dss)
 80013ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d007      	beq.n	80013d2 <ToF_setMeasurementTimingBudget+0x9a>
	  {
	    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80013c6:	4413      	add	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013cc:	4413      	add	r3, r2
 80013ce:	647b      	str	r3, [r7, #68]	; 0x44
 80013d0:	e009      	b.n	80013e6 <ToF_setMeasurementTimingBudget+0xae>
	  }
	  else if (enables.msrc)
 80013d2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d005      	beq.n	80013e6 <ToF_setMeasurementTimingBudget+0xae>
	  {
	    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80013de:	4413      	add	r3, r2
 80013e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013e2:	4413      	add	r3, r2
 80013e4:	647b      	str	r3, [r7, #68]	; 0x44
	  }

	  if (enables.pre_range)
 80013e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d005      	beq.n	80013fa <ToF_setMeasurementTimingBudget+0xc2>
	  {
	    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80013ee:	69fa      	ldr	r2, [r7, #28]
 80013f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80013f2:	4413      	add	r3, r2
 80013f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013f6:	4413      	add	r3, r2
 80013f8:	647b      	str	r3, [r7, #68]	; 0x44
	  }

	  if (enables.final_range)
 80013fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d030      	beq.n	8001464 <ToF_setMeasurementTimingBudget+0x12c>
	  {
	    used_budget_us += FinalRangeOverhead;
 8001402:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001404:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001406:	4413      	add	r3, r2
 8001408:	647b      	str	r3, [r7, #68]	; 0x44
	    // budget and the sum of all other timeouts within the sequence.
	    // If there is no room for the final range timeout, then an error
	    // will be set. Otherwise the remaining time will be applied to
	    // the final range."

	    if (used_budget_us > budget_us)
 800140a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	429a      	cmp	r2, r3
 8001410:	d901      	bls.n	8001416 <ToF_setMeasurementTimingBudget+0xde>
	    {
	      // "Requested timeout too big."
	      return 0;
 8001412:	2300      	movs	r3, #0
 8001414:	e027      	b.n	8001466 <ToF_setMeasurementTimingBudget+0x12e>
	    }

	    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	62fb      	str	r3, [r7, #44]	; 0x2c
	    //  timeouts must be expressed in macro periods MClks
	    //  because they have different vcsel periods."

	    uint16_t final_range_timeout_mclks =
	      ToF_timeoutMicrosecondsToMclks(ToF, final_range_timeout_us,
	                                 timeouts.final_range_vcsel_period_pclks);
 800141e:	89fb      	ldrh	r3, [r7, #14]
	      ToF_timeoutMicrosecondsToMclks(ToF, final_range_timeout_us,
 8001420:	b2db      	uxtb	r3, r3
 8001422:	461a      	mov	r2, r3
 8001424:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff fe30 	bl	800108c <ToF_timeoutMicrosecondsToMclks>
 800142c:	4603      	mov	r3, r0
	    uint16_t final_range_timeout_mclks =
 800142e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	    if (enables.pre_range)
 8001432:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001436:	2b00      	cmp	r3, #0
 8001438:	d005      	beq.n	8001446 <ToF_setMeasurementTimingBudget+0x10e>
	    {
	      final_range_timeout_mclks += timeouts.pre_range_mclks;
 800143a:	8a7a      	ldrh	r2, [r7, #18]
 800143c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001440:	4413      	add	r3, r2
 8001442:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	    }

	    ToF_writeReg16Bit(ToF, FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001446:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800144a:	4619      	mov	r1, r3
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff fdc8 	bl	8000fe2 <ToF_encodeTimeout>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	2171      	movs	r1, #113	; 0x71
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff fbcb 	bl	8000bf4 <ToF_writeReg16Bit>
	      ToF_encodeTimeout(ToF, final_range_timeout_mclks));

	    // set_sequence_step_timeout() end

	    ToF->measurement_timing_budget_us = budget_us; // store for internal reuse
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	605a      	str	r2, [r3, #4]
	  }
	  return 1;
 8001464:	2301      	movs	r3, #1
}
 8001466:	4618      	mov	r0, r3
 8001468:	3748      	adds	r7, #72	; 0x48
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <ToF_performSingleRefCalibration>:

uint8_t ToF_performSingleRefCalibration(struct ToF_struct *ToF, uint8_t vhv_init_byte)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	460b      	mov	r3, r1
 8001478:	70fb      	strb	r3, [r7, #3]
	ToF_writeReg(ToF, SYSRANGE_START, 0x01 | vhv_init_byte);
 800147a:	78fb      	ldrb	r3, [r7, #3]
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	b2db      	uxtb	r3, r3
 8001482:	461a      	mov	r2, r3
 8001484:	2100      	movs	r1, #0
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff fb94 	bl	8000bb4 <ToF_writeReg>

	  while ((ToF_readReg(ToF, RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 800148c:	bf00      	nop
 800148e:	2113      	movs	r1, #19
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff fc33 	bl	8000cfc <ToF_readReg>
 8001496:	4603      	mov	r3, r0
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f6      	beq.n	800148e <ToF_performSingleRefCalibration+0x20>
	  {
	    //timeout
	  }

	  ToF_writeReg(ToF, SYSTEM_INTERRUPT_CLEAR, 0x01);
 80014a0:	2201      	movs	r2, #1
 80014a2:	210b      	movs	r1, #11
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff fb85 	bl	8000bb4 <ToF_writeReg>

	  ToF_writeReg(ToF, SYSRANGE_START, 0x00);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff fb80 	bl	8000bb4 <ToF_writeReg>

	  return 1;
 80014b4:	2301      	movs	r3, #1
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <ToF_init>:

uint8_t ToF_init(struct ToF_struct *ToF)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
	ToF->bus_address = 0x29;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2229      	movs	r2, #41	; 0x29
 80014ca:	701a      	strb	r2, [r3, #0]


    ToF_writeReg(ToF, VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV, ToF_readReg(ToF, VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 80014cc:	2189      	movs	r1, #137	; 0x89
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fc14 	bl	8000cfc <ToF_readReg>
 80014d4:	4603      	mov	r3, r0
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	461a      	mov	r2, r3
 80014de:	2189      	movs	r1, #137	; 0x89
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff fb67 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0x88, 0x00);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2188      	movs	r1, #136	; 0x88
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff fb62 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0x80, 0x01);
 80014f0:	2201      	movs	r2, #1
 80014f2:	2180      	movs	r1, #128	; 0x80
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff fb5d 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x01);
 80014fa:	2201      	movs	r2, #1
 80014fc:	21ff      	movs	r1, #255	; 0xff
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fb58 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x00, 0x00);
 8001504:	2200      	movs	r2, #0
 8001506:	2100      	movs	r1, #0
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff fb53 	bl	8000bb4 <ToF_writeReg>
	ToF->stop_variable = ToF_readReg(ToF, 0x91);
 800150e:	2191      	movs	r1, #145	; 0x91
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff fbf3 	bl	8000cfc <ToF_readReg>
 8001516:	4603      	mov	r3, r0
 8001518:	461a      	mov	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	705a      	strb	r2, [r3, #1]
	ToF_writeReg(ToF, 0x00, 0x01);
 800151e:	2201      	movs	r2, #1
 8001520:	2100      	movs	r1, #0
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff fb46 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x00);
 8001528:	2200      	movs	r2, #0
 800152a:	21ff      	movs	r1, #255	; 0xff
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff fb41 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x80, 0x00);
 8001532:	2200      	movs	r2, #0
 8001534:	2180      	movs	r1, #128	; 0x80
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff fb3c 	bl	8000bb4 <ToF_writeReg>

	// disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
	ToF_writeReg(ToF, MSRC_CONFIG_CONTROL, ToF_readReg(ToF, MSRC_CONFIG_CONTROL) | 0x12);
 800153c:	2160      	movs	r1, #96	; 0x60
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff fbdc 	bl	8000cfc <ToF_readReg>
 8001544:	4603      	mov	r3, r0
 8001546:	f043 0312 	orr.w	r3, r3, #18
 800154a:	b2db      	uxtb	r3, r3
 800154c:	461a      	mov	r2, r3
 800154e:	2160      	movs	r1, #96	; 0x60
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff fb2f 	bl	8000bb4 <ToF_writeReg>

	// set final range signal rate limit to 0.25 MCPS (million counts per second)
	ToF_setSignalRateLimit(ToF, 0.25);
 8001556:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff fc68 	bl	8000e30 <ToF_setSignalRateLimit>

	ToF_writeReg(ToF, SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8001560:	22ff      	movs	r2, #255	; 0xff
 8001562:	2101      	movs	r1, #1
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff fb25 	bl	8000bb4 <ToF_writeReg>
	uint8_t spad_count;
	uint8_t spad_type_is_aperture;

	if (ToF_getSpadInfo(ToF, &spad_count, &spad_type_is_aperture) == 0)
 800156a:	f107 0213 	add.w	r2, r7, #19
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff fc91 	bl	8000e9c <ToF_getSpadInfo>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d101      	bne.n	8001584 <ToF_init+0xc6>
	{
		return 0;
 8001580:	2300      	movs	r3, #0
 8001582:	e24c      	b.n	8001a1e <ToF_init+0x560>
	}

	uint8_t ref_spad_map[6];
	ToF_readMulti(ToF, GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8001584:	f107 020c 	add.w	r2, r7, #12
 8001588:	2306      	movs	r3, #6
 800158a:	21b0      	movs	r1, #176	; 0xb0
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff fc0d 	bl	8000dac <ToF_readMulti>

	ToF_writeReg(ToF, 0xFF, 0x01);
 8001592:	2201      	movs	r2, #1
 8001594:	21ff      	movs	r1, #255	; 0xff
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff fb0c 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 800159c:	2200      	movs	r2, #0
 800159e:	214f      	movs	r1, #79	; 0x4f
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff fb07 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 80015a6:	222c      	movs	r2, #44	; 0x2c
 80015a8:	214e      	movs	r1, #78	; 0x4e
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff fb02 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x00);
 80015b0:	2200      	movs	r2, #0
 80015b2:	21ff      	movs	r1, #255	; 0xff
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff fafd 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 80015ba:	22b4      	movs	r2, #180	; 0xb4
 80015bc:	21b6      	movs	r1, #182	; 0xb6
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff faf8 	bl	8000bb4 <ToF_writeReg>

	uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80015c4:	7cfb      	ldrb	r3, [r7, #19]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <ToF_init+0x110>
 80015ca:	230c      	movs	r3, #12
 80015cc:	e000      	b.n	80015d0 <ToF_init+0x112>
 80015ce:	2300      	movs	r3, #0
 80015d0:	757b      	strb	r3, [r7, #21]
	uint8_t spads_enabled = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	75fb      	strb	r3, [r7, #23]

	for (uint8_t i = 0; i < 48; i++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	75bb      	strb	r3, [r7, #22]
 80015da:	e03c      	b.n	8001656 <ToF_init+0x198>
	{
	  if (i < first_spad_to_enable || spads_enabled == spad_count)
 80015dc:	7dba      	ldrb	r2, [r7, #22]
 80015de:	7d7b      	ldrb	r3, [r7, #21]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d303      	bcc.n	80015ec <ToF_init+0x12e>
 80015e4:	7d3b      	ldrb	r3, [r7, #20]
 80015e6:	7dfa      	ldrb	r2, [r7, #23]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d11c      	bne.n	8001626 <ToF_init+0x168>
	  {
	    // This bit is lower than the first one that should be enabled, or
	    // (reference_spad_count) bits have already been enabled, so zero this bit
	    ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80015ec:	7dbb      	ldrb	r3, [r7, #22]
 80015ee:	08db      	lsrs	r3, r3, #3
 80015f0:	b2d8      	uxtb	r0, r3
 80015f2:	4603      	mov	r3, r0
 80015f4:	f107 0218 	add.w	r2, r7, #24
 80015f8:	4413      	add	r3, r2
 80015fa:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80015fe:	b25a      	sxtb	r2, r3
 8001600:	7dbb      	ldrb	r3, [r7, #22]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	2101      	movs	r1, #1
 8001608:	fa01 f303 	lsl.w	r3, r1, r3
 800160c:	b25b      	sxtb	r3, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	b25b      	sxtb	r3, r3
 8001612:	4013      	ands	r3, r2
 8001614:	b25a      	sxtb	r2, r3
 8001616:	4603      	mov	r3, r0
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	f107 0118 	add.w	r1, r7, #24
 800161e:	440b      	add	r3, r1
 8001620:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8001624:	e014      	b.n	8001650 <ToF_init+0x192>
	  }
	  else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 8001626:	7dbb      	ldrb	r3, [r7, #22]
 8001628:	08db      	lsrs	r3, r3, #3
 800162a:	b2db      	uxtb	r3, r3
 800162c:	f107 0218 	add.w	r2, r7, #24
 8001630:	4413      	add	r3, r2
 8001632:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001636:	461a      	mov	r2, r3
 8001638:	7dbb      	ldrb	r3, [r7, #22]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	fa42 f303 	asr.w	r3, r2, r3
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d002      	beq.n	8001650 <ToF_init+0x192>
	  {
		  spads_enabled++;
 800164a:	7dfb      	ldrb	r3, [r7, #23]
 800164c:	3301      	adds	r3, #1
 800164e:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < 48; i++)
 8001650:	7dbb      	ldrb	r3, [r7, #22]
 8001652:	3301      	adds	r3, #1
 8001654:	75bb      	strb	r3, [r7, #22]
 8001656:	7dbb      	ldrb	r3, [r7, #22]
 8001658:	2b2f      	cmp	r3, #47	; 0x2f
 800165a:	d9bf      	bls.n	80015dc <ToF_init+0x11e>
	  }
	}
	ToF_writeMulti(ToF, GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 800165c:	f107 020c 	add.w	r2, r7, #12
 8001660:	2306      	movs	r3, #6
 8001662:	21b0      	movs	r1, #176	; 0xb0
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff faeb 	bl	8000c40 <ToF_writeMulti>

	ToF_writeReg(ToF, 0xFF, 0x01);
 800166a:	2201      	movs	r2, #1
 800166c:	21ff      	movs	r1, #255	; 0xff
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff faa0 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x00, 0x00);
 8001674:	2200      	movs	r2, #0
 8001676:	2100      	movs	r1, #0
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff fa9b 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x00);
 800167e:	2200      	movs	r2, #0
 8001680:	21ff      	movs	r1, #255	; 0xff
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff fa96 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x09, 0x00);
 8001688:	2200      	movs	r2, #0
 800168a:	2109      	movs	r1, #9
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff fa91 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x10, 0x00);
 8001692:	2200      	movs	r2, #0
 8001694:	2110      	movs	r1, #16
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff fa8c 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x11, 0x00);
 800169c:	2200      	movs	r2, #0
 800169e:	2111      	movs	r1, #17
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff fa87 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0x24, 0x01);
 80016a6:	2201      	movs	r2, #1
 80016a8:	2124      	movs	r1, #36	; 0x24
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fa82 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x25, 0xFF);
 80016b0:	22ff      	movs	r2, #255	; 0xff
 80016b2:	2125      	movs	r1, #37	; 0x25
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff fa7d 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x75, 0x00);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2175      	movs	r1, #117	; 0x75
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff fa78 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x01);
 80016c4:	2201      	movs	r2, #1
 80016c6:	21ff      	movs	r1, #255	; 0xff
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff fa73 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x4E, 0x2C);
 80016ce:	222c      	movs	r2, #44	; 0x2c
 80016d0:	214e      	movs	r1, #78	; 0x4e
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff fa6e 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x48, 0x00);
 80016d8:	2200      	movs	r2, #0
 80016da:	2148      	movs	r1, #72	; 0x48
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff fa69 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x30, 0x20);
 80016e2:	2220      	movs	r2, #32
 80016e4:	2130      	movs	r1, #48	; 0x30
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff fa64 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x00);
 80016ec:	2200      	movs	r2, #0
 80016ee:	21ff      	movs	r1, #255	; 0xff
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff fa5f 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x30, 0x09);
 80016f6:	2209      	movs	r2, #9
 80016f8:	2130      	movs	r1, #48	; 0x30
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff fa5a 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x54, 0x00);
 8001700:	2200      	movs	r2, #0
 8001702:	2154      	movs	r1, #84	; 0x54
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff fa55 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x31, 0x04);
 800170a:	2204      	movs	r2, #4
 800170c:	2131      	movs	r1, #49	; 0x31
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff fa50 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x32, 0x03);
 8001714:	2203      	movs	r2, #3
 8001716:	2132      	movs	r1, #50	; 0x32
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff fa4b 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x40, 0x83);
 800171e:	2283      	movs	r2, #131	; 0x83
 8001720:	2140      	movs	r1, #64	; 0x40
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff fa46 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x46, 0x25);
 8001728:	2225      	movs	r2, #37	; 0x25
 800172a:	2146      	movs	r1, #70	; 0x46
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff fa41 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x60, 0x00);
 8001732:	2200      	movs	r2, #0
 8001734:	2160      	movs	r1, #96	; 0x60
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff fa3c 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x27, 0x00);
 800173c:	2200      	movs	r2, #0
 800173e:	2127      	movs	r1, #39	; 0x27
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff fa37 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x50, 0x06);
 8001746:	2206      	movs	r2, #6
 8001748:	2150      	movs	r1, #80	; 0x50
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff fa32 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x51, 0x00);
 8001750:	2200      	movs	r2, #0
 8001752:	2151      	movs	r1, #81	; 0x51
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff fa2d 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x52, 0x96);
 800175a:	2296      	movs	r2, #150	; 0x96
 800175c:	2152      	movs	r1, #82	; 0x52
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff fa28 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x56, 0x08);
 8001764:	2208      	movs	r2, #8
 8001766:	2156      	movs	r1, #86	; 0x56
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff fa23 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x57, 0x30);
 800176e:	2230      	movs	r2, #48	; 0x30
 8001770:	2157      	movs	r1, #87	; 0x57
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff fa1e 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x61, 0x00);
 8001778:	2200      	movs	r2, #0
 800177a:	2161      	movs	r1, #97	; 0x61
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff fa19 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x62, 0x00);
 8001782:	2200      	movs	r2, #0
 8001784:	2162      	movs	r1, #98	; 0x62
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff fa14 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x64, 0x00);
 800178c:	2200      	movs	r2, #0
 800178e:	2164      	movs	r1, #100	; 0x64
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff fa0f 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x65, 0x00);
 8001796:	2200      	movs	r2, #0
 8001798:	2165      	movs	r1, #101	; 0x65
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff fa0a 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x66, 0xA0);
 80017a0:	22a0      	movs	r2, #160	; 0xa0
 80017a2:	2166      	movs	r1, #102	; 0x66
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff fa05 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x01);
 80017aa:	2201      	movs	r2, #1
 80017ac:	21ff      	movs	r1, #255	; 0xff
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff fa00 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x22, 0x32);
 80017b4:	2232      	movs	r2, #50	; 0x32
 80017b6:	2122      	movs	r1, #34	; 0x22
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff f9fb 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x47, 0x14);
 80017be:	2214      	movs	r2, #20
 80017c0:	2147      	movs	r1, #71	; 0x47
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff f9f6 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x49, 0xFF);
 80017c8:	22ff      	movs	r2, #255	; 0xff
 80017ca:	2149      	movs	r1, #73	; 0x49
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff f9f1 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x4A, 0x00);
 80017d2:	2200      	movs	r2, #0
 80017d4:	214a      	movs	r1, #74	; 0x4a
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff f9ec 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x00);
 80017dc:	2200      	movs	r2, #0
 80017de:	21ff      	movs	r1, #255	; 0xff
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff f9e7 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x7A, 0x0A);
 80017e6:	220a      	movs	r2, #10
 80017e8:	217a      	movs	r1, #122	; 0x7a
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff f9e2 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x7B, 0x00);
 80017f0:	2200      	movs	r2, #0
 80017f2:	217b      	movs	r1, #123	; 0x7b
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff f9dd 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x78, 0x21);
 80017fa:	2221      	movs	r2, #33	; 0x21
 80017fc:	2178      	movs	r1, #120	; 0x78
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff f9d8 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x01);
 8001804:	2201      	movs	r2, #1
 8001806:	21ff      	movs	r1, #255	; 0xff
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff f9d3 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x23, 0x34);
 800180e:	2234      	movs	r2, #52	; 0x34
 8001810:	2123      	movs	r1, #35	; 0x23
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff f9ce 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x42, 0x00);
 8001818:	2200      	movs	r2, #0
 800181a:	2142      	movs	r1, #66	; 0x42
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff f9c9 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x44, 0xFF);
 8001822:	22ff      	movs	r2, #255	; 0xff
 8001824:	2144      	movs	r1, #68	; 0x44
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff f9c4 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x45, 0x26);
 800182c:	2226      	movs	r2, #38	; 0x26
 800182e:	2145      	movs	r1, #69	; 0x45
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff f9bf 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x46, 0x05);
 8001836:	2205      	movs	r2, #5
 8001838:	2146      	movs	r1, #70	; 0x46
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff f9ba 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x40, 0x40);
 8001840:	2240      	movs	r2, #64	; 0x40
 8001842:	2140      	movs	r1, #64	; 0x40
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff f9b5 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x0E, 0x06);
 800184a:	2206      	movs	r2, #6
 800184c:	210e      	movs	r1, #14
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff f9b0 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x20, 0x1A);
 8001854:	221a      	movs	r2, #26
 8001856:	2120      	movs	r1, #32
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff f9ab 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x43, 0x40);
 800185e:	2240      	movs	r2, #64	; 0x40
 8001860:	2143      	movs	r1, #67	; 0x43
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff f9a6 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x00);
 8001868:	2200      	movs	r2, #0
 800186a:	21ff      	movs	r1, #255	; 0xff
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff f9a1 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x34, 0x03);
 8001872:	2203      	movs	r2, #3
 8001874:	2134      	movs	r1, #52	; 0x34
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff f99c 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x35, 0x44);
 800187c:	2244      	movs	r2, #68	; 0x44
 800187e:	2135      	movs	r1, #53	; 0x35
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff f997 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x01);
 8001886:	2201      	movs	r2, #1
 8001888:	21ff      	movs	r1, #255	; 0xff
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff f992 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x31, 0x04);
 8001890:	2204      	movs	r2, #4
 8001892:	2131      	movs	r1, #49	; 0x31
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff f98d 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x4B, 0x09);
 800189a:	2209      	movs	r2, #9
 800189c:	214b      	movs	r1, #75	; 0x4b
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff f988 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x4C, 0x05);
 80018a4:	2205      	movs	r2, #5
 80018a6:	214c      	movs	r1, #76	; 0x4c
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff f983 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x4D, 0x04);
 80018ae:	2204      	movs	r2, #4
 80018b0:	214d      	movs	r1, #77	; 0x4d
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff f97e 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x00);
 80018b8:	2200      	movs	r2, #0
 80018ba:	21ff      	movs	r1, #255	; 0xff
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff f979 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x44, 0x00);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2144      	movs	r1, #68	; 0x44
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff f974 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x45, 0x20);
 80018cc:	2220      	movs	r2, #32
 80018ce:	2145      	movs	r1, #69	; 0x45
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff f96f 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x47, 0x08);
 80018d6:	2208      	movs	r2, #8
 80018d8:	2147      	movs	r1, #71	; 0x47
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff f96a 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x48, 0x28);
 80018e0:	2228      	movs	r2, #40	; 0x28
 80018e2:	2148      	movs	r1, #72	; 0x48
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff f965 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x67, 0x00);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2167      	movs	r1, #103	; 0x67
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff f960 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x70, 0x04);
 80018f4:	2204      	movs	r2, #4
 80018f6:	2170      	movs	r1, #112	; 0x70
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff f95b 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x71, 0x01);
 80018fe:	2201      	movs	r2, #1
 8001900:	2171      	movs	r1, #113	; 0x71
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff f956 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x72, 0xFE);
 8001908:	22fe      	movs	r2, #254	; 0xfe
 800190a:	2172      	movs	r1, #114	; 0x72
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff f951 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x76, 0x00);
 8001912:	2200      	movs	r2, #0
 8001914:	2176      	movs	r1, #118	; 0x76
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff f94c 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x77, 0x00);
 800191c:	2200      	movs	r2, #0
 800191e:	2177      	movs	r1, #119	; 0x77
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff f947 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x01);
 8001926:	2201      	movs	r2, #1
 8001928:	21ff      	movs	r1, #255	; 0xff
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff f942 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x0D, 0x01);
 8001930:	2201      	movs	r2, #1
 8001932:	210d      	movs	r1, #13
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff f93d 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x00);
 800193a:	2200      	movs	r2, #0
 800193c:	21ff      	movs	r1, #255	; 0xff
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff f938 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x80, 0x01);
 8001944:	2201      	movs	r2, #1
 8001946:	2180      	movs	r1, #128	; 0x80
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff f933 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x01, 0xF8);
 800194e:	22f8      	movs	r2, #248	; 0xf8
 8001950:	2101      	movs	r1, #1
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff f92e 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x01);
 8001958:	2201      	movs	r2, #1
 800195a:	21ff      	movs	r1, #255	; 0xff
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff f929 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x8E, 0x01);
 8001962:	2201      	movs	r2, #1
 8001964:	218e      	movs	r1, #142	; 0x8e
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff f924 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x00, 0x01);
 800196c:	2201      	movs	r2, #1
 800196e:	2100      	movs	r1, #0
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff f91f 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x00);
 8001976:	2200      	movs	r2, #0
 8001978:	21ff      	movs	r1, #255	; 0xff
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff f91a 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x80, 0x00);
 8001980:	2200      	movs	r2, #0
 8001982:	2180      	movs	r1, #128	; 0x80
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff f915 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 800198a:	2204      	movs	r2, #4
 800198c:	210a      	movs	r1, #10
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff f910 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, GPIO_HV_MUX_ACTIVE_HIGH, ToF_readReg(ToF, GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 8001994:	2184      	movs	r1, #132	; 0x84
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff f9b0 	bl	8000cfc <ToF_readReg>
 800199c:	4603      	mov	r3, r0
 800199e:	f023 0310 	bic.w	r3, r3, #16
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	461a      	mov	r2, r3
 80019a6:	2184      	movs	r1, #132	; 0x84
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff f903 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, SYSTEM_INTERRUPT_CLEAR, 0x01);
 80019ae:	2201      	movs	r2, #1
 80019b0:	210b      	movs	r1, #11
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff f8fe 	bl	8000bb4 <ToF_writeReg>

	ToF->measurement_timing_budget_us = ToF_getMeasurementTimingBudget(ToF);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff fc56 	bl	800126a <ToF_getMeasurementTimingBudget>
 80019be:	4602      	mov	r2, r0
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	605a      	str	r2, [r3, #4]

	ToF_writeReg(ToF, SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80019c4:	22e8      	movs	r2, #232	; 0xe8
 80019c6:	2101      	movs	r1, #1
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff f8f3 	bl	8000bb4 <ToF_writeReg>

	ToF_setMeasurementTimingBudget(ToF, ToF->measurement_timing_budget_us);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4619      	mov	r1, r3
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff fcaf 	bl	8001338 <ToF_setMeasurementTimingBudget>

	ToF_writeReg(ToF, SYSTEM_SEQUENCE_CONFIG, 0x01);
 80019da:	2201      	movs	r2, #1
 80019dc:	2101      	movs	r1, #1
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff f8e8 	bl	8000bb4 <ToF_writeReg>

	if (!ToF_performSingleRefCalibration(ToF, 0x40)) { return 0; }
 80019e4:	2140      	movs	r1, #64	; 0x40
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff fd41 	bl	800146e <ToF_performSingleRefCalibration>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <ToF_init+0x538>
 80019f2:	2300      	movs	r3, #0
 80019f4:	e013      	b.n	8001a1e <ToF_init+0x560>

	ToF_writeReg(ToF, SYSTEM_SEQUENCE_CONFIG, 0x02);
 80019f6:	2202      	movs	r2, #2
 80019f8:	2101      	movs	r1, #1
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff f8da 	bl	8000bb4 <ToF_writeReg>

    if (!ToF_performSingleRefCalibration(ToF, 0x00)) { return 0; }
 8001a00:	2100      	movs	r1, #0
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff fd33 	bl	800146e <ToF_performSingleRefCalibration>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <ToF_init+0x554>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e005      	b.n	8001a1e <ToF_init+0x560>

    ToF_writeReg(ToF, SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8001a12:	22e8      	movs	r2, #232	; 0xe8
 8001a14:	2101      	movs	r1, #1
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff f8cc 	bl	8000bb4 <ToF_writeReg>

	return 1;
 8001a1c:	2301      	movs	r3, #1
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <ToF_setAddress>:

void ToF_setAddress(struct ToF_struct *ToF, uint8_t new_addr)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	460b      	mov	r3, r1
 8001a30:	70fb      	strb	r3, [r7, #3]
	ToF_writeReg(ToF, I2C_SLAVE_DEVICE_ADDRESS, new_addr & 0x7F);
 8001a32:	78fb      	ldrb	r3, [r7, #3]
 8001a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	218a      	movs	r1, #138	; 0x8a
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff f8b8 	bl	8000bb4 <ToF_writeReg>
	ToF->bus_address = new_addr;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	78fa      	ldrb	r2, [r7, #3]
 8001a48:	701a      	strb	r2, [r3, #0]
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <ToF_startContinuous>:

void ToF_startContinuous(struct ToF_struct *ToF)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
	ToF_writeReg(ToF, 0x80, 0x01);
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	2180      	movs	r1, #128	; 0x80
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff f8a8 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x01);
 8001a64:	2201      	movs	r2, #1
 8001a66:	21ff      	movs	r1, #255	; 0xff
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff f8a3 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x00, 0x00);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2100      	movs	r1, #0
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff f89e 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x91, ToF->stop_variable);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	785b      	ldrb	r3, [r3, #1]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	2191      	movs	r1, #145	; 0x91
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff f897 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x00, 0x01);
 8001a86:	2201      	movs	r2, #1
 8001a88:	2100      	movs	r1, #0
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff f892 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x00);
 8001a90:	2200      	movs	r2, #0
 8001a92:	21ff      	movs	r1, #255	; 0xff
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff f88d 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x80, 0x00);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2180      	movs	r1, #128	; 0x80
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff f888 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, SYSRANGE_START, 0x02);
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff f883 	bl	8000bb4 <ToF_writeReg>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <ToF_readRangeContinuousMillimeters>:

uint16_t ToF_readRangeContinuousMillimeters(struct ToF_struct *ToF)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b084      	sub	sp, #16
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
	while ((ToF_readReg(ToF,RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8001abe:	bf00      	nop
 8001ac0:	2113      	movs	r1, #19
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff f91a 	bl	8000cfc <ToF_readReg>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f6      	beq.n	8001ac0 <ToF_readRangeContinuousMillimeters+0xa>
	{
		//timeout
	}

	uint16_t range = ToF_readReg16Bit(ToF, RESULT_RANGE_STATUS + 10);
 8001ad2:	211e      	movs	r1, #30
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff f939 	bl	8000d4c <ToF_readReg16Bit>
 8001ada:	4603      	mov	r3, r0
 8001adc:	81fb      	strh	r3, [r7, #14]
	ToF_writeReg(ToF, SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001ade:	2201      	movs	r2, #1
 8001ae0:	210b      	movs	r1, #11
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff f866 	bl	8000bb4 <ToF_writeReg>
	return range;
 8001ae8:	89fb      	ldrh	r3, [r7, #14]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <initMicromouseVL53L0x>:
 * funkcji main z nadmiaru kodu.
 *
 */

void initMicromouseVL53L0x()
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
	  //////////////////////////////////////////////////////////////////////////
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_F_Pin, 0);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2110      	movs	r1, #16
 8001afc:	4863      	ldr	r0, [pc, #396]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001afe:	f001 fe61 	bl	80037c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FR_Pin, 1);
 8001b02:	2201      	movs	r2, #1
 8001b04:	2101      	movs	r1, #1
 8001b06:	4861      	ldr	r0, [pc, #388]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001b08:	f001 fe5c 	bl	80037c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FL_Pin, 0);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2102      	movs	r1, #2
 8001b10:	485e      	ldr	r0, [pc, #376]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001b12:	f001 fe57 	bl	80037c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_R_Pin, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2104      	movs	r1, #4
 8001b1a:	485c      	ldr	r0, [pc, #368]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001b1c:	f001 fe52 	bl	80037c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_L_Pin, 0);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2108      	movs	r1, #8
 8001b24:	4859      	ldr	r0, [pc, #356]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001b26:	f001 fe4d 	bl	80037c4 <HAL_GPIO_WritePin>

	  ToF_init(&ToF_FR);                      //inicjalizacja czujnika FR
 8001b2a:	4859      	ldr	r0, [pc, #356]	; (8001c90 <initMicromouseVL53L0x+0x19c>)
 8001b2c:	f7ff fcc7 	bl	80014be <ToF_init>
	  ToF_setAddress(&ToF_FR, 0x30);
 8001b30:	2130      	movs	r1, #48	; 0x30
 8001b32:	4857      	ldr	r0, [pc, #348]	; (8001c90 <initMicromouseVL53L0x+0x19c>)
 8001b34:	f7ff ff77 	bl	8001a26 <ToF_setAddress>

	  //////////////////////////////////////////////////////////////////////////
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_F_Pin, 0);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2110      	movs	r1, #16
 8001b3c:	4853      	ldr	r0, [pc, #332]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001b3e:	f001 fe41 	bl	80037c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FR_Pin, 1);
 8001b42:	2201      	movs	r2, #1
 8001b44:	2101      	movs	r1, #1
 8001b46:	4851      	ldr	r0, [pc, #324]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001b48:	f001 fe3c 	bl	80037c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FL_Pin, 1);
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	2102      	movs	r1, #2
 8001b50:	484e      	ldr	r0, [pc, #312]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001b52:	f001 fe37 	bl	80037c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_R_Pin, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2104      	movs	r1, #4
 8001b5a:	484c      	ldr	r0, [pc, #304]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001b5c:	f001 fe32 	bl	80037c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_L_Pin, 0);
 8001b60:	2200      	movs	r2, #0
 8001b62:	2108      	movs	r1, #8
 8001b64:	4849      	ldr	r0, [pc, #292]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001b66:	f001 fe2d 	bl	80037c4 <HAL_GPIO_WritePin>

	  ToF_init(&ToF_FL);                      //inicjalizacja czujnika FL
 8001b6a:	484a      	ldr	r0, [pc, #296]	; (8001c94 <initMicromouseVL53L0x+0x1a0>)
 8001b6c:	f7ff fca7 	bl	80014be <ToF_init>
	  ToF_setAddress(&ToF_FL, 0x31);
 8001b70:	2131      	movs	r1, #49	; 0x31
 8001b72:	4848      	ldr	r0, [pc, #288]	; (8001c94 <initMicromouseVL53L0x+0x1a0>)
 8001b74:	f7ff ff57 	bl	8001a26 <ToF_setAddress>

	  //////////////////////////////////////////////////////////////////////////
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_F_Pin, 0);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2110      	movs	r1, #16
 8001b7c:	4843      	ldr	r0, [pc, #268]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001b7e:	f001 fe21 	bl	80037c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FR_Pin, 1);
 8001b82:	2201      	movs	r2, #1
 8001b84:	2101      	movs	r1, #1
 8001b86:	4841      	ldr	r0, [pc, #260]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001b88:	f001 fe1c 	bl	80037c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FL_Pin, 1);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	2102      	movs	r1, #2
 8001b90:	483e      	ldr	r0, [pc, #248]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001b92:	f001 fe17 	bl	80037c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_R_Pin, 1);
 8001b96:	2201      	movs	r2, #1
 8001b98:	2104      	movs	r1, #4
 8001b9a:	483c      	ldr	r0, [pc, #240]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001b9c:	f001 fe12 	bl	80037c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_L_Pin, 0);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2108      	movs	r1, #8
 8001ba4:	4839      	ldr	r0, [pc, #228]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001ba6:	f001 fe0d 	bl	80037c4 <HAL_GPIO_WritePin>

	  ToF_init(&ToF_R);                     //inicjalizacja czujnika R
 8001baa:	483b      	ldr	r0, [pc, #236]	; (8001c98 <initMicromouseVL53L0x+0x1a4>)
 8001bac:	f7ff fc87 	bl	80014be <ToF_init>
	  ToF_setAddress(&ToF_R, 0x32);
 8001bb0:	2132      	movs	r1, #50	; 0x32
 8001bb2:	4839      	ldr	r0, [pc, #228]	; (8001c98 <initMicromouseVL53L0x+0x1a4>)
 8001bb4:	f7ff ff37 	bl	8001a26 <ToF_setAddress>

	  //////////////////////////////////////////////////////////////////////////
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_F_Pin, 0);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2110      	movs	r1, #16
 8001bbc:	4833      	ldr	r0, [pc, #204]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001bbe:	f001 fe01 	bl	80037c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FR_Pin, 1);
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	4831      	ldr	r0, [pc, #196]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001bc8:	f001 fdfc 	bl	80037c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FL_Pin, 1);
 8001bcc:	2201      	movs	r2, #1
 8001bce:	2102      	movs	r1, #2
 8001bd0:	482e      	ldr	r0, [pc, #184]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001bd2:	f001 fdf7 	bl	80037c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_R_Pin, 1);
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	2104      	movs	r1, #4
 8001bda:	482c      	ldr	r0, [pc, #176]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001bdc:	f001 fdf2 	bl	80037c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_L_Pin, 1);
 8001be0:	2201      	movs	r2, #1
 8001be2:	2108      	movs	r1, #8
 8001be4:	4829      	ldr	r0, [pc, #164]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001be6:	f001 fded 	bl	80037c4 <HAL_GPIO_WritePin>

	  ToF_init(&ToF_L);                     //inicjalizacja czujnika L
 8001bea:	482c      	ldr	r0, [pc, #176]	; (8001c9c <initMicromouseVL53L0x+0x1a8>)
 8001bec:	f7ff fc67 	bl	80014be <ToF_init>
	  ToF_setAddress(&ToF_L, 0x33);
 8001bf0:	2133      	movs	r1, #51	; 0x33
 8001bf2:	482a      	ldr	r0, [pc, #168]	; (8001c9c <initMicromouseVL53L0x+0x1a8>)
 8001bf4:	f7ff ff17 	bl	8001a26 <ToF_setAddress>

	  //////////////////////////////////////////////////////////////////////////
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_F_Pin, 1);
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	2110      	movs	r1, #16
 8001bfc:	4823      	ldr	r0, [pc, #140]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001bfe:	f001 fde1 	bl	80037c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FR_Pin, 1);
 8001c02:	2201      	movs	r2, #1
 8001c04:	2101      	movs	r1, #1
 8001c06:	4821      	ldr	r0, [pc, #132]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001c08:	f001 fddc 	bl	80037c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FL_Pin, 1);
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	2102      	movs	r1, #2
 8001c10:	481e      	ldr	r0, [pc, #120]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001c12:	f001 fdd7 	bl	80037c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_R_Pin, 1);
 8001c16:	2201      	movs	r2, #1
 8001c18:	2104      	movs	r1, #4
 8001c1a:	481c      	ldr	r0, [pc, #112]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001c1c:	f001 fdd2 	bl	80037c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_L_Pin, 1);
 8001c20:	2201      	movs	r2, #1
 8001c22:	2108      	movs	r1, #8
 8001c24:	4819      	ldr	r0, [pc, #100]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001c26:	f001 fdcd 	bl	80037c4 <HAL_GPIO_WritePin>

	  ToF_init(&ToF_F);                     //inicjalizacja czujnika F
 8001c2a:	481d      	ldr	r0, [pc, #116]	; (8001ca0 <initMicromouseVL53L0x+0x1ac>)
 8001c2c:	f7ff fc47 	bl	80014be <ToF_init>
	  ToF_setAddress(&ToF_F, 0x34);
 8001c30:	2134      	movs	r1, #52	; 0x34
 8001c32:	481b      	ldr	r0, [pc, #108]	; (8001ca0 <initMicromouseVL53L0x+0x1ac>)
 8001c34:	f7ff fef7 	bl	8001a26 <ToF_setAddress>
	  //////////////////////////////////////////////////////////////////////////

	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_F_Pin, 1);     //uruchomienie wszystkich ToF
 8001c38:	2201      	movs	r2, #1
 8001c3a:	2110      	movs	r1, #16
 8001c3c:	4813      	ldr	r0, [pc, #76]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001c3e:	f001 fdc1 	bl	80037c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FR_Pin, 1);
 8001c42:	2201      	movs	r2, #1
 8001c44:	2101      	movs	r1, #1
 8001c46:	4811      	ldr	r0, [pc, #68]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001c48:	f001 fdbc 	bl	80037c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FL_Pin, 1);
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	2102      	movs	r1, #2
 8001c50:	480e      	ldr	r0, [pc, #56]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001c52:	f001 fdb7 	bl	80037c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_R_Pin, 1);
 8001c56:	2201      	movs	r2, #1
 8001c58:	2104      	movs	r1, #4
 8001c5a:	480c      	ldr	r0, [pc, #48]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001c5c:	f001 fdb2 	bl	80037c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_L_Pin, 1);
 8001c60:	2201      	movs	r2, #1
 8001c62:	2108      	movs	r1, #8
 8001c64:	4809      	ldr	r0, [pc, #36]	; (8001c8c <initMicromouseVL53L0x+0x198>)
 8001c66:	f001 fdad 	bl	80037c4 <HAL_GPIO_WritePin>

	  ToF_startContinuous(&ToF_F);                     //uruchomienie trybu pomiaru ciągłego
 8001c6a:	480d      	ldr	r0, [pc, #52]	; (8001ca0 <initMicromouseVL53L0x+0x1ac>)
 8001c6c:	f7ff fef1 	bl	8001a52 <ToF_startContinuous>
	  ToF_startContinuous(&ToF_R);
 8001c70:	4809      	ldr	r0, [pc, #36]	; (8001c98 <initMicromouseVL53L0x+0x1a4>)
 8001c72:	f7ff feee 	bl	8001a52 <ToF_startContinuous>
	  ToF_startContinuous(&ToF_L);
 8001c76:	4809      	ldr	r0, [pc, #36]	; (8001c9c <initMicromouseVL53L0x+0x1a8>)
 8001c78:	f7ff feeb 	bl	8001a52 <ToF_startContinuous>
	  ToF_startContinuous(&ToF_FR);
 8001c7c:	4804      	ldr	r0, [pc, #16]	; (8001c90 <initMicromouseVL53L0x+0x19c>)
 8001c7e:	f7ff fee8 	bl	8001a52 <ToF_startContinuous>
	  ToF_startContinuous(&ToF_FL);
 8001c82:	4804      	ldr	r0, [pc, #16]	; (8001c94 <initMicromouseVL53L0x+0x1a0>)
 8001c84:	f7ff fee5 	bl	8001a52 <ToF_startContinuous>
}
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40020800 	.word	0x40020800
 8001c90:	200000a8 	.word	0x200000a8
 8001c94:	200000b4 	.word	0x200000b4
 8001c98:	200000cc 	.word	0x200000cc
 8001c9c:	200000dc 	.word	0x200000dc
 8001ca0:	200000c4 	.word	0x200000c4

08001ca4 <encRead>:
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim4;


void encRead(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0


  oldLeftEncoder = leftEncoder;
 8001ca8:	4b3a      	ldr	r3, [pc, #232]	; (8001d94 <encRead+0xf0>)
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	b21a      	sxth	r2, r3
 8001cae:	4b3a      	ldr	r3, [pc, #232]	; (8001d98 <encRead+0xf4>)
 8001cb0:	801a      	strh	r2, [r3, #0]
  leftEncoder = TIM4->CNT; // przepisanie wartosci z rejestru timera 2 do zmiennej
 8001cb2:	4b3a      	ldr	r3, [pc, #232]	; (8001d9c <encRead+0xf8>)
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	b21a      	sxth	r2, r3
 8001cb8:	4b36      	ldr	r3, [pc, #216]	; (8001d94 <encRead+0xf0>)
 8001cba:	801a      	strh	r2, [r3, #0]
  oldRightEncoder = rightEncoder;
 8001cbc:	4b38      	ldr	r3, [pc, #224]	; (8001da0 <encRead+0xfc>)
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	b21a      	sxth	r2, r3
 8001cc2:	4b38      	ldr	r3, [pc, #224]	; (8001da4 <encRead+0x100>)
 8001cc4:	801a      	strh	r2, [r3, #0]
  rightEncoder = -TIM2->CNT; // przepisanie wartosci z rejestru timera 4 do zmiennej
 8001cc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	425b      	negs	r3, r3
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	b21a      	sxth	r2, r3
 8001cd4:	4b32      	ldr	r3, [pc, #200]	; (8001da0 <encRead+0xfc>)
 8001cd6:	801a      	strh	r2, [r3, #0]
  leftCount = leftEncoder - oldLeftEncoder;
 8001cd8:	4b2e      	ldr	r3, [pc, #184]	; (8001d94 <encRead+0xf0>)
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	b21b      	sxth	r3, r3
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	4b2d      	ldr	r3, [pc, #180]	; (8001d98 <encRead+0xf4>)
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	b21b      	sxth	r3, r3
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	b21a      	sxth	r2, r3
 8001cee:	4b2e      	ldr	r3, [pc, #184]	; (8001da8 <encRead+0x104>)
 8001cf0:	801a      	strh	r2, [r3, #0]
  rightCount = rightEncoder - oldRightEncoder;
 8001cf2:	4b2b      	ldr	r3, [pc, #172]	; (8001da0 <encRead+0xfc>)
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	b21b      	sxth	r3, r3
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	4b2a      	ldr	r3, [pc, #168]	; (8001da4 <encRead+0x100>)
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	b21a      	sxth	r2, r3
 8001d08:	4b28      	ldr	r3, [pc, #160]	; (8001dac <encRead+0x108>)
 8001d0a:	801a      	strh	r2, [r3, #0]
  fwdCount = leftCount + rightCount;
 8001d0c:	4b26      	ldr	r3, [pc, #152]	; (8001da8 <encRead+0x104>)
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	b21b      	sxth	r3, r3
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	4b25      	ldr	r3, [pc, #148]	; (8001dac <encRead+0x108>)
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	b21b      	sxth	r3, r3
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	b21a      	sxth	r2, r3
 8001d22:	4b23      	ldr	r3, [pc, #140]	; (8001db0 <encRead+0x10c>)
 8001d24:	801a      	strh	r2, [r3, #0]
  rotCount = - (leftCount - rightCount);
 8001d26:	4b21      	ldr	r3, [pc, #132]	; (8001dac <encRead+0x108>)
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	b21b      	sxth	r3, r3
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <encRead+0x104>)
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	b21a      	sxth	r2, r3
 8001d3c:	4b1d      	ldr	r3, [pc, #116]	; (8001db4 <encRead+0x110>)
 8001d3e:	801a      	strh	r2, [r3, #0]
  fwdTotal += fwdCount;
 8001d40:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <encRead+0x10c>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	b21b      	sxth	r3, r3
 8001d46:	461a      	mov	r2, r3
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <encRead+0x114>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	4a1a      	ldr	r2, [pc, #104]	; (8001db8 <encRead+0x114>)
 8001d50:	6013      	str	r3, [r2, #0]
  rotTotal += rotCount;
 8001d52:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <encRead+0x110>)
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	b21b      	sxth	r3, r3
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <encRead+0x118>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4413      	add	r3, r2
 8001d60:	4a16      	ldr	r2, [pc, #88]	; (8001dbc <encRead+0x118>)
 8001d62:	6013      	str	r3, [r2, #0]
  leftTotal += leftCount;
 8001d64:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <encRead+0x104>)
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <encRead+0x11c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4413      	add	r3, r2
 8001d72:	4a13      	ldr	r2, [pc, #76]	; (8001dc0 <encRead+0x11c>)
 8001d74:	6013      	str	r3, [r2, #0]
  rightTotal += rightCount;
 8001d76:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <encRead+0x108>)
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	b21b      	sxth	r3, r3
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <encRead+0x120>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4413      	add	r3, r2
 8001d84:	4a0f      	ldr	r2, [pc, #60]	; (8001dc4 <encRead+0x120>)
 8001d86:	6013      	str	r3, [r2, #0]


}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	20000090 	.word	0x20000090
 8001d98:	2000008c 	.word	0x2000008c
 8001d9c:	40000800 	.word	0x40000800
 8001da0:	20000092 	.word	0x20000092
 8001da4:	2000008e 	.word	0x2000008e
 8001da8:	200000f4 	.word	0x200000f4
 8001dac:	20000100 	.word	0x20000100
 8001db0:	200000ec 	.word	0x200000ec
 8001db4:	200000e4 	.word	0x200000e4
 8001db8:	200000e8 	.word	0x200000e8
 8001dbc:	200000f0 	.word	0x200000f0
 8001dc0:	200000fc 	.word	0x200000fc
 8001dc4:	200000f8 	.word	0x200000f8

08001dc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	; 0x28
 8001dcc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dce:	f107 0314 	add.w	r3, r7, #20
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	609a      	str	r2, [r3, #8]
 8001dda:	60da      	str	r2, [r3, #12]
 8001ddc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	4b3e      	ldr	r3, [pc, #248]	; (8001edc <MX_GPIO_Init+0x114>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a3d      	ldr	r2, [pc, #244]	; (8001edc <MX_GPIO_Init+0x114>)
 8001de8:	f043 0304 	orr.w	r3, r3, #4
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b3b      	ldr	r3, [pc, #236]	; (8001edc <MX_GPIO_Init+0x114>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b37      	ldr	r3, [pc, #220]	; (8001edc <MX_GPIO_Init+0x114>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a36      	ldr	r2, [pc, #216]	; (8001edc <MX_GPIO_Init+0x114>)
 8001e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b34      	ldr	r3, [pc, #208]	; (8001edc <MX_GPIO_Init+0x114>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	4b30      	ldr	r3, [pc, #192]	; (8001edc <MX_GPIO_Init+0x114>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a2f      	ldr	r2, [pc, #188]	; (8001edc <MX_GPIO_Init+0x114>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <MX_GPIO_Init+0x114>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	4b29      	ldr	r3, [pc, #164]	; (8001edc <MX_GPIO_Init+0x114>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a28      	ldr	r2, [pc, #160]	; (8001edc <MX_GPIO_Init+0x114>)
 8001e3c:	f043 0302 	orr.w	r3, r3, #2
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b26      	ldr	r3, [pc, #152]	; (8001edc <MX_GPIO_Init+0x114>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FR_Pin|TOF_GPIO_FL_Pin|TOF_GPIO_R_Pin|TOF_GPIO_L_Pin 
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f241 411f 	movw	r1, #5151	; 0x141f
 8001e54:	4822      	ldr	r0, [pc, #136]	; (8001ee0 <MX_GPIO_Init+0x118>)
 8001e56:	f001 fcb5 	bl	80037c4 <HAL_GPIO_WritePin>
                          |TOF_GPIO_F_Pin|DIR_L_Pin|DIR_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e60:	4820      	ldr	r0, [pc, #128]	; (8001ee4 <MX_GPIO_Init+0x11c>)
 8001e62:	f001 fcaf 	bl	80037c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <MX_GPIO_Init+0x120>)
 8001e6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4819      	ldr	r0, [pc, #100]	; (8001ee0 <MX_GPIO_Init+0x118>)
 8001e7c:	f001 fb20 	bl	80034c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = TOF_GPIO_FR_Pin|TOF_GPIO_FL_Pin|TOF_GPIO_R_Pin|TOF_GPIO_L_Pin 
 8001e80:	f241 431f 	movw	r3, #5151	; 0x141f
 8001e84:	617b      	str	r3, [r7, #20]
                          |TOF_GPIO_F_Pin|DIR_L_Pin|DIR_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e86:	2301      	movs	r3, #1
 8001e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	4619      	mov	r1, r3
 8001e98:	4811      	ldr	r0, [pc, #68]	; (8001ee0 <MX_GPIO_Init+0x118>)
 8001e9a:	f001 fb11 	bl	80034c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001e9e:	2310      	movs	r3, #16
 8001ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001eaa:	f107 0314 	add.w	r3, r7, #20
 8001eae:	4619      	mov	r1, r3
 8001eb0:	480e      	ldr	r0, [pc, #56]	; (8001eec <MX_GPIO_Init+0x124>)
 8001eb2:	f001 fb05 	bl	80034c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8001eb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <MX_GPIO_Init+0x11c>)
 8001ed0:	f001 faf6 	bl	80034c0 <HAL_GPIO_Init>

}
 8001ed4:	bf00      	nop
 8001ed6:	3728      	adds	r7, #40	; 0x28
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020800 	.word	0x40020800
 8001ee4:	40020400 	.word	0x40020400
 8001ee8:	10210000 	.word	0x10210000
 8001eec:	40020000 	.word	0x40020000

08001ef0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001ef6:	4a13      	ldr	r2, [pc, #76]	; (8001f44 <MX_I2C1_Init+0x54>)
 8001ef8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001efa:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001efc:	4a12      	ldr	r2, [pc, #72]	; (8001f48 <MX_I2C1_Init+0x58>)
 8001efe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f00:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f14:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f20:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f2c:	4804      	ldr	r0, [pc, #16]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f2e:	f001 fc63 	bl	80037f8 <HAL_I2C_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f38:	f000 f99c 	bl	8002274 <Error_Handler>
  }

}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20000104 	.word	0x20000104
 8001f44:	40005400 	.word	0x40005400
 8001f48:	000186a0 	.word	0x000186a0

08001f4c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08a      	sub	sp, #40	; 0x28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a19      	ldr	r2, [pc, #100]	; (8001fd0 <HAL_I2C_MspInit+0x84>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d12c      	bne.n	8001fc8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <HAL_I2C_MspInit+0x88>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4a17      	ldr	r2, [pc, #92]	; (8001fd4 <HAL_I2C_MspInit+0x88>)
 8001f78:	f043 0302 	orr.w	r3, r3, #2
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7e:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <HAL_I2C_MspInit+0x88>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001f8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f90:	2312      	movs	r3, #18
 8001f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f94:	2301      	movs	r3, #1
 8001f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	480c      	ldr	r0, [pc, #48]	; (8001fd8 <HAL_I2C_MspInit+0x8c>)
 8001fa8:	f001 fa8a 	bl	80034c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <HAL_I2C_MspInit+0x88>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	4a07      	ldr	r2, [pc, #28]	; (8001fd4 <HAL_I2C_MspInit+0x88>)
 8001fb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fba:	6413      	str	r3, [r2, #64]	; 0x40
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <HAL_I2C_MspInit+0x88>)
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001fc8:	bf00      	nop
 8001fca:	3728      	adds	r7, #40	; 0x28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40005400 	.word	0x40005400
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40020400 	.word	0x40020400

08001fdc <_write>:
/* USER CODE BEGIN 0 */

//przekierowanie printf dla portu szeregowego

int _write ( int file, char *ptr, int len)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 50);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	2332      	movs	r3, #50	; 0x32
 8001fee:	68b9      	ldr	r1, [r7, #8]
 8001ff0:	4803      	ldr	r0, [pc, #12]	; (8002000 <_write+0x24>)
 8001ff2:	f004 fae6 	bl	80065c2 <HAL_UART_Transmit>
 return len;
 8001ff6:	687b      	ldr	r3, [r7, #4]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000224 	.word	0x20000224

08002004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002006:	b0a1      	sub	sp, #132	; 0x84
 8002008:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800200a:	f001 f8df 	bl	80031cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800200e:	f000 f8c7 	bl	80021a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002012:	f7ff fed9 	bl	8001dc8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002016:	f001 f83d 	bl	8003094 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800201a:	f7ff ff69 	bl	8001ef0 <MX_I2C1_Init>
  MX_TIM2_Init();
 800201e:	f000 fe19 	bl	8002c54 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002022:	f000 fe6b 	bl	8002cfc <MX_TIM3_Init>
  MX_TIM4_Init();
 8002026:	f000 feeb 	bl	8002e00 <MX_TIM4_Init>

  //zmienne lokalne funkcji main - ustawione jako lokalne by były od razu widoczne w debuggerze
  /************************************************************************/

  //zmienne dla MPU6050
  float ax = 0, ay = 0, az = 0, gx = 0, gy = 0, gz = 0, temperature = 0;
 800202a:	f04f 0300 	mov.w	r3, #0
 800202e:	663b      	str	r3, [r7, #96]	; 0x60
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	65bb      	str	r3, [r7, #88]	; 0x58
 800203c:	f04f 0300 	mov.w	r3, #0
 8002040:	657b      	str	r3, [r7, #84]	; 0x54
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	653b      	str	r3, [r7, #80]	; 0x50
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800204e:	f04f 0300 	mov.w	r3, #0
 8002052:	66fb      	str	r3, [r7, #108]	; 0x6c

  //zmienne do podglądu enkoderów
  uint32_t prawy = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	66bb      	str	r3, [r7, #104]	; 0x68
  uint32_t lewy = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	667b      	str	r3, [r7, #100]	; 0x64

  //ramka danych na WDS
  char frameWDS[50] = {0};
 800205c:	f107 0318 	add.w	r3, r7, #24
 8002060:	2232      	movs	r2, #50	; 0x32
 8002062:	2100      	movs	r1, #0
 8002064:	4618      	mov	r0, r3
 8002066:	f004 ff35 	bl	8006ed4 <memset>
  volatile int dist_FL_tmp;
  volatile int dist_FR_tmp;

  /************************************************************************/

  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin, 0);  //zapal LED
 800206a:	2200      	movs	r2, #0
 800206c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002070:	483f      	ldr	r0, [pc, #252]	; (8002170 <main+0x16c>)
 8002072:	f001 fba7 	bl	80037c4 <HAL_GPIO_WritePin>

  //inicjalizacja PWM dla silników
  motorsInit();
 8002076:	f000 f905 	bl	8002284 <motorsInit>

  //inicjalizacja czujników ToF
  initMicromouseVL53L0x();
 800207a:	f7ff fd3b 	bl	8001af4 <initMicromouseVL53L0x>

  //inicjalizacja MPU6050

  MPU6050_Init(&hi2c1);
 800207e:	483d      	ldr	r0, [pc, #244]	; (8002174 <main+0x170>)
 8002080:	f000 fcde 	bl	8002a40 <MPU6050_Init>
  MPU6050_SetInterruptMode(MPU6050_INTMODE_ACTIVEHIGH);
 8002084:	2000      	movs	r0, #0
 8002086:	f000 fbe5 	bl	8002854 <MPU6050_SetInterruptMode>
  MPU6050_SetInterruptDrive(MPU6050_INTDRV_PUSHPULL);
 800208a:	2000      	movs	r0, #0
 800208c:	f000 fc18 	bl	80028c0 <MPU6050_SetInterruptDrive>
  MPU6050_SetInterruptLatch(MPU6050_INTLATCH_WAITCLEAR);
 8002090:	2001      	movs	r0, #1
 8002092:	f000 fc4d 	bl	8002930 <MPU6050_SetInterruptLatch>
  MPU6050_SetInterruptLatchClear(MPU6050_INTCLEAR_STATUSREAD);
 8002096:	2000      	movs	r0, #0
 8002098:	f000 fc82 	bl	80029a0 <MPU6050_SetInterruptLatchClear>
  MPU6050_SetIntEnableRegister(0);
 800209c:	2000      	movs	r0, #0
 800209e:	f000 fcb7 	bl	8002a10 <MPU6050_SetIntEnableRegister>

  //inicjalizacja enkoderów
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80020a2:	213c      	movs	r1, #60	; 0x3c
 80020a4:	4834      	ldr	r0, [pc, #208]	; (8002178 <main+0x174>)
 80020a6:	f003 fd4f 	bl	8005b48 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80020aa:	213c      	movs	r1, #60	; 0x3c
 80020ac:	4833      	ldr	r0, [pc, #204]	; (800217c <main+0x178>)
 80020ae:	f003 fd4b 	bl	8005b48 <HAL_TIM_Encoder_Start>

  while (1)
  {
	  //odczyt danych z mpu6050

	  MPU6050_GetAccelerometerScaled(&ax, &ay, &az);
 80020b2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80020b6:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80020ba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 fb12 	bl	80026e8 <MPU6050_GetAccelerometerScaled>
	  MPU6050_GetGyroscopeScaled(&gx, &gy, &gz);
 80020c4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80020c8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80020cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 fb7f 	bl	80027d4 <MPU6050_GetGyroscopeScaled>
	  temperature = MPU6050_GetTemperatureCelsius();
 80020d6:	f000 faa3 	bl	8002620 <MPU6050_GetTemperatureCelsius>
 80020da:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c

	  //odczyt z enkoderów
	  encRead();
 80020de:	f7ff fde1 	bl	8001ca4 <encRead>
	  prawy = leftTotal;
 80020e2:	4b27      	ldr	r3, [pc, #156]	; (8002180 <main+0x17c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	66bb      	str	r3, [r7, #104]	; 0x68
	  lewy = rightTotal;
 80020e8:	4b26      	ldr	r3, [pc, #152]	; (8002184 <main+0x180>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	667b      	str	r3, [r7, #100]	; 0x64
	  //testowe ustawienie prędkości silników - nie odkomentowywać bo ucieka ze stołu
	  //setMoveR(1, 500);
	  //setMoveL(1, 500);

	  //test portu szeregowego
	  printf("Hello world\n");
 80020ee:	4826      	ldr	r0, [pc, #152]	; (8002188 <main+0x184>)
 80020f0:	f004 ff54 	bl	8006f9c <puts>



	  //testowy odczyt z czujników ToF
	  dist_F_tmp = ToF_readRangeContinuousMillimeters(&ToF_F);
 80020f4:	4825      	ldr	r0, [pc, #148]	; (800218c <main+0x188>)
 80020f6:	f7ff fcde 	bl	8001ab6 <ToF_readRangeContinuousMillimeters>
 80020fa:	4603      	mov	r3, r0
 80020fc:	617b      	str	r3, [r7, #20]
	  dist_R_tmp = ToF_readRangeContinuousMillimeters(&ToF_R);
 80020fe:	4824      	ldr	r0, [pc, #144]	; (8002190 <main+0x18c>)
 8002100:	f7ff fcd9 	bl	8001ab6 <ToF_readRangeContinuousMillimeters>
 8002104:	4603      	mov	r3, r0
 8002106:	60fb      	str	r3, [r7, #12]
	  dist_L_tmp = ToF_readRangeContinuousMillimeters(&ToF_L);
 8002108:	4822      	ldr	r0, [pc, #136]	; (8002194 <main+0x190>)
 800210a:	f7ff fcd4 	bl	8001ab6 <ToF_readRangeContinuousMillimeters>
 800210e:	4603      	mov	r3, r0
 8002110:	613b      	str	r3, [r7, #16]
	  dist_FL_tmp = ToF_readRangeContinuousMillimeters(&ToF_FL);
 8002112:	4821      	ldr	r0, [pc, #132]	; (8002198 <main+0x194>)
 8002114:	f7ff fccf 	bl	8001ab6 <ToF_readRangeContinuousMillimeters>
 8002118:	4603      	mov	r3, r0
 800211a:	60bb      	str	r3, [r7, #8]
	  dist_FR_tmp = ToF_readRangeContinuousMillimeters(&ToF_FR);
 800211c:	481f      	ldr	r0, [pc, #124]	; (800219c <main+0x198>)
 800211e:	f7ff fcca 	bl	8001ab6 <ToF_readRangeContinuousMillimeters>
 8002122:	4603      	mov	r3, r0
 8002124:	607b      	str	r3, [r7, #4]

	  HAL_Delay(100);
 8002126:	2064      	movs	r0, #100	; 0x64
 8002128:	f001 f8c2 	bl	80032b0 <HAL_Delay>

	  //generowanie ramki danych na WDS - na razie przykładowe dane
	  //makeFrame(frameString,left_encoder,right_encoder,ToF_L,ToF_FL,ToF_F,ToF_FR,ToF_R);
	  //tak powinna wyglądać przykładow gotowa ramka -> "X_00012_00034_0023_0234_0433_3444_0003_1886576405"
	  makeFrame(frameWDS,lewy,prawy,dist_L_tmp,dist_FL_tmp,dist_F_tmp,dist_FR_tmp,dist_R_tmp);
 800212c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800212e:	b21d      	sxth	r5, r3
 8002130:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002132:	b21e      	sxth	r6, r3
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	fa0f fc83 	sxth.w	ip, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	b21b      	sxth	r3, r3
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	b212      	sxth	r2, r2
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	b209      	sxth	r1, r1
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	b200      	sxth	r0, r0
 800214a:	f107 0418 	add.w	r4, r7, #24
 800214e:	9003      	str	r0, [sp, #12]
 8002150:	9102      	str	r1, [sp, #8]
 8002152:	9201      	str	r2, [sp, #4]
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	4663      	mov	r3, ip
 8002158:	4632      	mov	r2, r6
 800215a:	4629      	mov	r1, r5
 800215c:	4620      	mov	r0, r4
 800215e:	f7fe fccd 	bl	8000afc <makeFrame>
	  //wysłanie ramki
	  printf("%s\n", frameWDS);
 8002162:	f107 0318 	add.w	r3, r7, #24
 8002166:	4618      	mov	r0, r3
 8002168:	f004 ff18 	bl	8006f9c <puts>
	  MPU6050_GetAccelerometerScaled(&ax, &ay, &az);
 800216c:	e7a1      	b.n	80020b2 <main+0xae>
 800216e:	bf00      	nop
 8002170:	40020400 	.word	0x40020400
 8002174:	20000104 	.word	0x20000104
 8002178:	200001e4 	.word	0x200001e4
 800217c:	20000164 	.word	0x20000164
 8002180:	200000fc 	.word	0x200000fc
 8002184:	200000f8 	.word	0x200000f8
 8002188:	08007e90 	.word	0x08007e90
 800218c:	200000c4 	.word	0x200000c4
 8002190:	200000cc 	.word	0x200000cc
 8002194:	200000dc 	.word	0x200000dc
 8002198:	200000b4 	.word	0x200000b4
 800219c:	200000a8 	.word	0x200000a8

080021a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b094      	sub	sp, #80	; 0x50
 80021a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021a6:	f107 0320 	add.w	r3, r7, #32
 80021aa:	2230      	movs	r2, #48	; 0x30
 80021ac:	2100      	movs	r1, #0
 80021ae:	4618      	mov	r0, r3
 80021b0:	f004 fe90 	bl	8006ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021b4:	f107 030c 	add.w	r3, r7, #12
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021c4:	2300      	movs	r3, #0
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	4b28      	ldr	r3, [pc, #160]	; (800226c <SystemClock_Config+0xcc>)
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	4a27      	ldr	r2, [pc, #156]	; (800226c <SystemClock_Config+0xcc>)
 80021ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d2:	6413      	str	r3, [r2, #64]	; 0x40
 80021d4:	4b25      	ldr	r3, [pc, #148]	; (800226c <SystemClock_Config+0xcc>)
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021e0:	2300      	movs	r3, #0
 80021e2:	607b      	str	r3, [r7, #4]
 80021e4:	4b22      	ldr	r3, [pc, #136]	; (8002270 <SystemClock_Config+0xd0>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a21      	ldr	r2, [pc, #132]	; (8002270 <SystemClock_Config+0xd0>)
 80021ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	4b1f      	ldr	r3, [pc, #124]	; (8002270 <SystemClock_Config+0xd0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021f8:	607b      	str	r3, [r7, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021fc:	2302      	movs	r3, #2
 80021fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002200:	2301      	movs	r3, #1
 8002202:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002204:	2310      	movs	r3, #16
 8002206:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002208:	2302      	movs	r3, #2
 800220a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800220c:	2300      	movs	r3, #0
 800220e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002210:	2310      	movs	r3, #16
 8002212:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002214:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002218:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800221a:	2304      	movs	r3, #4
 800221c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800221e:	2304      	movs	r3, #4
 8002220:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002222:	f107 0320 	add.w	r3, r7, #32
 8002226:	4618      	mov	r0, r3
 8002228:	f002 ff08 	bl	800503c <HAL_RCC_OscConfig>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002232:	f000 f81f 	bl	8002274 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002236:	230f      	movs	r3, #15
 8002238:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800223a:	2302      	movs	r3, #2
 800223c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002246:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002248:	2300      	movs	r3, #0
 800224a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800224c:	f107 030c 	add.w	r3, r7, #12
 8002250:	2102      	movs	r1, #2
 8002252:	4618      	mov	r0, r3
 8002254:	f003 f962 	bl	800551c <HAL_RCC_ClockConfig>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800225e:	f000 f809 	bl	8002274 <Error_Handler>
  }
}
 8002262:	bf00      	nop
 8002264:	3750      	adds	r7, #80	; 0x50
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800
 8002270:	40007000 	.word	0x40007000

08002274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
	...

08002284 <motorsInit>:
#include "move.h"
#include "encoders.h"
#include "tim.h"

void motorsInit()
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002288:	2100      	movs	r1, #0
 800228a:	4804      	ldr	r0, [pc, #16]	; (800229c <motorsInit+0x18>)
 800228c:	f003 fb98 	bl	80059c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002290:	2108      	movs	r1, #8
 8002292:	4802      	ldr	r0, [pc, #8]	; (800229c <motorsInit+0x18>)
 8002294:	f003 fb94 	bl	80059c0 <HAL_TIM_PWM_Start>
}
 8002298:	bf00      	nop
 800229a:	bd80      	pop	{r7, pc}
 800229c:	200001a4 	.word	0x200001a4

080022a0 <MPU6050_SetDlpf>:

//
// CONFIG
//
void MPU6050_SetDlpf(uint8_t Value)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af04      	add	r7, sp, #16
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 80022aa:	4b18      	ldr	r3, [pc, #96]	; (800230c <MPU6050_SetDlpf+0x6c>)
 80022ac:	6818      	ldr	r0, [r3, #0]
 80022ae:	230a      	movs	r3, #10
 80022b0:	9302      	str	r3, [sp, #8]
 80022b2:	2301      	movs	r3, #1
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	f107 030f 	add.w	r3, r7, #15
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	2301      	movs	r3, #1
 80022be:	221a      	movs	r2, #26
 80022c0:	21d0      	movs	r1, #208	; 0xd0
 80022c2:	f001 ffef 	bl	80042a4 <HAL_I2C_Mem_Read>
	tmp &= 0xF8;
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	f023 0307 	bic.w	r3, r3, #7
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x7);
 80022d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	b25a      	sxtb	r2, r3
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	b25b      	sxtb	r3, r3
 80022de:	4313      	orrs	r3, r2
 80022e0:	b25b      	sxtb	r3, r3
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 80022e6:	4b09      	ldr	r3, [pc, #36]	; (800230c <MPU6050_SetDlpf+0x6c>)
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	230a      	movs	r3, #10
 80022ec:	9302      	str	r3, [sp, #8]
 80022ee:	2301      	movs	r3, #1
 80022f0:	9301      	str	r3, [sp, #4]
 80022f2:	f107 030f 	add.w	r3, r7, #15
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	2301      	movs	r3, #1
 80022fa:	221a      	movs	r2, #26
 80022fc:	21d0      	movs	r1, #208	; 0xd0
 80022fe:	f001 fed7 	bl	80040b0 <HAL_I2C_Mem_Write>
}
 8002302:	bf00      	nop
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000160 	.word	0x20000160

08002310 <MPU6050_DeviceReset>:

//
// PWR_MGMT_1
//
void MPU6050_DeviceReset(uint8_t Reset)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af04      	add	r7, sp, #16
 8002316:	4603      	mov	r3, r0
 8002318:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 800231a:	4b17      	ldr	r3, [pc, #92]	; (8002378 <MPU6050_DeviceReset+0x68>)
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	230a      	movs	r3, #10
 8002320:	9302      	str	r3, [sp, #8]
 8002322:	2301      	movs	r3, #1
 8002324:	9301      	str	r3, [sp, #4]
 8002326:	f107 030f 	add.w	r3, r7, #15
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	2301      	movs	r3, #1
 800232e:	226b      	movs	r2, #107	; 0x6b
 8002330:	21d0      	movs	r1, #208	; 0xd0
 8002332:	f001 ffb7 	bl	80042a4 <HAL_I2C_Mem_Read>
	tmp &= ~(1<<MPU6050_PWR1_DEVICE_RESET_BIT);
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800233c:	b2db      	uxtb	r3, r3
 800233e:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Reset & 0x1) << MPU6050_PWR1_DEVICE_RESET_BIT);
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	01db      	lsls	r3, r3, #7
 8002344:	b25a      	sxtb	r2, r3
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	b25b      	sxtb	r3, r3
 800234a:	4313      	orrs	r3, r2
 800234c:	b25b      	sxtb	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <MPU6050_DeviceReset+0x68>)
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	230a      	movs	r3, #10
 8002358:	9302      	str	r3, [sp, #8]
 800235a:	2301      	movs	r3, #1
 800235c:	9301      	str	r3, [sp, #4]
 800235e:	f107 030f 	add.w	r3, r7, #15
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	2301      	movs	r3, #1
 8002366:	226b      	movs	r2, #107	; 0x6b
 8002368:	21d0      	movs	r1, #208	; 0xd0
 800236a:	f001 fea1 	bl	80040b0 <HAL_I2C_Mem_Write>
}
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000160 	.word	0x20000160

0800237c <MPU6050_SetSleepEnabled>:

void MPU6050_SetSleepEnabled(uint8_t Enable)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af04      	add	r7, sp, #16
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 8002386:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <MPU6050_SetSleepEnabled+0x6c>)
 8002388:	6818      	ldr	r0, [r3, #0]
 800238a:	230a      	movs	r3, #10
 800238c:	9302      	str	r3, [sp, #8]
 800238e:	2301      	movs	r3, #1
 8002390:	9301      	str	r3, [sp, #4]
 8002392:	f107 030f 	add.w	r3, r7, #15
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	2301      	movs	r3, #1
 800239a:	226b      	movs	r2, #107	; 0x6b
 800239c:	21d0      	movs	r1, #208	; 0xd0
 800239e:	f001 ff81 	bl	80042a4 <HAL_I2C_Mem_Read>
	tmp &= ~(1<<MPU6050_PWR1_SLEEP_BIT);
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
 80023a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Enable & 0x1) << MPU6050_PWR1_SLEEP_BIT);
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	019b      	lsls	r3, r3, #6
 80023b0:	b25b      	sxtb	r3, r3
 80023b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b6:	b25a      	sxtb	r2, r3
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	b25b      	sxtb	r3, r3
 80023bc:	4313      	orrs	r3, r2
 80023be:	b25b      	sxtb	r3, r3
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <MPU6050_SetSleepEnabled+0x6c>)
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	230a      	movs	r3, #10
 80023ca:	9302      	str	r3, [sp, #8]
 80023cc:	2301      	movs	r3, #1
 80023ce:	9301      	str	r3, [sp, #4]
 80023d0:	f107 030f 	add.w	r3, r7, #15
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	2301      	movs	r3, #1
 80023d8:	226b      	movs	r2, #107	; 0x6b
 80023da:	21d0      	movs	r1, #208	; 0xd0
 80023dc:	f001 fe68 	bl	80040b0 <HAL_I2C_Mem_Write>
}
 80023e0:	bf00      	nop
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000160 	.word	0x20000160

080023ec <MPU6050_SetClockSource>:
	tmp |= ((Disable & 0x1) << MPU6050_PWR1_TEMP_DIS_BIT);
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
}

void MPU6050_SetClockSource(uint8_t Source)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af04      	add	r7, sp, #16
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 80023f6:	4b18      	ldr	r3, [pc, #96]	; (8002458 <MPU6050_SetClockSource+0x6c>)
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	230a      	movs	r3, #10
 80023fc:	9302      	str	r3, [sp, #8]
 80023fe:	2301      	movs	r3, #1
 8002400:	9301      	str	r3, [sp, #4]
 8002402:	f107 030f 	add.w	r3, r7, #15
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	2301      	movs	r3, #1
 800240a:	226b      	movs	r2, #107	; 0x6b
 800240c:	21d0      	movs	r1, #208	; 0xd0
 800240e:	f001 ff49 	bl	80042a4 <HAL_I2C_Mem_Read>
	tmp &= 0xF8;
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	f023 0307 	bic.w	r3, r3, #7
 8002418:	b2db      	uxtb	r3, r3
 800241a:	73fb      	strb	r3, [r7, #15]
	tmp |= (Source & 0x7);
 800241c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	b25a      	sxtb	r2, r3
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	b25b      	sxtb	r3, r3
 800242a:	4313      	orrs	r3, r2
 800242c:	b25b      	sxtb	r3, r3
 800242e:	b2db      	uxtb	r3, r3
 8002430:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 8002432:	4b09      	ldr	r3, [pc, #36]	; (8002458 <MPU6050_SetClockSource+0x6c>)
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	230a      	movs	r3, #10
 8002438:	9302      	str	r3, [sp, #8]
 800243a:	2301      	movs	r3, #1
 800243c:	9301      	str	r3, [sp, #4]
 800243e:	f107 030f 	add.w	r3, r7, #15
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	2301      	movs	r3, #1
 8002446:	226b      	movs	r2, #107	; 0x6b
 8002448:	21d0      	movs	r1, #208	; 0xd0
 800244a:	f001 fe31 	bl	80040b0 <HAL_I2C_Mem_Write>
}
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000160 	.word	0x20000160

0800245c <MPU6050_SetFullScaleGyroRange>:

//
//	Measurement scale configuration
//
void MPU6050_SetFullScaleGyroRange(uint8_t Range)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af04      	add	r7, sp, #16
 8002462:	4603      	mov	r3, r0
 8002464:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 8002466:	4b28      	ldr	r3, [pc, #160]	; (8002508 <MPU6050_SetFullScaleGyroRange+0xac>)
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	230a      	movs	r3, #10
 800246c:	9302      	str	r3, [sp, #8]
 800246e:	2301      	movs	r3, #1
 8002470:	9301      	str	r3, [sp, #4]
 8002472:	f107 030f 	add.w	r3, r7, #15
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	2301      	movs	r3, #1
 800247a:	221b      	movs	r2, #27
 800247c:	21d0      	movs	r1, #208	; 0xd0
 800247e:	f001 ff11 	bl	80042a4 <HAL_I2C_Mem_Read>
	tmp &= 0xE7;
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	f023 0318 	bic.w	r3, r3, #24
 8002488:	b2db      	uxtb	r3, r3
 800248a:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Range & 0x7) << 3);
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	b25b      	sxtb	r3, r3
 8002492:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002496:	b25a      	sxtb	r2, r3
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	b25b      	sxtb	r3, r3
 800249c:	4313      	orrs	r3, r2
 800249e:	b25b      	sxtb	r3, r3
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 80024a4:	4b18      	ldr	r3, [pc, #96]	; (8002508 <MPU6050_SetFullScaleGyroRange+0xac>)
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	230a      	movs	r3, #10
 80024aa:	9302      	str	r3, [sp, #8]
 80024ac:	2301      	movs	r3, #1
 80024ae:	9301      	str	r3, [sp, #4]
 80024b0:	f107 030f 	add.w	r3, r7, #15
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	2301      	movs	r3, #1
 80024b8:	221b      	movs	r2, #27
 80024ba:	21d0      	movs	r1, #208	; 0xd0
 80024bc:	f001 fdf8 	bl	80040b0 <HAL_I2C_Mem_Write>

	switch(Range)
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d81a      	bhi.n	80024fc <MPU6050_SetFullScaleGyroRange+0xa0>
 80024c6:	a201      	add	r2, pc, #4	; (adr r2, 80024cc <MPU6050_SetFullScaleGyroRange+0x70>)
 80024c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024cc:	080024dd 	.word	0x080024dd
 80024d0:	080024e5 	.word	0x080024e5
 80024d4:	080024ed 	.word	0x080024ed
 80024d8:	080024f5 	.word	0x080024f5
	{
		case MPU6050_GYRO_FS_250:
			Gyr_Scale = 0.007633;
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <MPU6050_SetFullScaleGyroRange+0xb0>)
 80024de:	4a0c      	ldr	r2, [pc, #48]	; (8002510 <MPU6050_SetFullScaleGyroRange+0xb4>)
 80024e0:	601a      	str	r2, [r3, #0]
			break;
 80024e2:	e00c      	b.n	80024fe <MPU6050_SetFullScaleGyroRange+0xa2>
		case MPU6050_GYRO_FS_500:
			Gyr_Scale = 0.015267;
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <MPU6050_SetFullScaleGyroRange+0xb0>)
 80024e6:	4a0b      	ldr	r2, [pc, #44]	; (8002514 <MPU6050_SetFullScaleGyroRange+0xb8>)
 80024e8:	601a      	str	r2, [r3, #0]
			break;
 80024ea:	e008      	b.n	80024fe <MPU6050_SetFullScaleGyroRange+0xa2>
		case MPU6050_GYRO_FS_1000:
			Gyr_Scale = 0.030487;
 80024ec:	4b07      	ldr	r3, [pc, #28]	; (800250c <MPU6050_SetFullScaleGyroRange+0xb0>)
 80024ee:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <MPU6050_SetFullScaleGyroRange+0xbc>)
 80024f0:	601a      	str	r2, [r3, #0]
			break;
 80024f2:	e004      	b.n	80024fe <MPU6050_SetFullScaleGyroRange+0xa2>
		case MPU6050_GYRO_FS_2000:
			Gyr_Scale = 0.060975;
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <MPU6050_SetFullScaleGyroRange+0xb0>)
 80024f6:	4a09      	ldr	r2, [pc, #36]	; (800251c <MPU6050_SetFullScaleGyroRange+0xc0>)
 80024f8:	601a      	str	r2, [r3, #0]
			break;
 80024fa:	e000      	b.n	80024fe <MPU6050_SetFullScaleGyroRange+0xa2>
		default:
			break;
 80024fc:	bf00      	nop
	}
}
 80024fe:	bf00      	nop
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000160 	.word	0x20000160
 800250c:	2000015c 	.word	0x2000015c
 8002510:	3bfa1e3f 	.word	0x3bfa1e3f
 8002514:	3c7a2270 	.word	0x3c7a2270
 8002518:	3cf9bfdf 	.word	0x3cf9bfdf
 800251c:	3d79c0ec 	.word	0x3d79c0ec

08002520 <MPU6050_SetFullScaleAccelRange>:

void MPU6050_SetFullScaleAccelRange(uint8_t Range)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af04      	add	r7, sp, #16
 8002526:	4603      	mov	r3, r0
 8002528:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 800252a:	4b28      	ldr	r3, [pc, #160]	; (80025cc <MPU6050_SetFullScaleAccelRange+0xac>)
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	230a      	movs	r3, #10
 8002530:	9302      	str	r3, [sp, #8]
 8002532:	2301      	movs	r3, #1
 8002534:	9301      	str	r3, [sp, #4]
 8002536:	f107 030f 	add.w	r3, r7, #15
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	2301      	movs	r3, #1
 800253e:	221c      	movs	r2, #28
 8002540:	21d0      	movs	r1, #208	; 0xd0
 8002542:	f001 feaf 	bl	80042a4 <HAL_I2C_Mem_Read>
	tmp &= 0xE7;
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	f023 0318 	bic.w	r3, r3, #24
 800254c:	b2db      	uxtb	r3, r3
 800254e:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Range & 0x7) << 3);
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	b25b      	sxtb	r3, r3
 8002556:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800255a:	b25a      	sxtb	r2, r3
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	b25b      	sxtb	r3, r3
 8002560:	4313      	orrs	r3, r2
 8002562:	b25b      	sxtb	r3, r3
 8002564:	b2db      	uxtb	r3, r3
 8002566:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 8002568:	4b18      	ldr	r3, [pc, #96]	; (80025cc <MPU6050_SetFullScaleAccelRange+0xac>)
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	230a      	movs	r3, #10
 800256e:	9302      	str	r3, [sp, #8]
 8002570:	2301      	movs	r3, #1
 8002572:	9301      	str	r3, [sp, #4]
 8002574:	f107 030f 	add.w	r3, r7, #15
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	2301      	movs	r3, #1
 800257c:	221c      	movs	r2, #28
 800257e:	21d0      	movs	r1, #208	; 0xd0
 8002580:	f001 fd96 	bl	80040b0 <HAL_I2C_Mem_Write>

	switch(Range)
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	2b03      	cmp	r3, #3
 8002588:	d81a      	bhi.n	80025c0 <MPU6050_SetFullScaleAccelRange+0xa0>
 800258a:	a201      	add	r2, pc, #4	; (adr r2, 8002590 <MPU6050_SetFullScaleAccelRange+0x70>)
 800258c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002590:	080025a1 	.word	0x080025a1
 8002594:	080025a9 	.word	0x080025a9
 8002598:	080025b1 	.word	0x080025b1
 800259c:	080025b9 	.word	0x080025b9
	{
		case MPU6050_ACCEL_FS_2:
			Acc_Scale = 0.000061;
 80025a0:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <MPU6050_SetFullScaleAccelRange+0xb0>)
 80025a2:	4a0c      	ldr	r2, [pc, #48]	; (80025d4 <MPU6050_SetFullScaleAccelRange+0xb4>)
 80025a4:	601a      	str	r2, [r3, #0]
			break;
 80025a6:	e00c      	b.n	80025c2 <MPU6050_SetFullScaleAccelRange+0xa2>
		case MPU6050_ACCEL_FS_4:
			Acc_Scale = 0.000122;
 80025a8:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <MPU6050_SetFullScaleAccelRange+0xb0>)
 80025aa:	4a0b      	ldr	r2, [pc, #44]	; (80025d8 <MPU6050_SetFullScaleAccelRange+0xb8>)
 80025ac:	601a      	str	r2, [r3, #0]
			break;
 80025ae:	e008      	b.n	80025c2 <MPU6050_SetFullScaleAccelRange+0xa2>
		case MPU6050_ACCEL_FS_8:
			Acc_Scale = 0.000244;
 80025b0:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <MPU6050_SetFullScaleAccelRange+0xb0>)
 80025b2:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <MPU6050_SetFullScaleAccelRange+0xbc>)
 80025b4:	601a      	str	r2, [r3, #0]
			break;
 80025b6:	e004      	b.n	80025c2 <MPU6050_SetFullScaleAccelRange+0xa2>
		case MPU6050_ACCEL_FS_16:
			Acc_Scale = 0.0004882;
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <MPU6050_SetFullScaleAccelRange+0xb0>)
 80025ba:	4a09      	ldr	r2, [pc, #36]	; (80025e0 <MPU6050_SetFullScaleAccelRange+0xc0>)
 80025bc:	601a      	str	r2, [r3, #0]
			break;
 80025be:	e000      	b.n	80025c2 <MPU6050_SetFullScaleAccelRange+0xa2>
		default:
			break;
 80025c0:	bf00      	nop
	}
}
 80025c2:	bf00      	nop
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000160 	.word	0x20000160
 80025d0:	20000158 	.word	0x20000158
 80025d4:	387fda40 	.word	0x387fda40
 80025d8:	38ffda40 	.word	0x38ffda40
 80025dc:	397fda40 	.word	0x397fda40
 80025e0:	39fff518 	.word	0x39fff518

080025e4 <MPU6050_GetTemperatureRAW>:

//
// Reading data
//
int16_t MPU6050_GetTemperatureRAW(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af04      	add	r7, sp, #16
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_TEMP_OUT_H, 1, tmp, 2, I2C_TIMEOUT);
 80025ea:	4b0c      	ldr	r3, [pc, #48]	; (800261c <MPU6050_GetTemperatureRAW+0x38>)
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	230a      	movs	r3, #10
 80025f0:	9302      	str	r3, [sp, #8]
 80025f2:	2302      	movs	r3, #2
 80025f4:	9301      	str	r3, [sp, #4]
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	2301      	movs	r3, #1
 80025fc:	2241      	movs	r2, #65	; 0x41
 80025fe:	21d0      	movs	r1, #208	; 0xd0
 8002600:	f001 fe50 	bl	80042a4 <HAL_I2C_Mem_Read>
	return (((int16_t)tmp[0]) << 8) | tmp[1];
 8002604:	793b      	ldrb	r3, [r7, #4]
 8002606:	021b      	lsls	r3, r3, #8
 8002608:	b21a      	sxth	r2, r3
 800260a:	797b      	ldrb	r3, [r7, #5]
 800260c:	b21b      	sxth	r3, r3
 800260e:	4313      	orrs	r3, r2
 8002610:	b21b      	sxth	r3, r3
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000160 	.word	0x20000160

08002620 <MPU6050_GetTemperatureCelsius>:

float MPU6050_GetTemperatureCelsius(void)
{
 8002620:	b590      	push	{r4, r7, lr}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
	int16_t temp;

	temp = MPU6050_GetTemperatureRAW();
 8002626:	f7ff ffdd 	bl	80025e4 <MPU6050_GetTemperatureRAW>
 800262a:	4603      	mov	r3, r0
 800262c:	80fb      	strh	r3, [r7, #6]

	return (float)temp / 340 + 36.53;
 800262e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002632:	ee07 3a90 	vmov	s15, r3
 8002636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800263a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002678 <MPU6050_GetTemperatureCelsius+0x58>
 800263e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002642:	ee16 0a90 	vmov	r0, s13
 8002646:	f7fd ff7f 	bl	8000548 <__aeabi_f2d>
 800264a:	a309      	add	r3, pc, #36	; (adr r3, 8002670 <MPU6050_GetTemperatureCelsius+0x50>)
 800264c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002650:	f7fd fe1c 	bl	800028c <__adddf3>
 8002654:	4603      	mov	r3, r0
 8002656:	460c      	mov	r4, r1
 8002658:	4618      	mov	r0, r3
 800265a:	4621      	mov	r1, r4
 800265c:	f7fe f854 	bl	8000708 <__aeabi_d2f>
 8002660:	4603      	mov	r3, r0
 8002662:	ee07 3a90 	vmov	s15, r3
}
 8002666:	eeb0 0a67 	vmov.f32	s0, s15
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	bd90      	pop	{r4, r7, pc}
 8002670:	0a3d70a4 	.word	0x0a3d70a4
 8002674:	404243d7 	.word	0x404243d7
 8002678:	43aa0000 	.word	0x43aa0000

0800267c <MPU6050_GetAccelerometerRAW>:
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, 1, tmp, 2, I2C_TIMEOUT);
	return (((int16_t)tmp[0]) << 8) | tmp[1];
}

void MPU6050_GetAccelerometerRAW(int16_t *x, int16_t *y, int16_t *z)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08a      	sub	sp, #40	; 0x28
 8002680:	af04      	add	r7, sp, #16
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
	uint8_t tmp[6];
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, tmp, 6, I2C_TIMEOUT);
 8002688:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <MPU6050_GetAccelerometerRAW+0x68>)
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	230a      	movs	r3, #10
 800268e:	9302      	str	r3, [sp, #8]
 8002690:	2306      	movs	r3, #6
 8002692:	9301      	str	r3, [sp, #4]
 8002694:	f107 0310 	add.w	r3, r7, #16
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	2301      	movs	r3, #1
 800269c:	223b      	movs	r2, #59	; 0x3b
 800269e:	21d0      	movs	r1, #208	; 0xd0
 80026a0:	f001 fe00 	bl	80042a4 <HAL_I2C_Mem_Read>

	*x = (((int16_t)tmp[0]) << 8) | tmp[1];
 80026a4:	7c3b      	ldrb	r3, [r7, #16]
 80026a6:	021b      	lsls	r3, r3, #8
 80026a8:	b21a      	sxth	r2, r3
 80026aa:	7c7b      	ldrb	r3, [r7, #17]
 80026ac:	b21b      	sxth	r3, r3
 80026ae:	4313      	orrs	r3, r2
 80026b0:	b21a      	sxth	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	801a      	strh	r2, [r3, #0]
	*y = (((int16_t)tmp[2]) << 8) | tmp[3];
 80026b6:	7cbb      	ldrb	r3, [r7, #18]
 80026b8:	021b      	lsls	r3, r3, #8
 80026ba:	b21a      	sxth	r2, r3
 80026bc:	7cfb      	ldrb	r3, [r7, #19]
 80026be:	b21b      	sxth	r3, r3
 80026c0:	4313      	orrs	r3, r2
 80026c2:	b21a      	sxth	r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	801a      	strh	r2, [r3, #0]
	*z = (((int16_t)tmp[4]) << 8) | tmp[5];
 80026c8:	7d3b      	ldrb	r3, [r7, #20]
 80026ca:	021b      	lsls	r3, r3, #8
 80026cc:	b21a      	sxth	r2, r3
 80026ce:	7d7b      	ldrb	r3, [r7, #21]
 80026d0:	b21b      	sxth	r3, r3
 80026d2:	4313      	orrs	r3, r2
 80026d4:	b21a      	sxth	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	801a      	strh	r2, [r3, #0]
}
 80026da:	bf00      	nop
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000160 	.word	0x20000160

080026e8 <MPU6050_GetAccelerometerScaled>:

void MPU6050_GetAccelerometerScaled(float* x, float* y, float* z)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
	int16_t tmp_x, tmp_y, tmp_z;
	MPU6050_GetAccelerometerRAW(&tmp_x, &tmp_y, &tmp_z);
 80026f4:	f107 0212 	add.w	r2, r7, #18
 80026f8:	f107 0114 	add.w	r1, r7, #20
 80026fc:	f107 0316 	add.w	r3, r7, #22
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ffbb 	bl	800267c <MPU6050_GetAccelerometerRAW>

	*x = (float)tmp_x * Acc_Scale;
 8002706:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800270a:	ee07 3a90 	vmov	s15, r3
 800270e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002712:	4b14      	ldr	r3, [pc, #80]	; (8002764 <MPU6050_GetAccelerometerScaled+0x7c>)
 8002714:	edd3 7a00 	vldr	s15, [r3]
 8002718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	edc3 7a00 	vstr	s15, [r3]
	*y = (float)tmp_y * Acc_Scale;
 8002722:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002726:	ee07 3a90 	vmov	s15, r3
 800272a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800272e:	4b0d      	ldr	r3, [pc, #52]	; (8002764 <MPU6050_GetAccelerometerScaled+0x7c>)
 8002730:	edd3 7a00 	vldr	s15, [r3]
 8002734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	edc3 7a00 	vstr	s15, [r3]
	*z = (float)tmp_z * Acc_Scale;
 800273e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002742:	ee07 3a90 	vmov	s15, r3
 8002746:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <MPU6050_GetAccelerometerScaled+0x7c>)
 800274c:	edd3 7a00 	vldr	s15, [r3]
 8002750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	edc3 7a00 	vstr	s15, [r3]
}
 800275a:	bf00      	nop
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000158 	.word	0x20000158

08002768 <MPU6050_GetGyroscopeRAW>:
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, 1, tmp, 2, I2C_TIMEOUT);
	return (((int16_t)tmp[0]) << 8) | tmp[1];
}

void MPU6050_GetGyroscopeRAW(int16_t *x, int16_t *y, int16_t *z)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08a      	sub	sp, #40	; 0x28
 800276c:	af04      	add	r7, sp, #16
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
	uint8_t tmp[6];
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 1, tmp, 6, I2C_TIMEOUT);
 8002774:	4b16      	ldr	r3, [pc, #88]	; (80027d0 <MPU6050_GetGyroscopeRAW+0x68>)
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	230a      	movs	r3, #10
 800277a:	9302      	str	r3, [sp, #8]
 800277c:	2306      	movs	r3, #6
 800277e:	9301      	str	r3, [sp, #4]
 8002780:	f107 0310 	add.w	r3, r7, #16
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	2301      	movs	r3, #1
 8002788:	2243      	movs	r2, #67	; 0x43
 800278a:	21d0      	movs	r1, #208	; 0xd0
 800278c:	f001 fd8a 	bl	80042a4 <HAL_I2C_Mem_Read>

	*x = (((int16_t)tmp[0]) << 8) | tmp[1];
 8002790:	7c3b      	ldrb	r3, [r7, #16]
 8002792:	021b      	lsls	r3, r3, #8
 8002794:	b21a      	sxth	r2, r3
 8002796:	7c7b      	ldrb	r3, [r7, #17]
 8002798:	b21b      	sxth	r3, r3
 800279a:	4313      	orrs	r3, r2
 800279c:	b21a      	sxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	801a      	strh	r2, [r3, #0]
	*y = (((int16_t)tmp[2]) << 8) | tmp[3];
 80027a2:	7cbb      	ldrb	r3, [r7, #18]
 80027a4:	021b      	lsls	r3, r3, #8
 80027a6:	b21a      	sxth	r2, r3
 80027a8:	7cfb      	ldrb	r3, [r7, #19]
 80027aa:	b21b      	sxth	r3, r3
 80027ac:	4313      	orrs	r3, r2
 80027ae:	b21a      	sxth	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	801a      	strh	r2, [r3, #0]
	*z = (((int16_t)tmp[4]) << 8) | tmp[5];
 80027b4:	7d3b      	ldrb	r3, [r7, #20]
 80027b6:	021b      	lsls	r3, r3, #8
 80027b8:	b21a      	sxth	r2, r3
 80027ba:	7d7b      	ldrb	r3, [r7, #21]
 80027bc:	b21b      	sxth	r3, r3
 80027be:	4313      	orrs	r3, r2
 80027c0:	b21a      	sxth	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	801a      	strh	r2, [r3, #0]
}
 80027c6:	bf00      	nop
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000160 	.word	0x20000160

080027d4 <MPU6050_GetGyroscopeScaled>:

void MPU6050_GetGyroscopeScaled(float* x, float* y, float* z)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
	int16_t tmp_x, tmp_y, tmp_z;

	MPU6050_GetGyroscopeRAW(&tmp_x, &tmp_y, &tmp_z);
 80027e0:	f107 0212 	add.w	r2, r7, #18
 80027e4:	f107 0114 	add.w	r1, r7, #20
 80027e8:	f107 0316 	add.w	r3, r7, #22
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ffbb 	bl	8002768 <MPU6050_GetGyroscopeRAW>

	*x = (float)tmp_x * Gyr_Scale;
 80027f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80027f6:	ee07 3a90 	vmov	s15, r3
 80027fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027fe:	4b14      	ldr	r3, [pc, #80]	; (8002850 <MPU6050_GetGyroscopeScaled+0x7c>)
 8002800:	edd3 7a00 	vldr	s15, [r3]
 8002804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	edc3 7a00 	vstr	s15, [r3]
	*y = (float)tmp_y * Gyr_Scale;
 800280e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002812:	ee07 3a90 	vmov	s15, r3
 8002816:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800281a:	4b0d      	ldr	r3, [pc, #52]	; (8002850 <MPU6050_GetGyroscopeScaled+0x7c>)
 800281c:	edd3 7a00 	vldr	s15, [r3]
 8002820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	edc3 7a00 	vstr	s15, [r3]
	*z = (float)tmp_z * Gyr_Scale;
 800282a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800282e:	ee07 3a90 	vmov	s15, r3
 8002832:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002836:	4b06      	ldr	r3, [pc, #24]	; (8002850 <MPU6050_GetGyroscopeScaled+0x7c>)
 8002838:	edd3 7a00 	vldr	s15, [r3]
 800283c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	edc3 7a00 	vstr	s15, [r3]
}
 8002846:	bf00      	nop
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	2000015c 	.word	0x2000015c

08002854 <MPU6050_SetInterruptMode>:

//
//	Setting INT pin
//
void MPU6050_SetInterruptMode(uint8_t Mode)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af04      	add	r7, sp, #16
 800285a:	4603      	mov	r3, r0
 800285c:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 800285e:	4b17      	ldr	r3, [pc, #92]	; (80028bc <MPU6050_SetInterruptMode+0x68>)
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	230a      	movs	r3, #10
 8002864:	9302      	str	r3, [sp, #8]
 8002866:	2301      	movs	r3, #1
 8002868:	9301      	str	r3, [sp, #4]
 800286a:	f107 030f 	add.w	r3, r7, #15
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	2301      	movs	r3, #1
 8002872:	2237      	movs	r2, #55	; 0x37
 8002874:	21d0      	movs	r1, #208	; 0xd0
 8002876:	f001 fd15 	bl	80042a4 <HAL_I2C_Mem_Read>
	tmp &= ~(1 << MPU6050_INTCFG_INT_LEVEL_BIT);
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002880:	b2db      	uxtb	r3, r3
 8002882:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Mode & 0x1) << MPU6050_INTCFG_INT_LEVEL_BIT);
 8002884:	79fb      	ldrb	r3, [r7, #7]
 8002886:	01db      	lsls	r3, r3, #7
 8002888:	b25a      	sxtb	r2, r3
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	b25b      	sxtb	r3, r3
 800288e:	4313      	orrs	r3, r2
 8002890:	b25b      	sxtb	r3, r3
 8002892:	b2db      	uxtb	r3, r3
 8002894:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8002896:	4b09      	ldr	r3, [pc, #36]	; (80028bc <MPU6050_SetInterruptMode+0x68>)
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	230a      	movs	r3, #10
 800289c:	9302      	str	r3, [sp, #8]
 800289e:	2301      	movs	r3, #1
 80028a0:	9301      	str	r3, [sp, #4]
 80028a2:	f107 030f 	add.w	r3, r7, #15
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	2301      	movs	r3, #1
 80028aa:	2237      	movs	r2, #55	; 0x37
 80028ac:	21d0      	movs	r1, #208	; 0xd0
 80028ae:	f001 fbff 	bl	80040b0 <HAL_I2C_Mem_Write>
}
 80028b2:	bf00      	nop
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20000160 	.word	0x20000160

080028c0 <MPU6050_SetInterruptDrive>:

void MPU6050_SetInterruptDrive(uint8_t Drive)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af04      	add	r7, sp, #16
 80028c6:	4603      	mov	r3, r0
 80028c8:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 80028ca:	4b18      	ldr	r3, [pc, #96]	; (800292c <MPU6050_SetInterruptDrive+0x6c>)
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	230a      	movs	r3, #10
 80028d0:	9302      	str	r3, [sp, #8]
 80028d2:	2301      	movs	r3, #1
 80028d4:	9301      	str	r3, [sp, #4]
 80028d6:	f107 030f 	add.w	r3, r7, #15
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	2301      	movs	r3, #1
 80028de:	2237      	movs	r2, #55	; 0x37
 80028e0:	21d0      	movs	r1, #208	; 0xd0
 80028e2:	f001 fcdf 	bl	80042a4 <HAL_I2C_Mem_Read>
	tmp &= ~(1 << MPU6050_INTCFG_INT_OPEN_BIT);
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Drive & 0x1) << MPU6050_INTCFG_INT_OPEN_BIT);
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	019b      	lsls	r3, r3, #6
 80028f4:	b25b      	sxtb	r3, r3
 80028f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fa:	b25a      	sxtb	r2, r3
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	b25b      	sxtb	r3, r3
 8002900:	4313      	orrs	r3, r2
 8002902:	b25b      	sxtb	r3, r3
 8002904:	b2db      	uxtb	r3, r3
 8002906:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8002908:	4b08      	ldr	r3, [pc, #32]	; (800292c <MPU6050_SetInterruptDrive+0x6c>)
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	230a      	movs	r3, #10
 800290e:	9302      	str	r3, [sp, #8]
 8002910:	2301      	movs	r3, #1
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	f107 030f 	add.w	r3, r7, #15
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	2301      	movs	r3, #1
 800291c:	2237      	movs	r2, #55	; 0x37
 800291e:	21d0      	movs	r1, #208	; 0xd0
 8002920:	f001 fbc6 	bl	80040b0 <HAL_I2C_Mem_Write>
}
 8002924:	bf00      	nop
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	20000160 	.word	0x20000160

08002930 <MPU6050_SetInterruptLatch>:

void MPU6050_SetInterruptLatch(uint8_t Latch)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af04      	add	r7, sp, #16
 8002936:	4603      	mov	r3, r0
 8002938:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 800293a:	4b18      	ldr	r3, [pc, #96]	; (800299c <MPU6050_SetInterruptLatch+0x6c>)
 800293c:	6818      	ldr	r0, [r3, #0]
 800293e:	230a      	movs	r3, #10
 8002940:	9302      	str	r3, [sp, #8]
 8002942:	2301      	movs	r3, #1
 8002944:	9301      	str	r3, [sp, #4]
 8002946:	f107 030f 	add.w	r3, r7, #15
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	2301      	movs	r3, #1
 800294e:	2237      	movs	r2, #55	; 0x37
 8002950:	21d0      	movs	r1, #208	; 0xd0
 8002952:	f001 fca7 	bl	80042a4 <HAL_I2C_Mem_Read>
	tmp &= ~(1 << MPU6050_INTCFG_INT_RD_CLEAR_BIT);
 8002956:	7bfb      	ldrb	r3, [r7, #15]
 8002958:	f023 0310 	bic.w	r3, r3, #16
 800295c:	b2db      	uxtb	r3, r3
 800295e:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Latch & 0x1) << MPU6050_INTCFG_INT_RD_CLEAR_BIT);
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	b25b      	sxtb	r3, r3
 8002966:	f003 0310 	and.w	r3, r3, #16
 800296a:	b25a      	sxtb	r2, r3
 800296c:	7bfb      	ldrb	r3, [r7, #15]
 800296e:	b25b      	sxtb	r3, r3
 8002970:	4313      	orrs	r3, r2
 8002972:	b25b      	sxtb	r3, r3
 8002974:	b2db      	uxtb	r3, r3
 8002976:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8002978:	4b08      	ldr	r3, [pc, #32]	; (800299c <MPU6050_SetInterruptLatch+0x6c>)
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	230a      	movs	r3, #10
 800297e:	9302      	str	r3, [sp, #8]
 8002980:	2301      	movs	r3, #1
 8002982:	9301      	str	r3, [sp, #4]
 8002984:	f107 030f 	add.w	r3, r7, #15
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	2301      	movs	r3, #1
 800298c:	2237      	movs	r2, #55	; 0x37
 800298e:	21d0      	movs	r1, #208	; 0xd0
 8002990:	f001 fb8e 	bl	80040b0 <HAL_I2C_Mem_Write>
}
 8002994:	bf00      	nop
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	20000160 	.word	0x20000160

080029a0 <MPU6050_SetInterruptLatchClear>:

void MPU6050_SetInterruptLatchClear(uint8_t Clear)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af04      	add	r7, sp, #16
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 80029aa:	4b18      	ldr	r3, [pc, #96]	; (8002a0c <MPU6050_SetInterruptLatchClear+0x6c>)
 80029ac:	6818      	ldr	r0, [r3, #0]
 80029ae:	230a      	movs	r3, #10
 80029b0:	9302      	str	r3, [sp, #8]
 80029b2:	2301      	movs	r3, #1
 80029b4:	9301      	str	r3, [sp, #4]
 80029b6:	f107 030f 	add.w	r3, r7, #15
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	2301      	movs	r3, #1
 80029be:	2237      	movs	r2, #55	; 0x37
 80029c0:	21d0      	movs	r1, #208	; 0xd0
 80029c2:	f001 fc6f 	bl	80042a4 <HAL_I2C_Mem_Read>
	tmp &= ~(1 << MPU6050_INTCFG_LATCH_INT_EN_BIT);
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	f023 0320 	bic.w	r3, r3, #32
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Clear & 0x1) << MPU6050_INTCFG_LATCH_INT_EN_BIT);
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	015b      	lsls	r3, r3, #5
 80029d4:	b25b      	sxtb	r3, r3
 80029d6:	f003 0320 	and.w	r3, r3, #32
 80029da:	b25a      	sxtb	r2, r3
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	b25b      	sxtb	r3, r3
 80029e0:	4313      	orrs	r3, r2
 80029e2:	b25b      	sxtb	r3, r3
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 80029e8:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <MPU6050_SetInterruptLatchClear+0x6c>)
 80029ea:	6818      	ldr	r0, [r3, #0]
 80029ec:	230a      	movs	r3, #10
 80029ee:	9302      	str	r3, [sp, #8]
 80029f0:	2301      	movs	r3, #1
 80029f2:	9301      	str	r3, [sp, #4]
 80029f4:	f107 030f 	add.w	r3, r7, #15
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	2301      	movs	r3, #1
 80029fc:	2237      	movs	r2, #55	; 0x37
 80029fe:	21d0      	movs	r1, #208	; 0xd0
 8002a00:	f001 fb56 	bl	80040b0 <HAL_I2C_Mem_Write>
}
 8002a04:	bf00      	nop
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20000160 	.word	0x20000160

08002a10 <MPU6050_SetIntEnableRegister>:

void MPU6050_SetIntEnableRegister(uint8_t Value)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af04      	add	r7, sp, #16
 8002a16:	4603      	mov	r3, r0
 8002a18:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &Value, 1, I2C_TIMEOUT);
 8002a1a:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <MPU6050_SetIntEnableRegister+0x2c>)
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	230a      	movs	r3, #10
 8002a20:	9302      	str	r3, [sp, #8]
 8002a22:	2301      	movs	r3, #1
 8002a24:	9301      	str	r3, [sp, #4]
 8002a26:	1dfb      	adds	r3, r7, #7
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	2238      	movs	r2, #56	; 0x38
 8002a2e:	21d0      	movs	r1, #208	; 0xd0
 8002a30:	f001 fb3e 	bl	80040b0 <HAL_I2C_Mem_Write>
}
 8002a34:	bf00      	nop
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	20000160 	.word	0x20000160

08002a40 <MPU6050_Init>:

//
//	Initialization
//
void MPU6050_Init(I2C_HandleTypeDef *hi2c)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
	i2c = hi2c;
 8002a48:	4a0c      	ldr	r2, [pc, #48]	; (8002a7c <MPU6050_Init+0x3c>)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6013      	str	r3, [r2, #0]
	MPU6050_DeviceReset(1);
 8002a4e:	2001      	movs	r0, #1
 8002a50:	f7ff fc5e 	bl	8002310 <MPU6050_DeviceReset>
    MPU6050_SetSleepEnabled(0);
 8002a54:	2000      	movs	r0, #0
 8002a56:	f7ff fc91 	bl	800237c <MPU6050_SetSleepEnabled>
    MPU6050_SetClockSource(MPU6050_CLOCK_INTERNAL);
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	f7ff fcc6 	bl	80023ec <MPU6050_SetClockSource>
    MPU6050_SetDlpf(MPU6050_DLPF_BW_20);
 8002a60:	2004      	movs	r0, #4
 8002a62:	f7ff fc1d 	bl	80022a0 <MPU6050_SetDlpf>
    MPU6050_SetFullScaleGyroRange(MPU6050_GYRO_FS_500);
 8002a66:	2001      	movs	r0, #1
 8002a68:	f7ff fcf8 	bl	800245c <MPU6050_SetFullScaleGyroRange>
    MPU6050_SetFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	f7ff fd57 	bl	8002520 <MPU6050_SetFullScaleAccelRange>

}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000160 	.word	0x20000160

08002a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	607b      	str	r3, [r7, #4]
 8002a8a:	4b10      	ldr	r3, [pc, #64]	; (8002acc <HAL_MspInit+0x4c>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	4a0f      	ldr	r2, [pc, #60]	; (8002acc <HAL_MspInit+0x4c>)
 8002a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a94:	6453      	str	r3, [r2, #68]	; 0x44
 8002a96:	4b0d      	ldr	r3, [pc, #52]	; (8002acc <HAL_MspInit+0x4c>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9e:	607b      	str	r3, [r7, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	603b      	str	r3, [r7, #0]
 8002aa6:	4b09      	ldr	r3, [pc, #36]	; (8002acc <HAL_MspInit+0x4c>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	4a08      	ldr	r2, [pc, #32]	; (8002acc <HAL_MspInit+0x4c>)
 8002aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <HAL_MspInit+0x4c>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002abe:	2007      	movs	r0, #7
 8002ac0:	f000 fcca 	bl	8003458 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ac4:	bf00      	nop
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40023800 	.word	0x40023800

08002ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ad4:	bf00      	nop
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ae2:	e7fe      	b.n	8002ae2 <HardFault_Handler+0x4>

08002ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ae8:	e7fe      	b.n	8002ae8 <MemManage_Handler+0x4>

08002aea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aee:	e7fe      	b.n	8002aee <BusFault_Handler+0x4>

08002af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002af4:	e7fe      	b.n	8002af4 <UsageFault_Handler+0x4>

08002af6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002af6:	b480      	push	{r7}
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b24:	f000 fba4 	bl	8003270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b28:	bf00      	nop
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]
 8002b3c:	e00a      	b.n	8002b54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b3e:	f3af 8000 	nop.w
 8002b42:	4601      	mov	r1, r0
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	60ba      	str	r2, [r7, #8]
 8002b4a:	b2ca      	uxtb	r2, r1
 8002b4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	3301      	adds	r3, #1
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	dbf0      	blt.n	8002b3e <_read+0x12>
	}

return len;
 8002b5c:	687b      	ldr	r3, [r7, #4]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
	return -1;
 8002b6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b8e:	605a      	str	r2, [r3, #4]
	return 0;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <_isatty>:

int _isatty(int file)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
	return 1;
 8002ba6:	2301      	movs	r3, #1
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
	return 0;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
	...

08002bd0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002bd8:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <_sbrk+0x50>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d102      	bne.n	8002be6 <_sbrk+0x16>
		heap_end = &end;
 8002be0:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <_sbrk+0x50>)
 8002be2:	4a10      	ldr	r2, [pc, #64]	; (8002c24 <_sbrk+0x54>)
 8002be4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002be6:	4b0e      	ldr	r3, [pc, #56]	; (8002c20 <_sbrk+0x50>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002bec:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <_sbrk+0x50>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	466a      	mov	r2, sp
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d907      	bls.n	8002c0a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002bfa:	f004 f941 	bl	8006e80 <__errno>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	230c      	movs	r3, #12
 8002c02:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002c04:	f04f 33ff 	mov.w	r3, #4294967295
 8002c08:	e006      	b.n	8002c18 <_sbrk+0x48>
	}

	heap_end += incr;
 8002c0a:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <_sbrk+0x50>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4413      	add	r3, r2
 8002c12:	4a03      	ldr	r2, [pc, #12]	; (8002c20 <_sbrk+0x50>)
 8002c14:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002c16:	68fb      	ldr	r3, [r7, #12]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20000094 	.word	0x20000094
 8002c24:	20000270 	.word	0x20000270

08002c28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c2c:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <SystemInit+0x28>)
 8002c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c32:	4a07      	ldr	r2, [pc, #28]	; (8002c50 <SystemInit+0x28>)
 8002c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c3c:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <SystemInit+0x28>)
 8002c3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c42:	609a      	str	r2, [r3, #8]
#endif
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08c      	sub	sp, #48	; 0x30
 8002c58:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002c5a:	f107 030c 	add.w	r3, r7, #12
 8002c5e:	2224      	movs	r2, #36	; 0x24
 8002c60:	2100      	movs	r1, #0
 8002c62:	4618      	mov	r0, r3
 8002c64:	f004 f936 	bl	8006ed4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c68:	1d3b      	adds	r3, r7, #4
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8002c70:	4b21      	ldr	r3, [pc, #132]	; (8002cf8 <MX_TIM2_Init+0xa4>)
 8002c72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002c78:	4b1f      	ldr	r3, [pc, #124]	; (8002cf8 <MX_TIM2_Init+0xa4>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c7e:	4b1e      	ldr	r3, [pc, #120]	; (8002cf8 <MX_TIM2_Init+0xa4>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002c84:	4b1c      	ldr	r3, [pc, #112]	; (8002cf8 <MX_TIM2_Init+0xa4>)
 8002c86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c8c:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <MX_TIM2_Init+0xa4>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c92:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <MX_TIM2_Init+0xa4>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002ca8:	230f      	movs	r3, #15
 8002caa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002cac:	2300      	movs	r3, #0
 8002cae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002cb8:	230f      	movs	r3, #15
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002cbc:	f107 030c 	add.w	r3, r7, #12
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	480d      	ldr	r0, [pc, #52]	; (8002cf8 <MX_TIM2_Init+0xa4>)
 8002cc4:	f002 feae 	bl	8005a24 <HAL_TIM_Encoder_Init>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002cce:	f7ff fad1 	bl	8002274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cda:	1d3b      	adds	r3, r7, #4
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4806      	ldr	r0, [pc, #24]	; (8002cf8 <MX_TIM2_Init+0xa4>)
 8002ce0:	f003 fbb4 	bl	800644c <HAL_TIMEx_MasterConfigSynchronization>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002cea:	f7ff fac3 	bl	8002274 <Error_Handler>
  }

}
 8002cee:	bf00      	nop
 8002cf0:	3730      	adds	r7, #48	; 0x30
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	200001e4 	.word	0x200001e4

08002cfc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08e      	sub	sp, #56	; 0x38
 8002d00:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	605a      	str	r2, [r3, #4]
 8002d0c:	609a      	str	r2, [r3, #8]
 8002d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d10:	f107 0320 	add.w	r3, r7, #32
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d1a:	1d3b      	adds	r3, r7, #4
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	605a      	str	r2, [r3, #4]
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	60da      	str	r2, [r3, #12]
 8002d26:	611a      	str	r2, [r3, #16]
 8002d28:	615a      	str	r2, [r3, #20]
 8002d2a:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8002d2c:	4b32      	ldr	r3, [pc, #200]	; (8002df8 <MX_TIM3_Init+0xfc>)
 8002d2e:	4a33      	ldr	r2, [pc, #204]	; (8002dfc <MX_TIM3_Init+0x100>)
 8002d30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 8002d32:	4b31      	ldr	r3, [pc, #196]	; (8002df8 <MX_TIM3_Init+0xfc>)
 8002d34:	2254      	movs	r2, #84	; 0x54
 8002d36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d38:	4b2f      	ldr	r3, [pc, #188]	; (8002df8 <MX_TIM3_Init+0xfc>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002d3e:	4b2e      	ldr	r3, [pc, #184]	; (8002df8 <MX_TIM3_Init+0xfc>)
 8002d40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d46:	4b2c      	ldr	r3, [pc, #176]	; (8002df8 <MX_TIM3_Init+0xfc>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d4c:	4b2a      	ldr	r3, [pc, #168]	; (8002df8 <MX_TIM3_Init+0xfc>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d52:	4829      	ldr	r0, [pc, #164]	; (8002df8 <MX_TIM3_Init+0xfc>)
 8002d54:	f002 fdd4 	bl	8005900 <HAL_TIM_Base_Init>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002d5e:	f7ff fa89 	bl	8002274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d66:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4822      	ldr	r0, [pc, #136]	; (8002df8 <MX_TIM3_Init+0xfc>)
 8002d70:	f002 ffe8 	bl	8005d44 <HAL_TIM_ConfigClockSource>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002d7a:	f7ff fa7b 	bl	8002274 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d7e:	481e      	ldr	r0, [pc, #120]	; (8002df8 <MX_TIM3_Init+0xfc>)
 8002d80:	f002 fde9 	bl	8005956 <HAL_TIM_PWM_Init>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002d8a:	f7ff fa73 	bl	8002274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d92:	2300      	movs	r3, #0
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d96:	f107 0320 	add.w	r3, r7, #32
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4816      	ldr	r0, [pc, #88]	; (8002df8 <MX_TIM3_Init+0xfc>)
 8002d9e:	f003 fb55 	bl	800644c <HAL_TIMEx_MasterConfigSynchronization>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002da8:	f7ff fa64 	bl	8002274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dac:	2360      	movs	r3, #96	; 0x60
 8002dae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002db4:	2300      	movs	r3, #0
 8002db6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dbc:	1d3b      	adds	r3, r7, #4
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	480d      	ldr	r0, [pc, #52]	; (8002df8 <MX_TIM3_Init+0xfc>)
 8002dc4:	f002 fef8 	bl	8005bb8 <HAL_TIM_PWM_ConfigChannel>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002dce:	f7ff fa51 	bl	8002274 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002dd2:	1d3b      	adds	r3, r7, #4
 8002dd4:	2208      	movs	r2, #8
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4807      	ldr	r0, [pc, #28]	; (8002df8 <MX_TIM3_Init+0xfc>)
 8002dda:	f002 feed 	bl	8005bb8 <HAL_TIM_PWM_ConfigChannel>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002de4:	f7ff fa46 	bl	8002274 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8002de8:	4803      	ldr	r0, [pc, #12]	; (8002df8 <MX_TIM3_Init+0xfc>)
 8002dea:	f000 f919 	bl	8003020 <HAL_TIM_MspPostInit>

}
 8002dee:	bf00      	nop
 8002df0:	3738      	adds	r7, #56	; 0x38
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	200001a4 	.word	0x200001a4
 8002dfc:	40000400 	.word	0x40000400

08002e00 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08c      	sub	sp, #48	; 0x30
 8002e04:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e06:	f107 030c 	add.w	r3, r7, #12
 8002e0a:	2224      	movs	r2, #36	; 0x24
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f004 f860 	bl	8006ed4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e14:	1d3b      	adds	r3, r7, #4
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8002e1c:	4b20      	ldr	r3, [pc, #128]	; (8002ea0 <MX_TIM4_Init+0xa0>)
 8002e1e:	4a21      	ldr	r2, [pc, #132]	; (8002ea4 <MX_TIM4_Init+0xa4>)
 8002e20:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002e22:	4b1f      	ldr	r3, [pc, #124]	; (8002ea0 <MX_TIM4_Init+0xa0>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e28:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <MX_TIM4_Init+0xa0>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002e2e:	4b1c      	ldr	r3, [pc, #112]	; (8002ea0 <MX_TIM4_Init+0xa0>)
 8002e30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e34:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e36:	4b1a      	ldr	r3, [pc, #104]	; (8002ea0 <MX_TIM4_Init+0xa0>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e3c:	4b18      	ldr	r3, [pc, #96]	; (8002ea0 <MX_TIM4_Init+0xa0>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002e42:	2303      	movs	r3, #3
 8002e44:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002e46:	2302      	movs	r3, #2
 8002e48:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002e52:	230f      	movs	r3, #15
 8002e54:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e56:	2300      	movs	r3, #0
 8002e58:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002e62:	230f      	movs	r3, #15
 8002e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002e66:	f107 030c 	add.w	r3, r7, #12
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	480c      	ldr	r0, [pc, #48]	; (8002ea0 <MX_TIM4_Init+0xa0>)
 8002e6e:	f002 fdd9 	bl	8005a24 <HAL_TIM_Encoder_Init>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002e78:	f7ff f9fc 	bl	8002274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e84:	1d3b      	adds	r3, r7, #4
 8002e86:	4619      	mov	r1, r3
 8002e88:	4805      	ldr	r0, [pc, #20]	; (8002ea0 <MX_TIM4_Init+0xa0>)
 8002e8a:	f003 fadf 	bl	800644c <HAL_TIMEx_MasterConfigSynchronization>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002e94:	f7ff f9ee 	bl	8002274 <Error_Handler>
  }

}
 8002e98:	bf00      	nop
 8002e9a:	3730      	adds	r7, #48	; 0x30
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	20000164 	.word	0x20000164
 8002ea4:	40000800 	.word	0x40000800

08002ea8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08c      	sub	sp, #48	; 0x30
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb0:	f107 031c 	add.w	r3, r7, #28
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
 8002ebe:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec8:	d14b      	bne.n	8002f62 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61bb      	str	r3, [r7, #24]
 8002ece:	4b3f      	ldr	r3, [pc, #252]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x124>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	4a3e      	ldr	r2, [pc, #248]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x124>)
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eda:	4b3c      	ldr	r3, [pc, #240]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x124>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	61bb      	str	r3, [r7, #24]
 8002ee4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	4b38      	ldr	r3, [pc, #224]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x124>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	4a37      	ldr	r2, [pc, #220]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x124>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef6:	4b35      	ldr	r3, [pc, #212]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x124>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	4b31      	ldr	r3, [pc, #196]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x124>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	4a30      	ldr	r2, [pc, #192]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x124>)
 8002f0c:	f043 0302 	orr.w	r3, r3, #2
 8002f10:	6313      	str	r3, [r2, #48]	; 0x30
 8002f12:	4b2e      	ldr	r3, [pc, #184]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x124>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = ENC_L_A_Pin;
 8002f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f24:	2302      	movs	r3, #2
 8002f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f30:	2301      	movs	r3, #1
 8002f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_L_A_GPIO_Port, &GPIO_InitStruct);
 8002f34:	f107 031c 	add.w	r3, r7, #28
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4825      	ldr	r0, [pc, #148]	; (8002fd0 <HAL_TIM_Encoder_MspInit+0x128>)
 8002f3c:	f000 fac0 	bl	80034c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_L_B_Pin;
 8002f40:	2308      	movs	r3, #8
 8002f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f44:	2302      	movs	r3, #2
 8002f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f50:	2301      	movs	r3, #1
 8002f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_L_B_GPIO_Port, &GPIO_InitStruct);
 8002f54:	f107 031c 	add.w	r3, r7, #28
 8002f58:	4619      	mov	r1, r3
 8002f5a:	481e      	ldr	r0, [pc, #120]	; (8002fd4 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002f5c:	f000 fab0 	bl	80034c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002f60:	e030      	b.n	8002fc4 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(tim_encoderHandle->Instance==TIM4)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a1c      	ldr	r2, [pc, #112]	; (8002fd8 <HAL_TIM_Encoder_MspInit+0x130>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d12b      	bne.n	8002fc4 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	4b16      	ldr	r3, [pc, #88]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x124>)
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	4a15      	ldr	r2, [pc, #84]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x124>)
 8002f76:	f043 0304 	orr.w	r3, r3, #4
 8002f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7c:	4b13      	ldr	r3, [pc, #76]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x124>)
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	4b0f      	ldr	r3, [pc, #60]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x124>)
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f90:	4a0e      	ldr	r2, [pc, #56]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x124>)
 8002f92:	f043 0302 	orr.w	r3, r3, #2
 8002f96:	6313      	str	r3, [r2, #48]	; 0x30
 8002f98:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <HAL_TIM_Encoder_MspInit+0x124>)
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_R_A_Pin|ENC_R_B_Pin;
 8002fa4:	23c0      	movs	r3, #192	; 0xc0
 8002fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fb8:	f107 031c 	add.w	r3, r7, #28
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4805      	ldr	r0, [pc, #20]	; (8002fd4 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002fc0:	f000 fa7e 	bl	80034c0 <HAL_GPIO_Init>
}
 8002fc4:	bf00      	nop
 8002fc6:	3730      	adds	r7, #48	; 0x30
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40020000 	.word	0x40020000
 8002fd4:	40020400 	.word	0x40020400
 8002fd8:	40000800 	.word	0x40000800

08002fdc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a0b      	ldr	r2, [pc, #44]	; (8003018 <HAL_TIM_Base_MspInit+0x3c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d10d      	bne.n	800300a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	; (800301c <HAL_TIM_Base_MspInit+0x40>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	4a09      	ldr	r2, [pc, #36]	; (800301c <HAL_TIM_Base_MspInit+0x40>)
 8002ff8:	f043 0302 	orr.w	r3, r3, #2
 8002ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ffe:	4b07      	ldr	r3, [pc, #28]	; (800301c <HAL_TIM_Base_MspInit+0x40>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800300a:	bf00      	nop
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40000400 	.word	0x40000400
 800301c:	40023800 	.word	0x40023800

08003020 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b088      	sub	sp, #32
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003028:	f107 030c 	add.w	r3, r7, #12
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	609a      	str	r2, [r3, #8]
 8003034:	60da      	str	r2, [r3, #12]
 8003036:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a12      	ldr	r2, [pc, #72]	; (8003088 <HAL_TIM_MspPostInit+0x68>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d11e      	bne.n	8003080 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	4b11      	ldr	r3, [pc, #68]	; (800308c <HAL_TIM_MspPostInit+0x6c>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	4a10      	ldr	r2, [pc, #64]	; (800308c <HAL_TIM_MspPostInit+0x6c>)
 800304c:	f043 0304 	orr.w	r3, r3, #4
 8003050:	6313      	str	r3, [r2, #48]	; 0x30
 8003052:	4b0e      	ldr	r3, [pc, #56]	; (800308c <HAL_TIM_MspPostInit+0x6c>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	60bb      	str	r3, [r7, #8]
 800305c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = PWML_Pin|PWMR_Pin;
 800305e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003062:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003064:	2302      	movs	r3, #2
 8003066:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306c:	2300      	movs	r3, #0
 800306e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003070:	2302      	movs	r3, #2
 8003072:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003074:	f107 030c 	add.w	r3, r7, #12
 8003078:	4619      	mov	r1, r3
 800307a:	4805      	ldr	r0, [pc, #20]	; (8003090 <HAL_TIM_MspPostInit+0x70>)
 800307c:	f000 fa20 	bl	80034c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003080:	bf00      	nop
 8003082:	3720      	adds	r7, #32
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40000400 	.word	0x40000400
 800308c:	40023800 	.word	0x40023800
 8003090:	40020800 	.word	0x40020800

08003094 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003098:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <MX_USART2_UART_Init+0x4c>)
 800309a:	4a12      	ldr	r2, [pc, #72]	; (80030e4 <MX_USART2_UART_Init+0x50>)
 800309c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800309e:	4b10      	ldr	r3, [pc, #64]	; (80030e0 <MX_USART2_UART_Init+0x4c>)
 80030a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030a6:	4b0e      	ldr	r3, [pc, #56]	; (80030e0 <MX_USART2_UART_Init+0x4c>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030ac:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <MX_USART2_UART_Init+0x4c>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030b2:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <MX_USART2_UART_Init+0x4c>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030b8:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <MX_USART2_UART_Init+0x4c>)
 80030ba:	220c      	movs	r2, #12
 80030bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030be:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <MX_USART2_UART_Init+0x4c>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030c4:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <MX_USART2_UART_Init+0x4c>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030ca:	4805      	ldr	r0, [pc, #20]	; (80030e0 <MX_USART2_UART_Init+0x4c>)
 80030cc:	f003 fa2c 	bl	8006528 <HAL_UART_Init>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80030d6:	f7ff f8cd 	bl	8002274 <Error_Handler>
  }

}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000224 	.word	0x20000224
 80030e4:	40004400 	.word	0x40004400

080030e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08a      	sub	sp, #40	; 0x28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f0:	f107 0314 	add.w	r3, r7, #20
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	609a      	str	r2, [r3, #8]
 80030fc:	60da      	str	r2, [r3, #12]
 80030fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a19      	ldr	r2, [pc, #100]	; (800316c <HAL_UART_MspInit+0x84>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d12b      	bne.n	8003162 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	4b18      	ldr	r3, [pc, #96]	; (8003170 <HAL_UART_MspInit+0x88>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	4a17      	ldr	r2, [pc, #92]	; (8003170 <HAL_UART_MspInit+0x88>)
 8003114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003118:	6413      	str	r3, [r2, #64]	; 0x40
 800311a:	4b15      	ldr	r3, [pc, #84]	; (8003170 <HAL_UART_MspInit+0x88>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	4b11      	ldr	r3, [pc, #68]	; (8003170 <HAL_UART_MspInit+0x88>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	4a10      	ldr	r2, [pc, #64]	; (8003170 <HAL_UART_MspInit+0x88>)
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	6313      	str	r3, [r2, #48]	; 0x30
 8003136:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <HAL_UART_MspInit+0x88>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003142:	230c      	movs	r3, #12
 8003144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003146:	2302      	movs	r3, #2
 8003148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800314e:	2303      	movs	r3, #3
 8003150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003152:	2307      	movs	r3, #7
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003156:	f107 0314 	add.w	r3, r7, #20
 800315a:	4619      	mov	r1, r3
 800315c:	4805      	ldr	r0, [pc, #20]	; (8003174 <HAL_UART_MspInit+0x8c>)
 800315e:	f000 f9af 	bl	80034c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003162:	bf00      	nop
 8003164:	3728      	adds	r7, #40	; 0x28
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40004400 	.word	0x40004400
 8003170:	40023800 	.word	0x40023800
 8003174:	40020000 	.word	0x40020000

08003178 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003178:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800317c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800317e:	e003      	b.n	8003188 <LoopCopyDataInit>

08003180 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003180:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003182:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003184:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003186:	3104      	adds	r1, #4

08003188 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003188:	480b      	ldr	r0, [pc, #44]	; (80031b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800318a:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800318c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800318e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003190:	d3f6      	bcc.n	8003180 <CopyDataInit>
  ldr  r2, =_sbss
 8003192:	4a0b      	ldr	r2, [pc, #44]	; (80031c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003194:	e002      	b.n	800319c <LoopFillZerobss>

08003196 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003196:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003198:	f842 3b04 	str.w	r3, [r2], #4

0800319c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800319c:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800319e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80031a0:	d3f9      	bcc.n	8003196 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80031a2:	f7ff fd41 	bl	8002c28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031a6:	f003 fe71 	bl	8006e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031aa:	f7fe ff2b 	bl	8002004 <main>
  bx  lr    
 80031ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80031b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80031b4:	0800835c 	.word	0x0800835c
  ldr  r0, =_sdata
 80031b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80031bc:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80031c0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80031c4:	2000026c 	.word	0x2000026c

080031c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031c8:	e7fe      	b.n	80031c8 <ADC_IRQHandler>
	...

080031cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031d0:	4b0e      	ldr	r3, [pc, #56]	; (800320c <HAL_Init+0x40>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a0d      	ldr	r2, [pc, #52]	; (800320c <HAL_Init+0x40>)
 80031d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031dc:	4b0b      	ldr	r3, [pc, #44]	; (800320c <HAL_Init+0x40>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a0a      	ldr	r2, [pc, #40]	; (800320c <HAL_Init+0x40>)
 80031e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031e8:	4b08      	ldr	r3, [pc, #32]	; (800320c <HAL_Init+0x40>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a07      	ldr	r2, [pc, #28]	; (800320c <HAL_Init+0x40>)
 80031ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031f4:	2003      	movs	r0, #3
 80031f6:	f000 f92f 	bl	8003458 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031fa:	2000      	movs	r0, #0
 80031fc:	f000 f808 	bl	8003210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003200:	f7ff fc3e 	bl	8002a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40023c00 	.word	0x40023c00

08003210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003218:	4b12      	ldr	r3, [pc, #72]	; (8003264 <HAL_InitTick+0x54>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	4b12      	ldr	r3, [pc, #72]	; (8003268 <HAL_InitTick+0x58>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	4619      	mov	r1, r3
 8003222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003226:	fbb3 f3f1 	udiv	r3, r3, r1
 800322a:	fbb2 f3f3 	udiv	r3, r2, r3
 800322e:	4618      	mov	r0, r3
 8003230:	f000 f939 	bl	80034a6 <HAL_SYSTICK_Config>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e00e      	b.n	800325c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b0f      	cmp	r3, #15
 8003242:	d80a      	bhi.n	800325a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003244:	2200      	movs	r2, #0
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	f04f 30ff 	mov.w	r0, #4294967295
 800324c:	f000 f90f 	bl	800346e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003250:	4a06      	ldr	r2, [pc, #24]	; (800326c <HAL_InitTick+0x5c>)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003256:	2300      	movs	r3, #0
 8003258:	e000      	b.n	800325c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
}
 800325c:	4618      	mov	r0, r3
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	20000000 	.word	0x20000000
 8003268:	20000008 	.word	0x20000008
 800326c:	20000004 	.word	0x20000004

08003270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003274:	4b06      	ldr	r3, [pc, #24]	; (8003290 <HAL_IncTick+0x20>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	461a      	mov	r2, r3
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_IncTick+0x24>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4413      	add	r3, r2
 8003280:	4a04      	ldr	r2, [pc, #16]	; (8003294 <HAL_IncTick+0x24>)
 8003282:	6013      	str	r3, [r2, #0]
}
 8003284:	bf00      	nop
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	20000008 	.word	0x20000008
 8003294:	20000264 	.word	0x20000264

08003298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return uwTick;
 800329c:	4b03      	ldr	r3, [pc, #12]	; (80032ac <HAL_GetTick+0x14>)
 800329e:	681b      	ldr	r3, [r3, #0]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	20000264 	.word	0x20000264

080032b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032b8:	f7ff ffee 	bl	8003298 <HAL_GetTick>
 80032bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c8:	d005      	beq.n	80032d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032ca:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <HAL_Delay+0x40>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	461a      	mov	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4413      	add	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032d6:	bf00      	nop
 80032d8:	f7ff ffde 	bl	8003298 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d8f7      	bhi.n	80032d8 <HAL_Delay+0x28>
  {
  }
}
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	20000008 	.word	0x20000008

080032f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003304:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <__NVIC_SetPriorityGrouping+0x44>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003310:	4013      	ands	r3, r2
 8003312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800331c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003326:	4a04      	ldr	r2, [pc, #16]	; (8003338 <__NVIC_SetPriorityGrouping+0x44>)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	60d3      	str	r3, [r2, #12]
}
 800332c:	bf00      	nop
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	e000ed00 	.word	0xe000ed00

0800333c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003340:	4b04      	ldr	r3, [pc, #16]	; (8003354 <__NVIC_GetPriorityGrouping+0x18>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	0a1b      	lsrs	r3, r3, #8
 8003346:	f003 0307 	and.w	r3, r3, #7
}
 800334a:	4618      	mov	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	e000ed00 	.word	0xe000ed00

08003358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	6039      	str	r1, [r7, #0]
 8003362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003368:	2b00      	cmp	r3, #0
 800336a:	db0a      	blt.n	8003382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	b2da      	uxtb	r2, r3
 8003370:	490c      	ldr	r1, [pc, #48]	; (80033a4 <__NVIC_SetPriority+0x4c>)
 8003372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003376:	0112      	lsls	r2, r2, #4
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	440b      	add	r3, r1
 800337c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003380:	e00a      	b.n	8003398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	4908      	ldr	r1, [pc, #32]	; (80033a8 <__NVIC_SetPriority+0x50>)
 8003388:	79fb      	ldrb	r3, [r7, #7]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	3b04      	subs	r3, #4
 8003390:	0112      	lsls	r2, r2, #4
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	440b      	add	r3, r1
 8003396:	761a      	strb	r2, [r3, #24]
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000e100 	.word	0xe000e100
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b089      	sub	sp, #36	; 0x24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f1c3 0307 	rsb	r3, r3, #7
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	bf28      	it	cs
 80033ca:	2304      	movcs	r3, #4
 80033cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	3304      	adds	r3, #4
 80033d2:	2b06      	cmp	r3, #6
 80033d4:	d902      	bls.n	80033dc <NVIC_EncodePriority+0x30>
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	3b03      	subs	r3, #3
 80033da:	e000      	b.n	80033de <NVIC_EncodePriority+0x32>
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e0:	f04f 32ff 	mov.w	r2, #4294967295
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43da      	mvns	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	401a      	ands	r2, r3
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033f4:	f04f 31ff 	mov.w	r1, #4294967295
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	fa01 f303 	lsl.w	r3, r1, r3
 80033fe:	43d9      	mvns	r1, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003404:	4313      	orrs	r3, r2
         );
}
 8003406:	4618      	mov	r0, r3
 8003408:	3724      	adds	r7, #36	; 0x24
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
	...

08003414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3b01      	subs	r3, #1
 8003420:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003424:	d301      	bcc.n	800342a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003426:	2301      	movs	r3, #1
 8003428:	e00f      	b.n	800344a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800342a:	4a0a      	ldr	r2, [pc, #40]	; (8003454 <SysTick_Config+0x40>)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3b01      	subs	r3, #1
 8003430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003432:	210f      	movs	r1, #15
 8003434:	f04f 30ff 	mov.w	r0, #4294967295
 8003438:	f7ff ff8e 	bl	8003358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800343c:	4b05      	ldr	r3, [pc, #20]	; (8003454 <SysTick_Config+0x40>)
 800343e:	2200      	movs	r2, #0
 8003440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003442:	4b04      	ldr	r3, [pc, #16]	; (8003454 <SysTick_Config+0x40>)
 8003444:	2207      	movs	r2, #7
 8003446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	e000e010 	.word	0xe000e010

08003458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff ff47 	bl	80032f4 <__NVIC_SetPriorityGrouping>
}
 8003466:	bf00      	nop
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800346e:	b580      	push	{r7, lr}
 8003470:	b086      	sub	sp, #24
 8003472:	af00      	add	r7, sp, #0
 8003474:	4603      	mov	r3, r0
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
 800347a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003480:	f7ff ff5c 	bl	800333c <__NVIC_GetPriorityGrouping>
 8003484:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	68b9      	ldr	r1, [r7, #8]
 800348a:	6978      	ldr	r0, [r7, #20]
 800348c:	f7ff ff8e 	bl	80033ac <NVIC_EncodePriority>
 8003490:	4602      	mov	r2, r0
 8003492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003496:	4611      	mov	r1, r2
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff ff5d 	bl	8003358 <__NVIC_SetPriority>
}
 800349e:	bf00      	nop
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff ffb0 	bl	8003414 <SysTick_Config>
 80034b4:	4603      	mov	r3, r0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b089      	sub	sp, #36	; 0x24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034d6:	2300      	movs	r3, #0
 80034d8:	61fb      	str	r3, [r7, #28]
 80034da:	e159      	b.n	8003790 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034dc:	2201      	movs	r2, #1
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4013      	ands	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	f040 8148 	bne.w	800378a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d00b      	beq.n	800351a <HAL_GPIO_Init+0x5a>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b02      	cmp	r3, #2
 8003508:	d007      	beq.n	800351a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800350e:	2b11      	cmp	r3, #17
 8003510:	d003      	beq.n	800351a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b12      	cmp	r3, #18
 8003518:	d130      	bne.n	800357c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	2203      	movs	r2, #3
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43db      	mvns	r3, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4013      	ands	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4313      	orrs	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003550:	2201      	movs	r2, #1
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4013      	ands	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	091b      	lsrs	r3, r3, #4
 8003566:	f003 0201 	and.w	r2, r3, #1
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4313      	orrs	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	2203      	movs	r2, #3
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4013      	ands	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d003      	beq.n	80035bc <HAL_GPIO_Init+0xfc>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b12      	cmp	r3, #18
 80035ba:	d123      	bne.n	8003604 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	08da      	lsrs	r2, r3, #3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3208      	adds	r2, #8
 80035c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	220f      	movs	r2, #15
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	43db      	mvns	r3, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4013      	ands	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	08da      	lsrs	r2, r3, #3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3208      	adds	r2, #8
 80035fe:	69b9      	ldr	r1, [r7, #24]
 8003600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	2203      	movs	r2, #3
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	43db      	mvns	r3, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4013      	ands	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 0203 	and.w	r2, r3, #3
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4313      	orrs	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 80a2 	beq.w	800378a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	4b56      	ldr	r3, [pc, #344]	; (80037a4 <HAL_GPIO_Init+0x2e4>)
 800364c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364e:	4a55      	ldr	r2, [pc, #340]	; (80037a4 <HAL_GPIO_Init+0x2e4>)
 8003650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003654:	6453      	str	r3, [r2, #68]	; 0x44
 8003656:	4b53      	ldr	r3, [pc, #332]	; (80037a4 <HAL_GPIO_Init+0x2e4>)
 8003658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003662:	4a51      	ldr	r2, [pc, #324]	; (80037a8 <HAL_GPIO_Init+0x2e8>)
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	089b      	lsrs	r3, r3, #2
 8003668:	3302      	adds	r3, #2
 800366a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800366e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	220f      	movs	r2, #15
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	43db      	mvns	r3, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	4013      	ands	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a48      	ldr	r2, [pc, #288]	; (80037ac <HAL_GPIO_Init+0x2ec>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d019      	beq.n	80036c2 <HAL_GPIO_Init+0x202>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a47      	ldr	r2, [pc, #284]	; (80037b0 <HAL_GPIO_Init+0x2f0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d013      	beq.n	80036be <HAL_GPIO_Init+0x1fe>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a46      	ldr	r2, [pc, #280]	; (80037b4 <HAL_GPIO_Init+0x2f4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00d      	beq.n	80036ba <HAL_GPIO_Init+0x1fa>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a45      	ldr	r2, [pc, #276]	; (80037b8 <HAL_GPIO_Init+0x2f8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d007      	beq.n	80036b6 <HAL_GPIO_Init+0x1f6>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a44      	ldr	r2, [pc, #272]	; (80037bc <HAL_GPIO_Init+0x2fc>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d101      	bne.n	80036b2 <HAL_GPIO_Init+0x1f2>
 80036ae:	2304      	movs	r3, #4
 80036b0:	e008      	b.n	80036c4 <HAL_GPIO_Init+0x204>
 80036b2:	2307      	movs	r3, #7
 80036b4:	e006      	b.n	80036c4 <HAL_GPIO_Init+0x204>
 80036b6:	2303      	movs	r3, #3
 80036b8:	e004      	b.n	80036c4 <HAL_GPIO_Init+0x204>
 80036ba:	2302      	movs	r3, #2
 80036bc:	e002      	b.n	80036c4 <HAL_GPIO_Init+0x204>
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <HAL_GPIO_Init+0x204>
 80036c2:	2300      	movs	r3, #0
 80036c4:	69fa      	ldr	r2, [r7, #28]
 80036c6:	f002 0203 	and.w	r2, r2, #3
 80036ca:	0092      	lsls	r2, r2, #2
 80036cc:	4093      	lsls	r3, r2
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036d4:	4934      	ldr	r1, [pc, #208]	; (80037a8 <HAL_GPIO_Init+0x2e8>)
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	089b      	lsrs	r3, r3, #2
 80036da:	3302      	adds	r3, #2
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036e2:	4b37      	ldr	r3, [pc, #220]	; (80037c0 <HAL_GPIO_Init+0x300>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	43db      	mvns	r3, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4013      	ands	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	4313      	orrs	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003706:	4a2e      	ldr	r2, [pc, #184]	; (80037c0 <HAL_GPIO_Init+0x300>)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800370c:	4b2c      	ldr	r3, [pc, #176]	; (80037c0 <HAL_GPIO_Init+0x300>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	43db      	mvns	r3, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4013      	ands	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	4313      	orrs	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003730:	4a23      	ldr	r2, [pc, #140]	; (80037c0 <HAL_GPIO_Init+0x300>)
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003736:	4b22      	ldr	r3, [pc, #136]	; (80037c0 <HAL_GPIO_Init+0x300>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	43db      	mvns	r3, r3
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4013      	ands	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800375a:	4a19      	ldr	r2, [pc, #100]	; (80037c0 <HAL_GPIO_Init+0x300>)
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003760:	4b17      	ldr	r3, [pc, #92]	; (80037c0 <HAL_GPIO_Init+0x300>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	43db      	mvns	r3, r3
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	4013      	ands	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003784:	4a0e      	ldr	r2, [pc, #56]	; (80037c0 <HAL_GPIO_Init+0x300>)
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	3301      	adds	r3, #1
 800378e:	61fb      	str	r3, [r7, #28]
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	2b0f      	cmp	r3, #15
 8003794:	f67f aea2 	bls.w	80034dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003798:	bf00      	nop
 800379a:	3724      	adds	r7, #36	; 0x24
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	40023800 	.word	0x40023800
 80037a8:	40013800 	.word	0x40013800
 80037ac:	40020000 	.word	0x40020000
 80037b0:	40020400 	.word	0x40020400
 80037b4:	40020800 	.word	0x40020800
 80037b8:	40020c00 	.word	0x40020c00
 80037bc:	40021000 	.word	0x40021000
 80037c0:	40013c00 	.word	0x40013c00

080037c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	807b      	strh	r3, [r7, #2]
 80037d0:	4613      	mov	r3, r2
 80037d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037d4:	787b      	ldrb	r3, [r7, #1]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037da:	887a      	ldrh	r2, [r7, #2]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037e0:	e003      	b.n	80037ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037e2:	887b      	ldrh	r3, [r7, #2]
 80037e4:	041a      	lsls	r2, r3, #16
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	619a      	str	r2, [r3, #24]
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
	...

080037f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e11f      	b.n	8003a4a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fe fb94 	bl	8001f4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2224      	movs	r2, #36	; 0x24
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0201 	bic.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800384a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800385a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800385c:	f002 f828 	bl	80058b0 <HAL_RCC_GetPCLK1Freq>
 8003860:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4a7b      	ldr	r2, [pc, #492]	; (8003a54 <HAL_I2C_Init+0x25c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d807      	bhi.n	800387c <HAL_I2C_Init+0x84>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4a7a      	ldr	r2, [pc, #488]	; (8003a58 <HAL_I2C_Init+0x260>)
 8003870:	4293      	cmp	r3, r2
 8003872:	bf94      	ite	ls
 8003874:	2301      	movls	r3, #1
 8003876:	2300      	movhi	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	e006      	b.n	800388a <HAL_I2C_Init+0x92>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4a77      	ldr	r2, [pc, #476]	; (8003a5c <HAL_I2C_Init+0x264>)
 8003880:	4293      	cmp	r3, r2
 8003882:	bf94      	ite	ls
 8003884:	2301      	movls	r3, #1
 8003886:	2300      	movhi	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e0db      	b.n	8003a4a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4a72      	ldr	r2, [pc, #456]	; (8003a60 <HAL_I2C_Init+0x268>)
 8003896:	fba2 2303 	umull	r2, r3, r2, r3
 800389a:	0c9b      	lsrs	r3, r3, #18
 800389c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	4a64      	ldr	r2, [pc, #400]	; (8003a54 <HAL_I2C_Init+0x25c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d802      	bhi.n	80038cc <HAL_I2C_Init+0xd4>
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	3301      	adds	r3, #1
 80038ca:	e009      	b.n	80038e0 <HAL_I2C_Init+0xe8>
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038d2:	fb02 f303 	mul.w	r3, r2, r3
 80038d6:	4a63      	ldr	r2, [pc, #396]	; (8003a64 <HAL_I2C_Init+0x26c>)
 80038d8:	fba2 2303 	umull	r2, r3, r2, r3
 80038dc:	099b      	lsrs	r3, r3, #6
 80038de:	3301      	adds	r3, #1
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6812      	ldr	r2, [r2, #0]
 80038e4:	430b      	orrs	r3, r1
 80038e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	4956      	ldr	r1, [pc, #344]	; (8003a54 <HAL_I2C_Init+0x25c>)
 80038fc:	428b      	cmp	r3, r1
 80038fe:	d80d      	bhi.n	800391c <HAL_I2C_Init+0x124>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1e59      	subs	r1, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	fbb1 f3f3 	udiv	r3, r1, r3
 800390e:	3301      	adds	r3, #1
 8003910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003914:	2b04      	cmp	r3, #4
 8003916:	bf38      	it	cc
 8003918:	2304      	movcc	r3, #4
 800391a:	e04f      	b.n	80039bc <HAL_I2C_Init+0x1c4>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d111      	bne.n	8003948 <HAL_I2C_Init+0x150>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	1e58      	subs	r0, r3, #1
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6859      	ldr	r1, [r3, #4]
 800392c:	460b      	mov	r3, r1
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	440b      	add	r3, r1
 8003932:	fbb0 f3f3 	udiv	r3, r0, r3
 8003936:	3301      	adds	r3, #1
 8003938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800393c:	2b00      	cmp	r3, #0
 800393e:	bf0c      	ite	eq
 8003940:	2301      	moveq	r3, #1
 8003942:	2300      	movne	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	e012      	b.n	800396e <HAL_I2C_Init+0x176>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	1e58      	subs	r0, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6859      	ldr	r1, [r3, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	0099      	lsls	r1, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	fbb0 f3f3 	udiv	r3, r0, r3
 800395e:	3301      	adds	r3, #1
 8003960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003964:	2b00      	cmp	r3, #0
 8003966:	bf0c      	ite	eq
 8003968:	2301      	moveq	r3, #1
 800396a:	2300      	movne	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_I2C_Init+0x17e>
 8003972:	2301      	movs	r3, #1
 8003974:	e022      	b.n	80039bc <HAL_I2C_Init+0x1c4>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10e      	bne.n	800399c <HAL_I2C_Init+0x1a4>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	1e58      	subs	r0, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6859      	ldr	r1, [r3, #4]
 8003986:	460b      	mov	r3, r1
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	440b      	add	r3, r1
 800398c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003990:	3301      	adds	r3, #1
 8003992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800399a:	e00f      	b.n	80039bc <HAL_I2C_Init+0x1c4>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	1e58      	subs	r0, r3, #1
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6859      	ldr	r1, [r3, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	0099      	lsls	r1, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80039b2:	3301      	adds	r3, #1
 80039b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	6809      	ldr	r1, [r1, #0]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69da      	ldr	r2, [r3, #28]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6911      	ldr	r1, [r2, #16]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	68d2      	ldr	r2, [r2, #12]
 80039f6:	4311      	orrs	r1, r2
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6812      	ldr	r2, [r2, #0]
 80039fc:	430b      	orrs	r3, r1
 80039fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695a      	ldr	r2, [r3, #20]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0201 	orr.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	000186a0 	.word	0x000186a0
 8003a58:	001e847f 	.word	0x001e847f
 8003a5c:	003d08ff 	.word	0x003d08ff
 8003a60:	431bde83 	.word	0x431bde83
 8003a64:	10624dd3 	.word	0x10624dd3

08003a68 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b088      	sub	sp, #32
 8003a6c:	af02      	add	r7, sp, #8
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	607a      	str	r2, [r7, #4]
 8003a72:	461a      	mov	r2, r3
 8003a74:	460b      	mov	r3, r1
 8003a76:	817b      	strh	r3, [r7, #10]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a7c:	f7ff fc0c 	bl	8003298 <HAL_GetTick>
 8003a80:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b20      	cmp	r3, #32
 8003a8c:	f040 80e0 	bne.w	8003c50 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	2319      	movs	r3, #25
 8003a96:	2201      	movs	r2, #1
 8003a98:	4970      	ldr	r1, [pc, #448]	; (8003c5c <HAL_I2C_Master_Transmit+0x1f4>)
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f001 f8f0 	bl	8004c80 <I2C_WaitOnFlagUntilTimeout>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e0d3      	b.n	8003c52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d101      	bne.n	8003ab8 <HAL_I2C_Master_Transmit+0x50>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	e0cc      	b.n	8003c52 <HAL_I2C_Master_Transmit+0x1ea>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d007      	beq.n	8003ade <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f042 0201 	orr.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2221      	movs	r2, #33	; 0x21
 8003af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2210      	movs	r2, #16
 8003afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	893a      	ldrh	r2, [r7, #8]
 8003b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4a50      	ldr	r2, [pc, #320]	; (8003c60 <HAL_I2C_Master_Transmit+0x1f8>)
 8003b1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b20:	8979      	ldrh	r1, [r7, #10]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	6a3a      	ldr	r2, [r7, #32]
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 fde2 	bl	80046f0 <I2C_MasterRequestWrite>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e08d      	b.n	8003c52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b36:	2300      	movs	r3, #0
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	613b      	str	r3, [r7, #16]
 8003b4a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b4c:	e066      	b.n	8003c1c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	6a39      	ldr	r1, [r7, #32]
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f001 f96a 	bl	8004e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00d      	beq.n	8003b7a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d107      	bne.n	8003b76 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e06b      	b.n	8003c52 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	781a      	ldrb	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	1c5a      	adds	r2, r3, #1
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d11b      	bne.n	8003bf0 <HAL_I2C_Master_Transmit+0x188>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d017      	beq.n	8003bf0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	781a      	ldrb	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	6a39      	ldr	r1, [r7, #32]
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f001 f95a 	bl	8004eae <I2C_WaitOnBTFFlagUntilTimeout>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00d      	beq.n	8003c1c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d107      	bne.n	8003c18 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e01a      	b.n	8003c52 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d194      	bne.n	8003b4e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	e000      	b.n	8003c52 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c50:	2302      	movs	r3, #2
  }
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	00100002 	.word	0x00100002
 8003c60:	ffff0000 	.word	0xffff0000

08003c64 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b08c      	sub	sp, #48	; 0x30
 8003c68:	af02      	add	r7, sp, #8
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	607a      	str	r2, [r7, #4]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	460b      	mov	r3, r1
 8003c72:	817b      	strh	r3, [r7, #10]
 8003c74:	4613      	mov	r3, r2
 8003c76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c78:	f7ff fb0e 	bl	8003298 <HAL_GetTick>
 8003c7c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b20      	cmp	r3, #32
 8003c88:	f040 820b 	bne.w	80040a2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	2319      	movs	r3, #25
 8003c92:	2201      	movs	r2, #1
 8003c94:	497c      	ldr	r1, [pc, #496]	; (8003e88 <HAL_I2C_Master_Receive+0x224>)
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 fff2 	bl	8004c80 <I2C_WaitOnFlagUntilTimeout>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e1fe      	b.n	80040a4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <HAL_I2C_Master_Receive+0x50>
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	e1f7      	b.n	80040a4 <HAL_I2C_Master_Receive+0x440>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d007      	beq.n	8003cda <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f042 0201 	orr.w	r2, r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ce8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2222      	movs	r2, #34	; 0x22
 8003cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2210      	movs	r2, #16
 8003cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	893a      	ldrh	r2, [r7, #8]
 8003d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4a5c      	ldr	r2, [pc, #368]	; (8003e8c <HAL_I2C_Master_Receive+0x228>)
 8003d1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d1c:	8979      	ldrh	r1, [r7, #10]
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 fd66 	bl	80047f4 <I2C_MasterRequestRead>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e1b8      	b.n	80040a4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d113      	bne.n	8003d62 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	623b      	str	r3, [r7, #32]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	623b      	str	r3, [r7, #32]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	623b      	str	r3, [r7, #32]
 8003d4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	e18c      	b.n	800407c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d11b      	bne.n	8003da2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61fb      	str	r3, [r7, #28]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	61fb      	str	r3, [r7, #28]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	61fb      	str	r3, [r7, #28]
 8003d8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	e16c      	b.n	800407c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d11b      	bne.n	8003de2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61bb      	str	r3, [r7, #24]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	61bb      	str	r3, [r7, #24]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	61bb      	str	r3, [r7, #24]
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	e14c      	b.n	800407c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003df0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df2:	2300      	movs	r3, #0
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	617b      	str	r3, [r7, #20]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e08:	e138      	b.n	800407c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	f200 80f1 	bhi.w	8003ff6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d123      	bne.n	8003e64 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f001 f885 	bl	8004f30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e139      	b.n	80040a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	691a      	ldr	r2, [r3, #16]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e62:	e10b      	b.n	800407c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d14e      	bne.n	8003f0a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e72:	2200      	movs	r2, #0
 8003e74:	4906      	ldr	r1, [pc, #24]	; (8003e90 <HAL_I2C_Master_Receive+0x22c>)
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 ff02 	bl	8004c80 <I2C_WaitOnFlagUntilTimeout>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d008      	beq.n	8003e94 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e10e      	b.n	80040a4 <HAL_I2C_Master_Receive+0x440>
 8003e86:	bf00      	nop
 8003e88:	00100002 	.word	0x00100002
 8003e8c:	ffff0000 	.word	0xffff0000
 8003e90:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691a      	ldr	r2, [r3, #16]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	691a      	ldr	r2, [r3, #16]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f08:	e0b8      	b.n	800407c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f10:	2200      	movs	r2, #0
 8003f12:	4966      	ldr	r1, [pc, #408]	; (80040ac <HAL_I2C_Master_Receive+0x448>)
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 feb3 	bl	8004c80 <I2C_WaitOnFlagUntilTimeout>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e0bf      	b.n	80040a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	691a      	ldr	r2, [r3, #16]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	494f      	ldr	r1, [pc, #316]	; (80040ac <HAL_I2C_Master_Receive+0x448>)
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 fe85 	bl	8004c80 <I2C_WaitOnFlagUntilTimeout>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e091      	b.n	80040a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	691a      	ldr	r2, [r3, #16]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ff4:	e042      	b.n	800407c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 ff98 	bl	8004f30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e04c      	b.n	80040a4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	691a      	ldr	r2, [r3, #16]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004026:	3b01      	subs	r3, #1
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004032:	b29b      	uxth	r3, r3
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b04      	cmp	r3, #4
 8004048:	d118      	bne.n	800407c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	b2d2      	uxtb	r2, r2
 8004056:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004066:	3b01      	subs	r3, #1
 8004068:	b29a      	uxth	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004080:	2b00      	cmp	r3, #0
 8004082:	f47f aec2 	bne.w	8003e0a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2220      	movs	r2, #32
 800408a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	e000      	b.n	80040a4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80040a2:	2302      	movs	r3, #2
  }
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3728      	adds	r7, #40	; 0x28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	00010004 	.word	0x00010004

080040b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af02      	add	r7, sp, #8
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	4608      	mov	r0, r1
 80040ba:	4611      	mov	r1, r2
 80040bc:	461a      	mov	r2, r3
 80040be:	4603      	mov	r3, r0
 80040c0:	817b      	strh	r3, [r7, #10]
 80040c2:	460b      	mov	r3, r1
 80040c4:	813b      	strh	r3, [r7, #8]
 80040c6:	4613      	mov	r3, r2
 80040c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040ca:	f7ff f8e5 	bl	8003298 <HAL_GetTick>
 80040ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b20      	cmp	r3, #32
 80040da:	f040 80d9 	bne.w	8004290 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	2319      	movs	r3, #25
 80040e4:	2201      	movs	r2, #1
 80040e6:	496d      	ldr	r1, [pc, #436]	; (800429c <HAL_I2C_Mem_Write+0x1ec>)
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 fdc9 	bl	8004c80 <I2C_WaitOnFlagUntilTimeout>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80040f4:	2302      	movs	r3, #2
 80040f6:	e0cc      	b.n	8004292 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d101      	bne.n	8004106 <HAL_I2C_Mem_Write+0x56>
 8004102:	2302      	movs	r3, #2
 8004104:	e0c5      	b.n	8004292 <HAL_I2C_Mem_Write+0x1e2>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b01      	cmp	r3, #1
 800411a:	d007      	beq.n	800412c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f042 0201 	orr.w	r2, r2, #1
 800412a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800413a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2221      	movs	r2, #33	; 0x21
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2240      	movs	r2, #64	; 0x40
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a3a      	ldr	r2, [r7, #32]
 8004156:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800415c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004162:	b29a      	uxth	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4a4d      	ldr	r2, [pc, #308]	; (80042a0 <HAL_I2C_Mem_Write+0x1f0>)
 800416c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800416e:	88f8      	ldrh	r0, [r7, #6]
 8004170:	893a      	ldrh	r2, [r7, #8]
 8004172:	8979      	ldrh	r1, [r7, #10]
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	9301      	str	r3, [sp, #4]
 8004178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	4603      	mov	r3, r0
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 fc04 	bl	800498c <I2C_RequestMemoryWrite>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d052      	beq.n	8004230 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e081      	b.n	8004292 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 fe4a 	bl	8004e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00d      	beq.n	80041ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d107      	bne.n	80041b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e06b      	b.n	8004292 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	781a      	ldrb	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b04      	cmp	r3, #4
 80041f6:	d11b      	bne.n	8004230 <HAL_I2C_Mem_Write+0x180>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d017      	beq.n	8004230 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	781a      	ldrb	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421a:	3b01      	subs	r3, #1
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004226:	b29b      	uxth	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1aa      	bne.n	800418e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 fe36 	bl	8004eae <I2C_WaitOnBTFFlagUntilTimeout>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00d      	beq.n	8004264 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	2b04      	cmp	r3, #4
 800424e:	d107      	bne.n	8004260 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800425e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e016      	b.n	8004292 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004272:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	e000      	b.n	8004292 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004290:	2302      	movs	r3, #2
  }
}
 8004292:	4618      	mov	r0, r3
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	00100002 	.word	0x00100002
 80042a0:	ffff0000 	.word	0xffff0000

080042a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b08c      	sub	sp, #48	; 0x30
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	4608      	mov	r0, r1
 80042ae:	4611      	mov	r1, r2
 80042b0:	461a      	mov	r2, r3
 80042b2:	4603      	mov	r3, r0
 80042b4:	817b      	strh	r3, [r7, #10]
 80042b6:	460b      	mov	r3, r1
 80042b8:	813b      	strh	r3, [r7, #8]
 80042ba:	4613      	mov	r3, r2
 80042bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042be:	f7fe ffeb 	bl	8003298 <HAL_GetTick>
 80042c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b20      	cmp	r3, #32
 80042ce:	f040 8208 	bne.w	80046e2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	2319      	movs	r3, #25
 80042d8:	2201      	movs	r2, #1
 80042da:	497b      	ldr	r1, [pc, #492]	; (80044c8 <HAL_I2C_Mem_Read+0x224>)
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 fccf 	bl	8004c80 <I2C_WaitOnFlagUntilTimeout>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80042e8:	2302      	movs	r3, #2
 80042ea:	e1fb      	b.n	80046e4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <HAL_I2C_Mem_Read+0x56>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e1f4      	b.n	80046e4 <HAL_I2C_Mem_Read+0x440>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b01      	cmp	r3, #1
 800430e:	d007      	beq.n	8004320 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0201 	orr.w	r2, r2, #1
 800431e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800432e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2222      	movs	r2, #34	; 0x22
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2240      	movs	r2, #64	; 0x40
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800434a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004350:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4a5b      	ldr	r2, [pc, #364]	; (80044cc <HAL_I2C_Mem_Read+0x228>)
 8004360:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004362:	88f8      	ldrh	r0, [r7, #6]
 8004364:	893a      	ldrh	r2, [r7, #8]
 8004366:	8979      	ldrh	r1, [r7, #10]
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	9301      	str	r3, [sp, #4]
 800436c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	4603      	mov	r3, r0
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 fb9e 	bl	8004ab4 <I2C_RequestMemoryRead>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e1b0      	b.n	80046e4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004386:	2b00      	cmp	r3, #0
 8004388:	d113      	bne.n	80043b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800438a:	2300      	movs	r3, #0
 800438c:	623b      	str	r3, [r7, #32]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	623b      	str	r3, [r7, #32]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	623b      	str	r3, [r7, #32]
 800439e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	e184      	b.n	80046bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d11b      	bne.n	80043f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ca:	2300      	movs	r3, #0
 80043cc:	61fb      	str	r3, [r7, #28]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	61fb      	str	r3, [r7, #28]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	61fb      	str	r3, [r7, #28]
 80043de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	e164      	b.n	80046bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d11b      	bne.n	8004432 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004408:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004418:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800441a:	2300      	movs	r3, #0
 800441c:	61bb      	str	r3, [r7, #24]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	61bb      	str	r3, [r7, #24]
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	e144      	b.n	80046bc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004432:	2300      	movs	r3, #0
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	617b      	str	r3, [r7, #20]
 8004446:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004448:	e138      	b.n	80046bc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800444e:	2b03      	cmp	r3, #3
 8004450:	f200 80f1 	bhi.w	8004636 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004458:	2b01      	cmp	r3, #1
 800445a:	d123      	bne.n	80044a4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800445c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800445e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 fd65 	bl	8004f30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e139      	b.n	80046e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691a      	ldr	r2, [r3, #16]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	1c5a      	adds	r2, r3, #1
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004498:	b29b      	uxth	r3, r3
 800449a:	3b01      	subs	r3, #1
 800449c:	b29a      	uxth	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044a2:	e10b      	b.n	80046bc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d14e      	bne.n	800454a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b2:	2200      	movs	r2, #0
 80044b4:	4906      	ldr	r1, [pc, #24]	; (80044d0 <HAL_I2C_Mem_Read+0x22c>)
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 fbe2 	bl	8004c80 <I2C_WaitOnFlagUntilTimeout>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d008      	beq.n	80044d4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e10e      	b.n	80046e4 <HAL_I2C_Mem_Read+0x440>
 80044c6:	bf00      	nop
 80044c8:	00100002 	.word	0x00100002
 80044cc:	ffff0000 	.word	0xffff0000
 80044d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450c:	b29b      	uxth	r3, r3
 800450e:	3b01      	subs	r3, #1
 8004510:	b29a      	uxth	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	691a      	ldr	r2, [r3, #16]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004532:	3b01      	subs	r3, #1
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453e:	b29b      	uxth	r3, r3
 8004540:	3b01      	subs	r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004548:	e0b8      	b.n	80046bc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004550:	2200      	movs	r2, #0
 8004552:	4966      	ldr	r1, [pc, #408]	; (80046ec <HAL_I2C_Mem_Read+0x448>)
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 fb93 	bl	8004c80 <I2C_WaitOnFlagUntilTimeout>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e0bf      	b.n	80046e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004572:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691a      	ldr	r2, [r3, #16]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	1c5a      	adds	r2, r3, #1
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004590:	3b01      	subs	r3, #1
 8004592:	b29a      	uxth	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459c:	b29b      	uxth	r3, r3
 800459e:	3b01      	subs	r3, #1
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ac:	2200      	movs	r2, #0
 80045ae:	494f      	ldr	r1, [pc, #316]	; (80046ec <HAL_I2C_Mem_Read+0x448>)
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 fb65 	bl	8004c80 <I2C_WaitOnFlagUntilTimeout>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e091      	b.n	80046e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691a      	ldr	r2, [r3, #16]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	1c5a      	adds	r2, r3, #1
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	691a      	ldr	r2, [r3, #16]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004634:	e042      	b.n	80046bc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004638:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 fc78 	bl	8004f30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e04c      	b.n	80046e4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004666:	3b01      	subs	r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004672:	b29b      	uxth	r3, r3
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	f003 0304 	and.w	r3, r3, #4
 8004686:	2b04      	cmp	r3, #4
 8004688:	d118      	bne.n	80046bc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	b2d2      	uxtb	r2, r2
 8004696:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f47f aec2 	bne.w	800444a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	e000      	b.n	80046e4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80046e2:	2302      	movs	r3, #2
  }
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3728      	adds	r7, #40	; 0x28
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	00010004 	.word	0x00010004

080046f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b088      	sub	sp, #32
 80046f4:	af02      	add	r7, sp, #8
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	607a      	str	r2, [r7, #4]
 80046fa:	603b      	str	r3, [r7, #0]
 80046fc:	460b      	mov	r3, r1
 80046fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004704:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2b08      	cmp	r3, #8
 800470a:	d006      	beq.n	800471a <I2C_MasterRequestWrite+0x2a>
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d003      	beq.n	800471a <I2C_MasterRequestWrite+0x2a>
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004718:	d108      	bne.n	800472c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	e00b      	b.n	8004744 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	2b12      	cmp	r3, #18
 8004732:	d107      	bne.n	8004744 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004742:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 fa95 	bl	8004c80 <I2C_WaitOnFlagUntilTimeout>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00c      	beq.n	8004776 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004770:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e035      	b.n	80047e2 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800477e:	d108      	bne.n	8004792 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004780:	897b      	ldrh	r3, [r7, #10]
 8004782:	b2db      	uxtb	r3, r3
 8004784:	461a      	mov	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800478e:	611a      	str	r2, [r3, #16]
 8004790:	e01b      	b.n	80047ca <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004792:	897b      	ldrh	r3, [r7, #10]
 8004794:	11db      	asrs	r3, r3, #7
 8004796:	b2db      	uxtb	r3, r3
 8004798:	f003 0306 	and.w	r3, r3, #6
 800479c:	b2db      	uxtb	r3, r3
 800479e:	f063 030f 	orn	r3, r3, #15
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	490f      	ldr	r1, [pc, #60]	; (80047ec <I2C_MasterRequestWrite+0xfc>)
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 fabc 	bl	8004d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e010      	b.n	80047e2 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80047c0:	897b      	ldrh	r3, [r7, #10]
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	4908      	ldr	r1, [pc, #32]	; (80047f0 <I2C_MasterRequestWrite+0x100>)
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 faac 	bl	8004d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	00010008 	.word	0x00010008
 80047f0:	00010002 	.word	0x00010002

080047f4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	607a      	str	r2, [r7, #4]
 80047fe:	603b      	str	r3, [r7, #0]
 8004800:	460b      	mov	r3, r1
 8004802:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004818:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2b08      	cmp	r3, #8
 800481e:	d006      	beq.n	800482e <I2C_MasterRequestRead+0x3a>
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d003      	beq.n	800482e <I2C_MasterRequestRead+0x3a>
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800482c:	d108      	bne.n	8004840 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	e00b      	b.n	8004858 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004844:	2b11      	cmp	r3, #17
 8004846:	d107      	bne.n	8004858 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004856:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 fa0b 	bl	8004c80 <I2C_WaitOnFlagUntilTimeout>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00c      	beq.n	800488a <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004884:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e078      	b.n	800497c <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004892:	d108      	bne.n	80048a6 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004894:	897b      	ldrh	r3, [r7, #10]
 8004896:	b2db      	uxtb	r3, r3
 8004898:	f043 0301 	orr.w	r3, r3, #1
 800489c:	b2da      	uxtb	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	611a      	str	r2, [r3, #16]
 80048a4:	e05e      	b.n	8004964 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048a6:	897b      	ldrh	r3, [r7, #10]
 80048a8:	11db      	asrs	r3, r3, #7
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	f003 0306 	and.w	r3, r3, #6
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	f063 030f 	orn	r3, r3, #15
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	4930      	ldr	r1, [pc, #192]	; (8004984 <I2C_MasterRequestRead+0x190>)
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 fa32 	bl	8004d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e053      	b.n	800497c <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048d4:	897b      	ldrh	r3, [r7, #10]
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	4929      	ldr	r1, [pc, #164]	; (8004988 <I2C_MasterRequestRead+0x194>)
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 fa22 	bl	8004d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e043      	b.n	800497c <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048f4:	2300      	movs	r3, #0
 80048f6:	613b      	str	r3, [r7, #16]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	613b      	str	r3, [r7, #16]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	613b      	str	r3, [r7, #16]
 8004908:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004918:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 f9aa 	bl	8004c80 <I2C_WaitOnFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00c      	beq.n	800494c <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004946:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e017      	b.n	800497c <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800494c:	897b      	ldrh	r3, [r7, #10]
 800494e:	11db      	asrs	r3, r3, #7
 8004950:	b2db      	uxtb	r3, r3
 8004952:	f003 0306 	and.w	r3, r3, #6
 8004956:	b2db      	uxtb	r3, r3
 8004958:	f063 030e 	orn	r3, r3, #14
 800495c:	b2da      	uxtb	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	4907      	ldr	r1, [pc, #28]	; (8004988 <I2C_MasterRequestRead+0x194>)
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 f9df 	bl	8004d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e000      	b.n	800497c <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	00010008 	.word	0x00010008
 8004988:	00010002 	.word	0x00010002

0800498c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b088      	sub	sp, #32
 8004990:	af02      	add	r7, sp, #8
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	4608      	mov	r0, r1
 8004996:	4611      	mov	r1, r2
 8004998:	461a      	mov	r2, r3
 800499a:	4603      	mov	r3, r0
 800499c:	817b      	strh	r3, [r7, #10]
 800499e:	460b      	mov	r3, r1
 80049a0:	813b      	strh	r3, [r7, #8]
 80049a2:	4613      	mov	r3, r2
 80049a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	2200      	movs	r2, #0
 80049be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 f95c 	bl	8004c80 <I2C_WaitOnFlagUntilTimeout>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00c      	beq.n	80049e8 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e05f      	b.n	8004aa8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049e8:	897b      	ldrh	r3, [r7, #10]
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	461a      	mov	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	6a3a      	ldr	r2, [r7, #32]
 80049fc:	492c      	ldr	r1, [pc, #176]	; (8004ab0 <I2C_RequestMemoryWrite+0x124>)
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 f995 	bl	8004d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e04c      	b.n	8004aa8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a0e:	2300      	movs	r3, #0
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	617b      	str	r3, [r7, #20]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	617b      	str	r3, [r7, #20]
 8004a22:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a26:	6a39      	ldr	r1, [r7, #32]
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 f9ff 	bl	8004e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00d      	beq.n	8004a50 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a38:	2b04      	cmp	r3, #4
 8004a3a:	d107      	bne.n	8004a4c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a4a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e02b      	b.n	8004aa8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a50:	88fb      	ldrh	r3, [r7, #6]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d105      	bne.n	8004a62 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a56:	893b      	ldrh	r3, [r7, #8]
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	611a      	str	r2, [r3, #16]
 8004a60:	e021      	b.n	8004aa6 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a62:	893b      	ldrh	r3, [r7, #8]
 8004a64:	0a1b      	lsrs	r3, r3, #8
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a72:	6a39      	ldr	r1, [r7, #32]
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f000 f9d9 	bl	8004e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00d      	beq.n	8004a9c <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d107      	bne.n	8004a98 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e005      	b.n	8004aa8 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a9c:	893b      	ldrh	r3, [r7, #8]
 8004a9e:	b2da      	uxtb	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	00010002 	.word	0x00010002

08004ab4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af02      	add	r7, sp, #8
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	4608      	mov	r0, r1
 8004abe:	4611      	mov	r1, r2
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	817b      	strh	r3, [r7, #10]
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	813b      	strh	r3, [r7, #8]
 8004aca:	4613      	mov	r3, r2
 8004acc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004adc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 f8c0 	bl	8004c80 <I2C_WaitOnFlagUntilTimeout>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00c      	beq.n	8004b20 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e0a9      	b.n	8004c74 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b20:	897b      	ldrh	r3, [r7, #10]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	461a      	mov	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b2e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	6a3a      	ldr	r2, [r7, #32]
 8004b34:	4951      	ldr	r1, [pc, #324]	; (8004c7c <I2C_RequestMemoryRead+0x1c8>)
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 f8f9 	bl	8004d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e096      	b.n	8004c74 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b46:	2300      	movs	r3, #0
 8004b48:	617b      	str	r3, [r7, #20]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	617b      	str	r3, [r7, #20]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	617b      	str	r3, [r7, #20]
 8004b5a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5e:	6a39      	ldr	r1, [r7, #32]
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f000 f963 	bl	8004e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00d      	beq.n	8004b88 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b70:	2b04      	cmp	r3, #4
 8004b72:	d107      	bne.n	8004b84 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e075      	b.n	8004c74 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b88:	88fb      	ldrh	r3, [r7, #6]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d105      	bne.n	8004b9a <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b8e:	893b      	ldrh	r3, [r7, #8]
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	611a      	str	r2, [r3, #16]
 8004b98:	e021      	b.n	8004bde <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b9a:	893b      	ldrh	r3, [r7, #8]
 8004b9c:	0a1b      	lsrs	r3, r3, #8
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004baa:	6a39      	ldr	r1, [r7, #32]
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 f93d 	bl	8004e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00d      	beq.n	8004bd4 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbc:	2b04      	cmp	r3, #4
 8004bbe:	d107      	bne.n	8004bd0 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e04f      	b.n	8004c74 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bd4:	893b      	ldrh	r3, [r7, #8]
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be0:	6a39      	ldr	r1, [r7, #32]
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 f922 	bl	8004e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00d      	beq.n	8004c0a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d107      	bne.n	8004c06 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e034      	b.n	8004c74 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 f82a 	bl	8004c80 <I2C_WaitOnFlagUntilTimeout>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00c      	beq.n	8004c4c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e013      	b.n	8004c74 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c4c:	897b      	ldrh	r3, [r7, #10]
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	f043 0301 	orr.w	r3, r3, #1
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	6a3a      	ldr	r2, [r7, #32]
 8004c60:	4906      	ldr	r1, [pc, #24]	; (8004c7c <I2C_RequestMemoryRead+0x1c8>)
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f000 f863 	bl	8004d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3718      	adds	r7, #24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	00010002 	.word	0x00010002

08004c80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	603b      	str	r3, [r7, #0]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c90:	e025      	b.n	8004cde <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c98:	d021      	beq.n	8004cde <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c9a:	f7fe fafd 	bl	8003298 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d302      	bcc.n	8004cb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d116      	bne.n	8004cde <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	f043 0220 	orr.w	r2, r3, #32
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e023      	b.n	8004d26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	0c1b      	lsrs	r3, r3, #16
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d10d      	bne.n	8004d04 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	43da      	mvns	r2, r3
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	bf0c      	ite	eq
 8004cfa:	2301      	moveq	r3, #1
 8004cfc:	2300      	movne	r3, #0
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	461a      	mov	r2, r3
 8004d02:	e00c      	b.n	8004d1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	43da      	mvns	r2, r3
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	bf0c      	ite	eq
 8004d16:	2301      	moveq	r3, #1
 8004d18:	2300      	movne	r3, #0
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	79fb      	ldrb	r3, [r7, #7]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d0b6      	beq.n	8004c92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b084      	sub	sp, #16
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	60f8      	str	r0, [r7, #12]
 8004d36:	60b9      	str	r1, [r7, #8]
 8004d38:	607a      	str	r2, [r7, #4]
 8004d3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d3c:	e051      	b.n	8004de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d4c:	d123      	bne.n	8004d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2220      	movs	r2, #32
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	f043 0204 	orr.w	r2, r3, #4
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e046      	b.n	8004e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9c:	d021      	beq.n	8004de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d9e:	f7fe fa7b 	bl	8003298 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d302      	bcc.n	8004db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d116      	bne.n	8004de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	f043 0220 	orr.w	r2, r3, #32
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e020      	b.n	8004e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	0c1b      	lsrs	r3, r3, #16
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d10c      	bne.n	8004e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	43da      	mvns	r2, r3
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	4013      	ands	r3, r2
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	bf14      	ite	ne
 8004dfe:	2301      	movne	r3, #1
 8004e00:	2300      	moveq	r3, #0
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	e00b      	b.n	8004e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	43da      	mvns	r2, r3
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	4013      	ands	r3, r2
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	bf14      	ite	ne
 8004e18:	2301      	movne	r3, #1
 8004e1a:	2300      	moveq	r3, #0
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d18d      	bne.n	8004d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e38:	e02d      	b.n	8004e96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 f8ce 	bl	8004fdc <I2C_IsAcknowledgeFailed>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e02d      	b.n	8004ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e50:	d021      	beq.n	8004e96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e52:	f7fe fa21 	bl	8003298 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d302      	bcc.n	8004e68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d116      	bne.n	8004e96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2220      	movs	r2, #32
 8004e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	f043 0220 	orr.w	r2, r3, #32
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e007      	b.n	8004ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea0:	2b80      	cmp	r3, #128	; 0x80
 8004ea2:	d1ca      	bne.n	8004e3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	60f8      	str	r0, [r7, #12]
 8004eb6:	60b9      	str	r1, [r7, #8]
 8004eb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004eba:	e02d      	b.n	8004f18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f000 f88d 	bl	8004fdc <I2C_IsAcknowledgeFailed>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e02d      	b.n	8004f28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed2:	d021      	beq.n	8004f18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed4:	f7fe f9e0 	bl	8003298 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d302      	bcc.n	8004eea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d116      	bne.n	8004f18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f04:	f043 0220 	orr.w	r2, r3, #32
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e007      	b.n	8004f28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	f003 0304 	and.w	r3, r3, #4
 8004f22:	2b04      	cmp	r3, #4
 8004f24:	d1ca      	bne.n	8004ebc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f3c:	e042      	b.n	8004fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	f003 0310 	and.w	r3, r3, #16
 8004f48:	2b10      	cmp	r3, #16
 8004f4a:	d119      	bne.n	8004f80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f06f 0210 	mvn.w	r2, #16
 8004f54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e029      	b.n	8004fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f80:	f7fe f98a 	bl	8003298 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d302      	bcc.n	8004f96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d116      	bne.n	8004fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb0:	f043 0220 	orr.w	r2, r3, #32
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e007      	b.n	8004fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fce:	2b40      	cmp	r3, #64	; 0x40
 8004fd0:	d1b5      	bne.n	8004f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff2:	d11b      	bne.n	800502c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ffc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2220      	movs	r2, #32
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005018:	f043 0204 	orr.w	r2, r3, #4
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e000      	b.n	800502e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
	...

0800503c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e25b      	b.n	8005506 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d075      	beq.n	8005146 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800505a:	4ba3      	ldr	r3, [pc, #652]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 030c 	and.w	r3, r3, #12
 8005062:	2b04      	cmp	r3, #4
 8005064:	d00c      	beq.n	8005080 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005066:	4ba0      	ldr	r3, [pc, #640]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800506e:	2b08      	cmp	r3, #8
 8005070:	d112      	bne.n	8005098 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005072:	4b9d      	ldr	r3, [pc, #628]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800507a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800507e:	d10b      	bne.n	8005098 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005080:	4b99      	ldr	r3, [pc, #612]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d05b      	beq.n	8005144 <HAL_RCC_OscConfig+0x108>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d157      	bne.n	8005144 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e236      	b.n	8005506 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a0:	d106      	bne.n	80050b0 <HAL_RCC_OscConfig+0x74>
 80050a2:	4b91      	ldr	r3, [pc, #580]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a90      	ldr	r2, [pc, #576]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 80050a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	e01d      	b.n	80050ec <HAL_RCC_OscConfig+0xb0>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050b8:	d10c      	bne.n	80050d4 <HAL_RCC_OscConfig+0x98>
 80050ba:	4b8b      	ldr	r3, [pc, #556]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a8a      	ldr	r2, [pc, #552]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 80050c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	4b88      	ldr	r3, [pc, #544]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a87      	ldr	r2, [pc, #540]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 80050cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	e00b      	b.n	80050ec <HAL_RCC_OscConfig+0xb0>
 80050d4:	4b84      	ldr	r3, [pc, #528]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a83      	ldr	r2, [pc, #524]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 80050da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050de:	6013      	str	r3, [r2, #0]
 80050e0:	4b81      	ldr	r3, [pc, #516]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a80      	ldr	r2, [pc, #512]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 80050e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d013      	beq.n	800511c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f4:	f7fe f8d0 	bl	8003298 <HAL_GetTick>
 80050f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050fc:	f7fe f8cc 	bl	8003298 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b64      	cmp	r3, #100	; 0x64
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e1fb      	b.n	8005506 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800510e:	4b76      	ldr	r3, [pc, #472]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d0f0      	beq.n	80050fc <HAL_RCC_OscConfig+0xc0>
 800511a:	e014      	b.n	8005146 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800511c:	f7fe f8bc 	bl	8003298 <HAL_GetTick>
 8005120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005124:	f7fe f8b8 	bl	8003298 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b64      	cmp	r3, #100	; 0x64
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e1e7      	b.n	8005506 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005136:	4b6c      	ldr	r3, [pc, #432]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f0      	bne.n	8005124 <HAL_RCC_OscConfig+0xe8>
 8005142:	e000      	b.n	8005146 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d063      	beq.n	800521a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005152:	4b65      	ldr	r3, [pc, #404]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f003 030c 	and.w	r3, r3, #12
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00b      	beq.n	8005176 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800515e:	4b62      	ldr	r3, [pc, #392]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005166:	2b08      	cmp	r3, #8
 8005168:	d11c      	bne.n	80051a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800516a:	4b5f      	ldr	r3, [pc, #380]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d116      	bne.n	80051a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005176:	4b5c      	ldr	r3, [pc, #368]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d005      	beq.n	800518e <HAL_RCC_OscConfig+0x152>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d001      	beq.n	800518e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e1bb      	b.n	8005506 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800518e:	4b56      	ldr	r3, [pc, #344]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	4952      	ldr	r1, [pc, #328]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051a2:	e03a      	b.n	800521a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d020      	beq.n	80051ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051ac:	4b4f      	ldr	r3, [pc, #316]	; (80052ec <HAL_RCC_OscConfig+0x2b0>)
 80051ae:	2201      	movs	r2, #1
 80051b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b2:	f7fe f871 	bl	8003298 <HAL_GetTick>
 80051b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051b8:	e008      	b.n	80051cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051ba:	f7fe f86d 	bl	8003298 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d901      	bls.n	80051cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e19c      	b.n	8005506 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051cc:	4b46      	ldr	r3, [pc, #280]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d0f0      	beq.n	80051ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d8:	4b43      	ldr	r3, [pc, #268]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	00db      	lsls	r3, r3, #3
 80051e6:	4940      	ldr	r1, [pc, #256]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	600b      	str	r3, [r1, #0]
 80051ec:	e015      	b.n	800521a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ee:	4b3f      	ldr	r3, [pc, #252]	; (80052ec <HAL_RCC_OscConfig+0x2b0>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f4:	f7fe f850 	bl	8003298 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051fc:	f7fe f84c 	bl	8003298 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e17b      	b.n	8005506 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800520e:	4b36      	ldr	r3, [pc, #216]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1f0      	bne.n	80051fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0308 	and.w	r3, r3, #8
 8005222:	2b00      	cmp	r3, #0
 8005224:	d030      	beq.n	8005288 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d016      	beq.n	800525c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800522e:	4b30      	ldr	r3, [pc, #192]	; (80052f0 <HAL_RCC_OscConfig+0x2b4>)
 8005230:	2201      	movs	r2, #1
 8005232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005234:	f7fe f830 	bl	8003298 <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800523a:	e008      	b.n	800524e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800523c:	f7fe f82c 	bl	8003298 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e15b      	b.n	8005506 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800524e:	4b26      	ldr	r3, [pc, #152]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 8005250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d0f0      	beq.n	800523c <HAL_RCC_OscConfig+0x200>
 800525a:	e015      	b.n	8005288 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800525c:	4b24      	ldr	r3, [pc, #144]	; (80052f0 <HAL_RCC_OscConfig+0x2b4>)
 800525e:	2200      	movs	r2, #0
 8005260:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005262:	f7fe f819 	bl	8003298 <HAL_GetTick>
 8005266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005268:	e008      	b.n	800527c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800526a:	f7fe f815 	bl	8003298 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	2b02      	cmp	r3, #2
 8005276:	d901      	bls.n	800527c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e144      	b.n	8005506 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800527c:	4b1a      	ldr	r3, [pc, #104]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 800527e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1f0      	bne.n	800526a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 80a0 	beq.w	80053d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005296:	2300      	movs	r3, #0
 8005298:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800529a:	4b13      	ldr	r3, [pc, #76]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10f      	bne.n	80052c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052a6:	2300      	movs	r3, #0
 80052a8:	60bb      	str	r3, [r7, #8]
 80052aa:	4b0f      	ldr	r3, [pc, #60]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	4a0e      	ldr	r2, [pc, #56]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 80052b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b4:	6413      	str	r3, [r2, #64]	; 0x40
 80052b6:	4b0c      	ldr	r3, [pc, #48]	; (80052e8 <HAL_RCC_OscConfig+0x2ac>)
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052be:	60bb      	str	r3, [r7, #8]
 80052c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052c2:	2301      	movs	r3, #1
 80052c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c6:	4b0b      	ldr	r3, [pc, #44]	; (80052f4 <HAL_RCC_OscConfig+0x2b8>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d121      	bne.n	8005316 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052d2:	4b08      	ldr	r3, [pc, #32]	; (80052f4 <HAL_RCC_OscConfig+0x2b8>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a07      	ldr	r2, [pc, #28]	; (80052f4 <HAL_RCC_OscConfig+0x2b8>)
 80052d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052de:	f7fd ffdb 	bl	8003298 <HAL_GetTick>
 80052e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e4:	e011      	b.n	800530a <HAL_RCC_OscConfig+0x2ce>
 80052e6:	bf00      	nop
 80052e8:	40023800 	.word	0x40023800
 80052ec:	42470000 	.word	0x42470000
 80052f0:	42470e80 	.word	0x42470e80
 80052f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052f8:	f7fd ffce 	bl	8003298 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e0fd      	b.n	8005506 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800530a:	4b81      	ldr	r3, [pc, #516]	; (8005510 <HAL_RCC_OscConfig+0x4d4>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005312:	2b00      	cmp	r3, #0
 8005314:	d0f0      	beq.n	80052f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d106      	bne.n	800532c <HAL_RCC_OscConfig+0x2f0>
 800531e:	4b7d      	ldr	r3, [pc, #500]	; (8005514 <HAL_RCC_OscConfig+0x4d8>)
 8005320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005322:	4a7c      	ldr	r2, [pc, #496]	; (8005514 <HAL_RCC_OscConfig+0x4d8>)
 8005324:	f043 0301 	orr.w	r3, r3, #1
 8005328:	6713      	str	r3, [r2, #112]	; 0x70
 800532a:	e01c      	b.n	8005366 <HAL_RCC_OscConfig+0x32a>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	2b05      	cmp	r3, #5
 8005332:	d10c      	bne.n	800534e <HAL_RCC_OscConfig+0x312>
 8005334:	4b77      	ldr	r3, [pc, #476]	; (8005514 <HAL_RCC_OscConfig+0x4d8>)
 8005336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005338:	4a76      	ldr	r2, [pc, #472]	; (8005514 <HAL_RCC_OscConfig+0x4d8>)
 800533a:	f043 0304 	orr.w	r3, r3, #4
 800533e:	6713      	str	r3, [r2, #112]	; 0x70
 8005340:	4b74      	ldr	r3, [pc, #464]	; (8005514 <HAL_RCC_OscConfig+0x4d8>)
 8005342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005344:	4a73      	ldr	r2, [pc, #460]	; (8005514 <HAL_RCC_OscConfig+0x4d8>)
 8005346:	f043 0301 	orr.w	r3, r3, #1
 800534a:	6713      	str	r3, [r2, #112]	; 0x70
 800534c:	e00b      	b.n	8005366 <HAL_RCC_OscConfig+0x32a>
 800534e:	4b71      	ldr	r3, [pc, #452]	; (8005514 <HAL_RCC_OscConfig+0x4d8>)
 8005350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005352:	4a70      	ldr	r2, [pc, #448]	; (8005514 <HAL_RCC_OscConfig+0x4d8>)
 8005354:	f023 0301 	bic.w	r3, r3, #1
 8005358:	6713      	str	r3, [r2, #112]	; 0x70
 800535a:	4b6e      	ldr	r3, [pc, #440]	; (8005514 <HAL_RCC_OscConfig+0x4d8>)
 800535c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535e:	4a6d      	ldr	r2, [pc, #436]	; (8005514 <HAL_RCC_OscConfig+0x4d8>)
 8005360:	f023 0304 	bic.w	r3, r3, #4
 8005364:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d015      	beq.n	800539a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800536e:	f7fd ff93 	bl	8003298 <HAL_GetTick>
 8005372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005374:	e00a      	b.n	800538c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005376:	f7fd ff8f 	bl	8003298 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	f241 3288 	movw	r2, #5000	; 0x1388
 8005384:	4293      	cmp	r3, r2
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e0bc      	b.n	8005506 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800538c:	4b61      	ldr	r3, [pc, #388]	; (8005514 <HAL_RCC_OscConfig+0x4d8>)
 800538e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d0ee      	beq.n	8005376 <HAL_RCC_OscConfig+0x33a>
 8005398:	e014      	b.n	80053c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800539a:	f7fd ff7d 	bl	8003298 <HAL_GetTick>
 800539e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053a0:	e00a      	b.n	80053b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053a2:	f7fd ff79 	bl	8003298 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d901      	bls.n	80053b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e0a6      	b.n	8005506 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053b8:	4b56      	ldr	r3, [pc, #344]	; (8005514 <HAL_RCC_OscConfig+0x4d8>)
 80053ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1ee      	bne.n	80053a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053c4:	7dfb      	ldrb	r3, [r7, #23]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d105      	bne.n	80053d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053ca:	4b52      	ldr	r3, [pc, #328]	; (8005514 <HAL_RCC_OscConfig+0x4d8>)
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	4a51      	ldr	r2, [pc, #324]	; (8005514 <HAL_RCC_OscConfig+0x4d8>)
 80053d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 8092 	beq.w	8005504 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053e0:	4b4c      	ldr	r3, [pc, #304]	; (8005514 <HAL_RCC_OscConfig+0x4d8>)
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f003 030c 	and.w	r3, r3, #12
 80053e8:	2b08      	cmp	r3, #8
 80053ea:	d05c      	beq.n	80054a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d141      	bne.n	8005478 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053f4:	4b48      	ldr	r3, [pc, #288]	; (8005518 <HAL_RCC_OscConfig+0x4dc>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053fa:	f7fd ff4d 	bl	8003298 <HAL_GetTick>
 80053fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005400:	e008      	b.n	8005414 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005402:	f7fd ff49 	bl	8003298 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	2b02      	cmp	r3, #2
 800540e:	d901      	bls.n	8005414 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e078      	b.n	8005506 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005414:	4b3f      	ldr	r3, [pc, #252]	; (8005514 <HAL_RCC_OscConfig+0x4d8>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1f0      	bne.n	8005402 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	69da      	ldr	r2, [r3, #28]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	431a      	orrs	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542e:	019b      	lsls	r3, r3, #6
 8005430:	431a      	orrs	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005436:	085b      	lsrs	r3, r3, #1
 8005438:	3b01      	subs	r3, #1
 800543a:	041b      	lsls	r3, r3, #16
 800543c:	431a      	orrs	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005442:	061b      	lsls	r3, r3, #24
 8005444:	4933      	ldr	r1, [pc, #204]	; (8005514 <HAL_RCC_OscConfig+0x4d8>)
 8005446:	4313      	orrs	r3, r2
 8005448:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800544a:	4b33      	ldr	r3, [pc, #204]	; (8005518 <HAL_RCC_OscConfig+0x4dc>)
 800544c:	2201      	movs	r2, #1
 800544e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005450:	f7fd ff22 	bl	8003298 <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005458:	f7fd ff1e 	bl	8003298 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e04d      	b.n	8005506 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800546a:	4b2a      	ldr	r3, [pc, #168]	; (8005514 <HAL_RCC_OscConfig+0x4d8>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0f0      	beq.n	8005458 <HAL_RCC_OscConfig+0x41c>
 8005476:	e045      	b.n	8005504 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005478:	4b27      	ldr	r3, [pc, #156]	; (8005518 <HAL_RCC_OscConfig+0x4dc>)
 800547a:	2200      	movs	r2, #0
 800547c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800547e:	f7fd ff0b 	bl	8003298 <HAL_GetTick>
 8005482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005484:	e008      	b.n	8005498 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005486:	f7fd ff07 	bl	8003298 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	2b02      	cmp	r3, #2
 8005492:	d901      	bls.n	8005498 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e036      	b.n	8005506 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005498:	4b1e      	ldr	r3, [pc, #120]	; (8005514 <HAL_RCC_OscConfig+0x4d8>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1f0      	bne.n	8005486 <HAL_RCC_OscConfig+0x44a>
 80054a4:	e02e      	b.n	8005504 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d101      	bne.n	80054b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e029      	b.n	8005506 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054b2:	4b18      	ldr	r3, [pc, #96]	; (8005514 <HAL_RCC_OscConfig+0x4d8>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d11c      	bne.n	8005500 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d115      	bne.n	8005500 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054da:	4013      	ands	r3, r2
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d10d      	bne.n	8005500 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d106      	bne.n	8005500 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d001      	beq.n	8005504 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e000      	b.n	8005506 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	40007000 	.word	0x40007000
 8005514:	40023800 	.word	0x40023800
 8005518:	42470060 	.word	0x42470060

0800551c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e0cc      	b.n	80056ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005530:	4b68      	ldr	r3, [pc, #416]	; (80056d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 030f 	and.w	r3, r3, #15
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	429a      	cmp	r2, r3
 800553c:	d90c      	bls.n	8005558 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800553e:	4b65      	ldr	r3, [pc, #404]	; (80056d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	b2d2      	uxtb	r2, r2
 8005544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005546:	4b63      	ldr	r3, [pc, #396]	; (80056d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 030f 	and.w	r3, r3, #15
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	429a      	cmp	r2, r3
 8005552:	d001      	beq.n	8005558 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e0b8      	b.n	80056ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d020      	beq.n	80055a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	2b00      	cmp	r3, #0
 800556e:	d005      	beq.n	800557c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005570:	4b59      	ldr	r3, [pc, #356]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	4a58      	ldr	r2, [pc, #352]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005576:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800557a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0308 	and.w	r3, r3, #8
 8005584:	2b00      	cmp	r3, #0
 8005586:	d005      	beq.n	8005594 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005588:	4b53      	ldr	r3, [pc, #332]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	4a52      	ldr	r2, [pc, #328]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 800558e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005592:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005594:	4b50      	ldr	r3, [pc, #320]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	494d      	ldr	r1, [pc, #308]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d044      	beq.n	800563c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d107      	bne.n	80055ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ba:	4b47      	ldr	r3, [pc, #284]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d119      	bne.n	80055fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e07f      	b.n	80056ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d003      	beq.n	80055da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055d6:	2b03      	cmp	r3, #3
 80055d8:	d107      	bne.n	80055ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055da:	4b3f      	ldr	r3, [pc, #252]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d109      	bne.n	80055fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e06f      	b.n	80056ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ea:	4b3b      	ldr	r3, [pc, #236]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e067      	b.n	80056ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055fa:	4b37      	ldr	r3, [pc, #220]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f023 0203 	bic.w	r2, r3, #3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	4934      	ldr	r1, [pc, #208]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005608:	4313      	orrs	r3, r2
 800560a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800560c:	f7fd fe44 	bl	8003298 <HAL_GetTick>
 8005610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005612:	e00a      	b.n	800562a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005614:	f7fd fe40 	bl	8003298 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005622:	4293      	cmp	r3, r2
 8005624:	d901      	bls.n	800562a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e04f      	b.n	80056ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800562a:	4b2b      	ldr	r3, [pc, #172]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f003 020c 	and.w	r2, r3, #12
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	429a      	cmp	r2, r3
 800563a:	d1eb      	bne.n	8005614 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800563c:	4b25      	ldr	r3, [pc, #148]	; (80056d4 <HAL_RCC_ClockConfig+0x1b8>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 030f 	and.w	r3, r3, #15
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d20c      	bcs.n	8005664 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800564a:	4b22      	ldr	r3, [pc, #136]	; (80056d4 <HAL_RCC_ClockConfig+0x1b8>)
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005652:	4b20      	ldr	r3, [pc, #128]	; (80056d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 030f 	and.w	r3, r3, #15
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	429a      	cmp	r2, r3
 800565e:	d001      	beq.n	8005664 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e032      	b.n	80056ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b00      	cmp	r3, #0
 800566e:	d008      	beq.n	8005682 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005670:	4b19      	ldr	r3, [pc, #100]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	4916      	ldr	r1, [pc, #88]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 800567e:	4313      	orrs	r3, r2
 8005680:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0308 	and.w	r3, r3, #8
 800568a:	2b00      	cmp	r3, #0
 800568c:	d009      	beq.n	80056a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800568e:	4b12      	ldr	r3, [pc, #72]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	490e      	ldr	r1, [pc, #56]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056a2:	f000 f821 	bl	80056e8 <HAL_RCC_GetSysClockFreq>
 80056a6:	4601      	mov	r1, r0
 80056a8:	4b0b      	ldr	r3, [pc, #44]	; (80056d8 <HAL_RCC_ClockConfig+0x1bc>)
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	091b      	lsrs	r3, r3, #4
 80056ae:	f003 030f 	and.w	r3, r3, #15
 80056b2:	4a0a      	ldr	r2, [pc, #40]	; (80056dc <HAL_RCC_ClockConfig+0x1c0>)
 80056b4:	5cd3      	ldrb	r3, [r2, r3]
 80056b6:	fa21 f303 	lsr.w	r3, r1, r3
 80056ba:	4a09      	ldr	r2, [pc, #36]	; (80056e0 <HAL_RCC_ClockConfig+0x1c4>)
 80056bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056be:	4b09      	ldr	r3, [pc, #36]	; (80056e4 <HAL_RCC_ClockConfig+0x1c8>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fd fda4 	bl	8003210 <HAL_InitTick>

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	40023c00 	.word	0x40023c00
 80056d8:	40023800 	.word	0x40023800
 80056dc:	0800829c 	.word	0x0800829c
 80056e0:	20000000 	.word	0x20000000
 80056e4:	20000004 	.word	0x20000004

080056e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056ee:	2300      	movs	r3, #0
 80056f0:	607b      	str	r3, [r7, #4]
 80056f2:	2300      	movs	r3, #0
 80056f4:	60fb      	str	r3, [r7, #12]
 80056f6:	2300      	movs	r3, #0
 80056f8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80056fa:	2300      	movs	r3, #0
 80056fc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056fe:	4b63      	ldr	r3, [pc, #396]	; (800588c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f003 030c 	and.w	r3, r3, #12
 8005706:	2b04      	cmp	r3, #4
 8005708:	d007      	beq.n	800571a <HAL_RCC_GetSysClockFreq+0x32>
 800570a:	2b08      	cmp	r3, #8
 800570c:	d008      	beq.n	8005720 <HAL_RCC_GetSysClockFreq+0x38>
 800570e:	2b00      	cmp	r3, #0
 8005710:	f040 80b4 	bne.w	800587c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005714:	4b5e      	ldr	r3, [pc, #376]	; (8005890 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005716:	60bb      	str	r3, [r7, #8]
       break;
 8005718:	e0b3      	b.n	8005882 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800571a:	4b5e      	ldr	r3, [pc, #376]	; (8005894 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800571c:	60bb      	str	r3, [r7, #8]
      break;
 800571e:	e0b0      	b.n	8005882 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005720:	4b5a      	ldr	r3, [pc, #360]	; (800588c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005728:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800572a:	4b58      	ldr	r3, [pc, #352]	; (800588c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d04a      	beq.n	80057cc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005736:	4b55      	ldr	r3, [pc, #340]	; (800588c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	099b      	lsrs	r3, r3, #6
 800573c:	f04f 0400 	mov.w	r4, #0
 8005740:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	ea03 0501 	and.w	r5, r3, r1
 800574c:	ea04 0602 	and.w	r6, r4, r2
 8005750:	4629      	mov	r1, r5
 8005752:	4632      	mov	r2, r6
 8005754:	f04f 0300 	mov.w	r3, #0
 8005758:	f04f 0400 	mov.w	r4, #0
 800575c:	0154      	lsls	r4, r2, #5
 800575e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005762:	014b      	lsls	r3, r1, #5
 8005764:	4619      	mov	r1, r3
 8005766:	4622      	mov	r2, r4
 8005768:	1b49      	subs	r1, r1, r5
 800576a:	eb62 0206 	sbc.w	r2, r2, r6
 800576e:	f04f 0300 	mov.w	r3, #0
 8005772:	f04f 0400 	mov.w	r4, #0
 8005776:	0194      	lsls	r4, r2, #6
 8005778:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800577c:	018b      	lsls	r3, r1, #6
 800577e:	1a5b      	subs	r3, r3, r1
 8005780:	eb64 0402 	sbc.w	r4, r4, r2
 8005784:	f04f 0100 	mov.w	r1, #0
 8005788:	f04f 0200 	mov.w	r2, #0
 800578c:	00e2      	lsls	r2, r4, #3
 800578e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005792:	00d9      	lsls	r1, r3, #3
 8005794:	460b      	mov	r3, r1
 8005796:	4614      	mov	r4, r2
 8005798:	195b      	adds	r3, r3, r5
 800579a:	eb44 0406 	adc.w	r4, r4, r6
 800579e:	f04f 0100 	mov.w	r1, #0
 80057a2:	f04f 0200 	mov.w	r2, #0
 80057a6:	0262      	lsls	r2, r4, #9
 80057a8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80057ac:	0259      	lsls	r1, r3, #9
 80057ae:	460b      	mov	r3, r1
 80057b0:	4614      	mov	r4, r2
 80057b2:	4618      	mov	r0, r3
 80057b4:	4621      	mov	r1, r4
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f04f 0400 	mov.w	r4, #0
 80057bc:	461a      	mov	r2, r3
 80057be:	4623      	mov	r3, r4
 80057c0:	f7fa fff2 	bl	80007a8 <__aeabi_uldivmod>
 80057c4:	4603      	mov	r3, r0
 80057c6:	460c      	mov	r4, r1
 80057c8:	60fb      	str	r3, [r7, #12]
 80057ca:	e049      	b.n	8005860 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057cc:	4b2f      	ldr	r3, [pc, #188]	; (800588c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	099b      	lsrs	r3, r3, #6
 80057d2:	f04f 0400 	mov.w	r4, #0
 80057d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80057da:	f04f 0200 	mov.w	r2, #0
 80057de:	ea03 0501 	and.w	r5, r3, r1
 80057e2:	ea04 0602 	and.w	r6, r4, r2
 80057e6:	4629      	mov	r1, r5
 80057e8:	4632      	mov	r2, r6
 80057ea:	f04f 0300 	mov.w	r3, #0
 80057ee:	f04f 0400 	mov.w	r4, #0
 80057f2:	0154      	lsls	r4, r2, #5
 80057f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80057f8:	014b      	lsls	r3, r1, #5
 80057fa:	4619      	mov	r1, r3
 80057fc:	4622      	mov	r2, r4
 80057fe:	1b49      	subs	r1, r1, r5
 8005800:	eb62 0206 	sbc.w	r2, r2, r6
 8005804:	f04f 0300 	mov.w	r3, #0
 8005808:	f04f 0400 	mov.w	r4, #0
 800580c:	0194      	lsls	r4, r2, #6
 800580e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005812:	018b      	lsls	r3, r1, #6
 8005814:	1a5b      	subs	r3, r3, r1
 8005816:	eb64 0402 	sbc.w	r4, r4, r2
 800581a:	f04f 0100 	mov.w	r1, #0
 800581e:	f04f 0200 	mov.w	r2, #0
 8005822:	00e2      	lsls	r2, r4, #3
 8005824:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005828:	00d9      	lsls	r1, r3, #3
 800582a:	460b      	mov	r3, r1
 800582c:	4614      	mov	r4, r2
 800582e:	195b      	adds	r3, r3, r5
 8005830:	eb44 0406 	adc.w	r4, r4, r6
 8005834:	f04f 0100 	mov.w	r1, #0
 8005838:	f04f 0200 	mov.w	r2, #0
 800583c:	02a2      	lsls	r2, r4, #10
 800583e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005842:	0299      	lsls	r1, r3, #10
 8005844:	460b      	mov	r3, r1
 8005846:	4614      	mov	r4, r2
 8005848:	4618      	mov	r0, r3
 800584a:	4621      	mov	r1, r4
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f04f 0400 	mov.w	r4, #0
 8005852:	461a      	mov	r2, r3
 8005854:	4623      	mov	r3, r4
 8005856:	f7fa ffa7 	bl	80007a8 <__aeabi_uldivmod>
 800585a:	4603      	mov	r3, r0
 800585c:	460c      	mov	r4, r1
 800585e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005860:	4b0a      	ldr	r3, [pc, #40]	; (800588c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	0c1b      	lsrs	r3, r3, #16
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	3301      	adds	r3, #1
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	fbb2 f3f3 	udiv	r3, r2, r3
 8005878:	60bb      	str	r3, [r7, #8]
      break;
 800587a:	e002      	b.n	8005882 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800587c:	4b04      	ldr	r3, [pc, #16]	; (8005890 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800587e:	60bb      	str	r3, [r7, #8]
      break;
 8005880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005882:	68bb      	ldr	r3, [r7, #8]
}
 8005884:	4618      	mov	r0, r3
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800588c:	40023800 	.word	0x40023800
 8005890:	00f42400 	.word	0x00f42400
 8005894:	007a1200 	.word	0x007a1200

08005898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800589c:	4b03      	ldr	r3, [pc, #12]	; (80058ac <HAL_RCC_GetHCLKFreq+0x14>)
 800589e:	681b      	ldr	r3, [r3, #0]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	20000000 	.word	0x20000000

080058b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058b4:	f7ff fff0 	bl	8005898 <HAL_RCC_GetHCLKFreq>
 80058b8:	4601      	mov	r1, r0
 80058ba:	4b05      	ldr	r3, [pc, #20]	; (80058d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	0a9b      	lsrs	r3, r3, #10
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	4a03      	ldr	r2, [pc, #12]	; (80058d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058c6:	5cd3      	ldrb	r3, [r2, r3]
 80058c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	40023800 	.word	0x40023800
 80058d4:	080082ac 	.word	0x080082ac

080058d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058dc:	f7ff ffdc 	bl	8005898 <HAL_RCC_GetHCLKFreq>
 80058e0:	4601      	mov	r1, r0
 80058e2:	4b05      	ldr	r3, [pc, #20]	; (80058f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	0b5b      	lsrs	r3, r3, #13
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	4a03      	ldr	r2, [pc, #12]	; (80058fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80058ee:	5cd3      	ldrb	r3, [r2, r3]
 80058f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40023800 	.word	0x40023800
 80058fc:	080082ac 	.word	0x080082ac

08005900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e01d      	b.n	800594e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d106      	bne.n	800592c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7fd fb58 	bl	8002fdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	3304      	adds	r3, #4
 800593c:	4619      	mov	r1, r3
 800593e:	4610      	mov	r0, r2
 8005940:	f000 fab8 	bl	8005eb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3708      	adds	r7, #8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b082      	sub	sp, #8
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e01d      	b.n	80059a4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d106      	bne.n	8005982 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f815 	bl	80059ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2202      	movs	r2, #2
 8005986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	3304      	adds	r3, #4
 8005992:	4619      	mov	r1, r3
 8005994:	4610      	mov	r0, r2
 8005996:	f000 fa8d 	bl	8005eb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3708      	adds	r7, #8
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2201      	movs	r2, #1
 80059d0:	6839      	ldr	r1, [r7, #0]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fd14 	bl	8006400 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a10      	ldr	r2, [pc, #64]	; (8005a20 <HAL_TIM_PWM_Start+0x60>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d107      	bne.n	80059f2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2b06      	cmp	r3, #6
 8005a02:	d007      	beq.n	8005a14 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0201 	orr.w	r2, r2, #1
 8005a12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	40010000 	.word	0x40010000

08005a24 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e083      	b.n	8005b40 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d106      	bne.n	8005a52 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f7fd fa2b 	bl	8002ea8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2202      	movs	r2, #2
 8005a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6812      	ldr	r2, [r2, #0]
 8005a64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a68:	f023 0307 	bic.w	r3, r3, #7
 8005a6c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	3304      	adds	r3, #4
 8005a76:	4619      	mov	r1, r3
 8005a78:	4610      	mov	r0, r2
 8005a7a:	f000 fa1b 	bl	8005eb4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aa6:	f023 0303 	bic.w	r3, r3, #3
 8005aaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	021b      	lsls	r3, r3, #8
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005ac4:	f023 030c 	bic.w	r3, r3, #12
 8005ac8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ad0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ad4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	021b      	lsls	r3, r3, #8
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	011a      	lsls	r2, r3, #4
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	031b      	lsls	r3, r3, #12
 8005af4:	4313      	orrs	r3, r2
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005b02:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005b0a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	4313      	orrs	r3, r2
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3718      	adds	r7, #24
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d002      	beq.n	8005b5e <HAL_TIM_Encoder_Start+0x16>
 8005b58:	2b04      	cmp	r3, #4
 8005b5a:	d008      	beq.n	8005b6e <HAL_TIM_Encoder_Start+0x26>
 8005b5c:	e00f      	b.n	8005b7e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2201      	movs	r2, #1
 8005b64:	2100      	movs	r1, #0
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 fc4a 	bl	8006400 <TIM_CCxChannelCmd>
      break;
 8005b6c:	e016      	b.n	8005b9c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2201      	movs	r2, #1
 8005b74:	2104      	movs	r1, #4
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 fc42 	bl	8006400 <TIM_CCxChannelCmd>
      break;
 8005b7c:	e00e      	b.n	8005b9c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2201      	movs	r2, #1
 8005b84:	2100      	movs	r1, #0
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 fc3a 	bl	8006400 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2201      	movs	r2, #1
 8005b92:	2104      	movs	r1, #4
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 fc33 	bl	8006400 <TIM_CCxChannelCmd>
      break;
 8005b9a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 0201 	orr.w	r2, r2, #1
 8005baa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d101      	bne.n	8005bd2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005bce:	2302      	movs	r3, #2
 8005bd0:	e0b4      	b.n	8005d3c <HAL_TIM_PWM_ConfigChannel+0x184>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2202      	movs	r2, #2
 8005bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b0c      	cmp	r3, #12
 8005be6:	f200 809f 	bhi.w	8005d28 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005bea:	a201      	add	r2, pc, #4	; (adr r2, 8005bf0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf0:	08005c25 	.word	0x08005c25
 8005bf4:	08005d29 	.word	0x08005d29
 8005bf8:	08005d29 	.word	0x08005d29
 8005bfc:	08005d29 	.word	0x08005d29
 8005c00:	08005c65 	.word	0x08005c65
 8005c04:	08005d29 	.word	0x08005d29
 8005c08:	08005d29 	.word	0x08005d29
 8005c0c:	08005d29 	.word	0x08005d29
 8005c10:	08005ca7 	.word	0x08005ca7
 8005c14:	08005d29 	.word	0x08005d29
 8005c18:	08005d29 	.word	0x08005d29
 8005c1c:	08005d29 	.word	0x08005d29
 8005c20:	08005ce7 	.word	0x08005ce7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68b9      	ldr	r1, [r7, #8]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 f9c2 	bl	8005fb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	699a      	ldr	r2, [r3, #24]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f042 0208 	orr.w	r2, r2, #8
 8005c3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	699a      	ldr	r2, [r3, #24]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0204 	bic.w	r2, r2, #4
 8005c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6999      	ldr	r1, [r3, #24]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	691a      	ldr	r2, [r3, #16]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	619a      	str	r2, [r3, #24]
      break;
 8005c62:	e062      	b.n	8005d2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68b9      	ldr	r1, [r7, #8]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fa08 	bl	8006080 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	699a      	ldr	r2, [r3, #24]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	699a      	ldr	r2, [r3, #24]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6999      	ldr	r1, [r3, #24]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	021a      	lsls	r2, r3, #8
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	619a      	str	r2, [r3, #24]
      break;
 8005ca4:	e041      	b.n	8005d2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68b9      	ldr	r1, [r7, #8]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 fa53 	bl	8006158 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	69da      	ldr	r2, [r3, #28]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f042 0208 	orr.w	r2, r2, #8
 8005cc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	69da      	ldr	r2, [r3, #28]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 0204 	bic.w	r2, r2, #4
 8005cd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	69d9      	ldr	r1, [r3, #28]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	691a      	ldr	r2, [r3, #16]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	61da      	str	r2, [r3, #28]
      break;
 8005ce4:	e021      	b.n	8005d2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68b9      	ldr	r1, [r7, #8]
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 fa9d 	bl	800622c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	69da      	ldr	r2, [r3, #28]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	69da      	ldr	r2, [r3, #28]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	69d9      	ldr	r1, [r3, #28]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	021a      	lsls	r2, r3, #8
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	61da      	str	r2, [r3, #28]
      break;
 8005d26:	e000      	b.n	8005d2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005d28:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d101      	bne.n	8005d5c <HAL_TIM_ConfigClockSource+0x18>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	e0a6      	b.n	8005eaa <HAL_TIM_ConfigClockSource+0x166>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2b40      	cmp	r3, #64	; 0x40
 8005d92:	d067      	beq.n	8005e64 <HAL_TIM_ConfigClockSource+0x120>
 8005d94:	2b40      	cmp	r3, #64	; 0x40
 8005d96:	d80b      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x6c>
 8005d98:	2b10      	cmp	r3, #16
 8005d9a:	d073      	beq.n	8005e84 <HAL_TIM_ConfigClockSource+0x140>
 8005d9c:	2b10      	cmp	r3, #16
 8005d9e:	d802      	bhi.n	8005da6 <HAL_TIM_ConfigClockSource+0x62>
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d06f      	beq.n	8005e84 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005da4:	e078      	b.n	8005e98 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005da6:	2b20      	cmp	r3, #32
 8005da8:	d06c      	beq.n	8005e84 <HAL_TIM_ConfigClockSource+0x140>
 8005daa:	2b30      	cmp	r3, #48	; 0x30
 8005dac:	d06a      	beq.n	8005e84 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005dae:	e073      	b.n	8005e98 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005db0:	2b70      	cmp	r3, #112	; 0x70
 8005db2:	d00d      	beq.n	8005dd0 <HAL_TIM_ConfigClockSource+0x8c>
 8005db4:	2b70      	cmp	r3, #112	; 0x70
 8005db6:	d804      	bhi.n	8005dc2 <HAL_TIM_ConfigClockSource+0x7e>
 8005db8:	2b50      	cmp	r3, #80	; 0x50
 8005dba:	d033      	beq.n	8005e24 <HAL_TIM_ConfigClockSource+0xe0>
 8005dbc:	2b60      	cmp	r3, #96	; 0x60
 8005dbe:	d041      	beq.n	8005e44 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005dc0:	e06a      	b.n	8005e98 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc6:	d066      	beq.n	8005e96 <HAL_TIM_ConfigClockSource+0x152>
 8005dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dcc:	d017      	beq.n	8005dfe <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005dce:	e063      	b.n	8005e98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6818      	ldr	r0, [r3, #0]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	6899      	ldr	r1, [r3, #8]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f000 faee 	bl	80063c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005df2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	609a      	str	r2, [r3, #8]
      break;
 8005dfc:	e04c      	b.n	8005e98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6818      	ldr	r0, [r3, #0]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	6899      	ldr	r1, [r3, #8]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	f000 fad7 	bl	80063c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e20:	609a      	str	r2, [r3, #8]
      break;
 8005e22:	e039      	b.n	8005e98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6818      	ldr	r0, [r3, #0]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	6859      	ldr	r1, [r3, #4]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	461a      	mov	r2, r3
 8005e32:	f000 fa4b 	bl	80062cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2150      	movs	r1, #80	; 0x50
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 faa4 	bl	800638a <TIM_ITRx_SetConfig>
      break;
 8005e42:	e029      	b.n	8005e98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6818      	ldr	r0, [r3, #0]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	6859      	ldr	r1, [r3, #4]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	461a      	mov	r2, r3
 8005e52:	f000 fa6a 	bl	800632a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2160      	movs	r1, #96	; 0x60
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 fa94 	bl	800638a <TIM_ITRx_SetConfig>
      break;
 8005e62:	e019      	b.n	8005e98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6818      	ldr	r0, [r3, #0]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	6859      	ldr	r1, [r3, #4]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	461a      	mov	r2, r3
 8005e72:	f000 fa2b 	bl	80062cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2140      	movs	r1, #64	; 0x40
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 fa84 	bl	800638a <TIM_ITRx_SetConfig>
      break;
 8005e82:	e009      	b.n	8005e98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	4610      	mov	r0, r2
 8005e90:	f000 fa7b 	bl	800638a <TIM_ITRx_SetConfig>
      break;
 8005e94:	e000      	b.n	8005e98 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005e96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
	...

08005eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a34      	ldr	r2, [pc, #208]	; (8005f98 <TIM_Base_SetConfig+0xe4>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d00f      	beq.n	8005eec <TIM_Base_SetConfig+0x38>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed2:	d00b      	beq.n	8005eec <TIM_Base_SetConfig+0x38>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a31      	ldr	r2, [pc, #196]	; (8005f9c <TIM_Base_SetConfig+0xe8>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d007      	beq.n	8005eec <TIM_Base_SetConfig+0x38>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a30      	ldr	r2, [pc, #192]	; (8005fa0 <TIM_Base_SetConfig+0xec>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d003      	beq.n	8005eec <TIM_Base_SetConfig+0x38>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a2f      	ldr	r2, [pc, #188]	; (8005fa4 <TIM_Base_SetConfig+0xf0>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d108      	bne.n	8005efe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a25      	ldr	r2, [pc, #148]	; (8005f98 <TIM_Base_SetConfig+0xe4>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d01b      	beq.n	8005f3e <TIM_Base_SetConfig+0x8a>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f0c:	d017      	beq.n	8005f3e <TIM_Base_SetConfig+0x8a>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a22      	ldr	r2, [pc, #136]	; (8005f9c <TIM_Base_SetConfig+0xe8>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d013      	beq.n	8005f3e <TIM_Base_SetConfig+0x8a>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a21      	ldr	r2, [pc, #132]	; (8005fa0 <TIM_Base_SetConfig+0xec>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00f      	beq.n	8005f3e <TIM_Base_SetConfig+0x8a>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a20      	ldr	r2, [pc, #128]	; (8005fa4 <TIM_Base_SetConfig+0xf0>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d00b      	beq.n	8005f3e <TIM_Base_SetConfig+0x8a>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a1f      	ldr	r2, [pc, #124]	; (8005fa8 <TIM_Base_SetConfig+0xf4>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d007      	beq.n	8005f3e <TIM_Base_SetConfig+0x8a>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a1e      	ldr	r2, [pc, #120]	; (8005fac <TIM_Base_SetConfig+0xf8>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d003      	beq.n	8005f3e <TIM_Base_SetConfig+0x8a>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a1d      	ldr	r2, [pc, #116]	; (8005fb0 <TIM_Base_SetConfig+0xfc>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d108      	bne.n	8005f50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a08      	ldr	r2, [pc, #32]	; (8005f98 <TIM_Base_SetConfig+0xe4>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d103      	bne.n	8005f84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	691a      	ldr	r2, [r3, #16]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	615a      	str	r2, [r3, #20]
}
 8005f8a:	bf00      	nop
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	40010000 	.word	0x40010000
 8005f9c:	40000400 	.word	0x40000400
 8005fa0:	40000800 	.word	0x40000800
 8005fa4:	40000c00 	.word	0x40000c00
 8005fa8:	40014000 	.word	0x40014000
 8005fac:	40014400 	.word	0x40014400
 8005fb0:	40014800 	.word	0x40014800

08005fb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	f023 0201 	bic.w	r2, r3, #1
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 0303 	bic.w	r3, r3, #3
 8005fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f023 0302 	bic.w	r3, r3, #2
 8005ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	4313      	orrs	r3, r2
 8006006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a1c      	ldr	r2, [pc, #112]	; (800607c <TIM_OC1_SetConfig+0xc8>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d10c      	bne.n	800602a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f023 0308 	bic.w	r3, r3, #8
 8006016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	4313      	orrs	r3, r2
 8006020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f023 0304 	bic.w	r3, r3, #4
 8006028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a13      	ldr	r2, [pc, #76]	; (800607c <TIM_OC1_SetConfig+0xc8>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d111      	bne.n	8006056 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	4313      	orrs	r3, r2
 800604a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	4313      	orrs	r3, r2
 8006054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	621a      	str	r2, [r3, #32]
}
 8006070:	bf00      	nop
 8006072:	371c      	adds	r7, #28
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	40010000 	.word	0x40010000

08006080 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006080:	b480      	push	{r7}
 8006082:	b087      	sub	sp, #28
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	f023 0210 	bic.w	r2, r3, #16
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	021b      	lsls	r3, r3, #8
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f023 0320 	bic.w	r3, r3, #32
 80060ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	011b      	lsls	r3, r3, #4
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a1e      	ldr	r2, [pc, #120]	; (8006154 <TIM_OC2_SetConfig+0xd4>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d10d      	bne.n	80060fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	011b      	lsls	r3, r3, #4
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a15      	ldr	r2, [pc, #84]	; (8006154 <TIM_OC2_SetConfig+0xd4>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d113      	bne.n	800612c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800610a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006112:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	4313      	orrs	r3, r2
 800611e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	4313      	orrs	r3, r2
 800612a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	621a      	str	r2, [r3, #32]
}
 8006146:	bf00      	nop
 8006148:	371c      	adds	r7, #28
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	40010000 	.word	0x40010000

08006158 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f023 0303 	bic.w	r3, r3, #3
 800618e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	4313      	orrs	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	021b      	lsls	r3, r3, #8
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a1d      	ldr	r2, [pc, #116]	; (8006228 <TIM_OC3_SetConfig+0xd0>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d10d      	bne.n	80061d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	021b      	lsls	r3, r3, #8
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a14      	ldr	r2, [pc, #80]	; (8006228 <TIM_OC3_SetConfig+0xd0>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d113      	bne.n	8006202 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	011b      	lsls	r3, r3, #4
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	011b      	lsls	r3, r3, #4
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	4313      	orrs	r3, r2
 8006200:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	621a      	str	r2, [r3, #32]
}
 800621c:	bf00      	nop
 800621e:	371c      	adds	r7, #28
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	40010000 	.word	0x40010000

0800622c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800625a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	021b      	lsls	r3, r3, #8
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	4313      	orrs	r3, r2
 800626e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006276:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	031b      	lsls	r3, r3, #12
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a10      	ldr	r2, [pc, #64]	; (80062c8 <TIM_OC4_SetConfig+0x9c>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d109      	bne.n	80062a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006292:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	019b      	lsls	r3, r3, #6
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	4313      	orrs	r3, r2
 800629e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	685a      	ldr	r2, [r3, #4]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	621a      	str	r2, [r3, #32]
}
 80062ba:	bf00      	nop
 80062bc:	371c      	adds	r7, #28
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	40010000 	.word	0x40010000

080062cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	f023 0201 	bic.w	r2, r3, #1
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	011b      	lsls	r3, r3, #4
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	4313      	orrs	r3, r2
 8006300:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f023 030a 	bic.w	r3, r3, #10
 8006308:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	4313      	orrs	r3, r2
 8006310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	621a      	str	r2, [r3, #32]
}
 800631e:	bf00      	nop
 8006320:	371c      	adds	r7, #28
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800632a:	b480      	push	{r7}
 800632c:	b087      	sub	sp, #28
 800632e:	af00      	add	r7, sp, #0
 8006330:	60f8      	str	r0, [r7, #12]
 8006332:	60b9      	str	r1, [r7, #8]
 8006334:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	f023 0210 	bic.w	r2, r3, #16
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006354:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	031b      	lsls	r3, r3, #12
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	4313      	orrs	r3, r2
 800635e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006366:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	011b      	lsls	r3, r3, #4
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	4313      	orrs	r3, r2
 8006370:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	621a      	str	r2, [r3, #32]
}
 800637e:	bf00      	nop
 8006380:	371c      	adds	r7, #28
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800638a:	b480      	push	{r7}
 800638c:	b085      	sub	sp, #20
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063a2:	683a      	ldr	r2, [r7, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	f043 0307 	orr.w	r3, r3, #7
 80063ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	609a      	str	r2, [r3, #8]
}
 80063b4:	bf00      	nop
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b087      	sub	sp, #28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
 80063cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	021a      	lsls	r2, r3, #8
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	431a      	orrs	r2, r3
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	609a      	str	r2, [r3, #8]
}
 80063f4:	bf00      	nop
 80063f6:	371c      	adds	r7, #28
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006400:	b480      	push	{r7}
 8006402:	b087      	sub	sp, #28
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	f003 031f 	and.w	r3, r3, #31
 8006412:	2201      	movs	r2, #1
 8006414:	fa02 f303 	lsl.w	r3, r2, r3
 8006418:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6a1a      	ldr	r2, [r3, #32]
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	43db      	mvns	r3, r3
 8006422:	401a      	ands	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6a1a      	ldr	r2, [r3, #32]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	f003 031f 	and.w	r3, r3, #31
 8006432:	6879      	ldr	r1, [r7, #4]
 8006434:	fa01 f303 	lsl.w	r3, r1, r3
 8006438:	431a      	orrs	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	621a      	str	r2, [r3, #32]
}
 800643e:	bf00      	nop
 8006440:	371c      	adds	r7, #28
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
	...

0800644c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800645c:	2b01      	cmp	r3, #1
 800645e:	d101      	bne.n	8006464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006460:	2302      	movs	r3, #2
 8006462:	e050      	b.n	8006506 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800648a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	4313      	orrs	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a1c      	ldr	r2, [pc, #112]	; (8006514 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d018      	beq.n	80064da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b0:	d013      	beq.n	80064da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a18      	ldr	r2, [pc, #96]	; (8006518 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d00e      	beq.n	80064da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a16      	ldr	r2, [pc, #88]	; (800651c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d009      	beq.n	80064da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a15      	ldr	r2, [pc, #84]	; (8006520 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d004      	beq.n	80064da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a13      	ldr	r2, [pc, #76]	; (8006524 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d10c      	bne.n	80064f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3714      	adds	r7, #20
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	40010000 	.word	0x40010000
 8006518:	40000400 	.word	0x40000400
 800651c:	40000800 	.word	0x40000800
 8006520:	40000c00 	.word	0x40000c00
 8006524:	40014000 	.word	0x40014000

08006528 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e03f      	b.n	80065ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d106      	bne.n	8006554 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7fc fdca 	bl	80030e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2224      	movs	r2, #36	; 0x24
 8006558:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68da      	ldr	r2, [r3, #12]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800656a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 f90b 	bl	8006788 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	691a      	ldr	r2, [r3, #16]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006580:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	695a      	ldr	r2, [r3, #20]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006590:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68da      	ldr	r2, [r3, #12]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2220      	movs	r2, #32
 80065ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2220      	movs	r2, #32
 80065b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b088      	sub	sp, #32
 80065c6:	af02      	add	r7, sp, #8
 80065c8:	60f8      	str	r0, [r7, #12]
 80065ca:	60b9      	str	r1, [r7, #8]
 80065cc:	603b      	str	r3, [r7, #0]
 80065ce:	4613      	mov	r3, r2
 80065d0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b20      	cmp	r3, #32
 80065e0:	f040 8083 	bne.w	80066ea <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d002      	beq.n	80065f0 <HAL_UART_Transmit+0x2e>
 80065ea:	88fb      	ldrh	r3, [r7, #6]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d101      	bne.n	80065f4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e07b      	b.n	80066ec <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d101      	bne.n	8006602 <HAL_UART_Transmit+0x40>
 80065fe:	2302      	movs	r3, #2
 8006600:	e074      	b.n	80066ec <HAL_UART_Transmit+0x12a>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2221      	movs	r2, #33	; 0x21
 8006614:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006618:	f7fc fe3e 	bl	8003298 <HAL_GetTick>
 800661c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	88fa      	ldrh	r2, [r7, #6]
 8006622:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	88fa      	ldrh	r2, [r7, #6]
 8006628:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006632:	e042      	b.n	80066ba <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006638:	b29b      	uxth	r3, r3
 800663a:	3b01      	subs	r3, #1
 800663c:	b29a      	uxth	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800664a:	d122      	bne.n	8006692 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	2200      	movs	r2, #0
 8006654:	2180      	movs	r1, #128	; 0x80
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f000 f84c 	bl	80066f4 <UART_WaitOnFlagUntilTimeout>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d001      	beq.n	8006666 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e042      	b.n	80066ec <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	461a      	mov	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006678:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d103      	bne.n	800668a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	3302      	adds	r3, #2
 8006686:	60bb      	str	r3, [r7, #8]
 8006688:	e017      	b.n	80066ba <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	3301      	adds	r3, #1
 800668e:	60bb      	str	r3, [r7, #8]
 8006690:	e013      	b.n	80066ba <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	2200      	movs	r2, #0
 800669a:	2180      	movs	r1, #128	; 0x80
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 f829 	bl	80066f4 <UART_WaitOnFlagUntilTimeout>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e01f      	b.n	80066ec <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	1c5a      	adds	r2, r3, #1
 80066b0:	60ba      	str	r2, [r7, #8]
 80066b2:	781a      	ldrb	r2, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066be:	b29b      	uxth	r3, r3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1b7      	bne.n	8006634 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	2200      	movs	r2, #0
 80066cc:	2140      	movs	r1, #64	; 0x40
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f000 f810 	bl	80066f4 <UART_WaitOnFlagUntilTimeout>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e006      	b.n	80066ec <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2220      	movs	r2, #32
 80066e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80066e6:	2300      	movs	r3, #0
 80066e8:	e000      	b.n	80066ec <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80066ea:	2302      	movs	r3, #2
  }
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3718      	adds	r7, #24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	603b      	str	r3, [r7, #0]
 8006700:	4613      	mov	r3, r2
 8006702:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006704:	e02c      	b.n	8006760 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670c:	d028      	beq.n	8006760 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d007      	beq.n	8006724 <UART_WaitOnFlagUntilTimeout+0x30>
 8006714:	f7fc fdc0 	bl	8003298 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	429a      	cmp	r2, r3
 8006722:	d21d      	bcs.n	8006760 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68da      	ldr	r2, [r3, #12]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006732:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695a      	ldr	r2, [r3, #20]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 0201 	bic.w	r2, r2, #1
 8006742:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2220      	movs	r2, #32
 8006748:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2220      	movs	r2, #32
 8006750:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e00f      	b.n	8006780 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	4013      	ands	r3, r2
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	429a      	cmp	r2, r3
 800676e:	bf0c      	ite	eq
 8006770:	2301      	moveq	r3, #1
 8006772:	2300      	movne	r3, #0
 8006774:	b2db      	uxtb	r3, r3
 8006776:	461a      	mov	r2, r3
 8006778:	79fb      	ldrb	r3, [r7, #7]
 800677a:	429a      	cmp	r2, r3
 800677c:	d0c3      	beq.n	8006706 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800678c:	b085      	sub	sp, #20
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	68da      	ldr	r2, [r3, #12]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	431a      	orrs	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	431a      	orrs	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	69db      	ldr	r3, [r3, #28]
 80067bc:	4313      	orrs	r3, r2
 80067be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80067ca:	f023 030c 	bic.w	r3, r3, #12
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	6812      	ldr	r2, [r2, #0]
 80067d2:	68f9      	ldr	r1, [r7, #12]
 80067d4:	430b      	orrs	r3, r1
 80067d6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	699a      	ldr	r2, [r3, #24]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	430a      	orrs	r2, r1
 80067ec:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067f6:	f040 818b 	bne.w	8006b10 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4ac1      	ldr	r2, [pc, #772]	; (8006b04 <UART_SetConfig+0x37c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d005      	beq.n	8006810 <UART_SetConfig+0x88>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4abf      	ldr	r2, [pc, #764]	; (8006b08 <UART_SetConfig+0x380>)
 800680a:	4293      	cmp	r3, r2
 800680c:	f040 80bd 	bne.w	800698a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006810:	f7ff f862 	bl	80058d8 <HAL_RCC_GetPCLK2Freq>
 8006814:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	461d      	mov	r5, r3
 800681a:	f04f 0600 	mov.w	r6, #0
 800681e:	46a8      	mov	r8, r5
 8006820:	46b1      	mov	r9, r6
 8006822:	eb18 0308 	adds.w	r3, r8, r8
 8006826:	eb49 0409 	adc.w	r4, r9, r9
 800682a:	4698      	mov	r8, r3
 800682c:	46a1      	mov	r9, r4
 800682e:	eb18 0805 	adds.w	r8, r8, r5
 8006832:	eb49 0906 	adc.w	r9, r9, r6
 8006836:	f04f 0100 	mov.w	r1, #0
 800683a:	f04f 0200 	mov.w	r2, #0
 800683e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006842:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006846:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800684a:	4688      	mov	r8, r1
 800684c:	4691      	mov	r9, r2
 800684e:	eb18 0005 	adds.w	r0, r8, r5
 8006852:	eb49 0106 	adc.w	r1, r9, r6
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	461d      	mov	r5, r3
 800685c:	f04f 0600 	mov.w	r6, #0
 8006860:	196b      	adds	r3, r5, r5
 8006862:	eb46 0406 	adc.w	r4, r6, r6
 8006866:	461a      	mov	r2, r3
 8006868:	4623      	mov	r3, r4
 800686a:	f7f9 ff9d 	bl	80007a8 <__aeabi_uldivmod>
 800686e:	4603      	mov	r3, r0
 8006870:	460c      	mov	r4, r1
 8006872:	461a      	mov	r2, r3
 8006874:	4ba5      	ldr	r3, [pc, #660]	; (8006b0c <UART_SetConfig+0x384>)
 8006876:	fba3 2302 	umull	r2, r3, r3, r2
 800687a:	095b      	lsrs	r3, r3, #5
 800687c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	461d      	mov	r5, r3
 8006884:	f04f 0600 	mov.w	r6, #0
 8006888:	46a9      	mov	r9, r5
 800688a:	46b2      	mov	sl, r6
 800688c:	eb19 0309 	adds.w	r3, r9, r9
 8006890:	eb4a 040a 	adc.w	r4, sl, sl
 8006894:	4699      	mov	r9, r3
 8006896:	46a2      	mov	sl, r4
 8006898:	eb19 0905 	adds.w	r9, r9, r5
 800689c:	eb4a 0a06 	adc.w	sl, sl, r6
 80068a0:	f04f 0100 	mov.w	r1, #0
 80068a4:	f04f 0200 	mov.w	r2, #0
 80068a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068b4:	4689      	mov	r9, r1
 80068b6:	4692      	mov	sl, r2
 80068b8:	eb19 0005 	adds.w	r0, r9, r5
 80068bc:	eb4a 0106 	adc.w	r1, sl, r6
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	461d      	mov	r5, r3
 80068c6:	f04f 0600 	mov.w	r6, #0
 80068ca:	196b      	adds	r3, r5, r5
 80068cc:	eb46 0406 	adc.w	r4, r6, r6
 80068d0:	461a      	mov	r2, r3
 80068d2:	4623      	mov	r3, r4
 80068d4:	f7f9 ff68 	bl	80007a8 <__aeabi_uldivmod>
 80068d8:	4603      	mov	r3, r0
 80068da:	460c      	mov	r4, r1
 80068dc:	461a      	mov	r2, r3
 80068de:	4b8b      	ldr	r3, [pc, #556]	; (8006b0c <UART_SetConfig+0x384>)
 80068e0:	fba3 1302 	umull	r1, r3, r3, r2
 80068e4:	095b      	lsrs	r3, r3, #5
 80068e6:	2164      	movs	r1, #100	; 0x64
 80068e8:	fb01 f303 	mul.w	r3, r1, r3
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	00db      	lsls	r3, r3, #3
 80068f0:	3332      	adds	r3, #50	; 0x32
 80068f2:	4a86      	ldr	r2, [pc, #536]	; (8006b0c <UART_SetConfig+0x384>)
 80068f4:	fba2 2303 	umull	r2, r3, r2, r3
 80068f8:	095b      	lsrs	r3, r3, #5
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006900:	4498      	add	r8, r3
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	461d      	mov	r5, r3
 8006906:	f04f 0600 	mov.w	r6, #0
 800690a:	46a9      	mov	r9, r5
 800690c:	46b2      	mov	sl, r6
 800690e:	eb19 0309 	adds.w	r3, r9, r9
 8006912:	eb4a 040a 	adc.w	r4, sl, sl
 8006916:	4699      	mov	r9, r3
 8006918:	46a2      	mov	sl, r4
 800691a:	eb19 0905 	adds.w	r9, r9, r5
 800691e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006922:	f04f 0100 	mov.w	r1, #0
 8006926:	f04f 0200 	mov.w	r2, #0
 800692a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800692e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006932:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006936:	4689      	mov	r9, r1
 8006938:	4692      	mov	sl, r2
 800693a:	eb19 0005 	adds.w	r0, r9, r5
 800693e:	eb4a 0106 	adc.w	r1, sl, r6
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	461d      	mov	r5, r3
 8006948:	f04f 0600 	mov.w	r6, #0
 800694c:	196b      	adds	r3, r5, r5
 800694e:	eb46 0406 	adc.w	r4, r6, r6
 8006952:	461a      	mov	r2, r3
 8006954:	4623      	mov	r3, r4
 8006956:	f7f9 ff27 	bl	80007a8 <__aeabi_uldivmod>
 800695a:	4603      	mov	r3, r0
 800695c:	460c      	mov	r4, r1
 800695e:	461a      	mov	r2, r3
 8006960:	4b6a      	ldr	r3, [pc, #424]	; (8006b0c <UART_SetConfig+0x384>)
 8006962:	fba3 1302 	umull	r1, r3, r3, r2
 8006966:	095b      	lsrs	r3, r3, #5
 8006968:	2164      	movs	r1, #100	; 0x64
 800696a:	fb01 f303 	mul.w	r3, r1, r3
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	00db      	lsls	r3, r3, #3
 8006972:	3332      	adds	r3, #50	; 0x32
 8006974:	4a65      	ldr	r2, [pc, #404]	; (8006b0c <UART_SetConfig+0x384>)
 8006976:	fba2 2303 	umull	r2, r3, r2, r3
 800697a:	095b      	lsrs	r3, r3, #5
 800697c:	f003 0207 	and.w	r2, r3, #7
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4442      	add	r2, r8
 8006986:	609a      	str	r2, [r3, #8]
 8006988:	e26f      	b.n	8006e6a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800698a:	f7fe ff91 	bl	80058b0 <HAL_RCC_GetPCLK1Freq>
 800698e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	461d      	mov	r5, r3
 8006994:	f04f 0600 	mov.w	r6, #0
 8006998:	46a8      	mov	r8, r5
 800699a:	46b1      	mov	r9, r6
 800699c:	eb18 0308 	adds.w	r3, r8, r8
 80069a0:	eb49 0409 	adc.w	r4, r9, r9
 80069a4:	4698      	mov	r8, r3
 80069a6:	46a1      	mov	r9, r4
 80069a8:	eb18 0805 	adds.w	r8, r8, r5
 80069ac:	eb49 0906 	adc.w	r9, r9, r6
 80069b0:	f04f 0100 	mov.w	r1, #0
 80069b4:	f04f 0200 	mov.w	r2, #0
 80069b8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80069bc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80069c0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80069c4:	4688      	mov	r8, r1
 80069c6:	4691      	mov	r9, r2
 80069c8:	eb18 0005 	adds.w	r0, r8, r5
 80069cc:	eb49 0106 	adc.w	r1, r9, r6
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	461d      	mov	r5, r3
 80069d6:	f04f 0600 	mov.w	r6, #0
 80069da:	196b      	adds	r3, r5, r5
 80069dc:	eb46 0406 	adc.w	r4, r6, r6
 80069e0:	461a      	mov	r2, r3
 80069e2:	4623      	mov	r3, r4
 80069e4:	f7f9 fee0 	bl	80007a8 <__aeabi_uldivmod>
 80069e8:	4603      	mov	r3, r0
 80069ea:	460c      	mov	r4, r1
 80069ec:	461a      	mov	r2, r3
 80069ee:	4b47      	ldr	r3, [pc, #284]	; (8006b0c <UART_SetConfig+0x384>)
 80069f0:	fba3 2302 	umull	r2, r3, r3, r2
 80069f4:	095b      	lsrs	r3, r3, #5
 80069f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	461d      	mov	r5, r3
 80069fe:	f04f 0600 	mov.w	r6, #0
 8006a02:	46a9      	mov	r9, r5
 8006a04:	46b2      	mov	sl, r6
 8006a06:	eb19 0309 	adds.w	r3, r9, r9
 8006a0a:	eb4a 040a 	adc.w	r4, sl, sl
 8006a0e:	4699      	mov	r9, r3
 8006a10:	46a2      	mov	sl, r4
 8006a12:	eb19 0905 	adds.w	r9, r9, r5
 8006a16:	eb4a 0a06 	adc.w	sl, sl, r6
 8006a1a:	f04f 0100 	mov.w	r1, #0
 8006a1e:	f04f 0200 	mov.w	r2, #0
 8006a22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a2e:	4689      	mov	r9, r1
 8006a30:	4692      	mov	sl, r2
 8006a32:	eb19 0005 	adds.w	r0, r9, r5
 8006a36:	eb4a 0106 	adc.w	r1, sl, r6
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	461d      	mov	r5, r3
 8006a40:	f04f 0600 	mov.w	r6, #0
 8006a44:	196b      	adds	r3, r5, r5
 8006a46:	eb46 0406 	adc.w	r4, r6, r6
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	4623      	mov	r3, r4
 8006a4e:	f7f9 feab 	bl	80007a8 <__aeabi_uldivmod>
 8006a52:	4603      	mov	r3, r0
 8006a54:	460c      	mov	r4, r1
 8006a56:	461a      	mov	r2, r3
 8006a58:	4b2c      	ldr	r3, [pc, #176]	; (8006b0c <UART_SetConfig+0x384>)
 8006a5a:	fba3 1302 	umull	r1, r3, r3, r2
 8006a5e:	095b      	lsrs	r3, r3, #5
 8006a60:	2164      	movs	r1, #100	; 0x64
 8006a62:	fb01 f303 	mul.w	r3, r1, r3
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	00db      	lsls	r3, r3, #3
 8006a6a:	3332      	adds	r3, #50	; 0x32
 8006a6c:	4a27      	ldr	r2, [pc, #156]	; (8006b0c <UART_SetConfig+0x384>)
 8006a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a72:	095b      	lsrs	r3, r3, #5
 8006a74:	005b      	lsls	r3, r3, #1
 8006a76:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a7a:	4498      	add	r8, r3
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	461d      	mov	r5, r3
 8006a80:	f04f 0600 	mov.w	r6, #0
 8006a84:	46a9      	mov	r9, r5
 8006a86:	46b2      	mov	sl, r6
 8006a88:	eb19 0309 	adds.w	r3, r9, r9
 8006a8c:	eb4a 040a 	adc.w	r4, sl, sl
 8006a90:	4699      	mov	r9, r3
 8006a92:	46a2      	mov	sl, r4
 8006a94:	eb19 0905 	adds.w	r9, r9, r5
 8006a98:	eb4a 0a06 	adc.w	sl, sl, r6
 8006a9c:	f04f 0100 	mov.w	r1, #0
 8006aa0:	f04f 0200 	mov.w	r2, #0
 8006aa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006aa8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006aac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ab0:	4689      	mov	r9, r1
 8006ab2:	4692      	mov	sl, r2
 8006ab4:	eb19 0005 	adds.w	r0, r9, r5
 8006ab8:	eb4a 0106 	adc.w	r1, sl, r6
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	461d      	mov	r5, r3
 8006ac2:	f04f 0600 	mov.w	r6, #0
 8006ac6:	196b      	adds	r3, r5, r5
 8006ac8:	eb46 0406 	adc.w	r4, r6, r6
 8006acc:	461a      	mov	r2, r3
 8006ace:	4623      	mov	r3, r4
 8006ad0:	f7f9 fe6a 	bl	80007a8 <__aeabi_uldivmod>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	460c      	mov	r4, r1
 8006ad8:	461a      	mov	r2, r3
 8006ada:	4b0c      	ldr	r3, [pc, #48]	; (8006b0c <UART_SetConfig+0x384>)
 8006adc:	fba3 1302 	umull	r1, r3, r3, r2
 8006ae0:	095b      	lsrs	r3, r3, #5
 8006ae2:	2164      	movs	r1, #100	; 0x64
 8006ae4:	fb01 f303 	mul.w	r3, r1, r3
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	3332      	adds	r3, #50	; 0x32
 8006aee:	4a07      	ldr	r2, [pc, #28]	; (8006b0c <UART_SetConfig+0x384>)
 8006af0:	fba2 2303 	umull	r2, r3, r2, r3
 8006af4:	095b      	lsrs	r3, r3, #5
 8006af6:	f003 0207 	and.w	r2, r3, #7
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4442      	add	r2, r8
 8006b00:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006b02:	e1b2      	b.n	8006e6a <UART_SetConfig+0x6e2>
 8006b04:	40011000 	.word	0x40011000
 8006b08:	40011400 	.word	0x40011400
 8006b0c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4ad7      	ldr	r2, [pc, #860]	; (8006e74 <UART_SetConfig+0x6ec>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d005      	beq.n	8006b26 <UART_SetConfig+0x39e>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4ad6      	ldr	r2, [pc, #856]	; (8006e78 <UART_SetConfig+0x6f0>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	f040 80d1 	bne.w	8006cc8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b26:	f7fe fed7 	bl	80058d8 <HAL_RCC_GetPCLK2Freq>
 8006b2a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	469a      	mov	sl, r3
 8006b30:	f04f 0b00 	mov.w	fp, #0
 8006b34:	46d0      	mov	r8, sl
 8006b36:	46d9      	mov	r9, fp
 8006b38:	eb18 0308 	adds.w	r3, r8, r8
 8006b3c:	eb49 0409 	adc.w	r4, r9, r9
 8006b40:	4698      	mov	r8, r3
 8006b42:	46a1      	mov	r9, r4
 8006b44:	eb18 080a 	adds.w	r8, r8, sl
 8006b48:	eb49 090b 	adc.w	r9, r9, fp
 8006b4c:	f04f 0100 	mov.w	r1, #0
 8006b50:	f04f 0200 	mov.w	r2, #0
 8006b54:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006b58:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006b5c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006b60:	4688      	mov	r8, r1
 8006b62:	4691      	mov	r9, r2
 8006b64:	eb1a 0508 	adds.w	r5, sl, r8
 8006b68:	eb4b 0609 	adc.w	r6, fp, r9
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	4619      	mov	r1, r3
 8006b72:	f04f 0200 	mov.w	r2, #0
 8006b76:	f04f 0300 	mov.w	r3, #0
 8006b7a:	f04f 0400 	mov.w	r4, #0
 8006b7e:	0094      	lsls	r4, r2, #2
 8006b80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b84:	008b      	lsls	r3, r1, #2
 8006b86:	461a      	mov	r2, r3
 8006b88:	4623      	mov	r3, r4
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	4631      	mov	r1, r6
 8006b8e:	f7f9 fe0b 	bl	80007a8 <__aeabi_uldivmod>
 8006b92:	4603      	mov	r3, r0
 8006b94:	460c      	mov	r4, r1
 8006b96:	461a      	mov	r2, r3
 8006b98:	4bb8      	ldr	r3, [pc, #736]	; (8006e7c <UART_SetConfig+0x6f4>)
 8006b9a:	fba3 2302 	umull	r2, r3, r3, r2
 8006b9e:	095b      	lsrs	r3, r3, #5
 8006ba0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	469b      	mov	fp, r3
 8006ba8:	f04f 0c00 	mov.w	ip, #0
 8006bac:	46d9      	mov	r9, fp
 8006bae:	46e2      	mov	sl, ip
 8006bb0:	eb19 0309 	adds.w	r3, r9, r9
 8006bb4:	eb4a 040a 	adc.w	r4, sl, sl
 8006bb8:	4699      	mov	r9, r3
 8006bba:	46a2      	mov	sl, r4
 8006bbc:	eb19 090b 	adds.w	r9, r9, fp
 8006bc0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006bc4:	f04f 0100 	mov.w	r1, #0
 8006bc8:	f04f 0200 	mov.w	r2, #0
 8006bcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bd0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006bd4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006bd8:	4689      	mov	r9, r1
 8006bda:	4692      	mov	sl, r2
 8006bdc:	eb1b 0509 	adds.w	r5, fp, r9
 8006be0:	eb4c 060a 	adc.w	r6, ip, sl
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	4619      	mov	r1, r3
 8006bea:	f04f 0200 	mov.w	r2, #0
 8006bee:	f04f 0300 	mov.w	r3, #0
 8006bf2:	f04f 0400 	mov.w	r4, #0
 8006bf6:	0094      	lsls	r4, r2, #2
 8006bf8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006bfc:	008b      	lsls	r3, r1, #2
 8006bfe:	461a      	mov	r2, r3
 8006c00:	4623      	mov	r3, r4
 8006c02:	4628      	mov	r0, r5
 8006c04:	4631      	mov	r1, r6
 8006c06:	f7f9 fdcf 	bl	80007a8 <__aeabi_uldivmod>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	460c      	mov	r4, r1
 8006c0e:	461a      	mov	r2, r3
 8006c10:	4b9a      	ldr	r3, [pc, #616]	; (8006e7c <UART_SetConfig+0x6f4>)
 8006c12:	fba3 1302 	umull	r1, r3, r3, r2
 8006c16:	095b      	lsrs	r3, r3, #5
 8006c18:	2164      	movs	r1, #100	; 0x64
 8006c1a:	fb01 f303 	mul.w	r3, r1, r3
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	011b      	lsls	r3, r3, #4
 8006c22:	3332      	adds	r3, #50	; 0x32
 8006c24:	4a95      	ldr	r2, [pc, #596]	; (8006e7c <UART_SetConfig+0x6f4>)
 8006c26:	fba2 2303 	umull	r2, r3, r2, r3
 8006c2a:	095b      	lsrs	r3, r3, #5
 8006c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c30:	4498      	add	r8, r3
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	469b      	mov	fp, r3
 8006c36:	f04f 0c00 	mov.w	ip, #0
 8006c3a:	46d9      	mov	r9, fp
 8006c3c:	46e2      	mov	sl, ip
 8006c3e:	eb19 0309 	adds.w	r3, r9, r9
 8006c42:	eb4a 040a 	adc.w	r4, sl, sl
 8006c46:	4699      	mov	r9, r3
 8006c48:	46a2      	mov	sl, r4
 8006c4a:	eb19 090b 	adds.w	r9, r9, fp
 8006c4e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c52:	f04f 0100 	mov.w	r1, #0
 8006c56:	f04f 0200 	mov.w	r2, #0
 8006c5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c66:	4689      	mov	r9, r1
 8006c68:	4692      	mov	sl, r2
 8006c6a:	eb1b 0509 	adds.w	r5, fp, r9
 8006c6e:	eb4c 060a 	adc.w	r6, ip, sl
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	4619      	mov	r1, r3
 8006c78:	f04f 0200 	mov.w	r2, #0
 8006c7c:	f04f 0300 	mov.w	r3, #0
 8006c80:	f04f 0400 	mov.w	r4, #0
 8006c84:	0094      	lsls	r4, r2, #2
 8006c86:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c8a:	008b      	lsls	r3, r1, #2
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	4623      	mov	r3, r4
 8006c90:	4628      	mov	r0, r5
 8006c92:	4631      	mov	r1, r6
 8006c94:	f7f9 fd88 	bl	80007a8 <__aeabi_uldivmod>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	460c      	mov	r4, r1
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	4b77      	ldr	r3, [pc, #476]	; (8006e7c <UART_SetConfig+0x6f4>)
 8006ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ca4:	095b      	lsrs	r3, r3, #5
 8006ca6:	2164      	movs	r1, #100	; 0x64
 8006ca8:	fb01 f303 	mul.w	r3, r1, r3
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	011b      	lsls	r3, r3, #4
 8006cb0:	3332      	adds	r3, #50	; 0x32
 8006cb2:	4a72      	ldr	r2, [pc, #456]	; (8006e7c <UART_SetConfig+0x6f4>)
 8006cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb8:	095b      	lsrs	r3, r3, #5
 8006cba:	f003 020f 	and.w	r2, r3, #15
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4442      	add	r2, r8
 8006cc4:	609a      	str	r2, [r3, #8]
 8006cc6:	e0d0      	b.n	8006e6a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cc8:	f7fe fdf2 	bl	80058b0 <HAL_RCC_GetPCLK1Freq>
 8006ccc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	469a      	mov	sl, r3
 8006cd2:	f04f 0b00 	mov.w	fp, #0
 8006cd6:	46d0      	mov	r8, sl
 8006cd8:	46d9      	mov	r9, fp
 8006cda:	eb18 0308 	adds.w	r3, r8, r8
 8006cde:	eb49 0409 	adc.w	r4, r9, r9
 8006ce2:	4698      	mov	r8, r3
 8006ce4:	46a1      	mov	r9, r4
 8006ce6:	eb18 080a 	adds.w	r8, r8, sl
 8006cea:	eb49 090b 	adc.w	r9, r9, fp
 8006cee:	f04f 0100 	mov.w	r1, #0
 8006cf2:	f04f 0200 	mov.w	r2, #0
 8006cf6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006cfa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006cfe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006d02:	4688      	mov	r8, r1
 8006d04:	4691      	mov	r9, r2
 8006d06:	eb1a 0508 	adds.w	r5, sl, r8
 8006d0a:	eb4b 0609 	adc.w	r6, fp, r9
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	4619      	mov	r1, r3
 8006d14:	f04f 0200 	mov.w	r2, #0
 8006d18:	f04f 0300 	mov.w	r3, #0
 8006d1c:	f04f 0400 	mov.w	r4, #0
 8006d20:	0094      	lsls	r4, r2, #2
 8006d22:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d26:	008b      	lsls	r3, r1, #2
 8006d28:	461a      	mov	r2, r3
 8006d2a:	4623      	mov	r3, r4
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	4631      	mov	r1, r6
 8006d30:	f7f9 fd3a 	bl	80007a8 <__aeabi_uldivmod>
 8006d34:	4603      	mov	r3, r0
 8006d36:	460c      	mov	r4, r1
 8006d38:	461a      	mov	r2, r3
 8006d3a:	4b50      	ldr	r3, [pc, #320]	; (8006e7c <UART_SetConfig+0x6f4>)
 8006d3c:	fba3 2302 	umull	r2, r3, r3, r2
 8006d40:	095b      	lsrs	r3, r3, #5
 8006d42:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	469b      	mov	fp, r3
 8006d4a:	f04f 0c00 	mov.w	ip, #0
 8006d4e:	46d9      	mov	r9, fp
 8006d50:	46e2      	mov	sl, ip
 8006d52:	eb19 0309 	adds.w	r3, r9, r9
 8006d56:	eb4a 040a 	adc.w	r4, sl, sl
 8006d5a:	4699      	mov	r9, r3
 8006d5c:	46a2      	mov	sl, r4
 8006d5e:	eb19 090b 	adds.w	r9, r9, fp
 8006d62:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006d66:	f04f 0100 	mov.w	r1, #0
 8006d6a:	f04f 0200 	mov.w	r2, #0
 8006d6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d7a:	4689      	mov	r9, r1
 8006d7c:	4692      	mov	sl, r2
 8006d7e:	eb1b 0509 	adds.w	r5, fp, r9
 8006d82:	eb4c 060a 	adc.w	r6, ip, sl
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	f04f 0200 	mov.w	r2, #0
 8006d90:	f04f 0300 	mov.w	r3, #0
 8006d94:	f04f 0400 	mov.w	r4, #0
 8006d98:	0094      	lsls	r4, r2, #2
 8006d9a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d9e:	008b      	lsls	r3, r1, #2
 8006da0:	461a      	mov	r2, r3
 8006da2:	4623      	mov	r3, r4
 8006da4:	4628      	mov	r0, r5
 8006da6:	4631      	mov	r1, r6
 8006da8:	f7f9 fcfe 	bl	80007a8 <__aeabi_uldivmod>
 8006dac:	4603      	mov	r3, r0
 8006dae:	460c      	mov	r4, r1
 8006db0:	461a      	mov	r2, r3
 8006db2:	4b32      	ldr	r3, [pc, #200]	; (8006e7c <UART_SetConfig+0x6f4>)
 8006db4:	fba3 1302 	umull	r1, r3, r3, r2
 8006db8:	095b      	lsrs	r3, r3, #5
 8006dba:	2164      	movs	r1, #100	; 0x64
 8006dbc:	fb01 f303 	mul.w	r3, r1, r3
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	011b      	lsls	r3, r3, #4
 8006dc4:	3332      	adds	r3, #50	; 0x32
 8006dc6:	4a2d      	ldr	r2, [pc, #180]	; (8006e7c <UART_SetConfig+0x6f4>)
 8006dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dcc:	095b      	lsrs	r3, r3, #5
 8006dce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dd2:	4498      	add	r8, r3
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	469b      	mov	fp, r3
 8006dd8:	f04f 0c00 	mov.w	ip, #0
 8006ddc:	46d9      	mov	r9, fp
 8006dde:	46e2      	mov	sl, ip
 8006de0:	eb19 0309 	adds.w	r3, r9, r9
 8006de4:	eb4a 040a 	adc.w	r4, sl, sl
 8006de8:	4699      	mov	r9, r3
 8006dea:	46a2      	mov	sl, r4
 8006dec:	eb19 090b 	adds.w	r9, r9, fp
 8006df0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006df4:	f04f 0100 	mov.w	r1, #0
 8006df8:	f04f 0200 	mov.w	r2, #0
 8006dfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e08:	4689      	mov	r9, r1
 8006e0a:	4692      	mov	sl, r2
 8006e0c:	eb1b 0509 	adds.w	r5, fp, r9
 8006e10:	eb4c 060a 	adc.w	r6, ip, sl
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	4619      	mov	r1, r3
 8006e1a:	f04f 0200 	mov.w	r2, #0
 8006e1e:	f04f 0300 	mov.w	r3, #0
 8006e22:	f04f 0400 	mov.w	r4, #0
 8006e26:	0094      	lsls	r4, r2, #2
 8006e28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006e2c:	008b      	lsls	r3, r1, #2
 8006e2e:	461a      	mov	r2, r3
 8006e30:	4623      	mov	r3, r4
 8006e32:	4628      	mov	r0, r5
 8006e34:	4631      	mov	r1, r6
 8006e36:	f7f9 fcb7 	bl	80007a8 <__aeabi_uldivmod>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	460c      	mov	r4, r1
 8006e3e:	461a      	mov	r2, r3
 8006e40:	4b0e      	ldr	r3, [pc, #56]	; (8006e7c <UART_SetConfig+0x6f4>)
 8006e42:	fba3 1302 	umull	r1, r3, r3, r2
 8006e46:	095b      	lsrs	r3, r3, #5
 8006e48:	2164      	movs	r1, #100	; 0x64
 8006e4a:	fb01 f303 	mul.w	r3, r1, r3
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	011b      	lsls	r3, r3, #4
 8006e52:	3332      	adds	r3, #50	; 0x32
 8006e54:	4a09      	ldr	r2, [pc, #36]	; (8006e7c <UART_SetConfig+0x6f4>)
 8006e56:	fba2 2303 	umull	r2, r3, r2, r3
 8006e5a:	095b      	lsrs	r3, r3, #5
 8006e5c:	f003 020f 	and.w	r2, r3, #15
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4442      	add	r2, r8
 8006e66:	609a      	str	r2, [r3, #8]
}
 8006e68:	e7ff      	b.n	8006e6a <UART_SetConfig+0x6e2>
 8006e6a:	bf00      	nop
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e74:	40011000 	.word	0x40011000
 8006e78:	40011400 	.word	0x40011400
 8006e7c:	51eb851f 	.word	0x51eb851f

08006e80 <__errno>:
 8006e80:	4b01      	ldr	r3, [pc, #4]	; (8006e88 <__errno+0x8>)
 8006e82:	6818      	ldr	r0, [r3, #0]
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	2000000c 	.word	0x2000000c

08006e8c <__libc_init_array>:
 8006e8c:	b570      	push	{r4, r5, r6, lr}
 8006e8e:	4e0d      	ldr	r6, [pc, #52]	; (8006ec4 <__libc_init_array+0x38>)
 8006e90:	4c0d      	ldr	r4, [pc, #52]	; (8006ec8 <__libc_init_array+0x3c>)
 8006e92:	1ba4      	subs	r4, r4, r6
 8006e94:	10a4      	asrs	r4, r4, #2
 8006e96:	2500      	movs	r5, #0
 8006e98:	42a5      	cmp	r5, r4
 8006e9a:	d109      	bne.n	8006eb0 <__libc_init_array+0x24>
 8006e9c:	4e0b      	ldr	r6, [pc, #44]	; (8006ecc <__libc_init_array+0x40>)
 8006e9e:	4c0c      	ldr	r4, [pc, #48]	; (8006ed0 <__libc_init_array+0x44>)
 8006ea0:	f000 ffd4 	bl	8007e4c <_init>
 8006ea4:	1ba4      	subs	r4, r4, r6
 8006ea6:	10a4      	asrs	r4, r4, #2
 8006ea8:	2500      	movs	r5, #0
 8006eaa:	42a5      	cmp	r5, r4
 8006eac:	d105      	bne.n	8006eba <__libc_init_array+0x2e>
 8006eae:	bd70      	pop	{r4, r5, r6, pc}
 8006eb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006eb4:	4798      	blx	r3
 8006eb6:	3501      	adds	r5, #1
 8006eb8:	e7ee      	b.n	8006e98 <__libc_init_array+0xc>
 8006eba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ebe:	4798      	blx	r3
 8006ec0:	3501      	adds	r5, #1
 8006ec2:	e7f2      	b.n	8006eaa <__libc_init_array+0x1e>
 8006ec4:	08008354 	.word	0x08008354
 8006ec8:	08008354 	.word	0x08008354
 8006ecc:	08008354 	.word	0x08008354
 8006ed0:	08008358 	.word	0x08008358

08006ed4 <memset>:
 8006ed4:	4402      	add	r2, r0
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d100      	bne.n	8006ede <memset+0xa>
 8006edc:	4770      	bx	lr
 8006ede:	f803 1b01 	strb.w	r1, [r3], #1
 8006ee2:	e7f9      	b.n	8006ed8 <memset+0x4>

08006ee4 <_puts_r>:
 8006ee4:	b570      	push	{r4, r5, r6, lr}
 8006ee6:	460e      	mov	r6, r1
 8006ee8:	4605      	mov	r5, r0
 8006eea:	b118      	cbz	r0, 8006ef4 <_puts_r+0x10>
 8006eec:	6983      	ldr	r3, [r0, #24]
 8006eee:	b90b      	cbnz	r3, 8006ef4 <_puts_r+0x10>
 8006ef0:	f000 fa2c 	bl	800734c <__sinit>
 8006ef4:	69ab      	ldr	r3, [r5, #24]
 8006ef6:	68ac      	ldr	r4, [r5, #8]
 8006ef8:	b913      	cbnz	r3, 8006f00 <_puts_r+0x1c>
 8006efa:	4628      	mov	r0, r5
 8006efc:	f000 fa26 	bl	800734c <__sinit>
 8006f00:	4b23      	ldr	r3, [pc, #140]	; (8006f90 <_puts_r+0xac>)
 8006f02:	429c      	cmp	r4, r3
 8006f04:	d117      	bne.n	8006f36 <_puts_r+0x52>
 8006f06:	686c      	ldr	r4, [r5, #4]
 8006f08:	89a3      	ldrh	r3, [r4, #12]
 8006f0a:	071b      	lsls	r3, r3, #28
 8006f0c:	d51d      	bpl.n	8006f4a <_puts_r+0x66>
 8006f0e:	6923      	ldr	r3, [r4, #16]
 8006f10:	b1db      	cbz	r3, 8006f4a <_puts_r+0x66>
 8006f12:	3e01      	subs	r6, #1
 8006f14:	68a3      	ldr	r3, [r4, #8]
 8006f16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	60a3      	str	r3, [r4, #8]
 8006f1e:	b9e9      	cbnz	r1, 8006f5c <_puts_r+0x78>
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	da2e      	bge.n	8006f82 <_puts_r+0x9e>
 8006f24:	4622      	mov	r2, r4
 8006f26:	210a      	movs	r1, #10
 8006f28:	4628      	mov	r0, r5
 8006f2a:	f000 f85f 	bl	8006fec <__swbuf_r>
 8006f2e:	3001      	adds	r0, #1
 8006f30:	d011      	beq.n	8006f56 <_puts_r+0x72>
 8006f32:	200a      	movs	r0, #10
 8006f34:	e011      	b.n	8006f5a <_puts_r+0x76>
 8006f36:	4b17      	ldr	r3, [pc, #92]	; (8006f94 <_puts_r+0xb0>)
 8006f38:	429c      	cmp	r4, r3
 8006f3a:	d101      	bne.n	8006f40 <_puts_r+0x5c>
 8006f3c:	68ac      	ldr	r4, [r5, #8]
 8006f3e:	e7e3      	b.n	8006f08 <_puts_r+0x24>
 8006f40:	4b15      	ldr	r3, [pc, #84]	; (8006f98 <_puts_r+0xb4>)
 8006f42:	429c      	cmp	r4, r3
 8006f44:	bf08      	it	eq
 8006f46:	68ec      	ldreq	r4, [r5, #12]
 8006f48:	e7de      	b.n	8006f08 <_puts_r+0x24>
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	f000 f89f 	bl	8007090 <__swsetup_r>
 8006f52:	2800      	cmp	r0, #0
 8006f54:	d0dd      	beq.n	8006f12 <_puts_r+0x2e>
 8006f56:	f04f 30ff 	mov.w	r0, #4294967295
 8006f5a:	bd70      	pop	{r4, r5, r6, pc}
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	da04      	bge.n	8006f6a <_puts_r+0x86>
 8006f60:	69a2      	ldr	r2, [r4, #24]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	dc06      	bgt.n	8006f74 <_puts_r+0x90>
 8006f66:	290a      	cmp	r1, #10
 8006f68:	d004      	beq.n	8006f74 <_puts_r+0x90>
 8006f6a:	6823      	ldr	r3, [r4, #0]
 8006f6c:	1c5a      	adds	r2, r3, #1
 8006f6e:	6022      	str	r2, [r4, #0]
 8006f70:	7019      	strb	r1, [r3, #0]
 8006f72:	e7cf      	b.n	8006f14 <_puts_r+0x30>
 8006f74:	4622      	mov	r2, r4
 8006f76:	4628      	mov	r0, r5
 8006f78:	f000 f838 	bl	8006fec <__swbuf_r>
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	d1c9      	bne.n	8006f14 <_puts_r+0x30>
 8006f80:	e7e9      	b.n	8006f56 <_puts_r+0x72>
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	200a      	movs	r0, #10
 8006f86:	1c5a      	adds	r2, r3, #1
 8006f88:	6022      	str	r2, [r4, #0]
 8006f8a:	7018      	strb	r0, [r3, #0]
 8006f8c:	e7e5      	b.n	8006f5a <_puts_r+0x76>
 8006f8e:	bf00      	nop
 8006f90:	080082d8 	.word	0x080082d8
 8006f94:	080082f8 	.word	0x080082f8
 8006f98:	080082b8 	.word	0x080082b8

08006f9c <puts>:
 8006f9c:	4b02      	ldr	r3, [pc, #8]	; (8006fa8 <puts+0xc>)
 8006f9e:	4601      	mov	r1, r0
 8006fa0:	6818      	ldr	r0, [r3, #0]
 8006fa2:	f7ff bf9f 	b.w	8006ee4 <_puts_r>
 8006fa6:	bf00      	nop
 8006fa8:	2000000c 	.word	0x2000000c

08006fac <siprintf>:
 8006fac:	b40e      	push	{r1, r2, r3}
 8006fae:	b500      	push	{lr}
 8006fb0:	b09c      	sub	sp, #112	; 0x70
 8006fb2:	ab1d      	add	r3, sp, #116	; 0x74
 8006fb4:	9002      	str	r0, [sp, #8]
 8006fb6:	9006      	str	r0, [sp, #24]
 8006fb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006fbc:	4809      	ldr	r0, [pc, #36]	; (8006fe4 <siprintf+0x38>)
 8006fbe:	9107      	str	r1, [sp, #28]
 8006fc0:	9104      	str	r1, [sp, #16]
 8006fc2:	4909      	ldr	r1, [pc, #36]	; (8006fe8 <siprintf+0x3c>)
 8006fc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fc8:	9105      	str	r1, [sp, #20]
 8006fca:	6800      	ldr	r0, [r0, #0]
 8006fcc:	9301      	str	r3, [sp, #4]
 8006fce:	a902      	add	r1, sp, #8
 8006fd0:	f000 fbac 	bl	800772c <_svfiprintf_r>
 8006fd4:	9b02      	ldr	r3, [sp, #8]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	701a      	strb	r2, [r3, #0]
 8006fda:	b01c      	add	sp, #112	; 0x70
 8006fdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fe0:	b003      	add	sp, #12
 8006fe2:	4770      	bx	lr
 8006fe4:	2000000c 	.word	0x2000000c
 8006fe8:	ffff0208 	.word	0xffff0208

08006fec <__swbuf_r>:
 8006fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fee:	460e      	mov	r6, r1
 8006ff0:	4614      	mov	r4, r2
 8006ff2:	4605      	mov	r5, r0
 8006ff4:	b118      	cbz	r0, 8006ffe <__swbuf_r+0x12>
 8006ff6:	6983      	ldr	r3, [r0, #24]
 8006ff8:	b90b      	cbnz	r3, 8006ffe <__swbuf_r+0x12>
 8006ffa:	f000 f9a7 	bl	800734c <__sinit>
 8006ffe:	4b21      	ldr	r3, [pc, #132]	; (8007084 <__swbuf_r+0x98>)
 8007000:	429c      	cmp	r4, r3
 8007002:	d12a      	bne.n	800705a <__swbuf_r+0x6e>
 8007004:	686c      	ldr	r4, [r5, #4]
 8007006:	69a3      	ldr	r3, [r4, #24]
 8007008:	60a3      	str	r3, [r4, #8]
 800700a:	89a3      	ldrh	r3, [r4, #12]
 800700c:	071a      	lsls	r2, r3, #28
 800700e:	d52e      	bpl.n	800706e <__swbuf_r+0x82>
 8007010:	6923      	ldr	r3, [r4, #16]
 8007012:	b363      	cbz	r3, 800706e <__swbuf_r+0x82>
 8007014:	6923      	ldr	r3, [r4, #16]
 8007016:	6820      	ldr	r0, [r4, #0]
 8007018:	1ac0      	subs	r0, r0, r3
 800701a:	6963      	ldr	r3, [r4, #20]
 800701c:	b2f6      	uxtb	r6, r6
 800701e:	4283      	cmp	r3, r0
 8007020:	4637      	mov	r7, r6
 8007022:	dc04      	bgt.n	800702e <__swbuf_r+0x42>
 8007024:	4621      	mov	r1, r4
 8007026:	4628      	mov	r0, r5
 8007028:	f000 f926 	bl	8007278 <_fflush_r>
 800702c:	bb28      	cbnz	r0, 800707a <__swbuf_r+0x8e>
 800702e:	68a3      	ldr	r3, [r4, #8]
 8007030:	3b01      	subs	r3, #1
 8007032:	60a3      	str	r3, [r4, #8]
 8007034:	6823      	ldr	r3, [r4, #0]
 8007036:	1c5a      	adds	r2, r3, #1
 8007038:	6022      	str	r2, [r4, #0]
 800703a:	701e      	strb	r6, [r3, #0]
 800703c:	6963      	ldr	r3, [r4, #20]
 800703e:	3001      	adds	r0, #1
 8007040:	4283      	cmp	r3, r0
 8007042:	d004      	beq.n	800704e <__swbuf_r+0x62>
 8007044:	89a3      	ldrh	r3, [r4, #12]
 8007046:	07db      	lsls	r3, r3, #31
 8007048:	d519      	bpl.n	800707e <__swbuf_r+0x92>
 800704a:	2e0a      	cmp	r6, #10
 800704c:	d117      	bne.n	800707e <__swbuf_r+0x92>
 800704e:	4621      	mov	r1, r4
 8007050:	4628      	mov	r0, r5
 8007052:	f000 f911 	bl	8007278 <_fflush_r>
 8007056:	b190      	cbz	r0, 800707e <__swbuf_r+0x92>
 8007058:	e00f      	b.n	800707a <__swbuf_r+0x8e>
 800705a:	4b0b      	ldr	r3, [pc, #44]	; (8007088 <__swbuf_r+0x9c>)
 800705c:	429c      	cmp	r4, r3
 800705e:	d101      	bne.n	8007064 <__swbuf_r+0x78>
 8007060:	68ac      	ldr	r4, [r5, #8]
 8007062:	e7d0      	b.n	8007006 <__swbuf_r+0x1a>
 8007064:	4b09      	ldr	r3, [pc, #36]	; (800708c <__swbuf_r+0xa0>)
 8007066:	429c      	cmp	r4, r3
 8007068:	bf08      	it	eq
 800706a:	68ec      	ldreq	r4, [r5, #12]
 800706c:	e7cb      	b.n	8007006 <__swbuf_r+0x1a>
 800706e:	4621      	mov	r1, r4
 8007070:	4628      	mov	r0, r5
 8007072:	f000 f80d 	bl	8007090 <__swsetup_r>
 8007076:	2800      	cmp	r0, #0
 8007078:	d0cc      	beq.n	8007014 <__swbuf_r+0x28>
 800707a:	f04f 37ff 	mov.w	r7, #4294967295
 800707e:	4638      	mov	r0, r7
 8007080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007082:	bf00      	nop
 8007084:	080082d8 	.word	0x080082d8
 8007088:	080082f8 	.word	0x080082f8
 800708c:	080082b8 	.word	0x080082b8

08007090 <__swsetup_r>:
 8007090:	4b32      	ldr	r3, [pc, #200]	; (800715c <__swsetup_r+0xcc>)
 8007092:	b570      	push	{r4, r5, r6, lr}
 8007094:	681d      	ldr	r5, [r3, #0]
 8007096:	4606      	mov	r6, r0
 8007098:	460c      	mov	r4, r1
 800709a:	b125      	cbz	r5, 80070a6 <__swsetup_r+0x16>
 800709c:	69ab      	ldr	r3, [r5, #24]
 800709e:	b913      	cbnz	r3, 80070a6 <__swsetup_r+0x16>
 80070a0:	4628      	mov	r0, r5
 80070a2:	f000 f953 	bl	800734c <__sinit>
 80070a6:	4b2e      	ldr	r3, [pc, #184]	; (8007160 <__swsetup_r+0xd0>)
 80070a8:	429c      	cmp	r4, r3
 80070aa:	d10f      	bne.n	80070cc <__swsetup_r+0x3c>
 80070ac:	686c      	ldr	r4, [r5, #4]
 80070ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	0715      	lsls	r5, r2, #28
 80070b6:	d42c      	bmi.n	8007112 <__swsetup_r+0x82>
 80070b8:	06d0      	lsls	r0, r2, #27
 80070ba:	d411      	bmi.n	80070e0 <__swsetup_r+0x50>
 80070bc:	2209      	movs	r2, #9
 80070be:	6032      	str	r2, [r6, #0]
 80070c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070c4:	81a3      	strh	r3, [r4, #12]
 80070c6:	f04f 30ff 	mov.w	r0, #4294967295
 80070ca:	e03e      	b.n	800714a <__swsetup_r+0xba>
 80070cc:	4b25      	ldr	r3, [pc, #148]	; (8007164 <__swsetup_r+0xd4>)
 80070ce:	429c      	cmp	r4, r3
 80070d0:	d101      	bne.n	80070d6 <__swsetup_r+0x46>
 80070d2:	68ac      	ldr	r4, [r5, #8]
 80070d4:	e7eb      	b.n	80070ae <__swsetup_r+0x1e>
 80070d6:	4b24      	ldr	r3, [pc, #144]	; (8007168 <__swsetup_r+0xd8>)
 80070d8:	429c      	cmp	r4, r3
 80070da:	bf08      	it	eq
 80070dc:	68ec      	ldreq	r4, [r5, #12]
 80070de:	e7e6      	b.n	80070ae <__swsetup_r+0x1e>
 80070e0:	0751      	lsls	r1, r2, #29
 80070e2:	d512      	bpl.n	800710a <__swsetup_r+0x7a>
 80070e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070e6:	b141      	cbz	r1, 80070fa <__swsetup_r+0x6a>
 80070e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070ec:	4299      	cmp	r1, r3
 80070ee:	d002      	beq.n	80070f6 <__swsetup_r+0x66>
 80070f0:	4630      	mov	r0, r6
 80070f2:	f000 fa19 	bl	8007528 <_free_r>
 80070f6:	2300      	movs	r3, #0
 80070f8:	6363      	str	r3, [r4, #52]	; 0x34
 80070fa:	89a3      	ldrh	r3, [r4, #12]
 80070fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007100:	81a3      	strh	r3, [r4, #12]
 8007102:	2300      	movs	r3, #0
 8007104:	6063      	str	r3, [r4, #4]
 8007106:	6923      	ldr	r3, [r4, #16]
 8007108:	6023      	str	r3, [r4, #0]
 800710a:	89a3      	ldrh	r3, [r4, #12]
 800710c:	f043 0308 	orr.w	r3, r3, #8
 8007110:	81a3      	strh	r3, [r4, #12]
 8007112:	6923      	ldr	r3, [r4, #16]
 8007114:	b94b      	cbnz	r3, 800712a <__swsetup_r+0x9a>
 8007116:	89a3      	ldrh	r3, [r4, #12]
 8007118:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800711c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007120:	d003      	beq.n	800712a <__swsetup_r+0x9a>
 8007122:	4621      	mov	r1, r4
 8007124:	4630      	mov	r0, r6
 8007126:	f000 f9bf 	bl	80074a8 <__smakebuf_r>
 800712a:	89a2      	ldrh	r2, [r4, #12]
 800712c:	f012 0301 	ands.w	r3, r2, #1
 8007130:	d00c      	beq.n	800714c <__swsetup_r+0xbc>
 8007132:	2300      	movs	r3, #0
 8007134:	60a3      	str	r3, [r4, #8]
 8007136:	6963      	ldr	r3, [r4, #20]
 8007138:	425b      	negs	r3, r3
 800713a:	61a3      	str	r3, [r4, #24]
 800713c:	6923      	ldr	r3, [r4, #16]
 800713e:	b953      	cbnz	r3, 8007156 <__swsetup_r+0xc6>
 8007140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007144:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007148:	d1ba      	bne.n	80070c0 <__swsetup_r+0x30>
 800714a:	bd70      	pop	{r4, r5, r6, pc}
 800714c:	0792      	lsls	r2, r2, #30
 800714e:	bf58      	it	pl
 8007150:	6963      	ldrpl	r3, [r4, #20]
 8007152:	60a3      	str	r3, [r4, #8]
 8007154:	e7f2      	b.n	800713c <__swsetup_r+0xac>
 8007156:	2000      	movs	r0, #0
 8007158:	e7f7      	b.n	800714a <__swsetup_r+0xba>
 800715a:	bf00      	nop
 800715c:	2000000c 	.word	0x2000000c
 8007160:	080082d8 	.word	0x080082d8
 8007164:	080082f8 	.word	0x080082f8
 8007168:	080082b8 	.word	0x080082b8

0800716c <__sflush_r>:
 800716c:	898a      	ldrh	r2, [r1, #12]
 800716e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007172:	4605      	mov	r5, r0
 8007174:	0710      	lsls	r0, r2, #28
 8007176:	460c      	mov	r4, r1
 8007178:	d458      	bmi.n	800722c <__sflush_r+0xc0>
 800717a:	684b      	ldr	r3, [r1, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	dc05      	bgt.n	800718c <__sflush_r+0x20>
 8007180:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007182:	2b00      	cmp	r3, #0
 8007184:	dc02      	bgt.n	800718c <__sflush_r+0x20>
 8007186:	2000      	movs	r0, #0
 8007188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800718c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800718e:	2e00      	cmp	r6, #0
 8007190:	d0f9      	beq.n	8007186 <__sflush_r+0x1a>
 8007192:	2300      	movs	r3, #0
 8007194:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007198:	682f      	ldr	r7, [r5, #0]
 800719a:	6a21      	ldr	r1, [r4, #32]
 800719c:	602b      	str	r3, [r5, #0]
 800719e:	d032      	beq.n	8007206 <__sflush_r+0x9a>
 80071a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80071a2:	89a3      	ldrh	r3, [r4, #12]
 80071a4:	075a      	lsls	r2, r3, #29
 80071a6:	d505      	bpl.n	80071b4 <__sflush_r+0x48>
 80071a8:	6863      	ldr	r3, [r4, #4]
 80071aa:	1ac0      	subs	r0, r0, r3
 80071ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071ae:	b10b      	cbz	r3, 80071b4 <__sflush_r+0x48>
 80071b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071b2:	1ac0      	subs	r0, r0, r3
 80071b4:	2300      	movs	r3, #0
 80071b6:	4602      	mov	r2, r0
 80071b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071ba:	6a21      	ldr	r1, [r4, #32]
 80071bc:	4628      	mov	r0, r5
 80071be:	47b0      	blx	r6
 80071c0:	1c43      	adds	r3, r0, #1
 80071c2:	89a3      	ldrh	r3, [r4, #12]
 80071c4:	d106      	bne.n	80071d4 <__sflush_r+0x68>
 80071c6:	6829      	ldr	r1, [r5, #0]
 80071c8:	291d      	cmp	r1, #29
 80071ca:	d848      	bhi.n	800725e <__sflush_r+0xf2>
 80071cc:	4a29      	ldr	r2, [pc, #164]	; (8007274 <__sflush_r+0x108>)
 80071ce:	40ca      	lsrs	r2, r1
 80071d0:	07d6      	lsls	r6, r2, #31
 80071d2:	d544      	bpl.n	800725e <__sflush_r+0xf2>
 80071d4:	2200      	movs	r2, #0
 80071d6:	6062      	str	r2, [r4, #4]
 80071d8:	04d9      	lsls	r1, r3, #19
 80071da:	6922      	ldr	r2, [r4, #16]
 80071dc:	6022      	str	r2, [r4, #0]
 80071de:	d504      	bpl.n	80071ea <__sflush_r+0x7e>
 80071e0:	1c42      	adds	r2, r0, #1
 80071e2:	d101      	bne.n	80071e8 <__sflush_r+0x7c>
 80071e4:	682b      	ldr	r3, [r5, #0]
 80071e6:	b903      	cbnz	r3, 80071ea <__sflush_r+0x7e>
 80071e8:	6560      	str	r0, [r4, #84]	; 0x54
 80071ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071ec:	602f      	str	r7, [r5, #0]
 80071ee:	2900      	cmp	r1, #0
 80071f0:	d0c9      	beq.n	8007186 <__sflush_r+0x1a>
 80071f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071f6:	4299      	cmp	r1, r3
 80071f8:	d002      	beq.n	8007200 <__sflush_r+0x94>
 80071fa:	4628      	mov	r0, r5
 80071fc:	f000 f994 	bl	8007528 <_free_r>
 8007200:	2000      	movs	r0, #0
 8007202:	6360      	str	r0, [r4, #52]	; 0x34
 8007204:	e7c0      	b.n	8007188 <__sflush_r+0x1c>
 8007206:	2301      	movs	r3, #1
 8007208:	4628      	mov	r0, r5
 800720a:	47b0      	blx	r6
 800720c:	1c41      	adds	r1, r0, #1
 800720e:	d1c8      	bne.n	80071a2 <__sflush_r+0x36>
 8007210:	682b      	ldr	r3, [r5, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0c5      	beq.n	80071a2 <__sflush_r+0x36>
 8007216:	2b1d      	cmp	r3, #29
 8007218:	d001      	beq.n	800721e <__sflush_r+0xb2>
 800721a:	2b16      	cmp	r3, #22
 800721c:	d101      	bne.n	8007222 <__sflush_r+0xb6>
 800721e:	602f      	str	r7, [r5, #0]
 8007220:	e7b1      	b.n	8007186 <__sflush_r+0x1a>
 8007222:	89a3      	ldrh	r3, [r4, #12]
 8007224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007228:	81a3      	strh	r3, [r4, #12]
 800722a:	e7ad      	b.n	8007188 <__sflush_r+0x1c>
 800722c:	690f      	ldr	r7, [r1, #16]
 800722e:	2f00      	cmp	r7, #0
 8007230:	d0a9      	beq.n	8007186 <__sflush_r+0x1a>
 8007232:	0793      	lsls	r3, r2, #30
 8007234:	680e      	ldr	r6, [r1, #0]
 8007236:	bf08      	it	eq
 8007238:	694b      	ldreq	r3, [r1, #20]
 800723a:	600f      	str	r7, [r1, #0]
 800723c:	bf18      	it	ne
 800723e:	2300      	movne	r3, #0
 8007240:	eba6 0807 	sub.w	r8, r6, r7
 8007244:	608b      	str	r3, [r1, #8]
 8007246:	f1b8 0f00 	cmp.w	r8, #0
 800724a:	dd9c      	ble.n	8007186 <__sflush_r+0x1a>
 800724c:	4643      	mov	r3, r8
 800724e:	463a      	mov	r2, r7
 8007250:	6a21      	ldr	r1, [r4, #32]
 8007252:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007254:	4628      	mov	r0, r5
 8007256:	47b0      	blx	r6
 8007258:	2800      	cmp	r0, #0
 800725a:	dc06      	bgt.n	800726a <__sflush_r+0xfe>
 800725c:	89a3      	ldrh	r3, [r4, #12]
 800725e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007262:	81a3      	strh	r3, [r4, #12]
 8007264:	f04f 30ff 	mov.w	r0, #4294967295
 8007268:	e78e      	b.n	8007188 <__sflush_r+0x1c>
 800726a:	4407      	add	r7, r0
 800726c:	eba8 0800 	sub.w	r8, r8, r0
 8007270:	e7e9      	b.n	8007246 <__sflush_r+0xda>
 8007272:	bf00      	nop
 8007274:	20400001 	.word	0x20400001

08007278 <_fflush_r>:
 8007278:	b538      	push	{r3, r4, r5, lr}
 800727a:	690b      	ldr	r3, [r1, #16]
 800727c:	4605      	mov	r5, r0
 800727e:	460c      	mov	r4, r1
 8007280:	b1db      	cbz	r3, 80072ba <_fflush_r+0x42>
 8007282:	b118      	cbz	r0, 800728c <_fflush_r+0x14>
 8007284:	6983      	ldr	r3, [r0, #24]
 8007286:	b90b      	cbnz	r3, 800728c <_fflush_r+0x14>
 8007288:	f000 f860 	bl	800734c <__sinit>
 800728c:	4b0c      	ldr	r3, [pc, #48]	; (80072c0 <_fflush_r+0x48>)
 800728e:	429c      	cmp	r4, r3
 8007290:	d109      	bne.n	80072a6 <_fflush_r+0x2e>
 8007292:	686c      	ldr	r4, [r5, #4]
 8007294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007298:	b17b      	cbz	r3, 80072ba <_fflush_r+0x42>
 800729a:	4621      	mov	r1, r4
 800729c:	4628      	mov	r0, r5
 800729e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072a2:	f7ff bf63 	b.w	800716c <__sflush_r>
 80072a6:	4b07      	ldr	r3, [pc, #28]	; (80072c4 <_fflush_r+0x4c>)
 80072a8:	429c      	cmp	r4, r3
 80072aa:	d101      	bne.n	80072b0 <_fflush_r+0x38>
 80072ac:	68ac      	ldr	r4, [r5, #8]
 80072ae:	e7f1      	b.n	8007294 <_fflush_r+0x1c>
 80072b0:	4b05      	ldr	r3, [pc, #20]	; (80072c8 <_fflush_r+0x50>)
 80072b2:	429c      	cmp	r4, r3
 80072b4:	bf08      	it	eq
 80072b6:	68ec      	ldreq	r4, [r5, #12]
 80072b8:	e7ec      	b.n	8007294 <_fflush_r+0x1c>
 80072ba:	2000      	movs	r0, #0
 80072bc:	bd38      	pop	{r3, r4, r5, pc}
 80072be:	bf00      	nop
 80072c0:	080082d8 	.word	0x080082d8
 80072c4:	080082f8 	.word	0x080082f8
 80072c8:	080082b8 	.word	0x080082b8

080072cc <std>:
 80072cc:	2300      	movs	r3, #0
 80072ce:	b510      	push	{r4, lr}
 80072d0:	4604      	mov	r4, r0
 80072d2:	e9c0 3300 	strd	r3, r3, [r0]
 80072d6:	6083      	str	r3, [r0, #8]
 80072d8:	8181      	strh	r1, [r0, #12]
 80072da:	6643      	str	r3, [r0, #100]	; 0x64
 80072dc:	81c2      	strh	r2, [r0, #14]
 80072de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072e2:	6183      	str	r3, [r0, #24]
 80072e4:	4619      	mov	r1, r3
 80072e6:	2208      	movs	r2, #8
 80072e8:	305c      	adds	r0, #92	; 0x5c
 80072ea:	f7ff fdf3 	bl	8006ed4 <memset>
 80072ee:	4b05      	ldr	r3, [pc, #20]	; (8007304 <std+0x38>)
 80072f0:	6263      	str	r3, [r4, #36]	; 0x24
 80072f2:	4b05      	ldr	r3, [pc, #20]	; (8007308 <std+0x3c>)
 80072f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80072f6:	4b05      	ldr	r3, [pc, #20]	; (800730c <std+0x40>)
 80072f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80072fa:	4b05      	ldr	r3, [pc, #20]	; (8007310 <std+0x44>)
 80072fc:	6224      	str	r4, [r4, #32]
 80072fe:	6323      	str	r3, [r4, #48]	; 0x30
 8007300:	bd10      	pop	{r4, pc}
 8007302:	bf00      	nop
 8007304:	08007c4d 	.word	0x08007c4d
 8007308:	08007c6f 	.word	0x08007c6f
 800730c:	08007ca7 	.word	0x08007ca7
 8007310:	08007ccb 	.word	0x08007ccb

08007314 <_cleanup_r>:
 8007314:	4901      	ldr	r1, [pc, #4]	; (800731c <_cleanup_r+0x8>)
 8007316:	f000 b885 	b.w	8007424 <_fwalk_reent>
 800731a:	bf00      	nop
 800731c:	08007279 	.word	0x08007279

08007320 <__sfmoreglue>:
 8007320:	b570      	push	{r4, r5, r6, lr}
 8007322:	1e4a      	subs	r2, r1, #1
 8007324:	2568      	movs	r5, #104	; 0x68
 8007326:	4355      	muls	r5, r2
 8007328:	460e      	mov	r6, r1
 800732a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800732e:	f000 f949 	bl	80075c4 <_malloc_r>
 8007332:	4604      	mov	r4, r0
 8007334:	b140      	cbz	r0, 8007348 <__sfmoreglue+0x28>
 8007336:	2100      	movs	r1, #0
 8007338:	e9c0 1600 	strd	r1, r6, [r0]
 800733c:	300c      	adds	r0, #12
 800733e:	60a0      	str	r0, [r4, #8]
 8007340:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007344:	f7ff fdc6 	bl	8006ed4 <memset>
 8007348:	4620      	mov	r0, r4
 800734a:	bd70      	pop	{r4, r5, r6, pc}

0800734c <__sinit>:
 800734c:	6983      	ldr	r3, [r0, #24]
 800734e:	b510      	push	{r4, lr}
 8007350:	4604      	mov	r4, r0
 8007352:	bb33      	cbnz	r3, 80073a2 <__sinit+0x56>
 8007354:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007358:	6503      	str	r3, [r0, #80]	; 0x50
 800735a:	4b12      	ldr	r3, [pc, #72]	; (80073a4 <__sinit+0x58>)
 800735c:	4a12      	ldr	r2, [pc, #72]	; (80073a8 <__sinit+0x5c>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6282      	str	r2, [r0, #40]	; 0x28
 8007362:	4298      	cmp	r0, r3
 8007364:	bf04      	itt	eq
 8007366:	2301      	moveq	r3, #1
 8007368:	6183      	streq	r3, [r0, #24]
 800736a:	f000 f81f 	bl	80073ac <__sfp>
 800736e:	6060      	str	r0, [r4, #4]
 8007370:	4620      	mov	r0, r4
 8007372:	f000 f81b 	bl	80073ac <__sfp>
 8007376:	60a0      	str	r0, [r4, #8]
 8007378:	4620      	mov	r0, r4
 800737a:	f000 f817 	bl	80073ac <__sfp>
 800737e:	2200      	movs	r2, #0
 8007380:	60e0      	str	r0, [r4, #12]
 8007382:	2104      	movs	r1, #4
 8007384:	6860      	ldr	r0, [r4, #4]
 8007386:	f7ff ffa1 	bl	80072cc <std>
 800738a:	2201      	movs	r2, #1
 800738c:	2109      	movs	r1, #9
 800738e:	68a0      	ldr	r0, [r4, #8]
 8007390:	f7ff ff9c 	bl	80072cc <std>
 8007394:	2202      	movs	r2, #2
 8007396:	2112      	movs	r1, #18
 8007398:	68e0      	ldr	r0, [r4, #12]
 800739a:	f7ff ff97 	bl	80072cc <std>
 800739e:	2301      	movs	r3, #1
 80073a0:	61a3      	str	r3, [r4, #24]
 80073a2:	bd10      	pop	{r4, pc}
 80073a4:	080082b4 	.word	0x080082b4
 80073a8:	08007315 	.word	0x08007315

080073ac <__sfp>:
 80073ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ae:	4b1b      	ldr	r3, [pc, #108]	; (800741c <__sfp+0x70>)
 80073b0:	681e      	ldr	r6, [r3, #0]
 80073b2:	69b3      	ldr	r3, [r6, #24]
 80073b4:	4607      	mov	r7, r0
 80073b6:	b913      	cbnz	r3, 80073be <__sfp+0x12>
 80073b8:	4630      	mov	r0, r6
 80073ba:	f7ff ffc7 	bl	800734c <__sinit>
 80073be:	3648      	adds	r6, #72	; 0x48
 80073c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80073c4:	3b01      	subs	r3, #1
 80073c6:	d503      	bpl.n	80073d0 <__sfp+0x24>
 80073c8:	6833      	ldr	r3, [r6, #0]
 80073ca:	b133      	cbz	r3, 80073da <__sfp+0x2e>
 80073cc:	6836      	ldr	r6, [r6, #0]
 80073ce:	e7f7      	b.n	80073c0 <__sfp+0x14>
 80073d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80073d4:	b16d      	cbz	r5, 80073f2 <__sfp+0x46>
 80073d6:	3468      	adds	r4, #104	; 0x68
 80073d8:	e7f4      	b.n	80073c4 <__sfp+0x18>
 80073da:	2104      	movs	r1, #4
 80073dc:	4638      	mov	r0, r7
 80073de:	f7ff ff9f 	bl	8007320 <__sfmoreglue>
 80073e2:	6030      	str	r0, [r6, #0]
 80073e4:	2800      	cmp	r0, #0
 80073e6:	d1f1      	bne.n	80073cc <__sfp+0x20>
 80073e8:	230c      	movs	r3, #12
 80073ea:	603b      	str	r3, [r7, #0]
 80073ec:	4604      	mov	r4, r0
 80073ee:	4620      	mov	r0, r4
 80073f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073f2:	4b0b      	ldr	r3, [pc, #44]	; (8007420 <__sfp+0x74>)
 80073f4:	6665      	str	r5, [r4, #100]	; 0x64
 80073f6:	e9c4 5500 	strd	r5, r5, [r4]
 80073fa:	60a5      	str	r5, [r4, #8]
 80073fc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007400:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007404:	2208      	movs	r2, #8
 8007406:	4629      	mov	r1, r5
 8007408:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800740c:	f7ff fd62 	bl	8006ed4 <memset>
 8007410:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007414:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007418:	e7e9      	b.n	80073ee <__sfp+0x42>
 800741a:	bf00      	nop
 800741c:	080082b4 	.word	0x080082b4
 8007420:	ffff0001 	.word	0xffff0001

08007424 <_fwalk_reent>:
 8007424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007428:	4680      	mov	r8, r0
 800742a:	4689      	mov	r9, r1
 800742c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007430:	2600      	movs	r6, #0
 8007432:	b914      	cbnz	r4, 800743a <_fwalk_reent+0x16>
 8007434:	4630      	mov	r0, r6
 8007436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800743a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800743e:	3f01      	subs	r7, #1
 8007440:	d501      	bpl.n	8007446 <_fwalk_reent+0x22>
 8007442:	6824      	ldr	r4, [r4, #0]
 8007444:	e7f5      	b.n	8007432 <_fwalk_reent+0xe>
 8007446:	89ab      	ldrh	r3, [r5, #12]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d907      	bls.n	800745c <_fwalk_reent+0x38>
 800744c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007450:	3301      	adds	r3, #1
 8007452:	d003      	beq.n	800745c <_fwalk_reent+0x38>
 8007454:	4629      	mov	r1, r5
 8007456:	4640      	mov	r0, r8
 8007458:	47c8      	blx	r9
 800745a:	4306      	orrs	r6, r0
 800745c:	3568      	adds	r5, #104	; 0x68
 800745e:	e7ee      	b.n	800743e <_fwalk_reent+0x1a>

08007460 <__swhatbuf_r>:
 8007460:	b570      	push	{r4, r5, r6, lr}
 8007462:	460e      	mov	r6, r1
 8007464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007468:	2900      	cmp	r1, #0
 800746a:	b096      	sub	sp, #88	; 0x58
 800746c:	4614      	mov	r4, r2
 800746e:	461d      	mov	r5, r3
 8007470:	da07      	bge.n	8007482 <__swhatbuf_r+0x22>
 8007472:	2300      	movs	r3, #0
 8007474:	602b      	str	r3, [r5, #0]
 8007476:	89b3      	ldrh	r3, [r6, #12]
 8007478:	061a      	lsls	r2, r3, #24
 800747a:	d410      	bmi.n	800749e <__swhatbuf_r+0x3e>
 800747c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007480:	e00e      	b.n	80074a0 <__swhatbuf_r+0x40>
 8007482:	466a      	mov	r2, sp
 8007484:	f000 fc48 	bl	8007d18 <_fstat_r>
 8007488:	2800      	cmp	r0, #0
 800748a:	dbf2      	blt.n	8007472 <__swhatbuf_r+0x12>
 800748c:	9a01      	ldr	r2, [sp, #4]
 800748e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007492:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007496:	425a      	negs	r2, r3
 8007498:	415a      	adcs	r2, r3
 800749a:	602a      	str	r2, [r5, #0]
 800749c:	e7ee      	b.n	800747c <__swhatbuf_r+0x1c>
 800749e:	2340      	movs	r3, #64	; 0x40
 80074a0:	2000      	movs	r0, #0
 80074a2:	6023      	str	r3, [r4, #0]
 80074a4:	b016      	add	sp, #88	; 0x58
 80074a6:	bd70      	pop	{r4, r5, r6, pc}

080074a8 <__smakebuf_r>:
 80074a8:	898b      	ldrh	r3, [r1, #12]
 80074aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074ac:	079d      	lsls	r5, r3, #30
 80074ae:	4606      	mov	r6, r0
 80074b0:	460c      	mov	r4, r1
 80074b2:	d507      	bpl.n	80074c4 <__smakebuf_r+0x1c>
 80074b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80074b8:	6023      	str	r3, [r4, #0]
 80074ba:	6123      	str	r3, [r4, #16]
 80074bc:	2301      	movs	r3, #1
 80074be:	6163      	str	r3, [r4, #20]
 80074c0:	b002      	add	sp, #8
 80074c2:	bd70      	pop	{r4, r5, r6, pc}
 80074c4:	ab01      	add	r3, sp, #4
 80074c6:	466a      	mov	r2, sp
 80074c8:	f7ff ffca 	bl	8007460 <__swhatbuf_r>
 80074cc:	9900      	ldr	r1, [sp, #0]
 80074ce:	4605      	mov	r5, r0
 80074d0:	4630      	mov	r0, r6
 80074d2:	f000 f877 	bl	80075c4 <_malloc_r>
 80074d6:	b948      	cbnz	r0, 80074ec <__smakebuf_r+0x44>
 80074d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074dc:	059a      	lsls	r2, r3, #22
 80074de:	d4ef      	bmi.n	80074c0 <__smakebuf_r+0x18>
 80074e0:	f023 0303 	bic.w	r3, r3, #3
 80074e4:	f043 0302 	orr.w	r3, r3, #2
 80074e8:	81a3      	strh	r3, [r4, #12]
 80074ea:	e7e3      	b.n	80074b4 <__smakebuf_r+0xc>
 80074ec:	4b0d      	ldr	r3, [pc, #52]	; (8007524 <__smakebuf_r+0x7c>)
 80074ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80074f0:	89a3      	ldrh	r3, [r4, #12]
 80074f2:	6020      	str	r0, [r4, #0]
 80074f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074f8:	81a3      	strh	r3, [r4, #12]
 80074fa:	9b00      	ldr	r3, [sp, #0]
 80074fc:	6163      	str	r3, [r4, #20]
 80074fe:	9b01      	ldr	r3, [sp, #4]
 8007500:	6120      	str	r0, [r4, #16]
 8007502:	b15b      	cbz	r3, 800751c <__smakebuf_r+0x74>
 8007504:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007508:	4630      	mov	r0, r6
 800750a:	f000 fc17 	bl	8007d3c <_isatty_r>
 800750e:	b128      	cbz	r0, 800751c <__smakebuf_r+0x74>
 8007510:	89a3      	ldrh	r3, [r4, #12]
 8007512:	f023 0303 	bic.w	r3, r3, #3
 8007516:	f043 0301 	orr.w	r3, r3, #1
 800751a:	81a3      	strh	r3, [r4, #12]
 800751c:	89a3      	ldrh	r3, [r4, #12]
 800751e:	431d      	orrs	r5, r3
 8007520:	81a5      	strh	r5, [r4, #12]
 8007522:	e7cd      	b.n	80074c0 <__smakebuf_r+0x18>
 8007524:	08007315 	.word	0x08007315

08007528 <_free_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4605      	mov	r5, r0
 800752c:	2900      	cmp	r1, #0
 800752e:	d045      	beq.n	80075bc <_free_r+0x94>
 8007530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007534:	1f0c      	subs	r4, r1, #4
 8007536:	2b00      	cmp	r3, #0
 8007538:	bfb8      	it	lt
 800753a:	18e4      	addlt	r4, r4, r3
 800753c:	f000 fc44 	bl	8007dc8 <__malloc_lock>
 8007540:	4a1f      	ldr	r2, [pc, #124]	; (80075c0 <_free_r+0x98>)
 8007542:	6813      	ldr	r3, [r2, #0]
 8007544:	4610      	mov	r0, r2
 8007546:	b933      	cbnz	r3, 8007556 <_free_r+0x2e>
 8007548:	6063      	str	r3, [r4, #4]
 800754a:	6014      	str	r4, [r2, #0]
 800754c:	4628      	mov	r0, r5
 800754e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007552:	f000 bc3a 	b.w	8007dca <__malloc_unlock>
 8007556:	42a3      	cmp	r3, r4
 8007558:	d90c      	bls.n	8007574 <_free_r+0x4c>
 800755a:	6821      	ldr	r1, [r4, #0]
 800755c:	1862      	adds	r2, r4, r1
 800755e:	4293      	cmp	r3, r2
 8007560:	bf04      	itt	eq
 8007562:	681a      	ldreq	r2, [r3, #0]
 8007564:	685b      	ldreq	r3, [r3, #4]
 8007566:	6063      	str	r3, [r4, #4]
 8007568:	bf04      	itt	eq
 800756a:	1852      	addeq	r2, r2, r1
 800756c:	6022      	streq	r2, [r4, #0]
 800756e:	6004      	str	r4, [r0, #0]
 8007570:	e7ec      	b.n	800754c <_free_r+0x24>
 8007572:	4613      	mov	r3, r2
 8007574:	685a      	ldr	r2, [r3, #4]
 8007576:	b10a      	cbz	r2, 800757c <_free_r+0x54>
 8007578:	42a2      	cmp	r2, r4
 800757a:	d9fa      	bls.n	8007572 <_free_r+0x4a>
 800757c:	6819      	ldr	r1, [r3, #0]
 800757e:	1858      	adds	r0, r3, r1
 8007580:	42a0      	cmp	r0, r4
 8007582:	d10b      	bne.n	800759c <_free_r+0x74>
 8007584:	6820      	ldr	r0, [r4, #0]
 8007586:	4401      	add	r1, r0
 8007588:	1858      	adds	r0, r3, r1
 800758a:	4282      	cmp	r2, r0
 800758c:	6019      	str	r1, [r3, #0]
 800758e:	d1dd      	bne.n	800754c <_free_r+0x24>
 8007590:	6810      	ldr	r0, [r2, #0]
 8007592:	6852      	ldr	r2, [r2, #4]
 8007594:	605a      	str	r2, [r3, #4]
 8007596:	4401      	add	r1, r0
 8007598:	6019      	str	r1, [r3, #0]
 800759a:	e7d7      	b.n	800754c <_free_r+0x24>
 800759c:	d902      	bls.n	80075a4 <_free_r+0x7c>
 800759e:	230c      	movs	r3, #12
 80075a0:	602b      	str	r3, [r5, #0]
 80075a2:	e7d3      	b.n	800754c <_free_r+0x24>
 80075a4:	6820      	ldr	r0, [r4, #0]
 80075a6:	1821      	adds	r1, r4, r0
 80075a8:	428a      	cmp	r2, r1
 80075aa:	bf04      	itt	eq
 80075ac:	6811      	ldreq	r1, [r2, #0]
 80075ae:	6852      	ldreq	r2, [r2, #4]
 80075b0:	6062      	str	r2, [r4, #4]
 80075b2:	bf04      	itt	eq
 80075b4:	1809      	addeq	r1, r1, r0
 80075b6:	6021      	streq	r1, [r4, #0]
 80075b8:	605c      	str	r4, [r3, #4]
 80075ba:	e7c7      	b.n	800754c <_free_r+0x24>
 80075bc:	bd38      	pop	{r3, r4, r5, pc}
 80075be:	bf00      	nop
 80075c0:	20000098 	.word	0x20000098

080075c4 <_malloc_r>:
 80075c4:	b570      	push	{r4, r5, r6, lr}
 80075c6:	1ccd      	adds	r5, r1, #3
 80075c8:	f025 0503 	bic.w	r5, r5, #3
 80075cc:	3508      	adds	r5, #8
 80075ce:	2d0c      	cmp	r5, #12
 80075d0:	bf38      	it	cc
 80075d2:	250c      	movcc	r5, #12
 80075d4:	2d00      	cmp	r5, #0
 80075d6:	4606      	mov	r6, r0
 80075d8:	db01      	blt.n	80075de <_malloc_r+0x1a>
 80075da:	42a9      	cmp	r1, r5
 80075dc:	d903      	bls.n	80075e6 <_malloc_r+0x22>
 80075de:	230c      	movs	r3, #12
 80075e0:	6033      	str	r3, [r6, #0]
 80075e2:	2000      	movs	r0, #0
 80075e4:	bd70      	pop	{r4, r5, r6, pc}
 80075e6:	f000 fbef 	bl	8007dc8 <__malloc_lock>
 80075ea:	4a21      	ldr	r2, [pc, #132]	; (8007670 <_malloc_r+0xac>)
 80075ec:	6814      	ldr	r4, [r2, #0]
 80075ee:	4621      	mov	r1, r4
 80075f0:	b991      	cbnz	r1, 8007618 <_malloc_r+0x54>
 80075f2:	4c20      	ldr	r4, [pc, #128]	; (8007674 <_malloc_r+0xb0>)
 80075f4:	6823      	ldr	r3, [r4, #0]
 80075f6:	b91b      	cbnz	r3, 8007600 <_malloc_r+0x3c>
 80075f8:	4630      	mov	r0, r6
 80075fa:	f000 fb17 	bl	8007c2c <_sbrk_r>
 80075fe:	6020      	str	r0, [r4, #0]
 8007600:	4629      	mov	r1, r5
 8007602:	4630      	mov	r0, r6
 8007604:	f000 fb12 	bl	8007c2c <_sbrk_r>
 8007608:	1c43      	adds	r3, r0, #1
 800760a:	d124      	bne.n	8007656 <_malloc_r+0x92>
 800760c:	230c      	movs	r3, #12
 800760e:	6033      	str	r3, [r6, #0]
 8007610:	4630      	mov	r0, r6
 8007612:	f000 fbda 	bl	8007dca <__malloc_unlock>
 8007616:	e7e4      	b.n	80075e2 <_malloc_r+0x1e>
 8007618:	680b      	ldr	r3, [r1, #0]
 800761a:	1b5b      	subs	r3, r3, r5
 800761c:	d418      	bmi.n	8007650 <_malloc_r+0x8c>
 800761e:	2b0b      	cmp	r3, #11
 8007620:	d90f      	bls.n	8007642 <_malloc_r+0x7e>
 8007622:	600b      	str	r3, [r1, #0]
 8007624:	50cd      	str	r5, [r1, r3]
 8007626:	18cc      	adds	r4, r1, r3
 8007628:	4630      	mov	r0, r6
 800762a:	f000 fbce 	bl	8007dca <__malloc_unlock>
 800762e:	f104 000b 	add.w	r0, r4, #11
 8007632:	1d23      	adds	r3, r4, #4
 8007634:	f020 0007 	bic.w	r0, r0, #7
 8007638:	1ac3      	subs	r3, r0, r3
 800763a:	d0d3      	beq.n	80075e4 <_malloc_r+0x20>
 800763c:	425a      	negs	r2, r3
 800763e:	50e2      	str	r2, [r4, r3]
 8007640:	e7d0      	b.n	80075e4 <_malloc_r+0x20>
 8007642:	428c      	cmp	r4, r1
 8007644:	684b      	ldr	r3, [r1, #4]
 8007646:	bf16      	itet	ne
 8007648:	6063      	strne	r3, [r4, #4]
 800764a:	6013      	streq	r3, [r2, #0]
 800764c:	460c      	movne	r4, r1
 800764e:	e7eb      	b.n	8007628 <_malloc_r+0x64>
 8007650:	460c      	mov	r4, r1
 8007652:	6849      	ldr	r1, [r1, #4]
 8007654:	e7cc      	b.n	80075f0 <_malloc_r+0x2c>
 8007656:	1cc4      	adds	r4, r0, #3
 8007658:	f024 0403 	bic.w	r4, r4, #3
 800765c:	42a0      	cmp	r0, r4
 800765e:	d005      	beq.n	800766c <_malloc_r+0xa8>
 8007660:	1a21      	subs	r1, r4, r0
 8007662:	4630      	mov	r0, r6
 8007664:	f000 fae2 	bl	8007c2c <_sbrk_r>
 8007668:	3001      	adds	r0, #1
 800766a:	d0cf      	beq.n	800760c <_malloc_r+0x48>
 800766c:	6025      	str	r5, [r4, #0]
 800766e:	e7db      	b.n	8007628 <_malloc_r+0x64>
 8007670:	20000098 	.word	0x20000098
 8007674:	2000009c 	.word	0x2000009c

08007678 <__ssputs_r>:
 8007678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800767c:	688e      	ldr	r6, [r1, #8]
 800767e:	429e      	cmp	r6, r3
 8007680:	4682      	mov	sl, r0
 8007682:	460c      	mov	r4, r1
 8007684:	4690      	mov	r8, r2
 8007686:	4699      	mov	r9, r3
 8007688:	d837      	bhi.n	80076fa <__ssputs_r+0x82>
 800768a:	898a      	ldrh	r2, [r1, #12]
 800768c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007690:	d031      	beq.n	80076f6 <__ssputs_r+0x7e>
 8007692:	6825      	ldr	r5, [r4, #0]
 8007694:	6909      	ldr	r1, [r1, #16]
 8007696:	1a6f      	subs	r7, r5, r1
 8007698:	6965      	ldr	r5, [r4, #20]
 800769a:	2302      	movs	r3, #2
 800769c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076a0:	fb95 f5f3 	sdiv	r5, r5, r3
 80076a4:	f109 0301 	add.w	r3, r9, #1
 80076a8:	443b      	add	r3, r7
 80076aa:	429d      	cmp	r5, r3
 80076ac:	bf38      	it	cc
 80076ae:	461d      	movcc	r5, r3
 80076b0:	0553      	lsls	r3, r2, #21
 80076b2:	d530      	bpl.n	8007716 <__ssputs_r+0x9e>
 80076b4:	4629      	mov	r1, r5
 80076b6:	f7ff ff85 	bl	80075c4 <_malloc_r>
 80076ba:	4606      	mov	r6, r0
 80076bc:	b950      	cbnz	r0, 80076d4 <__ssputs_r+0x5c>
 80076be:	230c      	movs	r3, #12
 80076c0:	f8ca 3000 	str.w	r3, [sl]
 80076c4:	89a3      	ldrh	r3, [r4, #12]
 80076c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ca:	81a3      	strh	r3, [r4, #12]
 80076cc:	f04f 30ff 	mov.w	r0, #4294967295
 80076d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076d4:	463a      	mov	r2, r7
 80076d6:	6921      	ldr	r1, [r4, #16]
 80076d8:	f000 fb52 	bl	8007d80 <memcpy>
 80076dc:	89a3      	ldrh	r3, [r4, #12]
 80076de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80076e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076e6:	81a3      	strh	r3, [r4, #12]
 80076e8:	6126      	str	r6, [r4, #16]
 80076ea:	6165      	str	r5, [r4, #20]
 80076ec:	443e      	add	r6, r7
 80076ee:	1bed      	subs	r5, r5, r7
 80076f0:	6026      	str	r6, [r4, #0]
 80076f2:	60a5      	str	r5, [r4, #8]
 80076f4:	464e      	mov	r6, r9
 80076f6:	454e      	cmp	r6, r9
 80076f8:	d900      	bls.n	80076fc <__ssputs_r+0x84>
 80076fa:	464e      	mov	r6, r9
 80076fc:	4632      	mov	r2, r6
 80076fe:	4641      	mov	r1, r8
 8007700:	6820      	ldr	r0, [r4, #0]
 8007702:	f000 fb48 	bl	8007d96 <memmove>
 8007706:	68a3      	ldr	r3, [r4, #8]
 8007708:	1b9b      	subs	r3, r3, r6
 800770a:	60a3      	str	r3, [r4, #8]
 800770c:	6823      	ldr	r3, [r4, #0]
 800770e:	441e      	add	r6, r3
 8007710:	6026      	str	r6, [r4, #0]
 8007712:	2000      	movs	r0, #0
 8007714:	e7dc      	b.n	80076d0 <__ssputs_r+0x58>
 8007716:	462a      	mov	r2, r5
 8007718:	f000 fb58 	bl	8007dcc <_realloc_r>
 800771c:	4606      	mov	r6, r0
 800771e:	2800      	cmp	r0, #0
 8007720:	d1e2      	bne.n	80076e8 <__ssputs_r+0x70>
 8007722:	6921      	ldr	r1, [r4, #16]
 8007724:	4650      	mov	r0, sl
 8007726:	f7ff feff 	bl	8007528 <_free_r>
 800772a:	e7c8      	b.n	80076be <__ssputs_r+0x46>

0800772c <_svfiprintf_r>:
 800772c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007730:	461d      	mov	r5, r3
 8007732:	898b      	ldrh	r3, [r1, #12]
 8007734:	061f      	lsls	r7, r3, #24
 8007736:	b09d      	sub	sp, #116	; 0x74
 8007738:	4680      	mov	r8, r0
 800773a:	460c      	mov	r4, r1
 800773c:	4616      	mov	r6, r2
 800773e:	d50f      	bpl.n	8007760 <_svfiprintf_r+0x34>
 8007740:	690b      	ldr	r3, [r1, #16]
 8007742:	b96b      	cbnz	r3, 8007760 <_svfiprintf_r+0x34>
 8007744:	2140      	movs	r1, #64	; 0x40
 8007746:	f7ff ff3d 	bl	80075c4 <_malloc_r>
 800774a:	6020      	str	r0, [r4, #0]
 800774c:	6120      	str	r0, [r4, #16]
 800774e:	b928      	cbnz	r0, 800775c <_svfiprintf_r+0x30>
 8007750:	230c      	movs	r3, #12
 8007752:	f8c8 3000 	str.w	r3, [r8]
 8007756:	f04f 30ff 	mov.w	r0, #4294967295
 800775a:	e0c8      	b.n	80078ee <_svfiprintf_r+0x1c2>
 800775c:	2340      	movs	r3, #64	; 0x40
 800775e:	6163      	str	r3, [r4, #20]
 8007760:	2300      	movs	r3, #0
 8007762:	9309      	str	r3, [sp, #36]	; 0x24
 8007764:	2320      	movs	r3, #32
 8007766:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800776a:	2330      	movs	r3, #48	; 0x30
 800776c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007770:	9503      	str	r5, [sp, #12]
 8007772:	f04f 0b01 	mov.w	fp, #1
 8007776:	4637      	mov	r7, r6
 8007778:	463d      	mov	r5, r7
 800777a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800777e:	b10b      	cbz	r3, 8007784 <_svfiprintf_r+0x58>
 8007780:	2b25      	cmp	r3, #37	; 0x25
 8007782:	d13e      	bne.n	8007802 <_svfiprintf_r+0xd6>
 8007784:	ebb7 0a06 	subs.w	sl, r7, r6
 8007788:	d00b      	beq.n	80077a2 <_svfiprintf_r+0x76>
 800778a:	4653      	mov	r3, sl
 800778c:	4632      	mov	r2, r6
 800778e:	4621      	mov	r1, r4
 8007790:	4640      	mov	r0, r8
 8007792:	f7ff ff71 	bl	8007678 <__ssputs_r>
 8007796:	3001      	adds	r0, #1
 8007798:	f000 80a4 	beq.w	80078e4 <_svfiprintf_r+0x1b8>
 800779c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800779e:	4453      	add	r3, sl
 80077a0:	9309      	str	r3, [sp, #36]	; 0x24
 80077a2:	783b      	ldrb	r3, [r7, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f000 809d 	beq.w	80078e4 <_svfiprintf_r+0x1b8>
 80077aa:	2300      	movs	r3, #0
 80077ac:	f04f 32ff 	mov.w	r2, #4294967295
 80077b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077b4:	9304      	str	r3, [sp, #16]
 80077b6:	9307      	str	r3, [sp, #28]
 80077b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077bc:	931a      	str	r3, [sp, #104]	; 0x68
 80077be:	462f      	mov	r7, r5
 80077c0:	2205      	movs	r2, #5
 80077c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80077c6:	4850      	ldr	r0, [pc, #320]	; (8007908 <_svfiprintf_r+0x1dc>)
 80077c8:	f7f8 fd0a 	bl	80001e0 <memchr>
 80077cc:	9b04      	ldr	r3, [sp, #16]
 80077ce:	b9d0      	cbnz	r0, 8007806 <_svfiprintf_r+0xda>
 80077d0:	06d9      	lsls	r1, r3, #27
 80077d2:	bf44      	itt	mi
 80077d4:	2220      	movmi	r2, #32
 80077d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80077da:	071a      	lsls	r2, r3, #28
 80077dc:	bf44      	itt	mi
 80077de:	222b      	movmi	r2, #43	; 0x2b
 80077e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80077e4:	782a      	ldrb	r2, [r5, #0]
 80077e6:	2a2a      	cmp	r2, #42	; 0x2a
 80077e8:	d015      	beq.n	8007816 <_svfiprintf_r+0xea>
 80077ea:	9a07      	ldr	r2, [sp, #28]
 80077ec:	462f      	mov	r7, r5
 80077ee:	2000      	movs	r0, #0
 80077f0:	250a      	movs	r5, #10
 80077f2:	4639      	mov	r1, r7
 80077f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077f8:	3b30      	subs	r3, #48	; 0x30
 80077fa:	2b09      	cmp	r3, #9
 80077fc:	d94d      	bls.n	800789a <_svfiprintf_r+0x16e>
 80077fe:	b1b8      	cbz	r0, 8007830 <_svfiprintf_r+0x104>
 8007800:	e00f      	b.n	8007822 <_svfiprintf_r+0xf6>
 8007802:	462f      	mov	r7, r5
 8007804:	e7b8      	b.n	8007778 <_svfiprintf_r+0x4c>
 8007806:	4a40      	ldr	r2, [pc, #256]	; (8007908 <_svfiprintf_r+0x1dc>)
 8007808:	1a80      	subs	r0, r0, r2
 800780a:	fa0b f000 	lsl.w	r0, fp, r0
 800780e:	4318      	orrs	r0, r3
 8007810:	9004      	str	r0, [sp, #16]
 8007812:	463d      	mov	r5, r7
 8007814:	e7d3      	b.n	80077be <_svfiprintf_r+0x92>
 8007816:	9a03      	ldr	r2, [sp, #12]
 8007818:	1d11      	adds	r1, r2, #4
 800781a:	6812      	ldr	r2, [r2, #0]
 800781c:	9103      	str	r1, [sp, #12]
 800781e:	2a00      	cmp	r2, #0
 8007820:	db01      	blt.n	8007826 <_svfiprintf_r+0xfa>
 8007822:	9207      	str	r2, [sp, #28]
 8007824:	e004      	b.n	8007830 <_svfiprintf_r+0x104>
 8007826:	4252      	negs	r2, r2
 8007828:	f043 0302 	orr.w	r3, r3, #2
 800782c:	9207      	str	r2, [sp, #28]
 800782e:	9304      	str	r3, [sp, #16]
 8007830:	783b      	ldrb	r3, [r7, #0]
 8007832:	2b2e      	cmp	r3, #46	; 0x2e
 8007834:	d10c      	bne.n	8007850 <_svfiprintf_r+0x124>
 8007836:	787b      	ldrb	r3, [r7, #1]
 8007838:	2b2a      	cmp	r3, #42	; 0x2a
 800783a:	d133      	bne.n	80078a4 <_svfiprintf_r+0x178>
 800783c:	9b03      	ldr	r3, [sp, #12]
 800783e:	1d1a      	adds	r2, r3, #4
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	9203      	str	r2, [sp, #12]
 8007844:	2b00      	cmp	r3, #0
 8007846:	bfb8      	it	lt
 8007848:	f04f 33ff 	movlt.w	r3, #4294967295
 800784c:	3702      	adds	r7, #2
 800784e:	9305      	str	r3, [sp, #20]
 8007850:	4d2e      	ldr	r5, [pc, #184]	; (800790c <_svfiprintf_r+0x1e0>)
 8007852:	7839      	ldrb	r1, [r7, #0]
 8007854:	2203      	movs	r2, #3
 8007856:	4628      	mov	r0, r5
 8007858:	f7f8 fcc2 	bl	80001e0 <memchr>
 800785c:	b138      	cbz	r0, 800786e <_svfiprintf_r+0x142>
 800785e:	2340      	movs	r3, #64	; 0x40
 8007860:	1b40      	subs	r0, r0, r5
 8007862:	fa03 f000 	lsl.w	r0, r3, r0
 8007866:	9b04      	ldr	r3, [sp, #16]
 8007868:	4303      	orrs	r3, r0
 800786a:	3701      	adds	r7, #1
 800786c:	9304      	str	r3, [sp, #16]
 800786e:	7839      	ldrb	r1, [r7, #0]
 8007870:	4827      	ldr	r0, [pc, #156]	; (8007910 <_svfiprintf_r+0x1e4>)
 8007872:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007876:	2206      	movs	r2, #6
 8007878:	1c7e      	adds	r6, r7, #1
 800787a:	f7f8 fcb1 	bl	80001e0 <memchr>
 800787e:	2800      	cmp	r0, #0
 8007880:	d038      	beq.n	80078f4 <_svfiprintf_r+0x1c8>
 8007882:	4b24      	ldr	r3, [pc, #144]	; (8007914 <_svfiprintf_r+0x1e8>)
 8007884:	bb13      	cbnz	r3, 80078cc <_svfiprintf_r+0x1a0>
 8007886:	9b03      	ldr	r3, [sp, #12]
 8007888:	3307      	adds	r3, #7
 800788a:	f023 0307 	bic.w	r3, r3, #7
 800788e:	3308      	adds	r3, #8
 8007890:	9303      	str	r3, [sp, #12]
 8007892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007894:	444b      	add	r3, r9
 8007896:	9309      	str	r3, [sp, #36]	; 0x24
 8007898:	e76d      	b.n	8007776 <_svfiprintf_r+0x4a>
 800789a:	fb05 3202 	mla	r2, r5, r2, r3
 800789e:	2001      	movs	r0, #1
 80078a0:	460f      	mov	r7, r1
 80078a2:	e7a6      	b.n	80077f2 <_svfiprintf_r+0xc6>
 80078a4:	2300      	movs	r3, #0
 80078a6:	3701      	adds	r7, #1
 80078a8:	9305      	str	r3, [sp, #20]
 80078aa:	4619      	mov	r1, r3
 80078ac:	250a      	movs	r5, #10
 80078ae:	4638      	mov	r0, r7
 80078b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078b4:	3a30      	subs	r2, #48	; 0x30
 80078b6:	2a09      	cmp	r2, #9
 80078b8:	d903      	bls.n	80078c2 <_svfiprintf_r+0x196>
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d0c8      	beq.n	8007850 <_svfiprintf_r+0x124>
 80078be:	9105      	str	r1, [sp, #20]
 80078c0:	e7c6      	b.n	8007850 <_svfiprintf_r+0x124>
 80078c2:	fb05 2101 	mla	r1, r5, r1, r2
 80078c6:	2301      	movs	r3, #1
 80078c8:	4607      	mov	r7, r0
 80078ca:	e7f0      	b.n	80078ae <_svfiprintf_r+0x182>
 80078cc:	ab03      	add	r3, sp, #12
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	4622      	mov	r2, r4
 80078d2:	4b11      	ldr	r3, [pc, #68]	; (8007918 <_svfiprintf_r+0x1ec>)
 80078d4:	a904      	add	r1, sp, #16
 80078d6:	4640      	mov	r0, r8
 80078d8:	f3af 8000 	nop.w
 80078dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80078e0:	4681      	mov	r9, r0
 80078e2:	d1d6      	bne.n	8007892 <_svfiprintf_r+0x166>
 80078e4:	89a3      	ldrh	r3, [r4, #12]
 80078e6:	065b      	lsls	r3, r3, #25
 80078e8:	f53f af35 	bmi.w	8007756 <_svfiprintf_r+0x2a>
 80078ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078ee:	b01d      	add	sp, #116	; 0x74
 80078f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f4:	ab03      	add	r3, sp, #12
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	4622      	mov	r2, r4
 80078fa:	4b07      	ldr	r3, [pc, #28]	; (8007918 <_svfiprintf_r+0x1ec>)
 80078fc:	a904      	add	r1, sp, #16
 80078fe:	4640      	mov	r0, r8
 8007900:	f000 f882 	bl	8007a08 <_printf_i>
 8007904:	e7ea      	b.n	80078dc <_svfiprintf_r+0x1b0>
 8007906:	bf00      	nop
 8007908:	08008318 	.word	0x08008318
 800790c:	0800831e 	.word	0x0800831e
 8007910:	08008322 	.word	0x08008322
 8007914:	00000000 	.word	0x00000000
 8007918:	08007679 	.word	0x08007679

0800791c <_printf_common>:
 800791c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007920:	4691      	mov	r9, r2
 8007922:	461f      	mov	r7, r3
 8007924:	688a      	ldr	r2, [r1, #8]
 8007926:	690b      	ldr	r3, [r1, #16]
 8007928:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800792c:	4293      	cmp	r3, r2
 800792e:	bfb8      	it	lt
 8007930:	4613      	movlt	r3, r2
 8007932:	f8c9 3000 	str.w	r3, [r9]
 8007936:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800793a:	4606      	mov	r6, r0
 800793c:	460c      	mov	r4, r1
 800793e:	b112      	cbz	r2, 8007946 <_printf_common+0x2a>
 8007940:	3301      	adds	r3, #1
 8007942:	f8c9 3000 	str.w	r3, [r9]
 8007946:	6823      	ldr	r3, [r4, #0]
 8007948:	0699      	lsls	r1, r3, #26
 800794a:	bf42      	ittt	mi
 800794c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007950:	3302      	addmi	r3, #2
 8007952:	f8c9 3000 	strmi.w	r3, [r9]
 8007956:	6825      	ldr	r5, [r4, #0]
 8007958:	f015 0506 	ands.w	r5, r5, #6
 800795c:	d107      	bne.n	800796e <_printf_common+0x52>
 800795e:	f104 0a19 	add.w	sl, r4, #25
 8007962:	68e3      	ldr	r3, [r4, #12]
 8007964:	f8d9 2000 	ldr.w	r2, [r9]
 8007968:	1a9b      	subs	r3, r3, r2
 800796a:	42ab      	cmp	r3, r5
 800796c:	dc28      	bgt.n	80079c0 <_printf_common+0xa4>
 800796e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007972:	6822      	ldr	r2, [r4, #0]
 8007974:	3300      	adds	r3, #0
 8007976:	bf18      	it	ne
 8007978:	2301      	movne	r3, #1
 800797a:	0692      	lsls	r2, r2, #26
 800797c:	d42d      	bmi.n	80079da <_printf_common+0xbe>
 800797e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007982:	4639      	mov	r1, r7
 8007984:	4630      	mov	r0, r6
 8007986:	47c0      	blx	r8
 8007988:	3001      	adds	r0, #1
 800798a:	d020      	beq.n	80079ce <_printf_common+0xb2>
 800798c:	6823      	ldr	r3, [r4, #0]
 800798e:	68e5      	ldr	r5, [r4, #12]
 8007990:	f8d9 2000 	ldr.w	r2, [r9]
 8007994:	f003 0306 	and.w	r3, r3, #6
 8007998:	2b04      	cmp	r3, #4
 800799a:	bf08      	it	eq
 800799c:	1aad      	subeq	r5, r5, r2
 800799e:	68a3      	ldr	r3, [r4, #8]
 80079a0:	6922      	ldr	r2, [r4, #16]
 80079a2:	bf0c      	ite	eq
 80079a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079a8:	2500      	movne	r5, #0
 80079aa:	4293      	cmp	r3, r2
 80079ac:	bfc4      	itt	gt
 80079ae:	1a9b      	subgt	r3, r3, r2
 80079b0:	18ed      	addgt	r5, r5, r3
 80079b2:	f04f 0900 	mov.w	r9, #0
 80079b6:	341a      	adds	r4, #26
 80079b8:	454d      	cmp	r5, r9
 80079ba:	d11a      	bne.n	80079f2 <_printf_common+0xd6>
 80079bc:	2000      	movs	r0, #0
 80079be:	e008      	b.n	80079d2 <_printf_common+0xb6>
 80079c0:	2301      	movs	r3, #1
 80079c2:	4652      	mov	r2, sl
 80079c4:	4639      	mov	r1, r7
 80079c6:	4630      	mov	r0, r6
 80079c8:	47c0      	blx	r8
 80079ca:	3001      	adds	r0, #1
 80079cc:	d103      	bne.n	80079d6 <_printf_common+0xba>
 80079ce:	f04f 30ff 	mov.w	r0, #4294967295
 80079d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079d6:	3501      	adds	r5, #1
 80079d8:	e7c3      	b.n	8007962 <_printf_common+0x46>
 80079da:	18e1      	adds	r1, r4, r3
 80079dc:	1c5a      	adds	r2, r3, #1
 80079de:	2030      	movs	r0, #48	; 0x30
 80079e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079e4:	4422      	add	r2, r4
 80079e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079ee:	3302      	adds	r3, #2
 80079f0:	e7c5      	b.n	800797e <_printf_common+0x62>
 80079f2:	2301      	movs	r3, #1
 80079f4:	4622      	mov	r2, r4
 80079f6:	4639      	mov	r1, r7
 80079f8:	4630      	mov	r0, r6
 80079fa:	47c0      	blx	r8
 80079fc:	3001      	adds	r0, #1
 80079fe:	d0e6      	beq.n	80079ce <_printf_common+0xb2>
 8007a00:	f109 0901 	add.w	r9, r9, #1
 8007a04:	e7d8      	b.n	80079b8 <_printf_common+0x9c>
	...

08007a08 <_printf_i>:
 8007a08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a0c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007a10:	460c      	mov	r4, r1
 8007a12:	7e09      	ldrb	r1, [r1, #24]
 8007a14:	b085      	sub	sp, #20
 8007a16:	296e      	cmp	r1, #110	; 0x6e
 8007a18:	4617      	mov	r7, r2
 8007a1a:	4606      	mov	r6, r0
 8007a1c:	4698      	mov	r8, r3
 8007a1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a20:	f000 80b3 	beq.w	8007b8a <_printf_i+0x182>
 8007a24:	d822      	bhi.n	8007a6c <_printf_i+0x64>
 8007a26:	2963      	cmp	r1, #99	; 0x63
 8007a28:	d036      	beq.n	8007a98 <_printf_i+0x90>
 8007a2a:	d80a      	bhi.n	8007a42 <_printf_i+0x3a>
 8007a2c:	2900      	cmp	r1, #0
 8007a2e:	f000 80b9 	beq.w	8007ba4 <_printf_i+0x19c>
 8007a32:	2958      	cmp	r1, #88	; 0x58
 8007a34:	f000 8083 	beq.w	8007b3e <_printf_i+0x136>
 8007a38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a3c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007a40:	e032      	b.n	8007aa8 <_printf_i+0xa0>
 8007a42:	2964      	cmp	r1, #100	; 0x64
 8007a44:	d001      	beq.n	8007a4a <_printf_i+0x42>
 8007a46:	2969      	cmp	r1, #105	; 0x69
 8007a48:	d1f6      	bne.n	8007a38 <_printf_i+0x30>
 8007a4a:	6820      	ldr	r0, [r4, #0]
 8007a4c:	6813      	ldr	r3, [r2, #0]
 8007a4e:	0605      	lsls	r5, r0, #24
 8007a50:	f103 0104 	add.w	r1, r3, #4
 8007a54:	d52a      	bpl.n	8007aac <_printf_i+0xa4>
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	6011      	str	r1, [r2, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	da03      	bge.n	8007a66 <_printf_i+0x5e>
 8007a5e:	222d      	movs	r2, #45	; 0x2d
 8007a60:	425b      	negs	r3, r3
 8007a62:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007a66:	486f      	ldr	r0, [pc, #444]	; (8007c24 <_printf_i+0x21c>)
 8007a68:	220a      	movs	r2, #10
 8007a6a:	e039      	b.n	8007ae0 <_printf_i+0xd8>
 8007a6c:	2973      	cmp	r1, #115	; 0x73
 8007a6e:	f000 809d 	beq.w	8007bac <_printf_i+0x1a4>
 8007a72:	d808      	bhi.n	8007a86 <_printf_i+0x7e>
 8007a74:	296f      	cmp	r1, #111	; 0x6f
 8007a76:	d020      	beq.n	8007aba <_printf_i+0xb2>
 8007a78:	2970      	cmp	r1, #112	; 0x70
 8007a7a:	d1dd      	bne.n	8007a38 <_printf_i+0x30>
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	f043 0320 	orr.w	r3, r3, #32
 8007a82:	6023      	str	r3, [r4, #0]
 8007a84:	e003      	b.n	8007a8e <_printf_i+0x86>
 8007a86:	2975      	cmp	r1, #117	; 0x75
 8007a88:	d017      	beq.n	8007aba <_printf_i+0xb2>
 8007a8a:	2978      	cmp	r1, #120	; 0x78
 8007a8c:	d1d4      	bne.n	8007a38 <_printf_i+0x30>
 8007a8e:	2378      	movs	r3, #120	; 0x78
 8007a90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a94:	4864      	ldr	r0, [pc, #400]	; (8007c28 <_printf_i+0x220>)
 8007a96:	e055      	b.n	8007b44 <_printf_i+0x13c>
 8007a98:	6813      	ldr	r3, [r2, #0]
 8007a9a:	1d19      	adds	r1, r3, #4
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	6011      	str	r1, [r2, #0]
 8007aa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007aa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e08c      	b.n	8007bc6 <_printf_i+0x1be>
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	6011      	str	r1, [r2, #0]
 8007ab0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ab4:	bf18      	it	ne
 8007ab6:	b21b      	sxthne	r3, r3
 8007ab8:	e7cf      	b.n	8007a5a <_printf_i+0x52>
 8007aba:	6813      	ldr	r3, [r2, #0]
 8007abc:	6825      	ldr	r5, [r4, #0]
 8007abe:	1d18      	adds	r0, r3, #4
 8007ac0:	6010      	str	r0, [r2, #0]
 8007ac2:	0628      	lsls	r0, r5, #24
 8007ac4:	d501      	bpl.n	8007aca <_printf_i+0xc2>
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	e002      	b.n	8007ad0 <_printf_i+0xc8>
 8007aca:	0668      	lsls	r0, r5, #25
 8007acc:	d5fb      	bpl.n	8007ac6 <_printf_i+0xbe>
 8007ace:	881b      	ldrh	r3, [r3, #0]
 8007ad0:	4854      	ldr	r0, [pc, #336]	; (8007c24 <_printf_i+0x21c>)
 8007ad2:	296f      	cmp	r1, #111	; 0x6f
 8007ad4:	bf14      	ite	ne
 8007ad6:	220a      	movne	r2, #10
 8007ad8:	2208      	moveq	r2, #8
 8007ada:	2100      	movs	r1, #0
 8007adc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ae0:	6865      	ldr	r5, [r4, #4]
 8007ae2:	60a5      	str	r5, [r4, #8]
 8007ae4:	2d00      	cmp	r5, #0
 8007ae6:	f2c0 8095 	blt.w	8007c14 <_printf_i+0x20c>
 8007aea:	6821      	ldr	r1, [r4, #0]
 8007aec:	f021 0104 	bic.w	r1, r1, #4
 8007af0:	6021      	str	r1, [r4, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d13d      	bne.n	8007b72 <_printf_i+0x16a>
 8007af6:	2d00      	cmp	r5, #0
 8007af8:	f040 808e 	bne.w	8007c18 <_printf_i+0x210>
 8007afc:	4665      	mov	r5, ip
 8007afe:	2a08      	cmp	r2, #8
 8007b00:	d10b      	bne.n	8007b1a <_printf_i+0x112>
 8007b02:	6823      	ldr	r3, [r4, #0]
 8007b04:	07db      	lsls	r3, r3, #31
 8007b06:	d508      	bpl.n	8007b1a <_printf_i+0x112>
 8007b08:	6923      	ldr	r3, [r4, #16]
 8007b0a:	6862      	ldr	r2, [r4, #4]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	bfde      	ittt	le
 8007b10:	2330      	movle	r3, #48	; 0x30
 8007b12:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b16:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b1a:	ebac 0305 	sub.w	r3, ip, r5
 8007b1e:	6123      	str	r3, [r4, #16]
 8007b20:	f8cd 8000 	str.w	r8, [sp]
 8007b24:	463b      	mov	r3, r7
 8007b26:	aa03      	add	r2, sp, #12
 8007b28:	4621      	mov	r1, r4
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	f7ff fef6 	bl	800791c <_printf_common>
 8007b30:	3001      	adds	r0, #1
 8007b32:	d14d      	bne.n	8007bd0 <_printf_i+0x1c8>
 8007b34:	f04f 30ff 	mov.w	r0, #4294967295
 8007b38:	b005      	add	sp, #20
 8007b3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b3e:	4839      	ldr	r0, [pc, #228]	; (8007c24 <_printf_i+0x21c>)
 8007b40:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007b44:	6813      	ldr	r3, [r2, #0]
 8007b46:	6821      	ldr	r1, [r4, #0]
 8007b48:	1d1d      	adds	r5, r3, #4
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6015      	str	r5, [r2, #0]
 8007b4e:	060a      	lsls	r2, r1, #24
 8007b50:	d50b      	bpl.n	8007b6a <_printf_i+0x162>
 8007b52:	07ca      	lsls	r2, r1, #31
 8007b54:	bf44      	itt	mi
 8007b56:	f041 0120 	orrmi.w	r1, r1, #32
 8007b5a:	6021      	strmi	r1, [r4, #0]
 8007b5c:	b91b      	cbnz	r3, 8007b66 <_printf_i+0x15e>
 8007b5e:	6822      	ldr	r2, [r4, #0]
 8007b60:	f022 0220 	bic.w	r2, r2, #32
 8007b64:	6022      	str	r2, [r4, #0]
 8007b66:	2210      	movs	r2, #16
 8007b68:	e7b7      	b.n	8007ada <_printf_i+0xd2>
 8007b6a:	064d      	lsls	r5, r1, #25
 8007b6c:	bf48      	it	mi
 8007b6e:	b29b      	uxthmi	r3, r3
 8007b70:	e7ef      	b.n	8007b52 <_printf_i+0x14a>
 8007b72:	4665      	mov	r5, ip
 8007b74:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b78:	fb02 3311 	mls	r3, r2, r1, r3
 8007b7c:	5cc3      	ldrb	r3, [r0, r3]
 8007b7e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007b82:	460b      	mov	r3, r1
 8007b84:	2900      	cmp	r1, #0
 8007b86:	d1f5      	bne.n	8007b74 <_printf_i+0x16c>
 8007b88:	e7b9      	b.n	8007afe <_printf_i+0xf6>
 8007b8a:	6813      	ldr	r3, [r2, #0]
 8007b8c:	6825      	ldr	r5, [r4, #0]
 8007b8e:	6961      	ldr	r1, [r4, #20]
 8007b90:	1d18      	adds	r0, r3, #4
 8007b92:	6010      	str	r0, [r2, #0]
 8007b94:	0628      	lsls	r0, r5, #24
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	d501      	bpl.n	8007b9e <_printf_i+0x196>
 8007b9a:	6019      	str	r1, [r3, #0]
 8007b9c:	e002      	b.n	8007ba4 <_printf_i+0x19c>
 8007b9e:	066a      	lsls	r2, r5, #25
 8007ba0:	d5fb      	bpl.n	8007b9a <_printf_i+0x192>
 8007ba2:	8019      	strh	r1, [r3, #0]
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	6123      	str	r3, [r4, #16]
 8007ba8:	4665      	mov	r5, ip
 8007baa:	e7b9      	b.n	8007b20 <_printf_i+0x118>
 8007bac:	6813      	ldr	r3, [r2, #0]
 8007bae:	1d19      	adds	r1, r3, #4
 8007bb0:	6011      	str	r1, [r2, #0]
 8007bb2:	681d      	ldr	r5, [r3, #0]
 8007bb4:	6862      	ldr	r2, [r4, #4]
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	4628      	mov	r0, r5
 8007bba:	f7f8 fb11 	bl	80001e0 <memchr>
 8007bbe:	b108      	cbz	r0, 8007bc4 <_printf_i+0x1bc>
 8007bc0:	1b40      	subs	r0, r0, r5
 8007bc2:	6060      	str	r0, [r4, #4]
 8007bc4:	6863      	ldr	r3, [r4, #4]
 8007bc6:	6123      	str	r3, [r4, #16]
 8007bc8:	2300      	movs	r3, #0
 8007bca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bce:	e7a7      	b.n	8007b20 <_printf_i+0x118>
 8007bd0:	6923      	ldr	r3, [r4, #16]
 8007bd2:	462a      	mov	r2, r5
 8007bd4:	4639      	mov	r1, r7
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	47c0      	blx	r8
 8007bda:	3001      	adds	r0, #1
 8007bdc:	d0aa      	beq.n	8007b34 <_printf_i+0x12c>
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	079b      	lsls	r3, r3, #30
 8007be2:	d413      	bmi.n	8007c0c <_printf_i+0x204>
 8007be4:	68e0      	ldr	r0, [r4, #12]
 8007be6:	9b03      	ldr	r3, [sp, #12]
 8007be8:	4298      	cmp	r0, r3
 8007bea:	bfb8      	it	lt
 8007bec:	4618      	movlt	r0, r3
 8007bee:	e7a3      	b.n	8007b38 <_printf_i+0x130>
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	464a      	mov	r2, r9
 8007bf4:	4639      	mov	r1, r7
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	47c0      	blx	r8
 8007bfa:	3001      	adds	r0, #1
 8007bfc:	d09a      	beq.n	8007b34 <_printf_i+0x12c>
 8007bfe:	3501      	adds	r5, #1
 8007c00:	68e3      	ldr	r3, [r4, #12]
 8007c02:	9a03      	ldr	r2, [sp, #12]
 8007c04:	1a9b      	subs	r3, r3, r2
 8007c06:	42ab      	cmp	r3, r5
 8007c08:	dcf2      	bgt.n	8007bf0 <_printf_i+0x1e8>
 8007c0a:	e7eb      	b.n	8007be4 <_printf_i+0x1dc>
 8007c0c:	2500      	movs	r5, #0
 8007c0e:	f104 0919 	add.w	r9, r4, #25
 8007c12:	e7f5      	b.n	8007c00 <_printf_i+0x1f8>
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1ac      	bne.n	8007b72 <_printf_i+0x16a>
 8007c18:	7803      	ldrb	r3, [r0, #0]
 8007c1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c1e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c22:	e76c      	b.n	8007afe <_printf_i+0xf6>
 8007c24:	08008329 	.word	0x08008329
 8007c28:	0800833a 	.word	0x0800833a

08007c2c <_sbrk_r>:
 8007c2c:	b538      	push	{r3, r4, r5, lr}
 8007c2e:	4c06      	ldr	r4, [pc, #24]	; (8007c48 <_sbrk_r+0x1c>)
 8007c30:	2300      	movs	r3, #0
 8007c32:	4605      	mov	r5, r0
 8007c34:	4608      	mov	r0, r1
 8007c36:	6023      	str	r3, [r4, #0]
 8007c38:	f7fa ffca 	bl	8002bd0 <_sbrk>
 8007c3c:	1c43      	adds	r3, r0, #1
 8007c3e:	d102      	bne.n	8007c46 <_sbrk_r+0x1a>
 8007c40:	6823      	ldr	r3, [r4, #0]
 8007c42:	b103      	cbz	r3, 8007c46 <_sbrk_r+0x1a>
 8007c44:	602b      	str	r3, [r5, #0]
 8007c46:	bd38      	pop	{r3, r4, r5, pc}
 8007c48:	20000268 	.word	0x20000268

08007c4c <__sread>:
 8007c4c:	b510      	push	{r4, lr}
 8007c4e:	460c      	mov	r4, r1
 8007c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c54:	f000 f8e0 	bl	8007e18 <_read_r>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	bfab      	itete	ge
 8007c5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c5e:	89a3      	ldrhlt	r3, [r4, #12]
 8007c60:	181b      	addge	r3, r3, r0
 8007c62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c66:	bfac      	ite	ge
 8007c68:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c6a:	81a3      	strhlt	r3, [r4, #12]
 8007c6c:	bd10      	pop	{r4, pc}

08007c6e <__swrite>:
 8007c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c72:	461f      	mov	r7, r3
 8007c74:	898b      	ldrh	r3, [r1, #12]
 8007c76:	05db      	lsls	r3, r3, #23
 8007c78:	4605      	mov	r5, r0
 8007c7a:	460c      	mov	r4, r1
 8007c7c:	4616      	mov	r6, r2
 8007c7e:	d505      	bpl.n	8007c8c <__swrite+0x1e>
 8007c80:	2302      	movs	r3, #2
 8007c82:	2200      	movs	r2, #0
 8007c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c88:	f000 f868 	bl	8007d5c <_lseek_r>
 8007c8c:	89a3      	ldrh	r3, [r4, #12]
 8007c8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c96:	81a3      	strh	r3, [r4, #12]
 8007c98:	4632      	mov	r2, r6
 8007c9a:	463b      	mov	r3, r7
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca2:	f000 b817 	b.w	8007cd4 <_write_r>

08007ca6 <__sseek>:
 8007ca6:	b510      	push	{r4, lr}
 8007ca8:	460c      	mov	r4, r1
 8007caa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cae:	f000 f855 	bl	8007d5c <_lseek_r>
 8007cb2:	1c43      	adds	r3, r0, #1
 8007cb4:	89a3      	ldrh	r3, [r4, #12]
 8007cb6:	bf15      	itete	ne
 8007cb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007cba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007cbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007cc2:	81a3      	strheq	r3, [r4, #12]
 8007cc4:	bf18      	it	ne
 8007cc6:	81a3      	strhne	r3, [r4, #12]
 8007cc8:	bd10      	pop	{r4, pc}

08007cca <__sclose>:
 8007cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cce:	f000 b813 	b.w	8007cf8 <_close_r>
	...

08007cd4 <_write_r>:
 8007cd4:	b538      	push	{r3, r4, r5, lr}
 8007cd6:	4c07      	ldr	r4, [pc, #28]	; (8007cf4 <_write_r+0x20>)
 8007cd8:	4605      	mov	r5, r0
 8007cda:	4608      	mov	r0, r1
 8007cdc:	4611      	mov	r1, r2
 8007cde:	2200      	movs	r2, #0
 8007ce0:	6022      	str	r2, [r4, #0]
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	f7fa f97a 	bl	8001fdc <_write>
 8007ce8:	1c43      	adds	r3, r0, #1
 8007cea:	d102      	bne.n	8007cf2 <_write_r+0x1e>
 8007cec:	6823      	ldr	r3, [r4, #0]
 8007cee:	b103      	cbz	r3, 8007cf2 <_write_r+0x1e>
 8007cf0:	602b      	str	r3, [r5, #0]
 8007cf2:	bd38      	pop	{r3, r4, r5, pc}
 8007cf4:	20000268 	.word	0x20000268

08007cf8 <_close_r>:
 8007cf8:	b538      	push	{r3, r4, r5, lr}
 8007cfa:	4c06      	ldr	r4, [pc, #24]	; (8007d14 <_close_r+0x1c>)
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	4605      	mov	r5, r0
 8007d00:	4608      	mov	r0, r1
 8007d02:	6023      	str	r3, [r4, #0]
 8007d04:	f7fa ff2f 	bl	8002b66 <_close>
 8007d08:	1c43      	adds	r3, r0, #1
 8007d0a:	d102      	bne.n	8007d12 <_close_r+0x1a>
 8007d0c:	6823      	ldr	r3, [r4, #0]
 8007d0e:	b103      	cbz	r3, 8007d12 <_close_r+0x1a>
 8007d10:	602b      	str	r3, [r5, #0]
 8007d12:	bd38      	pop	{r3, r4, r5, pc}
 8007d14:	20000268 	.word	0x20000268

08007d18 <_fstat_r>:
 8007d18:	b538      	push	{r3, r4, r5, lr}
 8007d1a:	4c07      	ldr	r4, [pc, #28]	; (8007d38 <_fstat_r+0x20>)
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	4605      	mov	r5, r0
 8007d20:	4608      	mov	r0, r1
 8007d22:	4611      	mov	r1, r2
 8007d24:	6023      	str	r3, [r4, #0]
 8007d26:	f7fa ff2a 	bl	8002b7e <_fstat>
 8007d2a:	1c43      	adds	r3, r0, #1
 8007d2c:	d102      	bne.n	8007d34 <_fstat_r+0x1c>
 8007d2e:	6823      	ldr	r3, [r4, #0]
 8007d30:	b103      	cbz	r3, 8007d34 <_fstat_r+0x1c>
 8007d32:	602b      	str	r3, [r5, #0]
 8007d34:	bd38      	pop	{r3, r4, r5, pc}
 8007d36:	bf00      	nop
 8007d38:	20000268 	.word	0x20000268

08007d3c <_isatty_r>:
 8007d3c:	b538      	push	{r3, r4, r5, lr}
 8007d3e:	4c06      	ldr	r4, [pc, #24]	; (8007d58 <_isatty_r+0x1c>)
 8007d40:	2300      	movs	r3, #0
 8007d42:	4605      	mov	r5, r0
 8007d44:	4608      	mov	r0, r1
 8007d46:	6023      	str	r3, [r4, #0]
 8007d48:	f7fa ff29 	bl	8002b9e <_isatty>
 8007d4c:	1c43      	adds	r3, r0, #1
 8007d4e:	d102      	bne.n	8007d56 <_isatty_r+0x1a>
 8007d50:	6823      	ldr	r3, [r4, #0]
 8007d52:	b103      	cbz	r3, 8007d56 <_isatty_r+0x1a>
 8007d54:	602b      	str	r3, [r5, #0]
 8007d56:	bd38      	pop	{r3, r4, r5, pc}
 8007d58:	20000268 	.word	0x20000268

08007d5c <_lseek_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4c07      	ldr	r4, [pc, #28]	; (8007d7c <_lseek_r+0x20>)
 8007d60:	4605      	mov	r5, r0
 8007d62:	4608      	mov	r0, r1
 8007d64:	4611      	mov	r1, r2
 8007d66:	2200      	movs	r2, #0
 8007d68:	6022      	str	r2, [r4, #0]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	f7fa ff22 	bl	8002bb4 <_lseek>
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	d102      	bne.n	8007d7a <_lseek_r+0x1e>
 8007d74:	6823      	ldr	r3, [r4, #0]
 8007d76:	b103      	cbz	r3, 8007d7a <_lseek_r+0x1e>
 8007d78:	602b      	str	r3, [r5, #0]
 8007d7a:	bd38      	pop	{r3, r4, r5, pc}
 8007d7c:	20000268 	.word	0x20000268

08007d80 <memcpy>:
 8007d80:	b510      	push	{r4, lr}
 8007d82:	1e43      	subs	r3, r0, #1
 8007d84:	440a      	add	r2, r1
 8007d86:	4291      	cmp	r1, r2
 8007d88:	d100      	bne.n	8007d8c <memcpy+0xc>
 8007d8a:	bd10      	pop	{r4, pc}
 8007d8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d94:	e7f7      	b.n	8007d86 <memcpy+0x6>

08007d96 <memmove>:
 8007d96:	4288      	cmp	r0, r1
 8007d98:	b510      	push	{r4, lr}
 8007d9a:	eb01 0302 	add.w	r3, r1, r2
 8007d9e:	d807      	bhi.n	8007db0 <memmove+0x1a>
 8007da0:	1e42      	subs	r2, r0, #1
 8007da2:	4299      	cmp	r1, r3
 8007da4:	d00a      	beq.n	8007dbc <memmove+0x26>
 8007da6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007daa:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007dae:	e7f8      	b.n	8007da2 <memmove+0xc>
 8007db0:	4283      	cmp	r3, r0
 8007db2:	d9f5      	bls.n	8007da0 <memmove+0xa>
 8007db4:	1881      	adds	r1, r0, r2
 8007db6:	1ad2      	subs	r2, r2, r3
 8007db8:	42d3      	cmn	r3, r2
 8007dba:	d100      	bne.n	8007dbe <memmove+0x28>
 8007dbc:	bd10      	pop	{r4, pc}
 8007dbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007dc2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007dc6:	e7f7      	b.n	8007db8 <memmove+0x22>

08007dc8 <__malloc_lock>:
 8007dc8:	4770      	bx	lr

08007dca <__malloc_unlock>:
 8007dca:	4770      	bx	lr

08007dcc <_realloc_r>:
 8007dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dce:	4607      	mov	r7, r0
 8007dd0:	4614      	mov	r4, r2
 8007dd2:	460e      	mov	r6, r1
 8007dd4:	b921      	cbnz	r1, 8007de0 <_realloc_r+0x14>
 8007dd6:	4611      	mov	r1, r2
 8007dd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ddc:	f7ff bbf2 	b.w	80075c4 <_malloc_r>
 8007de0:	b922      	cbnz	r2, 8007dec <_realloc_r+0x20>
 8007de2:	f7ff fba1 	bl	8007528 <_free_r>
 8007de6:	4625      	mov	r5, r4
 8007de8:	4628      	mov	r0, r5
 8007dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dec:	f000 f826 	bl	8007e3c <_malloc_usable_size_r>
 8007df0:	42a0      	cmp	r0, r4
 8007df2:	d20f      	bcs.n	8007e14 <_realloc_r+0x48>
 8007df4:	4621      	mov	r1, r4
 8007df6:	4638      	mov	r0, r7
 8007df8:	f7ff fbe4 	bl	80075c4 <_malloc_r>
 8007dfc:	4605      	mov	r5, r0
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	d0f2      	beq.n	8007de8 <_realloc_r+0x1c>
 8007e02:	4631      	mov	r1, r6
 8007e04:	4622      	mov	r2, r4
 8007e06:	f7ff ffbb 	bl	8007d80 <memcpy>
 8007e0a:	4631      	mov	r1, r6
 8007e0c:	4638      	mov	r0, r7
 8007e0e:	f7ff fb8b 	bl	8007528 <_free_r>
 8007e12:	e7e9      	b.n	8007de8 <_realloc_r+0x1c>
 8007e14:	4635      	mov	r5, r6
 8007e16:	e7e7      	b.n	8007de8 <_realloc_r+0x1c>

08007e18 <_read_r>:
 8007e18:	b538      	push	{r3, r4, r5, lr}
 8007e1a:	4c07      	ldr	r4, [pc, #28]	; (8007e38 <_read_r+0x20>)
 8007e1c:	4605      	mov	r5, r0
 8007e1e:	4608      	mov	r0, r1
 8007e20:	4611      	mov	r1, r2
 8007e22:	2200      	movs	r2, #0
 8007e24:	6022      	str	r2, [r4, #0]
 8007e26:	461a      	mov	r2, r3
 8007e28:	f7fa fe80 	bl	8002b2c <_read>
 8007e2c:	1c43      	adds	r3, r0, #1
 8007e2e:	d102      	bne.n	8007e36 <_read_r+0x1e>
 8007e30:	6823      	ldr	r3, [r4, #0]
 8007e32:	b103      	cbz	r3, 8007e36 <_read_r+0x1e>
 8007e34:	602b      	str	r3, [r5, #0]
 8007e36:	bd38      	pop	{r3, r4, r5, pc}
 8007e38:	20000268 	.word	0x20000268

08007e3c <_malloc_usable_size_r>:
 8007e3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e40:	1f18      	subs	r0, r3, #4
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	bfbc      	itt	lt
 8007e46:	580b      	ldrlt	r3, [r1, r0]
 8007e48:	18c0      	addlt	r0, r0, r3
 8007e4a:	4770      	bx	lr

08007e4c <_init>:
 8007e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e4e:	bf00      	nop
 8007e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e52:	bc08      	pop	{r3}
 8007e54:	469e      	mov	lr, r3
 8007e56:	4770      	bx	lr

08007e58 <_fini>:
 8007e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5a:	bf00      	nop
 8007e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e5e:	bc08      	pop	{r3}
 8007e60:	469e      	mov	lr, r3
 8007e62:	4770      	bx	lr
