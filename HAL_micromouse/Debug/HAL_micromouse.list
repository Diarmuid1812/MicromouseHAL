
HAL_micromouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007258  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  080073f8  080073f8  000173f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078e0  080078e0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080078e0  080078e0  000178e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078e8  080078e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078e8  080078e8  000178e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078ec  080078ec  000178ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080078f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000070  08007960  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08007960  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c7b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cc9  00000000  00000000  00033d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011f0  00000000  00000000  000369e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001098  00000000  00000000  00037bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000195d3  00000000  00000000  00038c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ecfe  00000000  00000000  00052243  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093ed4  00000000  00000000  00060f41  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f4e15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005398  00000000  00000000  000f4e90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080073e0 	.word	0x080073e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080073e0 	.word	0x080073e0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__gedf2>:
 80005f8:	f04f 3cff 	mov.w	ip, #4294967295
 80005fc:	e006      	b.n	800060c <__cmpdf2+0x4>
 80005fe:	bf00      	nop

08000600 <__ledf2>:
 8000600:	f04f 0c01 	mov.w	ip, #1
 8000604:	e002      	b.n	800060c <__cmpdf2+0x4>
 8000606:	bf00      	nop

08000608 <__cmpdf2>:
 8000608:	f04f 0c01 	mov.w	ip, #1
 800060c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000610:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000614:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000618:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800061c:	bf18      	it	ne
 800061e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000622:	d01b      	beq.n	800065c <__cmpdf2+0x54>
 8000624:	b001      	add	sp, #4
 8000626:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800062a:	bf0c      	ite	eq
 800062c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000630:	ea91 0f03 	teqne	r1, r3
 8000634:	bf02      	ittt	eq
 8000636:	ea90 0f02 	teqeq	r0, r2
 800063a:	2000      	moveq	r0, #0
 800063c:	4770      	bxeq	lr
 800063e:	f110 0f00 	cmn.w	r0, #0
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf58      	it	pl
 8000648:	4299      	cmppl	r1, r3
 800064a:	bf08      	it	eq
 800064c:	4290      	cmpeq	r0, r2
 800064e:	bf2c      	ite	cs
 8000650:	17d8      	asrcs	r0, r3, #31
 8000652:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000656:	f040 0001 	orr.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000660:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000664:	d102      	bne.n	800066c <__cmpdf2+0x64>
 8000666:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800066a:	d107      	bne.n	800067c <__cmpdf2+0x74>
 800066c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000670:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000674:	d1d6      	bne.n	8000624 <__cmpdf2+0x1c>
 8000676:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800067a:	d0d3      	beq.n	8000624 <__cmpdf2+0x1c>
 800067c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <__aeabi_cdrcmple>:
 8000684:	4684      	mov	ip, r0
 8000686:	4610      	mov	r0, r2
 8000688:	4662      	mov	r2, ip
 800068a:	468c      	mov	ip, r1
 800068c:	4619      	mov	r1, r3
 800068e:	4663      	mov	r3, ip
 8000690:	e000      	b.n	8000694 <__aeabi_cdcmpeq>
 8000692:	bf00      	nop

08000694 <__aeabi_cdcmpeq>:
 8000694:	b501      	push	{r0, lr}
 8000696:	f7ff ffb7 	bl	8000608 <__cmpdf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd01      	pop	{r0, pc}

080006a4 <__aeabi_dcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cdcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_dcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cdcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_dcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cdcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_dcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffce 	bl	8000684 <__aeabi_cdrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_dcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc4 	bl	8000684 <__aeabi_cdrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_d2f>:
 8000708:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800070c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000710:	bf24      	itt	cs
 8000712:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000716:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800071a:	d90d      	bls.n	8000738 <__aeabi_d2f+0x30>
 800071c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000720:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000724:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000728:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800072c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000730:	bf08      	it	eq
 8000732:	f020 0001 	biceq.w	r0, r0, #1
 8000736:	4770      	bx	lr
 8000738:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800073c:	d121      	bne.n	8000782 <__aeabi_d2f+0x7a>
 800073e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000742:	bfbc      	itt	lt
 8000744:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000748:	4770      	bxlt	lr
 800074a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800074e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000752:	f1c2 0218 	rsb	r2, r2, #24
 8000756:	f1c2 0c20 	rsb	ip, r2, #32
 800075a:	fa10 f30c 	lsls.w	r3, r0, ip
 800075e:	fa20 f002 	lsr.w	r0, r0, r2
 8000762:	bf18      	it	ne
 8000764:	f040 0001 	orrne.w	r0, r0, #1
 8000768:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800076c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000770:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000774:	ea40 000c 	orr.w	r0, r0, ip
 8000778:	fa23 f302 	lsr.w	r3, r3, r2
 800077c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000780:	e7cc      	b.n	800071c <__aeabi_d2f+0x14>
 8000782:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000786:	d107      	bne.n	8000798 <__aeabi_d2f+0x90>
 8000788:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800078c:	bf1e      	ittt	ne
 800078e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000792:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000796:	4770      	bxne	lr
 8000798:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800079c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <__aeabi_uldivmod>:
 80007a8:	b953      	cbnz	r3, 80007c0 <__aeabi_uldivmod+0x18>
 80007aa:	b94a      	cbnz	r2, 80007c0 <__aeabi_uldivmod+0x18>
 80007ac:	2900      	cmp	r1, #0
 80007ae:	bf08      	it	eq
 80007b0:	2800      	cmpeq	r0, #0
 80007b2:	bf1c      	itt	ne
 80007b4:	f04f 31ff 	movne.w	r1, #4294967295
 80007b8:	f04f 30ff 	movne.w	r0, #4294967295
 80007bc:	f000 b972 	b.w	8000aa4 <__aeabi_idiv0>
 80007c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007c8:	f000 f806 	bl	80007d8 <__udivmoddi4>
 80007cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007d4:	b004      	add	sp, #16
 80007d6:	4770      	bx	lr

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9e08      	ldr	r6, [sp, #32]
 80007de:	4604      	mov	r4, r0
 80007e0:	4688      	mov	r8, r1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d14b      	bne.n	800087e <__udivmoddi4+0xa6>
 80007e6:	428a      	cmp	r2, r1
 80007e8:	4615      	mov	r5, r2
 80007ea:	d967      	bls.n	80008bc <__udivmoddi4+0xe4>
 80007ec:	fab2 f282 	clz	r2, r2
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0720 	rsb	r7, r2, #32
 80007f6:	fa01 f302 	lsl.w	r3, r1, r2
 80007fa:	fa20 f707 	lsr.w	r7, r0, r7
 80007fe:	4095      	lsls	r5, r2
 8000800:	ea47 0803 	orr.w	r8, r7, r3
 8000804:	4094      	lsls	r4, r2
 8000806:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800080a:	0c23      	lsrs	r3, r4, #16
 800080c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000810:	fa1f fc85 	uxth.w	ip, r5
 8000814:	fb0e 8817 	mls	r8, lr, r7, r8
 8000818:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800081c:	fb07 f10c 	mul.w	r1, r7, ip
 8000820:	4299      	cmp	r1, r3
 8000822:	d909      	bls.n	8000838 <__udivmoddi4+0x60>
 8000824:	18eb      	adds	r3, r5, r3
 8000826:	f107 30ff 	add.w	r0, r7, #4294967295
 800082a:	f080 811b 	bcs.w	8000a64 <__udivmoddi4+0x28c>
 800082e:	4299      	cmp	r1, r3
 8000830:	f240 8118 	bls.w	8000a64 <__udivmoddi4+0x28c>
 8000834:	3f02      	subs	r7, #2
 8000836:	442b      	add	r3, r5
 8000838:	1a5b      	subs	r3, r3, r1
 800083a:	b2a4      	uxth	r4, r4
 800083c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000840:	fb0e 3310 	mls	r3, lr, r0, r3
 8000844:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000848:	fb00 fc0c 	mul.w	ip, r0, ip
 800084c:	45a4      	cmp	ip, r4
 800084e:	d909      	bls.n	8000864 <__udivmoddi4+0x8c>
 8000850:	192c      	adds	r4, r5, r4
 8000852:	f100 33ff 	add.w	r3, r0, #4294967295
 8000856:	f080 8107 	bcs.w	8000a68 <__udivmoddi4+0x290>
 800085a:	45a4      	cmp	ip, r4
 800085c:	f240 8104 	bls.w	8000a68 <__udivmoddi4+0x290>
 8000860:	3802      	subs	r0, #2
 8000862:	442c      	add	r4, r5
 8000864:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000868:	eba4 040c 	sub.w	r4, r4, ip
 800086c:	2700      	movs	r7, #0
 800086e:	b11e      	cbz	r6, 8000878 <__udivmoddi4+0xa0>
 8000870:	40d4      	lsrs	r4, r2
 8000872:	2300      	movs	r3, #0
 8000874:	e9c6 4300 	strd	r4, r3, [r6]
 8000878:	4639      	mov	r1, r7
 800087a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800087e:	428b      	cmp	r3, r1
 8000880:	d909      	bls.n	8000896 <__udivmoddi4+0xbe>
 8000882:	2e00      	cmp	r6, #0
 8000884:	f000 80eb 	beq.w	8000a5e <__udivmoddi4+0x286>
 8000888:	2700      	movs	r7, #0
 800088a:	e9c6 0100 	strd	r0, r1, [r6]
 800088e:	4638      	mov	r0, r7
 8000890:	4639      	mov	r1, r7
 8000892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000896:	fab3 f783 	clz	r7, r3
 800089a:	2f00      	cmp	r7, #0
 800089c:	d147      	bne.n	800092e <__udivmoddi4+0x156>
 800089e:	428b      	cmp	r3, r1
 80008a0:	d302      	bcc.n	80008a8 <__udivmoddi4+0xd0>
 80008a2:	4282      	cmp	r2, r0
 80008a4:	f200 80fa 	bhi.w	8000a9c <__udivmoddi4+0x2c4>
 80008a8:	1a84      	subs	r4, r0, r2
 80008aa:	eb61 0303 	sbc.w	r3, r1, r3
 80008ae:	2001      	movs	r0, #1
 80008b0:	4698      	mov	r8, r3
 80008b2:	2e00      	cmp	r6, #0
 80008b4:	d0e0      	beq.n	8000878 <__udivmoddi4+0xa0>
 80008b6:	e9c6 4800 	strd	r4, r8, [r6]
 80008ba:	e7dd      	b.n	8000878 <__udivmoddi4+0xa0>
 80008bc:	b902      	cbnz	r2, 80008c0 <__udivmoddi4+0xe8>
 80008be:	deff      	udf	#255	; 0xff
 80008c0:	fab2 f282 	clz	r2, r2
 80008c4:	2a00      	cmp	r2, #0
 80008c6:	f040 808f 	bne.w	80009e8 <__udivmoddi4+0x210>
 80008ca:	1b49      	subs	r1, r1, r5
 80008cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008d0:	fa1f f885 	uxth.w	r8, r5
 80008d4:	2701      	movs	r7, #1
 80008d6:	fbb1 fcfe 	udiv	ip, r1, lr
 80008da:	0c23      	lsrs	r3, r4, #16
 80008dc:	fb0e 111c 	mls	r1, lr, ip, r1
 80008e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008e4:	fb08 f10c 	mul.w	r1, r8, ip
 80008e8:	4299      	cmp	r1, r3
 80008ea:	d907      	bls.n	80008fc <__udivmoddi4+0x124>
 80008ec:	18eb      	adds	r3, r5, r3
 80008ee:	f10c 30ff 	add.w	r0, ip, #4294967295
 80008f2:	d202      	bcs.n	80008fa <__udivmoddi4+0x122>
 80008f4:	4299      	cmp	r1, r3
 80008f6:	f200 80cd 	bhi.w	8000a94 <__udivmoddi4+0x2bc>
 80008fa:	4684      	mov	ip, r0
 80008fc:	1a59      	subs	r1, r3, r1
 80008fe:	b2a3      	uxth	r3, r4
 8000900:	fbb1 f0fe 	udiv	r0, r1, lr
 8000904:	fb0e 1410 	mls	r4, lr, r0, r1
 8000908:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800090c:	fb08 f800 	mul.w	r8, r8, r0
 8000910:	45a0      	cmp	r8, r4
 8000912:	d907      	bls.n	8000924 <__udivmoddi4+0x14c>
 8000914:	192c      	adds	r4, r5, r4
 8000916:	f100 33ff 	add.w	r3, r0, #4294967295
 800091a:	d202      	bcs.n	8000922 <__udivmoddi4+0x14a>
 800091c:	45a0      	cmp	r8, r4
 800091e:	f200 80b6 	bhi.w	8000a8e <__udivmoddi4+0x2b6>
 8000922:	4618      	mov	r0, r3
 8000924:	eba4 0408 	sub.w	r4, r4, r8
 8000928:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800092c:	e79f      	b.n	800086e <__udivmoddi4+0x96>
 800092e:	f1c7 0c20 	rsb	ip, r7, #32
 8000932:	40bb      	lsls	r3, r7
 8000934:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000938:	ea4e 0e03 	orr.w	lr, lr, r3
 800093c:	fa01 f407 	lsl.w	r4, r1, r7
 8000940:	fa20 f50c 	lsr.w	r5, r0, ip
 8000944:	fa21 f30c 	lsr.w	r3, r1, ip
 8000948:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800094c:	4325      	orrs	r5, r4
 800094e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000952:	0c2c      	lsrs	r4, r5, #16
 8000954:	fb08 3319 	mls	r3, r8, r9, r3
 8000958:	fa1f fa8e 	uxth.w	sl, lr
 800095c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000960:	fb09 f40a 	mul.w	r4, r9, sl
 8000964:	429c      	cmp	r4, r3
 8000966:	fa02 f207 	lsl.w	r2, r2, r7
 800096a:	fa00 f107 	lsl.w	r1, r0, r7
 800096e:	d90b      	bls.n	8000988 <__udivmoddi4+0x1b0>
 8000970:	eb1e 0303 	adds.w	r3, lr, r3
 8000974:	f109 30ff 	add.w	r0, r9, #4294967295
 8000978:	f080 8087 	bcs.w	8000a8a <__udivmoddi4+0x2b2>
 800097c:	429c      	cmp	r4, r3
 800097e:	f240 8084 	bls.w	8000a8a <__udivmoddi4+0x2b2>
 8000982:	f1a9 0902 	sub.w	r9, r9, #2
 8000986:	4473      	add	r3, lr
 8000988:	1b1b      	subs	r3, r3, r4
 800098a:	b2ad      	uxth	r5, r5
 800098c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000990:	fb08 3310 	mls	r3, r8, r0, r3
 8000994:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000998:	fb00 fa0a 	mul.w	sl, r0, sl
 800099c:	45a2      	cmp	sl, r4
 800099e:	d908      	bls.n	80009b2 <__udivmoddi4+0x1da>
 80009a0:	eb1e 0404 	adds.w	r4, lr, r4
 80009a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80009a8:	d26b      	bcs.n	8000a82 <__udivmoddi4+0x2aa>
 80009aa:	45a2      	cmp	sl, r4
 80009ac:	d969      	bls.n	8000a82 <__udivmoddi4+0x2aa>
 80009ae:	3802      	subs	r0, #2
 80009b0:	4474      	add	r4, lr
 80009b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009b6:	fba0 8902 	umull	r8, r9, r0, r2
 80009ba:	eba4 040a 	sub.w	r4, r4, sl
 80009be:	454c      	cmp	r4, r9
 80009c0:	46c2      	mov	sl, r8
 80009c2:	464b      	mov	r3, r9
 80009c4:	d354      	bcc.n	8000a70 <__udivmoddi4+0x298>
 80009c6:	d051      	beq.n	8000a6c <__udivmoddi4+0x294>
 80009c8:	2e00      	cmp	r6, #0
 80009ca:	d069      	beq.n	8000aa0 <__udivmoddi4+0x2c8>
 80009cc:	ebb1 050a 	subs.w	r5, r1, sl
 80009d0:	eb64 0403 	sbc.w	r4, r4, r3
 80009d4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80009d8:	40fd      	lsrs	r5, r7
 80009da:	40fc      	lsrs	r4, r7
 80009dc:	ea4c 0505 	orr.w	r5, ip, r5
 80009e0:	e9c6 5400 	strd	r5, r4, [r6]
 80009e4:	2700      	movs	r7, #0
 80009e6:	e747      	b.n	8000878 <__udivmoddi4+0xa0>
 80009e8:	f1c2 0320 	rsb	r3, r2, #32
 80009ec:	fa20 f703 	lsr.w	r7, r0, r3
 80009f0:	4095      	lsls	r5, r2
 80009f2:	fa01 f002 	lsl.w	r0, r1, r2
 80009f6:	fa21 f303 	lsr.w	r3, r1, r3
 80009fa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80009fe:	4338      	orrs	r0, r7
 8000a00:	0c01      	lsrs	r1, r0, #16
 8000a02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000a06:	fa1f f885 	uxth.w	r8, r5
 8000a0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000a0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a12:	fb07 f308 	mul.w	r3, r7, r8
 8000a16:	428b      	cmp	r3, r1
 8000a18:	fa04 f402 	lsl.w	r4, r4, r2
 8000a1c:	d907      	bls.n	8000a2e <__udivmoddi4+0x256>
 8000a1e:	1869      	adds	r1, r5, r1
 8000a20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000a24:	d22f      	bcs.n	8000a86 <__udivmoddi4+0x2ae>
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d92d      	bls.n	8000a86 <__udivmoddi4+0x2ae>
 8000a2a:	3f02      	subs	r7, #2
 8000a2c:	4429      	add	r1, r5
 8000a2e:	1acb      	subs	r3, r1, r3
 8000a30:	b281      	uxth	r1, r0
 8000a32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a3e:	fb00 f308 	mul.w	r3, r0, r8
 8000a42:	428b      	cmp	r3, r1
 8000a44:	d907      	bls.n	8000a56 <__udivmoddi4+0x27e>
 8000a46:	1869      	adds	r1, r5, r1
 8000a48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a4c:	d217      	bcs.n	8000a7e <__udivmoddi4+0x2a6>
 8000a4e:	428b      	cmp	r3, r1
 8000a50:	d915      	bls.n	8000a7e <__udivmoddi4+0x2a6>
 8000a52:	3802      	subs	r0, #2
 8000a54:	4429      	add	r1, r5
 8000a56:	1ac9      	subs	r1, r1, r3
 8000a58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000a5c:	e73b      	b.n	80008d6 <__udivmoddi4+0xfe>
 8000a5e:	4637      	mov	r7, r6
 8000a60:	4630      	mov	r0, r6
 8000a62:	e709      	b.n	8000878 <__udivmoddi4+0xa0>
 8000a64:	4607      	mov	r7, r0
 8000a66:	e6e7      	b.n	8000838 <__udivmoddi4+0x60>
 8000a68:	4618      	mov	r0, r3
 8000a6a:	e6fb      	b.n	8000864 <__udivmoddi4+0x8c>
 8000a6c:	4541      	cmp	r1, r8
 8000a6e:	d2ab      	bcs.n	80009c8 <__udivmoddi4+0x1f0>
 8000a70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000a74:	eb69 020e 	sbc.w	r2, r9, lr
 8000a78:	3801      	subs	r0, #1
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	e7a4      	b.n	80009c8 <__udivmoddi4+0x1f0>
 8000a7e:	4660      	mov	r0, ip
 8000a80:	e7e9      	b.n	8000a56 <__udivmoddi4+0x27e>
 8000a82:	4618      	mov	r0, r3
 8000a84:	e795      	b.n	80009b2 <__udivmoddi4+0x1da>
 8000a86:	4667      	mov	r7, ip
 8000a88:	e7d1      	b.n	8000a2e <__udivmoddi4+0x256>
 8000a8a:	4681      	mov	r9, r0
 8000a8c:	e77c      	b.n	8000988 <__udivmoddi4+0x1b0>
 8000a8e:	3802      	subs	r0, #2
 8000a90:	442c      	add	r4, r5
 8000a92:	e747      	b.n	8000924 <__udivmoddi4+0x14c>
 8000a94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a98:	442b      	add	r3, r5
 8000a9a:	e72f      	b.n	80008fc <__udivmoddi4+0x124>
 8000a9c:	4638      	mov	r0, r7
 8000a9e:	e708      	b.n	80008b2 <__udivmoddi4+0xda>
 8000aa0:	4637      	mov	r7, r6
 8000aa2:	e6e9      	b.n	8000878 <__udivmoddi4+0xa0>

08000aa4 <__aeabi_idiv0>:
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <crc32>:
 */
#include "SoftwareCRC.h"
#include "stm32f4xx_hal.h"

uint32_t crc32(const void *buf, size_t size)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
	const uint8_t *p = buf;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	60fb      	str	r3, [r7, #12]
	uint32_t crc;

	crc = ~0U;
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aba:	60bb      	str	r3, [r7, #8]
	while (size--)
 8000abc:	e00e      	b.n	8000adc <crc32+0x34>
	crc = crc32_tab[(crc ^ *p++) & 0xFF] ^ (crc >> 8);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	1c5a      	adds	r2, r3, #1
 8000ac2:	60fa      	str	r2, [r7, #12]
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	4053      	eors	r3, r2
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <crc32+0x50>)
 8000ad0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	0a1b      	lsrs	r3, r3, #8
 8000ad8:	4053      	eors	r3, r2
 8000ada:	60bb      	str	r3, [r7, #8]
	while (size--)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	1e5a      	subs	r2, r3, #1
 8000ae0:	603a      	str	r2, [r7, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d1eb      	bne.n	8000abe <crc32+0x16>
	return crc ^ ~0U;
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	43db      	mvns	r3, r3
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	08007430 	.word	0x08007430

08000afc <makeFrame>:
		int16_t ToF_L,
		int16_t ToF_FL,
		int16_t ToF_F,
		int16_t ToF_FR,
		int16_t ToF_R)
{
 8000afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b00:	b08d      	sub	sp, #52	; 0x34
 8000b02:	af06      	add	r7, sp, #24
 8000b04:	6178      	str	r0, [r7, #20]
 8000b06:	4608      	mov	r0, r1
 8000b08:	4611      	mov	r1, r2
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	827b      	strh	r3, [r7, #18]
 8000b10:	460b      	mov	r3, r1
 8000b12:	823b      	strh	r3, [r7, #16]
 8000b14:	4613      	mov	r3, r2
 8000b16:	81fb      	strh	r3, [r7, #14]

	//sprintf jest dwa razy bo musi nadpisać starą zawartość crc

	sprintf(frameString, "X_%05d_%05d_%04d_%04d_%04d_%04d_%04d_%010lu",
 8000b18:	f9b7 8012 	ldrsh.w	r8, [r7, #18]
 8000b1c:	f9b7 9010 	ldrsh.w	r9, [r7, #16]
 8000b20:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8000b24:	f9b7 5038 	ldrsh.w	r5, [r7, #56]	; 0x38
 8000b28:	f9b7 603c 	ldrsh.w	r6, [r7, #60]	; 0x3c
 8000b2c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8000b36:	607a      	str	r2, [r7, #4]
 8000b38:	2126      	movs	r1, #38	; 0x26
 8000b3a:	6978      	ldr	r0, [r7, #20]
 8000b3c:	f7ff ffb4 	bl	8000aa8 <crc32>
 8000b40:	4603      	mov	r3, r0
 8000b42:	9305      	str	r3, [sp, #20]
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	9204      	str	r2, [sp, #16]
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	9303      	str	r3, [sp, #12]
 8000b4c:	9602      	str	r6, [sp, #8]
 8000b4e:	9501      	str	r5, [sp, #4]
 8000b50:	9400      	str	r4, [sp, #0]
 8000b52:	464b      	mov	r3, r9
 8000b54:	4642      	mov	r2, r8
 8000b56:	4916      	ldr	r1, [pc, #88]	; (8000bb0 <makeFrame+0xb4>)
 8000b58:	6978      	ldr	r0, [r7, #20]
 8000b5a:	f005 fcf1 	bl	8006540 <siprintf>
			ToF_FL,
			ToF_F,
			ToF_FR,
			ToF_R,
			crc32(frameString,38));
	sprintf(frameString, "X_%05d_%05d_%04d_%04d_%04d_%04d_%04d_%010lu",
 8000b5e:	f9b7 8012 	ldrsh.w	r8, [r7, #18]
 8000b62:	f9b7 9010 	ldrsh.w	r9, [r7, #16]
 8000b66:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8000b6a:	f9b7 5038 	ldrsh.w	r5, [r7, #56]	; 0x38
 8000b6e:	f9b7 603c 	ldrsh.w	r6, [r7, #60]	; 0x3c
 8000b72:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	2126      	movs	r1, #38	; 0x26
 8000b80:	6978      	ldr	r0, [r7, #20]
 8000b82:	f7ff ff91 	bl	8000aa8 <crc32>
 8000b86:	4603      	mov	r3, r0
 8000b88:	9305      	str	r3, [sp, #20]
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	9204      	str	r2, [sp, #16]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	9303      	str	r3, [sp, #12]
 8000b92:	9602      	str	r6, [sp, #8]
 8000b94:	9501      	str	r5, [sp, #4]
 8000b96:	9400      	str	r4, [sp, #0]
 8000b98:	464b      	mov	r3, r9
 8000b9a:	4642      	mov	r2, r8
 8000b9c:	4904      	ldr	r1, [pc, #16]	; (8000bb0 <makeFrame+0xb4>)
 8000b9e:	6978      	ldr	r0, [r7, #20]
 8000ba0:	f005 fcce 	bl	8006540 <siprintf>
			ToF_FL,
			ToF_F,
			ToF_FR,
			ToF_R,
			crc32(frameString,38));
}
 8000ba4:	bf00      	nop
 8000ba6:	371c      	adds	r7, #28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000bae:	bf00      	nop
 8000bb0:	080073f8 	.word	0x080073f8

08000bb4 <ToF_writeReg>:


//Zapisywanie do rejestrów

void ToF_writeReg(struct ToF_struct *ToF, uint8_t reg, uint8_t value)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af04      	add	r7, sp, #16
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	70fb      	strb	r3, [r7, #3]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(&hi2c1, (ToF->bus_address)<<1, reg, 1, (uint8_t*)&value, 1, HAL_MAX_DELAY);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	b299      	uxth	r1, r3
 8000bce:	78fb      	ldrb	r3, [r7, #3]
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	9302      	str	r3, [sp, #8]
 8000bd8:	2301      	movs	r3, #1
 8000bda:	9301      	str	r3, [sp, #4]
 8000bdc:	1cbb      	adds	r3, r7, #2
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	2301      	movs	r3, #1
 8000be2:	4803      	ldr	r0, [pc, #12]	; (8000bf0 <ToF_writeReg+0x3c>)
 8000be4:	f002 fe7c 	bl	80038e0 <HAL_I2C_Mem_Write>
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000104 	.word	0x20000104

08000bf4 <ToF_writeReg16Bit>:

void ToF_writeReg16Bit(struct ToF_struct *ToF, uint8_t reg, uint16_t value)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af04      	add	r7, sp, #16
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	70fb      	strb	r3, [r7, #3]
 8000c00:	4613      	mov	r3, r2
 8000c02:	803b      	strh	r3, [r7, #0]
	uint8_t tmp[2];
	tmp[0]=(uint8_t)value>>8 & 0xFF; //MSB
 8000c04:	2300      	movs	r3, #0
 8000c06:	733b      	strb	r3, [r7, #12]
	tmp[1]=(uint8_t)value    & 0xFF; //LSB
 8000c08:	883b      	ldrh	r3, [r7, #0]
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(&hi2c1, (ToF->bus_address)<<1, reg, 1, tmp, 2, HAL_MAX_DELAY);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	b299      	uxth	r1, r3
 8000c18:	78fb      	ldrb	r3, [r7, #3]
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c20:	9302      	str	r3, [sp, #8]
 8000c22:	2302      	movs	r3, #2
 8000c24:	9301      	str	r3, [sp, #4]
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	4803      	ldr	r0, [pc, #12]	; (8000c3c <ToF_writeReg16Bit+0x48>)
 8000c30:	f002 fe56 	bl	80038e0 <HAL_I2C_Mem_Write>
}
 8000c34:	bf00      	nop
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000104 	.word	0x20000104

08000c40 <ToF_writeMulti>:
	tmp[1]=(uint8_t)value     & 0xFF; //LSB
	HAL_I2C_Mem_Write(&hi2c1, (ToF->bus_address)<<1, reg, 1, tmp, 4, HAL_MAX_DELAY);
}

void ToF_writeMulti(struct ToF_struct *ToF, uint8_t reg, uint8_t *src, uint8_t count)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af04      	add	r7, sp, #16
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	607a      	str	r2, [r7, #4]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	72fb      	strb	r3, [r7, #11]
 8000c50:	4613      	mov	r3, r2
 8000c52:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Mem_Write(&hi2c1, (ToF->bus_address)<<1, reg, 1, src, count, HAL_MAX_DELAY);
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	b299      	uxth	r1, r3
 8000c5e:	7afb      	ldrb	r3, [r7, #11]
 8000c60:	b298      	uxth	r0, r3
 8000c62:	7abb      	ldrb	r3, [r7, #10]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6a:	9202      	str	r2, [sp, #8]
 8000c6c:	9301      	str	r3, [sp, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	2301      	movs	r3, #1
 8000c74:	4602      	mov	r2, r0
 8000c76:	4803      	ldr	r0, [pc, #12]	; (8000c84 <ToF_writeMulti+0x44>)
 8000c78:	f002 fe32 	bl	80038e0 <HAL_I2C_Mem_Write>
}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000104 	.word	0x20000104

08000c88 <ToF_readReg>:
//HAL_I2C_Mem_Read (I2C_HandleTypeDef *hi2c, uint16_t DevAddress   , uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
//HAL_I2C_Mem_Read (&hi2c1                 ,  (ToF->bus_address)<<1, reg                , 1                  , &value        , sizeof(value), HAL_MAX_DELAY   )


uint8_t ToF_readReg(struct ToF_struct *ToF, uint8_t reg)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af04      	add	r7, sp, #16
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	70fb      	strb	r3, [r7, #3]
	uint8_t value = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Read(&hi2c1, (ToF->bus_address)<<1, reg, 1, &value, 1, HAL_MAX_DELAY);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	b299      	uxth	r1, r3
 8000ca2:	78fb      	ldrb	r3, [r7, #3]
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8000caa:	9302      	str	r3, [sp, #8]
 8000cac:	2301      	movs	r3, #1
 8000cae:	9301      	str	r3, [sp, #4]
 8000cb0:	f107 030f 	add.w	r3, r7, #15
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <ToF_readReg+0x40>)
 8000cba:	f002 ff0b 	bl	8003ad4 <HAL_I2C_Mem_Read>

	return value;
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000104 	.word	0x20000104

08000ccc <ToF_readReg16Bit>:

uint16_t ToF_readReg16Bit(struct ToF_struct *ToF, uint8_t reg)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b088      	sub	sp, #32
 8000cd0:	af04      	add	r7, sp, #16
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	70fb      	strb	r3, [r7, #3]
	uint8_t value_tab[2];

	HAL_I2C_Mem_Read(&hi2c1, (ToF->bus_address)<<1, reg, 1, value_tab, 2, HAL_MAX_DELAY);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	b299      	uxth	r1, r3
 8000ce2:	78fb      	ldrb	r3, [r7, #3]
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cea:	9302      	str	r3, [sp, #8]
 8000cec:	2302      	movs	r3, #2
 8000cee:	9301      	str	r3, [sp, #4]
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	9300      	str	r3, [sp, #0]
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	4807      	ldr	r0, [pc, #28]	; (8000d18 <ToF_readReg16Bit+0x4c>)
 8000cfa:	f002 feeb 	bl	8003ad4 <HAL_I2C_Mem_Read>

	uint16_t value = (value_tab[0] << 8) | value_tab[1];
 8000cfe:	7b3b      	ldrb	r3, [r7, #12]
 8000d00:	021b      	lsls	r3, r3, #8
 8000d02:	b21a      	sxth	r2, r3
 8000d04:	7b7b      	ldrb	r3, [r7, #13]
 8000d06:	b21b      	sxth	r3, r3
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	b21b      	sxth	r3, r3
 8000d0c:	81fb      	strh	r3, [r7, #14]

	return value;
 8000d0e:	89fb      	ldrh	r3, [r7, #14]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000104 	.word	0x20000104

08000d1c <ToF_readMulti>:

void ToF_readMulti(struct ToF_struct *ToF, uint8_t reg, uint8_t *dst, uint8_t count)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af04      	add	r7, sp, #16
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	607a      	str	r2, [r7, #4]
 8000d26:	461a      	mov	r2, r3
 8000d28:	460b      	mov	r3, r1
 8000d2a:	72fb      	strb	r3, [r7, #11]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Mem_Read(&hi2c1, (ToF->bus_address)<<1, reg, 1, dst, count, HAL_MAX_DELAY);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	b299      	uxth	r1, r3
 8000d3a:	7afb      	ldrb	r3, [r7, #11]
 8000d3c:	b298      	uxth	r0, r3
 8000d3e:	7abb      	ldrb	r3, [r7, #10]
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	f04f 32ff 	mov.w	r2, #4294967295
 8000d46:	9202      	str	r2, [sp, #8]
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	2301      	movs	r3, #1
 8000d50:	4602      	mov	r2, r0
 8000d52:	4803      	ldr	r0, [pc, #12]	; (8000d60 <ToF_readMulti+0x44>)
 8000d54:	f002 febe 	bl	8003ad4 <HAL_I2C_Mem_Read>
}
 8000d58:	bf00      	nop
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000104 	.word	0x20000104
 8000d64:	00000000 	.word	0x00000000

08000d68 <ToF_setSignalRateLimit>:

uint8_t ToF_setSignalRateLimit(struct ToF_struct *ToF, float limit_Mcps)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	ed87 0a00 	vstr	s0, [r7]
	if (limit_Mcps < 0 || limit_Mcps > 511.99) { return 0; }
 8000d74:	edd7 7a00 	vldr	s15, [r7]
 8000d78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d80:	d40a      	bmi.n	8000d98 <ToF_setSignalRateLimit+0x30>
 8000d82:	6838      	ldr	r0, [r7, #0]
 8000d84:	f7ff fbe0 	bl	8000548 <__aeabi_f2d>
 8000d88:	a310      	add	r3, pc, #64	; (adr r3, 8000dcc <ToF_setSignalRateLimit+0x64>)
 8000d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d8e:	f7ff fcb1 	bl	80006f4 <__aeabi_dcmpgt>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <ToF_setSignalRateLimit+0x34>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	e010      	b.n	8000dbe <ToF_setSignalRateLimit+0x56>
	// Q9.7 fixed point format (9 integer bits, 7 fractional bits)
	ToF_writeReg16Bit(ToF, FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 8000d9c:	edd7 7a00 	vldr	s15, [r7]
 8000da0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000dc8 <ToF_setSignalRateLimit+0x60>
 8000da4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dac:	ee17 3a90 	vmov	r3, s15
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	461a      	mov	r2, r3
 8000db4:	2144      	movs	r1, #68	; 0x44
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff ff1c 	bl	8000bf4 <ToF_writeReg16Bit>
	return 1;
 8000dbc:	2301      	movs	r3, #1
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	43000000 	.word	0x43000000
 8000dcc:	0a3d70a4 	.word	0x0a3d70a4
 8000dd0:	407fffd7 	.word	0x407fffd7

08000dd4 <ToF_getSpadInfo>:

uint8_t ToF_getSpadInfo(struct ToF_struct *ToF, uint8_t *count, uint8_t *type_is_aperture)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
	uint8_t tmp;

	tmp = ToF_readReg(ToF, 0xC0);
 8000de0:	21c0      	movs	r1, #192	; 0xc0
 8000de2:	68f8      	ldr	r0, [r7, #12]
 8000de4:	f7ff ff50 	bl	8000c88 <ToF_readReg>
 8000de8:	4603      	mov	r3, r0
 8000dea:	75fb      	strb	r3, [r7, #23]
	ToF_writeReg(ToF, 0x80, 0x01);
 8000dec:	2201      	movs	r2, #1
 8000dee:	2180      	movs	r1, #128	; 0x80
 8000df0:	68f8      	ldr	r0, [r7, #12]
 8000df2:	f7ff fedf 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x01);
 8000df6:	2201      	movs	r2, #1
 8000df8:	21ff      	movs	r1, #255	; 0xff
 8000dfa:	68f8      	ldr	r0, [r7, #12]
 8000dfc:	f7ff feda 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x00, 0x00);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2100      	movs	r1, #0
 8000e04:	68f8      	ldr	r0, [r7, #12]
 8000e06:	f7ff fed5 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x06);
 8000e0a:	2206      	movs	r2, #6
 8000e0c:	21ff      	movs	r1, #255	; 0xff
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	f7ff fed0 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x83, ToF_readReg(ToF, 0x83) | 0x04);
 8000e14:	2183      	movs	r1, #131	; 0x83
 8000e16:	68f8      	ldr	r0, [r7, #12]
 8000e18:	f7ff ff36 	bl	8000c88 <ToF_readReg>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	461a      	mov	r2, r3
 8000e26:	2183      	movs	r1, #131	; 0x83
 8000e28:	68f8      	ldr	r0, [r7, #12]
 8000e2a:	f7ff fec3 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x07);
 8000e2e:	2207      	movs	r2, #7
 8000e30:	21ff      	movs	r1, #255	; 0xff
 8000e32:	68f8      	ldr	r0, [r7, #12]
 8000e34:	f7ff febe 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x81, 0x01);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2181      	movs	r1, #129	; 0x81
 8000e3c:	68f8      	ldr	r0, [r7, #12]
 8000e3e:	f7ff feb9 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0x80, 0x01);
 8000e42:	2201      	movs	r2, #1
 8000e44:	2180      	movs	r1, #128	; 0x80
 8000e46:	68f8      	ldr	r0, [r7, #12]
 8000e48:	f7ff feb4 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0x94, 0x6b);
 8000e4c:	226b      	movs	r2, #107	; 0x6b
 8000e4e:	2194      	movs	r1, #148	; 0x94
 8000e50:	68f8      	ldr	r0, [r7, #12]
 8000e52:	f7ff feaf 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x83, 0x00);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2183      	movs	r1, #131	; 0x83
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	f7ff feaa 	bl	8000bb4 <ToF_writeReg>
	while (ToF_readReg(ToF, 0x83) == 0x00)
	{

	}
	*/
	ToF_writeReg(ToF, 0x83, 0x01);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2183      	movs	r1, #131	; 0x83
 8000e64:	68f8      	ldr	r0, [r7, #12]
 8000e66:	f7ff fea5 	bl	8000bb4 <ToF_writeReg>
	tmp = ToF_readReg(ToF, 0x92);
 8000e6a:	2192      	movs	r1, #146	; 0x92
 8000e6c:	68f8      	ldr	r0, [r7, #12]
 8000e6e:	f7ff ff0b 	bl	8000c88 <ToF_readReg>
 8000e72:	4603      	mov	r3, r0
 8000e74:	75fb      	strb	r3, [r7, #23]

	*count = tmp & 0x7f;
 8000e76:	7dfb      	ldrb	r3, [r7, #23]
 8000e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	701a      	strb	r2, [r3, #0]
	*type_is_aperture = (tmp >> 7) & 0x01;
 8000e82:	7dfb      	ldrb	r3, [r7, #23]
 8000e84:	09db      	lsrs	r3, r3, #7
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	701a      	strb	r2, [r3, #0]

	ToF_writeReg(ToF, 0x81, 0x00);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2181      	movs	r1, #129	; 0x81
 8000e90:	68f8      	ldr	r0, [r7, #12]
 8000e92:	f7ff fe8f 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x06);
 8000e96:	2206      	movs	r2, #6
 8000e98:	21ff      	movs	r1, #255	; 0xff
 8000e9a:	68f8      	ldr	r0, [r7, #12]
 8000e9c:	f7ff fe8a 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x83, ToF_readReg(ToF, 0x83)  & ~0x04);
 8000ea0:	2183      	movs	r1, #131	; 0x83
 8000ea2:	68f8      	ldr	r0, [r7, #12]
 8000ea4:	f7ff fef0 	bl	8000c88 <ToF_readReg>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	f023 0304 	bic.w	r3, r3, #4
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	2183      	movs	r1, #131	; 0x83
 8000eb4:	68f8      	ldr	r0, [r7, #12]
 8000eb6:	f7ff fe7d 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x01);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	21ff      	movs	r1, #255	; 0xff
 8000ebe:	68f8      	ldr	r0, [r7, #12]
 8000ec0:	f7ff fe78 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x00, 0x01);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	68f8      	ldr	r0, [r7, #12]
 8000eca:	f7ff fe73 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x00);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	21ff      	movs	r1, #255	; 0xff
 8000ed2:	68f8      	ldr	r0, [r7, #12]
 8000ed4:	f7ff fe6e 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x80, 0x00);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2180      	movs	r1, #128	; 0x80
 8000edc:	68f8      	ldr	r0, [r7, #12]
 8000ede:	f7ff fe69 	bl	8000bb4 <ToF_writeReg>

	return 1;
 8000ee2:	2301      	movs	r3, #1
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <ToF_decodeTimeout>:

uint16_t ToF_decodeTimeout(struct ToF_struct *ToF, uint16_t reg_val)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	807b      	strh	r3, [r7, #2]
	  // format: "(LSByte * 2^MSByte) + 1"
	  return (uint16_t)((reg_val & 0x00FF) <<
 8000ef8:	887b      	ldrh	r3, [r7, #2]
 8000efa:	b2db      	uxtb	r3, r3
	         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8000efc:	887a      	ldrh	r2, [r7, #2]
 8000efe:	0a12      	lsrs	r2, r2, #8
 8000f00:	b292      	uxth	r2, r2
	  return (uint16_t)((reg_val & 0x00FF) <<
 8000f02:	4093      	lsls	r3, r2
 8000f04:	b29b      	uxth	r3, r3
	         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8000f06:	3301      	adds	r3, #1
 8000f08:	b29b      	uxth	r3, r3
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <ToF_encodeTimeout>:
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.

uint16_t ToF_encodeTimeout(struct ToF_struct *ToF, uint16_t timeout_mclks)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b085      	sub	sp, #20
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	807b      	strh	r3, [r7, #2]
	  // format: "(LSByte * 2^MSByte) + 1"

	  uint32_t ls_byte = 0;                     // Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
	  uint16_t ms_byte = 0;                     // based on VL53L0X_calc_timeout_us()
 8000f26:	2300      	movs	r3, #0
 8000f28:	817b      	strh	r3, [r7, #10]

	  if (timeout_mclks > 0)
 8000f2a:	887b      	ldrh	r3, [r7, #2]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d018      	beq.n	8000f62 <ToF_encodeTimeout+0x4c>
	  {
	    ls_byte = timeout_mclks - 1;
 8000f30:	887b      	ldrh	r3, [r7, #2]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	60fb      	str	r3, [r7, #12]
	    while ((ls_byte & 0xFFFFFF00) > 0)
 8000f36:	e005      	b.n	8000f44 <ToF_encodeTimeout+0x2e>
	    {
	      ls_byte >>= 1;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	085b      	lsrs	r3, r3, #1
 8000f3c:	60fb      	str	r3, [r7, #12]
	      ms_byte++;
 8000f3e:	897b      	ldrh	r3, [r7, #10]
 8000f40:	3301      	adds	r3, #1
 8000f42:	817b      	strh	r3, [r7, #10]
	    while ((ls_byte & 0xFFFFFF00) > 0)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1f4      	bne.n	8000f38 <ToF_encodeTimeout+0x22>
	    }
	    return (ms_byte << 8) | (ls_byte & 0xFF);
 8000f4e:	897b      	ldrh	r3, [r7, #10]
 8000f50:	021b      	lsls	r3, r3, #8
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	e000      	b.n	8000f64 <ToF_encodeTimeout+0x4e>
	  }
	  else { return 0; }
 8000f62:	2300      	movs	r3, #0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <ToF_timeoutMclksToMicroseconds>:

uint32_t ToF_timeoutMclksToMicroseconds(struct ToF_struct *ToF, uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	807b      	strh	r3, [r7, #2]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	707b      	strb	r3, [r7, #1]
	  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8000f80:	787b      	ldrb	r3, [r7, #1]
 8000f82:	4a0d      	ldr	r2, [pc, #52]	; (8000fb8 <ToF_timeoutMclksToMicroseconds+0x48>)
 8000f84:	fb02 f303 	mul.w	r3, r2, r3
 8000f88:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000f8c:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <ToF_timeoutMclksToMicroseconds+0x4c>)
 8000f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f92:	099b      	lsrs	r3, r3, #6
 8000f94:	60fb      	str	r3, [r7, #12]

	  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8000f96:	887b      	ldrh	r3, [r7, #2]
 8000f98:	68fa      	ldr	r2, [r7, #12]
 8000f9a:	fb02 f203 	mul.w	r2, r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	085b      	lsrs	r3, r3, #1
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <ToF_timeoutMclksToMicroseconds+0x4c>)
 8000fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8000faa:	099b      	lsrs	r3, r3, #6
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	003a2f00 	.word	0x003a2f00
 8000fbc:	10624dd3 	.word	0x10624dd3

08000fc0 <ToF_timeoutMicrosecondsToMclks>:
// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()

uint32_t ToF_timeoutMicrosecondsToMclks(struct ToF_struct *ToF, uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b087      	sub	sp, #28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	71fb      	strb	r3, [r7, #7]
	  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <ToF_timeoutMicrosecondsToMclks+0x48>)
 8000fd2:	fb02 f303 	mul.w	r3, r2, r3
 8000fd6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000fda:	4a0c      	ldr	r2, [pc, #48]	; (800100c <ToF_timeoutMicrosecondsToMclks+0x4c>)
 8000fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe0:	099b      	lsrs	r3, r3, #6
 8000fe2:	617b      	str	r3, [r7, #20]

	  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fea:	fb02 f203 	mul.w	r2, r2, r3
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	085b      	lsrs	r3, r3, #1
 8000ff2:	441a      	add	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	371c      	adds	r7, #28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	003a2f00 	.word	0x003a2f00
 800100c:	10624dd3 	.word	0x10624dd3

08001010 <ToF_getSequenceStepEnables>:

void ToF_getSequenceStepEnables(struct ToF_struct *ToF, struct SequenceStepEnables *enables)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
	uint8_t sequence_config = ToF_readReg(ToF, SYSTEM_SEQUENCE_CONFIG);
 800101a:	2101      	movs	r1, #1
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff fe33 	bl	8000c88 <ToF_readReg>
 8001022:	4603      	mov	r3, r0
 8001024:	73fb      	strb	r3, [r7, #15]

	enables->tcc          = (sequence_config >> 4) & 0x1;
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	091b      	lsrs	r3, r3, #4
 800102a:	b2db      	uxtb	r3, r3
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	b2da      	uxtb	r2, r3
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	701a      	strb	r2, [r3, #0]
	enables->dss          = (sequence_config >> 3) & 0x1;
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	08db      	lsrs	r3, r3, #3
 800103a:	b2db      	uxtb	r3, r3
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	b2da      	uxtb	r2, r3
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	709a      	strb	r2, [r3, #2]
	enables->msrc         = (sequence_config >> 2) & 0x1;
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	089b      	lsrs	r3, r3, #2
 800104a:	b2db      	uxtb	r3, r3
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	b2da      	uxtb	r2, r3
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	705a      	strb	r2, [r3, #1]
	enables->pre_range    = (sequence_config >> 6) & 0x1;
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	099b      	lsrs	r3, r3, #6
 800105a:	b2db      	uxtb	r3, r3
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	b2da      	uxtb	r2, r3
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	70da      	strb	r2, [r3, #3]
	enables->final_range  = (sequence_config >> 7) & 0x1;
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	09db      	lsrs	r3, r3, #7
 800106a:	b2da      	uxtb	r2, r3
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	711a      	strb	r2, [r3, #4]
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <ToF_getVcselPulsePeriod>:

uint8_t ToF_getVcselPulsePeriod(struct ToF_struct *ToF, enum vcselPeriodType type)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	70fb      	strb	r3, [r7, #3]
	  if (type == VcselPeriodPreRange)
 8001084:	78fb      	ldrb	r3, [r7, #3]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d109      	bne.n	800109e <ToF_getVcselPulsePeriod+0x26>
	  {
	    return decodeVcselPeriod(ToF_readReg(ToF, PRE_RANGE_CONFIG_VCSEL_PERIOD));
 800108a:	2150      	movs	r1, #80	; 0x50
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff fdfb 	bl	8000c88 <ToF_readReg>
 8001092:	4603      	mov	r3, r0
 8001094:	3301      	adds	r3, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	b2db      	uxtb	r3, r3
 800109c:	e00d      	b.n	80010ba <ToF_getVcselPulsePeriod+0x42>
	  }
	  else if (type == VcselPeriodFinalRange)
 800109e:	78fb      	ldrb	r3, [r7, #3]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d109      	bne.n	80010b8 <ToF_getVcselPulsePeriod+0x40>
	  {
	    return decodeVcselPeriod(ToF_readReg(ToF, FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80010a4:	2170      	movs	r1, #112	; 0x70
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff fdee 	bl	8000c88 <ToF_readReg>
 80010ac:	4603      	mov	r3, r0
 80010ae:	3301      	adds	r3, #1
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	e000      	b.n	80010ba <ToF_getVcselPulsePeriod+0x42>
	  }
	  else { return 255; }
 80010b8:	23ff      	movs	r3, #255	; 0xff
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <ToF_getSequenceStepTimeouts>:

void ToF_getSequenceStepTimeouts(struct ToF_struct *ToF, struct SequenceStepEnables *enables, struct SequenceStepTimeouts *timeouts)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
	timeouts->pre_range_vcsel_period_pclks = ToF_getVcselPulsePeriod(ToF, VcselPeriodPreRange);
 80010ce:	2100      	movs	r1, #0
 80010d0:	68f8      	ldr	r0, [r7, #12]
 80010d2:	f7ff ffd1 	bl	8001078 <ToF_getVcselPulsePeriod>
 80010d6:	4603      	mov	r3, r0
 80010d8:	b29a      	uxth	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	801a      	strh	r2, [r3, #0]

		timeouts->msrc_dss_tcc_mclks = ToF_readReg(ToF, MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80010de:	2146      	movs	r1, #70	; 0x46
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f7ff fdd1 	bl	8000c88 <ToF_readReg>
 80010e6:	4603      	mov	r3, r0
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	3301      	adds	r3, #1
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	809a      	strh	r2, [r3, #4]
		timeouts->msrc_dss_tcc_us =
		  ToF_timeoutMclksToMicroseconds(ToF, timeouts->msrc_dss_tcc_mclks,
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	8899      	ldrh	r1, [r3, #4]
		                             timeouts->pre_range_vcsel_period_pclks);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	881b      	ldrh	r3, [r3, #0]
		  ToF_timeoutMclksToMicroseconds(ToF, timeouts->msrc_dss_tcc_mclks,
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	461a      	mov	r2, r3
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f7ff ff36 	bl	8000f70 <ToF_timeoutMclksToMicroseconds>
 8001104:	4602      	mov	r2, r0
		timeouts->msrc_dss_tcc_us =
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	60da      	str	r2, [r3, #12]

		timeouts->pre_range_mclks =
		  ToF_decodeTimeout(ToF, ToF_readReg16Bit(ToF, PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 800110a:	2151      	movs	r1, #81	; 0x51
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f7ff fddd 	bl	8000ccc <ToF_readReg16Bit>
 8001112:	4603      	mov	r3, r0
 8001114:	4619      	mov	r1, r3
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f7ff fee8 	bl	8000eec <ToF_decodeTimeout>
 800111c:	4603      	mov	r3, r0
 800111e:	461a      	mov	r2, r3
		timeouts->pre_range_mclks =
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	80da      	strh	r2, [r3, #6]
		timeouts->pre_range_us =
			ToF_timeoutMclksToMicroseconds(ToF, timeouts->pre_range_mclks,
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	88d9      	ldrh	r1, [r3, #6]
		                             timeouts->pre_range_vcsel_period_pclks);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	881b      	ldrh	r3, [r3, #0]
			ToF_timeoutMclksToMicroseconds(ToF, timeouts->pre_range_mclks,
 800112c:	b2db      	uxtb	r3, r3
 800112e:	461a      	mov	r2, r3
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	f7ff ff1d 	bl	8000f70 <ToF_timeoutMclksToMicroseconds>
 8001136:	4602      	mov	r2, r0
		timeouts->pre_range_us =
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	611a      	str	r2, [r3, #16]

		timeouts->final_range_vcsel_period_pclks = ToF_getVcselPulsePeriod(ToF, VcselPeriodFinalRange);
 800113c:	2101      	movs	r1, #1
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f7ff ff9a 	bl	8001078 <ToF_getVcselPulsePeriod>
 8001144:	4603      	mov	r3, r0
 8001146:	b29a      	uxth	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	805a      	strh	r2, [r3, #2]

		timeouts->final_range_mclks =
			ToF_decodeTimeout(ToF, ToF_readReg16Bit(ToF, FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 800114c:	2171      	movs	r1, #113	; 0x71
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f7ff fdbc 	bl	8000ccc <ToF_readReg16Bit>
 8001154:	4603      	mov	r3, r0
 8001156:	4619      	mov	r1, r3
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f7ff fec7 	bl	8000eec <ToF_decodeTimeout>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
		timeouts->final_range_mclks =
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	811a      	strh	r2, [r3, #8]

		if (enables->pre_range)
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	78db      	ldrb	r3, [r3, #3]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d007      	beq.n	800117e <ToF_getSequenceStepTimeouts+0xbc>
		{
		  timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	891a      	ldrh	r2, [r3, #8]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	88db      	ldrh	r3, [r3, #6]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	b29a      	uxth	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	811a      	strh	r2, [r3, #8]
		}

		timeouts->final_range_us =
			ToF_timeoutMclksToMicroseconds(ToF, timeouts->final_range_mclks,
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	8919      	ldrh	r1, [r3, #8]
		                               timeouts->final_range_vcsel_period_pclks);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	885b      	ldrh	r3, [r3, #2]
			ToF_timeoutMclksToMicroseconds(ToF, timeouts->final_range_mclks,
 8001186:	b2db      	uxtb	r3, r3
 8001188:	461a      	mov	r2, r3
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	f7ff fef0 	bl	8000f70 <ToF_timeoutMclksToMicroseconds>
 8001190:	4602      	mov	r2, r0
		timeouts->final_range_us =
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	615a      	str	r2, [r3, #20]
}
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <ToF_getMeasurementTimingBudget>:

uint32_t ToF_getMeasurementTimingBudget(struct ToF_struct *ToF)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b08e      	sub	sp, #56	; 0x38
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
	struct SequenceStepEnables enables;
		struct SequenceStepTimeouts timeouts;

		uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 80011a6:	f240 7376 	movw	r3, #1910	; 0x776
 80011aa:	867b      	strh	r3, [r7, #50]	; 0x32
		uint16_t const EndOverhead        = 960;
 80011ac:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80011b0:	863b      	strh	r3, [r7, #48]	; 0x30
		uint16_t const MsrcOverhead       = 660;
 80011b2:	f44f 7325 	mov.w	r3, #660	; 0x294
 80011b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		uint16_t const TccOverhead        = 590;
 80011b8:	f240 234e 	movw	r3, #590	; 0x24e
 80011bc:	85bb      	strh	r3, [r7, #44]	; 0x2c
		uint16_t const DssOverhead        = 690;
 80011be:	f240 23b2 	movw	r3, #690	; 0x2b2
 80011c2:	857b      	strh	r3, [r7, #42]	; 0x2a
		uint16_t const PreRangeOverhead   = 660;
 80011c4:	f44f 7325 	mov.w	r3, #660	; 0x294
 80011c8:	853b      	strh	r3, [r7, #40]	; 0x28
		uint16_t const FinalRangeOverhead = 550;
 80011ca:	f240 2326 	movw	r3, #550	; 0x226
 80011ce:	84fb      	strh	r3, [r7, #38]	; 0x26

		uint32_t budget_us = StartOverhead + EndOverhead;
 80011d0:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80011d2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80011d4:	4413      	add	r3, r2
 80011d6:	637b      	str	r3, [r7, #52]	; 0x34

		ToF_getSequenceStepEnables(ToF, &enables);
 80011d8:	f107 0320 	add.w	r3, r7, #32
 80011dc:	4619      	mov	r1, r3
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ff16 	bl	8001010 <ToF_getSequenceStepEnables>
		ToF_getSequenceStepTimeouts(ToF, &enables, &timeouts);
 80011e4:	f107 0208 	add.w	r2, r7, #8
 80011e8:	f107 0320 	add.w	r3, r7, #32
 80011ec:	4619      	mov	r1, r3
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ff67 	bl	80010c2 <ToF_getSequenceStepTimeouts>

		if (enables.tcc)
 80011f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d005      	beq.n	8001208 <ToF_getMeasurementTimingBudget+0x6a>
		{
		  budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80011fc:	697a      	ldr	r2, [r7, #20]
 80011fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001200:	4413      	add	r3, r2
 8001202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001204:	4413      	add	r3, r2
 8001206:	637b      	str	r3, [r7, #52]	; 0x34
		}
	    if (enables.dss)
 8001208:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800120c:	2b00      	cmp	r3, #0
 800120e:	d007      	beq.n	8001220 <ToF_getMeasurementTimingBudget+0x82>
		{
		  budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001214:	4413      	add	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800121a:	4413      	add	r3, r2
 800121c:	637b      	str	r3, [r7, #52]	; 0x34
 800121e:	e009      	b.n	8001234 <ToF_getMeasurementTimingBudget+0x96>
		}
		else if (enables.msrc)
 8001220:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001224:	2b00      	cmp	r3, #0
 8001226:	d005      	beq.n	8001234 <ToF_getMeasurementTimingBudget+0x96>
		{
		  budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800122c:	4413      	add	r3, r2
 800122e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001230:	4413      	add	r3, r2
 8001232:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if (enables.pre_range)
 8001234:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <ToF_getMeasurementTimingBudget+0xaa>
		{
		  budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001240:	4413      	add	r3, r2
 8001242:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001244:	4413      	add	r3, r2
 8001246:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if (enables.final_range)
 8001248:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800124c:	2b00      	cmp	r3, #0
 800124e:	d005      	beq.n	800125c <ToF_getMeasurementTimingBudget+0xbe>
		{
		  budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 8001250:	69fa      	ldr	r2, [r7, #28]
 8001252:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001254:	4413      	add	r3, r2
 8001256:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001258:	4413      	add	r3, r2
 800125a:	637b      	str	r3, [r7, #52]	; 0x34
		}

		ToF->measurement_timing_budget_us = budget_us; // store for internal reuse
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001260:	605a      	str	r2, [r3, #4]
		return budget_us;
 8001262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001264:	4618      	mov	r0, r3
 8001266:	3738      	adds	r7, #56	; 0x38
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <ToF_setMeasurementTimingBudget>:

uint8_t ToF_setMeasurementTimingBudget(struct ToF_struct *ToF, uint32_t budget_us)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b092      	sub	sp, #72	; 0x48
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
	  struct SequenceStepEnables enables;
	  struct SequenceStepTimeouts timeouts;

	  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 8001276:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 800127a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	  uint16_t const EndOverhead        = 960;
 800127e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001282:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  uint16_t const MsrcOverhead       = 660;
 8001284:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001288:	87bb      	strh	r3, [r7, #60]	; 0x3c
	  uint16_t const TccOverhead        = 590;
 800128a:	f240 234e 	movw	r3, #590	; 0x24e
 800128e:	877b      	strh	r3, [r7, #58]	; 0x3a
	  uint16_t const DssOverhead        = 690;
 8001290:	f240 23b2 	movw	r3, #690	; 0x2b2
 8001294:	873b      	strh	r3, [r7, #56]	; 0x38
	  uint16_t const PreRangeOverhead   = 660;
 8001296:	f44f 7325 	mov.w	r3, #660	; 0x294
 800129a:	86fb      	strh	r3, [r7, #54]	; 0x36
	  uint16_t const FinalRangeOverhead = 550;
 800129c:	f240 2326 	movw	r3, #550	; 0x226
 80012a0:	86bb      	strh	r3, [r7, #52]	; 0x34

	  uint32_t const MinTimingBudget = 20000;
 80012a2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80012a6:	633b      	str	r3, [r7, #48]	; 0x30

	  if (budget_us < MinTimingBudget) { return 0; }
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d201      	bcs.n	80012b4 <ToF_setMeasurementTimingBudget+0x48>
 80012b0:	2300      	movs	r3, #0
 80012b2:	e072      	b.n	800139a <ToF_setMeasurementTimingBudget+0x12e>

	  uint32_t used_budget_us = StartOverhead + EndOverhead;
 80012b4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80012b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80012ba:	4413      	add	r3, r2
 80012bc:	647b      	str	r3, [r7, #68]	; 0x44

	  ToF_getSequenceStepEnables(ToF, &enables);
 80012be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c2:	4619      	mov	r1, r3
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff fea3 	bl	8001010 <ToF_getSequenceStepEnables>
	  ToF_getSequenceStepTimeouts(ToF, &enables, &timeouts);
 80012ca:	f107 020c 	add.w	r2, r7, #12
 80012ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d2:	4619      	mov	r1, r3
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff fef4 	bl	80010c2 <ToF_getSequenceStepTimeouts>

	  if (enables.tcc)
 80012da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d005      	beq.n	80012ee <ToF_setMeasurementTimingBudget+0x82>
	  {
	    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80012e6:	4413      	add	r3, r2
 80012e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80012ea:	4413      	add	r3, r2
 80012ec:	647b      	str	r3, [r7, #68]	; 0x44
	  }

	  if (enables.dss)
 80012ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d007      	beq.n	8001306 <ToF_setMeasurementTimingBudget+0x9a>
	  {
	    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80012fa:	4413      	add	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001300:	4413      	add	r3, r2
 8001302:	647b      	str	r3, [r7, #68]	; 0x44
 8001304:	e009      	b.n	800131a <ToF_setMeasurementTimingBudget+0xae>
	  }
	  else if (enables.msrc)
 8001306:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800130a:	2b00      	cmp	r3, #0
 800130c:	d005      	beq.n	800131a <ToF_setMeasurementTimingBudget+0xae>
	  {
	    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001312:	4413      	add	r3, r2
 8001314:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001316:	4413      	add	r3, r2
 8001318:	647b      	str	r3, [r7, #68]	; 0x44
	  }

	  if (enables.pre_range)
 800131a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800131e:	2b00      	cmp	r3, #0
 8001320:	d005      	beq.n	800132e <ToF_setMeasurementTimingBudget+0xc2>
	  {
	    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8001322:	69fa      	ldr	r2, [r7, #28]
 8001324:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001326:	4413      	add	r3, r2
 8001328:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800132a:	4413      	add	r3, r2
 800132c:	647b      	str	r3, [r7, #68]	; 0x44
	  }

	  if (enables.final_range)
 800132e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001332:	2b00      	cmp	r3, #0
 8001334:	d030      	beq.n	8001398 <ToF_setMeasurementTimingBudget+0x12c>
	  {
	    used_budget_us += FinalRangeOverhead;
 8001336:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001338:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800133a:	4413      	add	r3, r2
 800133c:	647b      	str	r3, [r7, #68]	; 0x44
	    // budget and the sum of all other timeouts within the sequence.
	    // If there is no room for the final range timeout, then an error
	    // will be set. Otherwise the remaining time will be applied to
	    // the final range."

	    if (used_budget_us > budget_us)
 800133e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	429a      	cmp	r2, r3
 8001344:	d901      	bls.n	800134a <ToF_setMeasurementTimingBudget+0xde>
	    {
	      // "Requested timeout too big."
	      return 0;
 8001346:	2300      	movs	r3, #0
 8001348:	e027      	b.n	800139a <ToF_setMeasurementTimingBudget+0x12e>
	    }

	    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
	    //  timeouts must be expressed in macro periods MClks
	    //  because they have different vcsel periods."

	    uint16_t final_range_timeout_mclks =
	      ToF_timeoutMicrosecondsToMclks(ToF, final_range_timeout_us,
	                                 timeouts.final_range_vcsel_period_pclks);
 8001352:	89fb      	ldrh	r3, [r7, #14]
	      ToF_timeoutMicrosecondsToMclks(ToF, final_range_timeout_us,
 8001354:	b2db      	uxtb	r3, r3
 8001356:	461a      	mov	r2, r3
 8001358:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff fe30 	bl	8000fc0 <ToF_timeoutMicrosecondsToMclks>
 8001360:	4603      	mov	r3, r0
	    uint16_t final_range_timeout_mclks =
 8001362:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	    if (enables.pre_range)
 8001366:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800136a:	2b00      	cmp	r3, #0
 800136c:	d005      	beq.n	800137a <ToF_setMeasurementTimingBudget+0x10e>
	    {
	      final_range_timeout_mclks += timeouts.pre_range_mclks;
 800136e:	8a7a      	ldrh	r2, [r7, #18]
 8001370:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001374:	4413      	add	r3, r2
 8001376:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	    }

	    ToF_writeReg16Bit(ToF, FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 800137a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800137e:	4619      	mov	r1, r3
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff fdc8 	bl	8000f16 <ToF_encodeTimeout>
 8001386:	4603      	mov	r3, r0
 8001388:	461a      	mov	r2, r3
 800138a:	2171      	movs	r1, #113	; 0x71
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff fc31 	bl	8000bf4 <ToF_writeReg16Bit>
	      ToF_encodeTimeout(ToF, final_range_timeout_mclks));

	    // set_sequence_step_timeout() end

	    ToF->measurement_timing_budget_us = budget_us; // store for internal reuse
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	605a      	str	r2, [r3, #4]
	  }
	  return 1;
 8001398:	2301      	movs	r3, #1
}
 800139a:	4618      	mov	r0, r3
 800139c:	3748      	adds	r7, #72	; 0x48
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <ToF_performSingleRefCalibration>:

uint8_t ToF_performSingleRefCalibration(struct ToF_struct *ToF, uint8_t vhv_init_byte)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	460b      	mov	r3, r1
 80013ac:	70fb      	strb	r3, [r7, #3]
	ToF_writeReg(ToF, SYSRANGE_START, 0x01 | vhv_init_byte);
 80013ae:	78fb      	ldrb	r3, [r7, #3]
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	461a      	mov	r2, r3
 80013b8:	2100      	movs	r1, #0
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff fbfa 	bl	8000bb4 <ToF_writeReg>

	  while ((ToF_readReg(ToF, RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80013c0:	bf00      	nop
 80013c2:	2113      	movs	r1, #19
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff fc5f 	bl	8000c88 <ToF_readReg>
 80013ca:	4603      	mov	r3, r0
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f6      	beq.n	80013c2 <ToF_performSingleRefCalibration+0x20>
	  {
	    //timeout
	  }

	  ToF_writeReg(ToF, SYSTEM_INTERRUPT_CLEAR, 0x01);
 80013d4:	2201      	movs	r2, #1
 80013d6:	210b      	movs	r1, #11
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff fbeb 	bl	8000bb4 <ToF_writeReg>

	  ToF_writeReg(ToF, SYSRANGE_START, 0x00);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff fbe6 	bl	8000bb4 <ToF_writeReg>

	  return 1;
 80013e8:	2301      	movs	r3, #1
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <ToF_init>:

uint8_t ToF_init(struct ToF_struct *ToF)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
	ToF->bus_address = 0x29;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2229      	movs	r2, #41	; 0x29
 80013fe:	701a      	strb	r2, [r3, #0]

	ToF_writeReg(ToF, 0x80, 0x01);
 8001400:	2201      	movs	r2, #1
 8001402:	2180      	movs	r1, #128	; 0x80
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff fbd5 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x01);
 800140a:	2201      	movs	r2, #1
 800140c:	21ff      	movs	r1, #255	; 0xff
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff fbd0 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x00, 0x00);
 8001414:	2200      	movs	r2, #0
 8001416:	2100      	movs	r1, #0
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff fbcb 	bl	8000bb4 <ToF_writeReg>
	ToF->stop_variable = ToF_readReg(ToF, 0x91);
 800141e:	2191      	movs	r1, #145	; 0x91
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff fc31 	bl	8000c88 <ToF_readReg>
 8001426:	4603      	mov	r3, r0
 8001428:	461a      	mov	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	705a      	strb	r2, [r3, #1]
	ToF_writeReg(ToF, 0x00, 0x01);
 800142e:	2201      	movs	r2, #1
 8001430:	2100      	movs	r1, #0
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff fbbe 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x00);
 8001438:	2200      	movs	r2, #0
 800143a:	21ff      	movs	r1, #255	; 0xff
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff fbb9 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x80, 0x00);
 8001442:	2200      	movs	r2, #0
 8001444:	2180      	movs	r1, #128	; 0x80
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff fbb4 	bl	8000bb4 <ToF_writeReg>

	// disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
	ToF_writeReg(ToF, MSRC_CONFIG_CONTROL, ToF_readReg(ToF, MSRC_CONFIG_CONTROL) | 0x12);
 800144c:	2160      	movs	r1, #96	; 0x60
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff fc1a 	bl	8000c88 <ToF_readReg>
 8001454:	4603      	mov	r3, r0
 8001456:	f043 0312 	orr.w	r3, r3, #18
 800145a:	b2db      	uxtb	r3, r3
 800145c:	461a      	mov	r2, r3
 800145e:	2160      	movs	r1, #96	; 0x60
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff fba7 	bl	8000bb4 <ToF_writeReg>

	// set final range signal rate limit to 0.25 MCPS (million counts per second)
	ToF_setSignalRateLimit(ToF, 0.25);
 8001466:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff fc7c 	bl	8000d68 <ToF_setSignalRateLimit>

	ToF_writeReg(ToF, SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8001470:	22ff      	movs	r2, #255	; 0xff
 8001472:	2101      	movs	r1, #1
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff fb9d 	bl	8000bb4 <ToF_writeReg>
	uint8_t spad_count;
	uint8_t spad_type_is_aperture;

	if (ToF_getSpadInfo(ToF, &spad_count, &spad_type_is_aperture) == 0)
 800147a:	f107 0213 	add.w	r2, r7, #19
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff fca5 	bl	8000dd4 <ToF_getSpadInfo>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <ToF_init+0xa2>
	{
		return 0;
 8001490:	2300      	movs	r3, #0
 8001492:	e24c      	b.n	800192e <ToF_init+0x53c>
	}

	uint8_t ref_spad_map[6];
	ToF_readMulti(ToF, GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8001494:	f107 020c 	add.w	r2, r7, #12
 8001498:	2306      	movs	r3, #6
 800149a:	21b0      	movs	r1, #176	; 0xb0
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff fc3d 	bl	8000d1c <ToF_readMulti>

	ToF_writeReg(ToF, 0xFF, 0x01);
 80014a2:	2201      	movs	r2, #1
 80014a4:	21ff      	movs	r1, #255	; 0xff
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fb84 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80014ac:	2200      	movs	r2, #0
 80014ae:	214f      	movs	r1, #79	; 0x4f
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff fb7f 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 80014b6:	222c      	movs	r2, #44	; 0x2c
 80014b8:	214e      	movs	r1, #78	; 0x4e
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff fb7a 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x00);
 80014c0:	2200      	movs	r2, #0
 80014c2:	21ff      	movs	r1, #255	; 0xff
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff fb75 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 80014ca:	22b4      	movs	r2, #180	; 0xb4
 80014cc:	21b6      	movs	r1, #182	; 0xb6
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fb70 	bl	8000bb4 <ToF_writeReg>

	uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80014d4:	7cfb      	ldrb	r3, [r7, #19]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <ToF_init+0xec>
 80014da:	230c      	movs	r3, #12
 80014dc:	e000      	b.n	80014e0 <ToF_init+0xee>
 80014de:	2300      	movs	r3, #0
 80014e0:	757b      	strb	r3, [r7, #21]
	uint8_t spads_enabled = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	75fb      	strb	r3, [r7, #23]

	for (uint8_t i = 0; i < 48; i++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	75bb      	strb	r3, [r7, #22]
 80014ea:	e03c      	b.n	8001566 <ToF_init+0x174>
	{
	  if (i < first_spad_to_enable || spads_enabled == spad_count)
 80014ec:	7dba      	ldrb	r2, [r7, #22]
 80014ee:	7d7b      	ldrb	r3, [r7, #21]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d303      	bcc.n	80014fc <ToF_init+0x10a>
 80014f4:	7d3b      	ldrb	r3, [r7, #20]
 80014f6:	7dfa      	ldrb	r2, [r7, #23]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d11c      	bne.n	8001536 <ToF_init+0x144>
	  {
	    // This bit is lower than the first one that should be enabled, or
	    // (reference_spad_count) bits have already been enabled, so zero this bit
	    ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80014fc:	7dbb      	ldrb	r3, [r7, #22]
 80014fe:	08db      	lsrs	r3, r3, #3
 8001500:	b2d8      	uxtb	r0, r3
 8001502:	4603      	mov	r3, r0
 8001504:	f107 0218 	add.w	r2, r7, #24
 8001508:	4413      	add	r3, r2
 800150a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800150e:	b25a      	sxtb	r2, r3
 8001510:	7dbb      	ldrb	r3, [r7, #22]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	2101      	movs	r1, #1
 8001518:	fa01 f303 	lsl.w	r3, r1, r3
 800151c:	b25b      	sxtb	r3, r3
 800151e:	43db      	mvns	r3, r3
 8001520:	b25b      	sxtb	r3, r3
 8001522:	4013      	ands	r3, r2
 8001524:	b25a      	sxtb	r2, r3
 8001526:	4603      	mov	r3, r0
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	f107 0118 	add.w	r1, r7, #24
 800152e:	440b      	add	r3, r1
 8001530:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8001534:	e014      	b.n	8001560 <ToF_init+0x16e>
	  }
	  else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 8001536:	7dbb      	ldrb	r3, [r7, #22]
 8001538:	08db      	lsrs	r3, r3, #3
 800153a:	b2db      	uxtb	r3, r3
 800153c:	f107 0218 	add.w	r2, r7, #24
 8001540:	4413      	add	r3, r2
 8001542:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001546:	461a      	mov	r2, r3
 8001548:	7dbb      	ldrb	r3, [r7, #22]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	fa42 f303 	asr.w	r3, r2, r3
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d002      	beq.n	8001560 <ToF_init+0x16e>
	  {
		  spads_enabled++;
 800155a:	7dfb      	ldrb	r3, [r7, #23]
 800155c:	3301      	adds	r3, #1
 800155e:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < 48; i++)
 8001560:	7dbb      	ldrb	r3, [r7, #22]
 8001562:	3301      	adds	r3, #1
 8001564:	75bb      	strb	r3, [r7, #22]
 8001566:	7dbb      	ldrb	r3, [r7, #22]
 8001568:	2b2f      	cmp	r3, #47	; 0x2f
 800156a:	d9bf      	bls.n	80014ec <ToF_init+0xfa>
	  }
	}
	ToF_writeMulti(ToF, GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 800156c:	f107 020c 	add.w	r2, r7, #12
 8001570:	2306      	movs	r3, #6
 8001572:	21b0      	movs	r1, #176	; 0xb0
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff fb63 	bl	8000c40 <ToF_writeMulti>

	ToF_writeReg(ToF, 0xFF, 0x01);
 800157a:	2201      	movs	r2, #1
 800157c:	21ff      	movs	r1, #255	; 0xff
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff fb18 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x00, 0x00);
 8001584:	2200      	movs	r2, #0
 8001586:	2100      	movs	r1, #0
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff fb13 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x00);
 800158e:	2200      	movs	r2, #0
 8001590:	21ff      	movs	r1, #255	; 0xff
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff fb0e 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x09, 0x00);
 8001598:	2200      	movs	r2, #0
 800159a:	2109      	movs	r1, #9
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff fb09 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x10, 0x00);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2110      	movs	r1, #16
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fb04 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x11, 0x00);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2111      	movs	r1, #17
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff faff 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0x24, 0x01);
 80015b6:	2201      	movs	r2, #1
 80015b8:	2124      	movs	r1, #36	; 0x24
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff fafa 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x25, 0xFF);
 80015c0:	22ff      	movs	r2, #255	; 0xff
 80015c2:	2125      	movs	r1, #37	; 0x25
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff faf5 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x75, 0x00);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2175      	movs	r1, #117	; 0x75
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff faf0 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x01);
 80015d4:	2201      	movs	r2, #1
 80015d6:	21ff      	movs	r1, #255	; 0xff
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff faeb 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x4E, 0x2C);
 80015de:	222c      	movs	r2, #44	; 0x2c
 80015e0:	214e      	movs	r1, #78	; 0x4e
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff fae6 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x48, 0x00);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2148      	movs	r1, #72	; 0x48
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff fae1 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x30, 0x20);
 80015f2:	2220      	movs	r2, #32
 80015f4:	2130      	movs	r1, #48	; 0x30
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fadc 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x00);
 80015fc:	2200      	movs	r2, #0
 80015fe:	21ff      	movs	r1, #255	; 0xff
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff fad7 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x30, 0x09);
 8001606:	2209      	movs	r2, #9
 8001608:	2130      	movs	r1, #48	; 0x30
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff fad2 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x54, 0x00);
 8001610:	2200      	movs	r2, #0
 8001612:	2154      	movs	r1, #84	; 0x54
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff facd 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x31, 0x04);
 800161a:	2204      	movs	r2, #4
 800161c:	2131      	movs	r1, #49	; 0x31
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff fac8 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x32, 0x03);
 8001624:	2203      	movs	r2, #3
 8001626:	2132      	movs	r1, #50	; 0x32
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff fac3 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x40, 0x83);
 800162e:	2283      	movs	r2, #131	; 0x83
 8001630:	2140      	movs	r1, #64	; 0x40
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff fabe 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x46, 0x25);
 8001638:	2225      	movs	r2, #37	; 0x25
 800163a:	2146      	movs	r1, #70	; 0x46
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff fab9 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x60, 0x00);
 8001642:	2200      	movs	r2, #0
 8001644:	2160      	movs	r1, #96	; 0x60
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff fab4 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x27, 0x00);
 800164c:	2200      	movs	r2, #0
 800164e:	2127      	movs	r1, #39	; 0x27
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff faaf 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x50, 0x06);
 8001656:	2206      	movs	r2, #6
 8001658:	2150      	movs	r1, #80	; 0x50
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff faaa 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x51, 0x00);
 8001660:	2200      	movs	r2, #0
 8001662:	2151      	movs	r1, #81	; 0x51
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff faa5 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x52, 0x96);
 800166a:	2296      	movs	r2, #150	; 0x96
 800166c:	2152      	movs	r1, #82	; 0x52
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff faa0 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x56, 0x08);
 8001674:	2208      	movs	r2, #8
 8001676:	2156      	movs	r1, #86	; 0x56
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff fa9b 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x57, 0x30);
 800167e:	2230      	movs	r2, #48	; 0x30
 8001680:	2157      	movs	r1, #87	; 0x57
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff fa96 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x61, 0x00);
 8001688:	2200      	movs	r2, #0
 800168a:	2161      	movs	r1, #97	; 0x61
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff fa91 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x62, 0x00);
 8001692:	2200      	movs	r2, #0
 8001694:	2162      	movs	r1, #98	; 0x62
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff fa8c 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x64, 0x00);
 800169c:	2200      	movs	r2, #0
 800169e:	2164      	movs	r1, #100	; 0x64
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff fa87 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x65, 0x00);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2165      	movs	r1, #101	; 0x65
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fa82 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x66, 0xA0);
 80016b0:	22a0      	movs	r2, #160	; 0xa0
 80016b2:	2166      	movs	r1, #102	; 0x66
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff fa7d 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x01);
 80016ba:	2201      	movs	r2, #1
 80016bc:	21ff      	movs	r1, #255	; 0xff
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff fa78 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x22, 0x32);
 80016c4:	2232      	movs	r2, #50	; 0x32
 80016c6:	2122      	movs	r1, #34	; 0x22
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff fa73 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x47, 0x14);
 80016ce:	2214      	movs	r2, #20
 80016d0:	2147      	movs	r1, #71	; 0x47
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff fa6e 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x49, 0xFF);
 80016d8:	22ff      	movs	r2, #255	; 0xff
 80016da:	2149      	movs	r1, #73	; 0x49
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff fa69 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x4A, 0x00);
 80016e2:	2200      	movs	r2, #0
 80016e4:	214a      	movs	r1, #74	; 0x4a
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff fa64 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x00);
 80016ec:	2200      	movs	r2, #0
 80016ee:	21ff      	movs	r1, #255	; 0xff
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff fa5f 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x7A, 0x0A);
 80016f6:	220a      	movs	r2, #10
 80016f8:	217a      	movs	r1, #122	; 0x7a
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff fa5a 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x7B, 0x00);
 8001700:	2200      	movs	r2, #0
 8001702:	217b      	movs	r1, #123	; 0x7b
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff fa55 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x78, 0x21);
 800170a:	2221      	movs	r2, #33	; 0x21
 800170c:	2178      	movs	r1, #120	; 0x78
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff fa50 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x01);
 8001714:	2201      	movs	r2, #1
 8001716:	21ff      	movs	r1, #255	; 0xff
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff fa4b 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x23, 0x34);
 800171e:	2234      	movs	r2, #52	; 0x34
 8001720:	2123      	movs	r1, #35	; 0x23
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff fa46 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x42, 0x00);
 8001728:	2200      	movs	r2, #0
 800172a:	2142      	movs	r1, #66	; 0x42
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff fa41 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x44, 0xFF);
 8001732:	22ff      	movs	r2, #255	; 0xff
 8001734:	2144      	movs	r1, #68	; 0x44
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff fa3c 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x45, 0x26);
 800173c:	2226      	movs	r2, #38	; 0x26
 800173e:	2145      	movs	r1, #69	; 0x45
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff fa37 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x46, 0x05);
 8001746:	2205      	movs	r2, #5
 8001748:	2146      	movs	r1, #70	; 0x46
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff fa32 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x40, 0x40);
 8001750:	2240      	movs	r2, #64	; 0x40
 8001752:	2140      	movs	r1, #64	; 0x40
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff fa2d 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x0E, 0x06);
 800175a:	2206      	movs	r2, #6
 800175c:	210e      	movs	r1, #14
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff fa28 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x20, 0x1A);
 8001764:	221a      	movs	r2, #26
 8001766:	2120      	movs	r1, #32
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff fa23 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x43, 0x40);
 800176e:	2240      	movs	r2, #64	; 0x40
 8001770:	2143      	movs	r1, #67	; 0x43
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff fa1e 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x00);
 8001778:	2200      	movs	r2, #0
 800177a:	21ff      	movs	r1, #255	; 0xff
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff fa19 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x34, 0x03);
 8001782:	2203      	movs	r2, #3
 8001784:	2134      	movs	r1, #52	; 0x34
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff fa14 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x35, 0x44);
 800178c:	2244      	movs	r2, #68	; 0x44
 800178e:	2135      	movs	r1, #53	; 0x35
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff fa0f 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x01);
 8001796:	2201      	movs	r2, #1
 8001798:	21ff      	movs	r1, #255	; 0xff
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff fa0a 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x31, 0x04);
 80017a0:	2204      	movs	r2, #4
 80017a2:	2131      	movs	r1, #49	; 0x31
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff fa05 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x4B, 0x09);
 80017aa:	2209      	movs	r2, #9
 80017ac:	214b      	movs	r1, #75	; 0x4b
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff fa00 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x4C, 0x05);
 80017b4:	2205      	movs	r2, #5
 80017b6:	214c      	movs	r1, #76	; 0x4c
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff f9fb 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x4D, 0x04);
 80017be:	2204      	movs	r2, #4
 80017c0:	214d      	movs	r1, #77	; 0x4d
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff f9f6 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x00);
 80017c8:	2200      	movs	r2, #0
 80017ca:	21ff      	movs	r1, #255	; 0xff
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff f9f1 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x44, 0x00);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2144      	movs	r1, #68	; 0x44
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff f9ec 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x45, 0x20);
 80017dc:	2220      	movs	r2, #32
 80017de:	2145      	movs	r1, #69	; 0x45
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff f9e7 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x47, 0x08);
 80017e6:	2208      	movs	r2, #8
 80017e8:	2147      	movs	r1, #71	; 0x47
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff f9e2 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x48, 0x28);
 80017f0:	2228      	movs	r2, #40	; 0x28
 80017f2:	2148      	movs	r1, #72	; 0x48
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff f9dd 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x67, 0x00);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2167      	movs	r1, #103	; 0x67
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff f9d8 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x70, 0x04);
 8001804:	2204      	movs	r2, #4
 8001806:	2170      	movs	r1, #112	; 0x70
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff f9d3 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x71, 0x01);
 800180e:	2201      	movs	r2, #1
 8001810:	2171      	movs	r1, #113	; 0x71
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff f9ce 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x72, 0xFE);
 8001818:	22fe      	movs	r2, #254	; 0xfe
 800181a:	2172      	movs	r1, #114	; 0x72
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff f9c9 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x76, 0x00);
 8001822:	2200      	movs	r2, #0
 8001824:	2176      	movs	r1, #118	; 0x76
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff f9c4 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x77, 0x00);
 800182c:	2200      	movs	r2, #0
 800182e:	2177      	movs	r1, #119	; 0x77
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff f9bf 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x01);
 8001836:	2201      	movs	r2, #1
 8001838:	21ff      	movs	r1, #255	; 0xff
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff f9ba 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x0D, 0x01);
 8001840:	2201      	movs	r2, #1
 8001842:	210d      	movs	r1, #13
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff f9b5 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x00);
 800184a:	2200      	movs	r2, #0
 800184c:	21ff      	movs	r1, #255	; 0xff
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff f9b0 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x80, 0x01);
 8001854:	2201      	movs	r2, #1
 8001856:	2180      	movs	r1, #128	; 0x80
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff f9ab 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x01, 0xF8);
 800185e:	22f8      	movs	r2, #248	; 0xf8
 8001860:	2101      	movs	r1, #1
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff f9a6 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x01);
 8001868:	2201      	movs	r2, #1
 800186a:	21ff      	movs	r1, #255	; 0xff
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff f9a1 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x8E, 0x01);
 8001872:	2201      	movs	r2, #1
 8001874:	218e      	movs	r1, #142	; 0x8e
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff f99c 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x00, 0x01);
 800187c:	2201      	movs	r2, #1
 800187e:	2100      	movs	r1, #0
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff f997 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x00);
 8001886:	2200      	movs	r2, #0
 8001888:	21ff      	movs	r1, #255	; 0xff
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff f992 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x80, 0x00);
 8001890:	2200      	movs	r2, #0
 8001892:	2180      	movs	r1, #128	; 0x80
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff f98d 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 800189a:	2204      	movs	r2, #4
 800189c:	210a      	movs	r1, #10
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff f988 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, GPIO_HV_MUX_ACTIVE_HIGH, ToF_readReg(ToF, GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80018a4:	2184      	movs	r1, #132	; 0x84
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff f9ee 	bl	8000c88 <ToF_readReg>
 80018ac:	4603      	mov	r3, r0
 80018ae:	f023 0310 	bic.w	r3, r3, #16
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	461a      	mov	r2, r3
 80018b6:	2184      	movs	r1, #132	; 0x84
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff f97b 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, SYSTEM_INTERRUPT_CLEAR, 0x01);
 80018be:	2201      	movs	r2, #1
 80018c0:	210b      	movs	r1, #11
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff f976 	bl	8000bb4 <ToF_writeReg>

	ToF->measurement_timing_budget_us = ToF_getMeasurementTimingBudget(ToF);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff fc68 	bl	800119e <ToF_getMeasurementTimingBudget>
 80018ce:	4602      	mov	r2, r0
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	605a      	str	r2, [r3, #4]

	ToF_writeReg(ToF, SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80018d4:	22e8      	movs	r2, #232	; 0xe8
 80018d6:	2101      	movs	r1, #1
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff f96b 	bl	8000bb4 <ToF_writeReg>

	ToF_setMeasurementTimingBudget(ToF, ToF->measurement_timing_budget_us);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4619      	mov	r1, r3
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff fcc1 	bl	800126c <ToF_setMeasurementTimingBudget>

	ToF_writeReg(ToF, SYSTEM_SEQUENCE_CONFIG, 0x01);
 80018ea:	2201      	movs	r2, #1
 80018ec:	2101      	movs	r1, #1
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff f960 	bl	8000bb4 <ToF_writeReg>

	if (!ToF_performSingleRefCalibration(ToF, 0x40)) { return 0; }
 80018f4:	2140      	movs	r1, #64	; 0x40
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff fd53 	bl	80013a2 <ToF_performSingleRefCalibration>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <ToF_init+0x514>
 8001902:	2300      	movs	r3, #0
 8001904:	e013      	b.n	800192e <ToF_init+0x53c>

	ToF_writeReg(ToF, SYSTEM_SEQUENCE_CONFIG, 0x02);
 8001906:	2202      	movs	r2, #2
 8001908:	2101      	movs	r1, #1
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff f952 	bl	8000bb4 <ToF_writeReg>

    if (!ToF_performSingleRefCalibration(ToF, 0x00)) { return 0; }
 8001910:	2100      	movs	r1, #0
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff fd45 	bl	80013a2 <ToF_performSingleRefCalibration>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <ToF_init+0x530>
 800191e:	2300      	movs	r3, #0
 8001920:	e005      	b.n	800192e <ToF_init+0x53c>

    ToF_writeReg(ToF, SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8001922:	22e8      	movs	r2, #232	; 0xe8
 8001924:	2101      	movs	r1, #1
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff f944 	bl	8000bb4 <ToF_writeReg>

	return 1;
 800192c:	2301      	movs	r3, #1
}
 800192e:	4618      	mov	r0, r3
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <ToF_setAddress>:

void ToF_setAddress(struct ToF_struct *ToF, uint8_t new_addr)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	460b      	mov	r3, r1
 8001940:	70fb      	strb	r3, [r7, #3]
	ToF_writeReg(ToF, I2C_SLAVE_DEVICE_ADDRESS, new_addr & 0x7F);
 8001942:	78fb      	ldrb	r3, [r7, #3]
 8001944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001948:	b2db      	uxtb	r3, r3
 800194a:	461a      	mov	r2, r3
 800194c:	218a      	movs	r1, #138	; 0x8a
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff f930 	bl	8000bb4 <ToF_writeReg>
	ToF->bus_address = new_addr;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	78fa      	ldrb	r2, [r7, #3]
 8001958:	701a      	strb	r2, [r3, #0]
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <ToF_startContinuous>:

void ToF_startContinuous(struct ToF_struct *ToF)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
	ToF_writeReg(ToF, 0x80, 0x01);
 800196a:	2201      	movs	r2, #1
 800196c:	2180      	movs	r1, #128	; 0x80
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff f920 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x01);
 8001974:	2201      	movs	r2, #1
 8001976:	21ff      	movs	r1, #255	; 0xff
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff f91b 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x00, 0x00);
 800197e:	2200      	movs	r2, #0
 8001980:	2100      	movs	r1, #0
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff f916 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x91, ToF->stop_variable);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	785b      	ldrb	r3, [r3, #1]
 800198c:	461a      	mov	r2, r3
 800198e:	2191      	movs	r1, #145	; 0x91
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff f90f 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x00, 0x01);
 8001996:	2201      	movs	r2, #1
 8001998:	2100      	movs	r1, #0
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff f90a 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x00);
 80019a0:	2200      	movs	r2, #0
 80019a2:	21ff      	movs	r1, #255	; 0xff
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff f905 	bl	8000bb4 <ToF_writeReg>
	ToF_writeReg(ToF, 0x80, 0x00);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2180      	movs	r1, #128	; 0x80
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff f900 	bl	8000bb4 <ToF_writeReg>

	ToF_writeReg(ToF, SYSRANGE_START, 0x02);
 80019b4:	2202      	movs	r2, #2
 80019b6:	2100      	movs	r1, #0
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff f8fb 	bl	8000bb4 <ToF_writeReg>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <initMicromouseVL53L0x>:
 *
 */


void initMicromouseVL53L0x()
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
	  //////////////////////////////////////////////////////////////////////////
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_F_Pin, 0);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2110      	movs	r1, #16
 80019d0:	4863      	ldr	r0, [pc, #396]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 80019d2:	f001 fe33 	bl	800363c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FR_Pin, 1);
 80019d6:	2201      	movs	r2, #1
 80019d8:	2101      	movs	r1, #1
 80019da:	4861      	ldr	r0, [pc, #388]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 80019dc:	f001 fe2e 	bl	800363c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FL_Pin, 0);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2102      	movs	r1, #2
 80019e4:	485e      	ldr	r0, [pc, #376]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 80019e6:	f001 fe29 	bl	800363c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_R_Pin, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2104      	movs	r1, #4
 80019ee:	485c      	ldr	r0, [pc, #368]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 80019f0:	f001 fe24 	bl	800363c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_L_Pin, 0);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2108      	movs	r1, #8
 80019f8:	4859      	ldr	r0, [pc, #356]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 80019fa:	f001 fe1f 	bl	800363c <HAL_GPIO_WritePin>

	  ToF_init(&ToF_FR);                      //inicjalizacja czujnika FR
 80019fe:	4859      	ldr	r0, [pc, #356]	; (8001b64 <initMicromouseVL53L0x+0x19c>)
 8001a00:	f7ff fcf7 	bl	80013f2 <ToF_init>
	  ToF_setAddress(&ToF_FR, 0x30);
 8001a04:	2130      	movs	r1, #48	; 0x30
 8001a06:	4857      	ldr	r0, [pc, #348]	; (8001b64 <initMicromouseVL53L0x+0x19c>)
 8001a08:	f7ff ff95 	bl	8001936 <ToF_setAddress>

	  //////////////////////////////////////////////////////////////////////////
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_F_Pin, 0);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2110      	movs	r1, #16
 8001a10:	4853      	ldr	r0, [pc, #332]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 8001a12:	f001 fe13 	bl	800363c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FR_Pin, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2101      	movs	r1, #1
 8001a1a:	4851      	ldr	r0, [pc, #324]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 8001a1c:	f001 fe0e 	bl	800363c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FL_Pin, 1);
 8001a20:	2201      	movs	r2, #1
 8001a22:	2102      	movs	r1, #2
 8001a24:	484e      	ldr	r0, [pc, #312]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 8001a26:	f001 fe09 	bl	800363c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_R_Pin, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2104      	movs	r1, #4
 8001a2e:	484c      	ldr	r0, [pc, #304]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 8001a30:	f001 fe04 	bl	800363c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_L_Pin, 0);
 8001a34:	2200      	movs	r2, #0
 8001a36:	2108      	movs	r1, #8
 8001a38:	4849      	ldr	r0, [pc, #292]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 8001a3a:	f001 fdff 	bl	800363c <HAL_GPIO_WritePin>

	  ToF_init(&ToF_FL);                      //inicjalizacja czujnika FL
 8001a3e:	484a      	ldr	r0, [pc, #296]	; (8001b68 <initMicromouseVL53L0x+0x1a0>)
 8001a40:	f7ff fcd7 	bl	80013f2 <ToF_init>
	  ToF_setAddress(&ToF_FL, 0x31);
 8001a44:	2131      	movs	r1, #49	; 0x31
 8001a46:	4848      	ldr	r0, [pc, #288]	; (8001b68 <initMicromouseVL53L0x+0x1a0>)
 8001a48:	f7ff ff75 	bl	8001936 <ToF_setAddress>

	  //////////////////////////////////////////////////////////////////////////
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_F_Pin, 0);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2110      	movs	r1, #16
 8001a50:	4843      	ldr	r0, [pc, #268]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 8001a52:	f001 fdf3 	bl	800363c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FR_Pin, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2101      	movs	r1, #1
 8001a5a:	4841      	ldr	r0, [pc, #260]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 8001a5c:	f001 fdee 	bl	800363c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FL_Pin, 0);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2102      	movs	r1, #2
 8001a64:	483e      	ldr	r0, [pc, #248]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 8001a66:	f001 fde9 	bl	800363c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_R_Pin, 1);
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	2104      	movs	r1, #4
 8001a6e:	483c      	ldr	r0, [pc, #240]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 8001a70:	f001 fde4 	bl	800363c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_L_Pin, 0);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2108      	movs	r1, #8
 8001a78:	4839      	ldr	r0, [pc, #228]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 8001a7a:	f001 fddf 	bl	800363c <HAL_GPIO_WritePin>

	  ToF_init(&ToF_R);                     //inicjalizacja czujnika R
 8001a7e:	483b      	ldr	r0, [pc, #236]	; (8001b6c <initMicromouseVL53L0x+0x1a4>)
 8001a80:	f7ff fcb7 	bl	80013f2 <ToF_init>
	  ToF_setAddress(&ToF_R, 0x32);
 8001a84:	2132      	movs	r1, #50	; 0x32
 8001a86:	4839      	ldr	r0, [pc, #228]	; (8001b6c <initMicromouseVL53L0x+0x1a4>)
 8001a88:	f7ff ff55 	bl	8001936 <ToF_setAddress>

	  //////////////////////////////////////////////////////////////////////////
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_F_Pin, 0);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2110      	movs	r1, #16
 8001a90:	4833      	ldr	r0, [pc, #204]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 8001a92:	f001 fdd3 	bl	800363c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FR_Pin, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2101      	movs	r1, #1
 8001a9a:	4831      	ldr	r0, [pc, #196]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 8001a9c:	f001 fdce 	bl	800363c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FL_Pin, 0);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2102      	movs	r1, #2
 8001aa4:	482e      	ldr	r0, [pc, #184]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 8001aa6:	f001 fdc9 	bl	800363c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_R_Pin, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2104      	movs	r1, #4
 8001aae:	482c      	ldr	r0, [pc, #176]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 8001ab0:	f001 fdc4 	bl	800363c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_L_Pin, 1);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	2108      	movs	r1, #8
 8001ab8:	4829      	ldr	r0, [pc, #164]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 8001aba:	f001 fdbf 	bl	800363c <HAL_GPIO_WritePin>

	  ToF_init(&ToF_L);                     //inicjalizacja czujnika L
 8001abe:	482c      	ldr	r0, [pc, #176]	; (8001b70 <initMicromouseVL53L0x+0x1a8>)
 8001ac0:	f7ff fc97 	bl	80013f2 <ToF_init>
	  ToF_setAddress(&ToF_L, 0x33);
 8001ac4:	2133      	movs	r1, #51	; 0x33
 8001ac6:	482a      	ldr	r0, [pc, #168]	; (8001b70 <initMicromouseVL53L0x+0x1a8>)
 8001ac8:	f7ff ff35 	bl	8001936 <ToF_setAddress>

	  //////////////////////////////////////////////////////////////////////////
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_F_Pin, 1);
 8001acc:	2201      	movs	r2, #1
 8001ace:	2110      	movs	r1, #16
 8001ad0:	4823      	ldr	r0, [pc, #140]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 8001ad2:	f001 fdb3 	bl	800363c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FR_Pin, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2101      	movs	r1, #1
 8001ada:	4821      	ldr	r0, [pc, #132]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 8001adc:	f001 fdae 	bl	800363c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FL_Pin, 0);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2102      	movs	r1, #2
 8001ae4:	481e      	ldr	r0, [pc, #120]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 8001ae6:	f001 fda9 	bl	800363c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_R_Pin, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2104      	movs	r1, #4
 8001aee:	481c      	ldr	r0, [pc, #112]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 8001af0:	f001 fda4 	bl	800363c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_L_Pin, 0);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2108      	movs	r1, #8
 8001af8:	4819      	ldr	r0, [pc, #100]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 8001afa:	f001 fd9f 	bl	800363c <HAL_GPIO_WritePin>

	  ToF_init(&ToF_F);                     //inicjalizacja czujnika F
 8001afe:	481d      	ldr	r0, [pc, #116]	; (8001b74 <initMicromouseVL53L0x+0x1ac>)
 8001b00:	f7ff fc77 	bl	80013f2 <ToF_init>
	  ToF_setAddress(&ToF_F, 0x34);
 8001b04:	2134      	movs	r1, #52	; 0x34
 8001b06:	481b      	ldr	r0, [pc, #108]	; (8001b74 <initMicromouseVL53L0x+0x1ac>)
 8001b08:	f7ff ff15 	bl	8001936 <ToF_setAddress>
	  //////////////////////////////////////////////////////////////////////////

	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_F_Pin, 1);     //uruchomienie wszystkich ToF
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	2110      	movs	r1, #16
 8001b10:	4813      	ldr	r0, [pc, #76]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 8001b12:	f001 fd93 	bl	800363c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FR_Pin, 1);
 8001b16:	2201      	movs	r2, #1
 8001b18:	2101      	movs	r1, #1
 8001b1a:	4811      	ldr	r0, [pc, #68]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 8001b1c:	f001 fd8e 	bl	800363c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FL_Pin, 1);
 8001b20:	2201      	movs	r2, #1
 8001b22:	2102      	movs	r1, #2
 8001b24:	480e      	ldr	r0, [pc, #56]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 8001b26:	f001 fd89 	bl	800363c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_R_Pin, 1);
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	2104      	movs	r1, #4
 8001b2e:	480c      	ldr	r0, [pc, #48]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 8001b30:	f001 fd84 	bl	800363c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_L_Pin, 1);
 8001b34:	2201      	movs	r2, #1
 8001b36:	2108      	movs	r1, #8
 8001b38:	4809      	ldr	r0, [pc, #36]	; (8001b60 <initMicromouseVL53L0x+0x198>)
 8001b3a:	f001 fd7f 	bl	800363c <HAL_GPIO_WritePin>

	  ToF_startContinuous(&ToF_F);                     //uruchomienie trybu pomiaru ciągłego
 8001b3e:	480d      	ldr	r0, [pc, #52]	; (8001b74 <initMicromouseVL53L0x+0x1ac>)
 8001b40:	f7ff ff0f 	bl	8001962 <ToF_startContinuous>
	  ToF_startContinuous(&ToF_R);
 8001b44:	4809      	ldr	r0, [pc, #36]	; (8001b6c <initMicromouseVL53L0x+0x1a4>)
 8001b46:	f7ff ff0c 	bl	8001962 <ToF_startContinuous>
	  ToF_startContinuous(&ToF_L);
 8001b4a:	4809      	ldr	r0, [pc, #36]	; (8001b70 <initMicromouseVL53L0x+0x1a8>)
 8001b4c:	f7ff ff09 	bl	8001962 <ToF_startContinuous>
	  ToF_startContinuous(&ToF_FR);
 8001b50:	4804      	ldr	r0, [pc, #16]	; (8001b64 <initMicromouseVL53L0x+0x19c>)
 8001b52:	f7ff ff06 	bl	8001962 <ToF_startContinuous>
	  ToF_startContinuous(&ToF_FL);
 8001b56:	4804      	ldr	r0, [pc, #16]	; (8001b68 <initMicromouseVL53L0x+0x1a0>)
 8001b58:	f7ff ff03 	bl	8001962 <ToF_startContinuous>
}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40020800 	.word	0x40020800
 8001b64:	200000a8 	.word	0x200000a8
 8001b68:	200000b4 	.word	0x200000b4
 8001b6c:	200000cc 	.word	0x200000cc
 8001b70:	200000dc 	.word	0x200000dc
 8001b74:	200000c4 	.word	0x200000c4

08001b78 <encRead>:
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim4;


void encRead(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0


  oldLeftEncoder = leftEncoder;
 8001b7c:	4b3a      	ldr	r3, [pc, #232]	; (8001c68 <encRead+0xf0>)
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	b21a      	sxth	r2, r3
 8001b82:	4b3a      	ldr	r3, [pc, #232]	; (8001c6c <encRead+0xf4>)
 8001b84:	801a      	strh	r2, [r3, #0]
  leftEncoder = TIM4->CNT; // przepisanie wartosci z rejestru timera 2 do zmiennej
 8001b86:	4b3a      	ldr	r3, [pc, #232]	; (8001c70 <encRead+0xf8>)
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	b21a      	sxth	r2, r3
 8001b8c:	4b36      	ldr	r3, [pc, #216]	; (8001c68 <encRead+0xf0>)
 8001b8e:	801a      	strh	r2, [r3, #0]
  oldRightEncoder = rightEncoder;
 8001b90:	4b38      	ldr	r3, [pc, #224]	; (8001c74 <encRead+0xfc>)
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	b21a      	sxth	r2, r3
 8001b96:	4b38      	ldr	r3, [pc, #224]	; (8001c78 <encRead+0x100>)
 8001b98:	801a      	strh	r2, [r3, #0]
  rightEncoder = -TIM2->CNT; // przepisanie wartosci z rejestru timera 4 do zmiennej
 8001b9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	425b      	negs	r3, r3
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	b21a      	sxth	r2, r3
 8001ba8:	4b32      	ldr	r3, [pc, #200]	; (8001c74 <encRead+0xfc>)
 8001baa:	801a      	strh	r2, [r3, #0]
  leftCount = leftEncoder - oldLeftEncoder;
 8001bac:	4b2e      	ldr	r3, [pc, #184]	; (8001c68 <encRead+0xf0>)
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	b21b      	sxth	r3, r3
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <encRead+0xf4>)
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	b21b      	sxth	r3, r3
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	b21a      	sxth	r2, r3
 8001bc2:	4b2e      	ldr	r3, [pc, #184]	; (8001c7c <encRead+0x104>)
 8001bc4:	801a      	strh	r2, [r3, #0]
  rightCount = rightEncoder - oldRightEncoder;
 8001bc6:	4b2b      	ldr	r3, [pc, #172]	; (8001c74 <encRead+0xfc>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	b21b      	sxth	r3, r3
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <encRead+0x100>)
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	b21b      	sxth	r3, r3
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	b21a      	sxth	r2, r3
 8001bdc:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <encRead+0x108>)
 8001bde:	801a      	strh	r2, [r3, #0]
  fwdCount = leftCount + rightCount;
 8001be0:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <encRead+0x104>)
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	b21b      	sxth	r3, r3
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	4b25      	ldr	r3, [pc, #148]	; (8001c80 <encRead+0x108>)
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	b21b      	sxth	r3, r3
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	b21a      	sxth	r2, r3
 8001bf6:	4b23      	ldr	r3, [pc, #140]	; (8001c84 <encRead+0x10c>)
 8001bf8:	801a      	strh	r2, [r3, #0]
  rotCount = - (leftCount - rightCount);
 8001bfa:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <encRead+0x108>)
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	b21b      	sxth	r3, r3
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <encRead+0x104>)
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	b21b      	sxth	r3, r3
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	b21a      	sxth	r2, r3
 8001c10:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <encRead+0x110>)
 8001c12:	801a      	strh	r2, [r3, #0]
  fwdTotal += fwdCount;
 8001c14:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <encRead+0x10c>)
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	b21b      	sxth	r3, r3
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <encRead+0x114>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4413      	add	r3, r2
 8001c22:	4a1a      	ldr	r2, [pc, #104]	; (8001c8c <encRead+0x114>)
 8001c24:	6013      	str	r3, [r2, #0]
  rotTotal += rotCount;
 8001c26:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <encRead+0x110>)
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	b21b      	sxth	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <encRead+0x118>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	4a16      	ldr	r2, [pc, #88]	; (8001c90 <encRead+0x118>)
 8001c36:	6013      	str	r3, [r2, #0]
  leftTotal += leftCount;
 8001c38:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <encRead+0x104>)
 8001c3a:	881b      	ldrh	r3, [r3, #0]
 8001c3c:	b21b      	sxth	r3, r3
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <encRead+0x11c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4413      	add	r3, r2
 8001c46:	4a13      	ldr	r2, [pc, #76]	; (8001c94 <encRead+0x11c>)
 8001c48:	6013      	str	r3, [r2, #0]
  rightTotal += rightCount;
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <encRead+0x108>)
 8001c4c:	881b      	ldrh	r3, [r3, #0]
 8001c4e:	b21b      	sxth	r3, r3
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <encRead+0x120>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	4a0f      	ldr	r2, [pc, #60]	; (8001c98 <encRead+0x120>)
 8001c5a:	6013      	str	r3, [r2, #0]


}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000090 	.word	0x20000090
 8001c6c:	2000008c 	.word	0x2000008c
 8001c70:	40000800 	.word	0x40000800
 8001c74:	20000092 	.word	0x20000092
 8001c78:	2000008e 	.word	0x2000008e
 8001c7c:	200000f4 	.word	0x200000f4
 8001c80:	20000100 	.word	0x20000100
 8001c84:	200000ec 	.word	0x200000ec
 8001c88:	200000e4 	.word	0x200000e4
 8001c8c:	200000e8 	.word	0x200000e8
 8001c90:	200000f0 	.word	0x200000f0
 8001c94:	200000fc 	.word	0x200000fc
 8001c98:	200000f8 	.word	0x200000f8

08001c9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08a      	sub	sp, #40	; 0x28
 8001ca0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca2:	f107 0314 	add.w	r3, r7, #20
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]
 8001cac:	609a      	str	r2, [r3, #8]
 8001cae:	60da      	str	r2, [r3, #12]
 8001cb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	4b3e      	ldr	r3, [pc, #248]	; (8001db0 <MX_GPIO_Init+0x114>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a3d      	ldr	r2, [pc, #244]	; (8001db0 <MX_GPIO_Init+0x114>)
 8001cbc:	f043 0304 	orr.w	r3, r3, #4
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b3b      	ldr	r3, [pc, #236]	; (8001db0 <MX_GPIO_Init+0x114>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	4b37      	ldr	r3, [pc, #220]	; (8001db0 <MX_GPIO_Init+0x114>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a36      	ldr	r2, [pc, #216]	; (8001db0 <MX_GPIO_Init+0x114>)
 8001cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b34      	ldr	r3, [pc, #208]	; (8001db0 <MX_GPIO_Init+0x114>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	4b30      	ldr	r3, [pc, #192]	; (8001db0 <MX_GPIO_Init+0x114>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a2f      	ldr	r2, [pc, #188]	; (8001db0 <MX_GPIO_Init+0x114>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b2d      	ldr	r3, [pc, #180]	; (8001db0 <MX_GPIO_Init+0x114>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	4b29      	ldr	r3, [pc, #164]	; (8001db0 <MX_GPIO_Init+0x114>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a28      	ldr	r2, [pc, #160]	; (8001db0 <MX_GPIO_Init+0x114>)
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <MX_GPIO_Init+0x114>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FR_Pin|TOF_GPIO_FL_Pin|TOF_GPIO_R_Pin|TOF_GPIO_L_Pin 
 8001d22:	2200      	movs	r2, #0
 8001d24:	f241 411f 	movw	r1, #5151	; 0x141f
 8001d28:	4822      	ldr	r0, [pc, #136]	; (8001db4 <MX_GPIO_Init+0x118>)
 8001d2a:	f001 fc87 	bl	800363c <HAL_GPIO_WritePin>
                          |TOF_GPIO_F_Pin|DIR_L_Pin|DIR_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d34:	4820      	ldr	r0, [pc, #128]	; (8001db8 <MX_GPIO_Init+0x11c>)
 8001d36:	f001 fc81 	bl	800363c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d40:	4b1e      	ldr	r3, [pc, #120]	; (8001dbc <MX_GPIO_Init+0x120>)
 8001d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4819      	ldr	r0, [pc, #100]	; (8001db4 <MX_GPIO_Init+0x118>)
 8001d50:	f001 faf2 	bl	8003338 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = TOF_GPIO_FR_Pin|TOF_GPIO_FL_Pin|TOF_GPIO_R_Pin|TOF_GPIO_L_Pin 
 8001d54:	f241 431f 	movw	r3, #5151	; 0x141f
 8001d58:	617b      	str	r3, [r7, #20]
                          |TOF_GPIO_F_Pin|DIR_L_Pin|DIR_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d62:	2300      	movs	r3, #0
 8001d64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4811      	ldr	r0, [pc, #68]	; (8001db4 <MX_GPIO_Init+0x118>)
 8001d6e:	f001 fae3 	bl	8003338 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001d72:	2310      	movs	r3, #16
 8001d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	4619      	mov	r1, r3
 8001d84:	480e      	ldr	r0, [pc, #56]	; (8001dc0 <MX_GPIO_Init+0x124>)
 8001d86:	f001 fad7 	bl	8003338 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8001d8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d90:	2301      	movs	r3, #1
 8001d92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	4619      	mov	r1, r3
 8001da2:	4805      	ldr	r0, [pc, #20]	; (8001db8 <MX_GPIO_Init+0x11c>)
 8001da4:	f001 fac8 	bl	8003338 <HAL_GPIO_Init>

}
 8001da8:	bf00      	nop
 8001daa:	3728      	adds	r7, #40	; 0x28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020800 	.word	0x40020800
 8001db8:	40020400 	.word	0x40020400
 8001dbc:	10210000 	.word	0x10210000
 8001dc0:	40020000 	.word	0x40020000

08001dc4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <MX_I2C1_Init+0x50>)
 8001dca:	4a13      	ldr	r2, [pc, #76]	; (8001e18 <MX_I2C1_Init+0x54>)
 8001dcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001dce:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <MX_I2C1_Init+0x50>)
 8001dd0:	4a12      	ldr	r2, [pc, #72]	; (8001e1c <MX_I2C1_Init+0x58>)
 8001dd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dd4:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <MX_I2C1_Init+0x50>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <MX_I2C1_Init+0x50>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <MX_I2C1_Init+0x50>)
 8001de2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001de6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001de8:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <MX_I2C1_Init+0x50>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dee:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <MX_I2C1_Init+0x50>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001df4:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <MX_I2C1_Init+0x50>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <MX_I2C1_Init+0x50>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e00:	4804      	ldr	r0, [pc, #16]	; (8001e14 <MX_I2C1_Init+0x50>)
 8001e02:	f001 fc35 	bl	8003670 <HAL_I2C_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e0c:	f000 f96c 	bl	80020e8 <Error_Handler>
  }

}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000104 	.word	0x20000104
 8001e18:	40005400 	.word	0x40005400
 8001e1c:	000186a0 	.word	0x000186a0

08001e20 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a19      	ldr	r2, [pc, #100]	; (8001ea4 <HAL_I2C_MspInit+0x84>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d12c      	bne.n	8001e9c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <HAL_I2C_MspInit+0x88>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a17      	ldr	r2, [pc, #92]	; (8001ea8 <HAL_I2C_MspInit+0x88>)
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <HAL_I2C_MspInit+0x88>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001e5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e64:	2312      	movs	r3, #18
 8001e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e70:	2304      	movs	r3, #4
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	480c      	ldr	r0, [pc, #48]	; (8001eac <HAL_I2C_MspInit+0x8c>)
 8001e7c:	f001 fa5c 	bl	8003338 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <HAL_I2C_MspInit+0x88>)
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	4a07      	ldr	r2, [pc, #28]	; (8001ea8 <HAL_I2C_MspInit+0x88>)
 8001e8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_I2C_MspInit+0x88>)
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	3728      	adds	r7, #40	; 0x28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40005400 	.word	0x40005400
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40020400 	.word	0x40020400

08001eb0 <_write>:
/* USER CODE BEGIN 0 */

//przekierowanie printf dla portu szeregowego

int _write ( int file, char *ptr, int len)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 50);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	2332      	movs	r3, #50	; 0x32
 8001ec2:	68b9      	ldr	r1, [r7, #8]
 8001ec4:	4803      	ldr	r0, [pc, #12]	; (8001ed4 <_write+0x24>)
 8001ec6:	f003 fe46 	bl	8005b56 <HAL_UART_Transmit>
 return len;
 8001eca:	687b      	ldr	r3, [r7, #4]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000224 	.word	0x20000224

08001ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b09a      	sub	sp, #104	; 0x68
 8001edc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ede:	f001 f8b1 	bl	8003044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ee2:	f000 f897 	bl	8002014 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ee6:	f7ff fed9 	bl	8001c9c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001eea:	f001 f80f 	bl	8002f0c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001eee:	f7ff ff69 	bl	8001dc4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001ef2:	f000 fdeb 	bl	8002acc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ef6:	f000 fe3d 	bl	8002b74 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001efa:	f000 febd 	bl	8002c78 <MX_TIM4_Init>

  //zmienne lokalne funkcji main - ustawione jako lokalne by były od razu widoczne w debuggerze
  /************************************************************************/

  //zmienne dla MPU6050
  float ax = 0, ay = 0, az = 0, gx = 0, gy = 0, gz = 0, temperature = 0;
 8001efe:	f04f 0300 	mov.w	r3, #0
 8001f02:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f04:	f04f 0300 	mov.w	r3, #0
 8001f08:	647b      	str	r3, [r7, #68]	; 0x44
 8001f0a:	f04f 0300 	mov.w	r3, #0
 8001f0e:	643b      	str	r3, [r7, #64]	; 0x40
 8001f10:	f04f 0300 	mov.w	r3, #0
 8001f14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f16:	f04f 0300 	mov.w	r3, #0
 8001f1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	637b      	str	r3, [r7, #52]	; 0x34
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	657b      	str	r3, [r7, #84]	; 0x54

  //zmienne do podglądu enkoderów
  uint32_t prawy = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t lewy = 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	64fb      	str	r3, [r7, #76]	; 0x4c

  //ramka danych na WDS
  char frameWDS[50] = {0};
 8001f30:	463b      	mov	r3, r7
 8001f32:	2232      	movs	r2, #50	; 0x32
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f004 fa96 	bl	8006468 <memset>

  /************************************************************************/

  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin, 0);  //zapal LED
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f42:	482d      	ldr	r0, [pc, #180]	; (8001ff8 <main+0x120>)
 8001f44:	f001 fb7a 	bl	800363c <HAL_GPIO_WritePin>

  //inicjalizacja PWM dla silników
  motorsInit();
 8001f48:	f000 f8d6 	bl	80020f8 <motorsInit>

  //inicjalizacja czujników ToF
  initMicromouseVL53L0x();
 8001f4c:	f7ff fd3c 	bl	80019c8 <initMicromouseVL53L0x>

  //inicjalizacja MPU6050
  MPU6050_Init(&hi2c1);
 8001f50:	482a      	ldr	r0, [pc, #168]	; (8001ffc <main+0x124>)
 8001f52:	f000 fcb1 	bl	80028b8 <MPU6050_Init>
  MPU6050_SetInterruptMode(MPU6050_INTMODE_ACTIVEHIGH);
 8001f56:	2000      	movs	r0, #0
 8001f58:	f000 fbb8 	bl	80026cc <MPU6050_SetInterruptMode>
  MPU6050_SetInterruptDrive(MPU6050_INTDRV_PUSHPULL);
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f000 fbeb 	bl	8002738 <MPU6050_SetInterruptDrive>
  MPU6050_SetInterruptLatch(MPU6050_INTLATCH_WAITCLEAR);
 8001f62:	2001      	movs	r0, #1
 8001f64:	f000 fc20 	bl	80027a8 <MPU6050_SetInterruptLatch>
  MPU6050_SetInterruptLatchClear(MPU6050_INTCLEAR_STATUSREAD);
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f000 fc55 	bl	8002818 <MPU6050_SetInterruptLatchClear>
  MPU6050_SetIntEnableRegister(0);
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f000 fc8a 	bl	8002888 <MPU6050_SetIntEnableRegister>
  dist_L = ToF_readRangeContinuousMillimeters(&ToF_L);
  dist_FL = ToF_readRangeContinuousMillimeters(&ToF_FL);
  dist_FR = ToF_readRangeContinuousMillimeters(&ToF_FR);
*/
  //inicjalizacja enkoderów
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001f74:	213c      	movs	r1, #60	; 0x3c
 8001f76:	4822      	ldr	r0, [pc, #136]	; (8002000 <main+0x128>)
 8001f78:	f003 f8b0 	bl	80050dc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001f7c:	213c      	movs	r1, #60	; 0x3c
 8001f7e:	4821      	ldr	r0, [pc, #132]	; (8002004 <main+0x12c>)
 8001f80:	f003 f8ac 	bl	80050dc <HAL_TIM_Encoder_Start>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  //odczyt danych z mpu6050
	  MPU6050_GetAccelerometerScaled(&ax, &ay, &az);
 8001f84:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001f88:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001f8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 fae5 	bl	8002560 <MPU6050_GetAccelerometerScaled>
	  MPU6050_GetGyroscopeScaled(&gx, &gy, &gz);
 8001f96:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001f9a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001f9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 fb52 	bl	800264c <MPU6050_GetGyroscopeScaled>
	  temperature = MPU6050_GetTemperatureCelsius();
 8001fa8:	f000 fa76 	bl	8002498 <MPU6050_GetTemperatureCelsius>
 8001fac:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54

	  //odczyt z enkoderów
	  encRead();
 8001fb0:	f7ff fde2 	bl	8001b78 <encRead>
	  prawy = leftTotal;
 8001fb4:	4b14      	ldr	r3, [pc, #80]	; (8002008 <main+0x130>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	653b      	str	r3, [r7, #80]	; 0x50
	  lewy = rightTotal;
 8001fba:	4b14      	ldr	r3, [pc, #80]	; (800200c <main+0x134>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
	  //testowe ustawienie prędkości silników - nie odkomentowywać bo ucieka ze stołu
	  //setMoveR(1, 500);
	  //setMoveL(1, 500);

	  //test portu szeregowego
	  printf("Hello world\n");
 8001fc0:	4813      	ldr	r0, [pc, #76]	; (8002010 <main+0x138>)
 8001fc2:	f004 fab5 	bl	8006530 <puts>

	  //generowanie ramki danych na WDS - na razie przykładowe dane
	  //makeFrame(frameString,left_encoder,right_encoder,ToF_L,ToF_FL,ToF_F,ToF_FR,ToF_R);
	  //tak powinna wyglądać gotowa ramka -> "X_00012_00034_0023_0234_0433_3444_0003_1886576405"
	  makeFrame(frameWDS,12,34,23,234,433,3444,3);
 8001fc6:	4638      	mov	r0, r7
 8001fc8:	2303      	movs	r3, #3
 8001fca:	9303      	str	r3, [sp, #12]
 8001fcc:	f640 5374 	movw	r3, #3444	; 0xd74
 8001fd0:	9302      	str	r3, [sp, #8]
 8001fd2:	f240 13b1 	movw	r3, #433	; 0x1b1
 8001fd6:	9301      	str	r3, [sp, #4]
 8001fd8:	23ea      	movs	r3, #234	; 0xea
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	2317      	movs	r3, #23
 8001fde:	2222      	movs	r2, #34	; 0x22
 8001fe0:	210c      	movs	r1, #12
 8001fe2:	f7fe fd8b 	bl	8000afc <makeFrame>
	  //wysłanie ramki
	  printf("%s\n", frameWDS);
 8001fe6:	463b      	mov	r3, r7
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f004 faa1 	bl	8006530 <puts>

	  HAL_Delay(1000);
 8001fee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ff2:	f001 f899 	bl	8003128 <HAL_Delay>
	  MPU6050_GetAccelerometerScaled(&ax, &ay, &az);
 8001ff6:	e7c5      	b.n	8001f84 <main+0xac>
 8001ff8:	40020400 	.word	0x40020400
 8001ffc:	20000104 	.word	0x20000104
 8002000:	200001e4 	.word	0x200001e4
 8002004:	20000164 	.word	0x20000164
 8002008:	200000fc 	.word	0x200000fc
 800200c:	200000f8 	.word	0x200000f8
 8002010:	08007424 	.word	0x08007424

08002014 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b094      	sub	sp, #80	; 0x50
 8002018:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800201a:	f107 0320 	add.w	r3, r7, #32
 800201e:	2230      	movs	r2, #48	; 0x30
 8002020:	2100      	movs	r1, #0
 8002022:	4618      	mov	r0, r3
 8002024:	f004 fa20 	bl	8006468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002028:	f107 030c 	add.w	r3, r7, #12
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002038:	2300      	movs	r3, #0
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	4b28      	ldr	r3, [pc, #160]	; (80020e0 <SystemClock_Config+0xcc>)
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	4a27      	ldr	r2, [pc, #156]	; (80020e0 <SystemClock_Config+0xcc>)
 8002042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002046:	6413      	str	r3, [r2, #64]	; 0x40
 8002048:	4b25      	ldr	r3, [pc, #148]	; (80020e0 <SystemClock_Config+0xcc>)
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002054:	2300      	movs	r3, #0
 8002056:	607b      	str	r3, [r7, #4]
 8002058:	4b22      	ldr	r3, [pc, #136]	; (80020e4 <SystemClock_Config+0xd0>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a21      	ldr	r2, [pc, #132]	; (80020e4 <SystemClock_Config+0xd0>)
 800205e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	4b1f      	ldr	r3, [pc, #124]	; (80020e4 <SystemClock_Config+0xd0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800206c:	607b      	str	r3, [r7, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002070:	2302      	movs	r3, #2
 8002072:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002074:	2301      	movs	r3, #1
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002078:	2310      	movs	r3, #16
 800207a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800207c:	2302      	movs	r3, #2
 800207e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002080:	2300      	movs	r3, #0
 8002082:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002084:	2310      	movs	r3, #16
 8002086:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002088:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800208c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800208e:	2304      	movs	r3, #4
 8002090:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002092:	2304      	movs	r3, #4
 8002094:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002096:	f107 0320 	add.w	r3, r7, #32
 800209a:	4618      	mov	r0, r3
 800209c:	f002 fa98 	bl	80045d0 <HAL_RCC_OscConfig>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80020a6:	f000 f81f 	bl	80020e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020aa:	230f      	movs	r3, #15
 80020ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020ae:	2302      	movs	r3, #2
 80020b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020c0:	f107 030c 	add.w	r3, r7, #12
 80020c4:	2102      	movs	r1, #2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f002 fcf2 	bl	8004ab0 <HAL_RCC_ClockConfig>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80020d2:	f000 f809 	bl	80020e8 <Error_Handler>
  }
}
 80020d6:	bf00      	nop
 80020d8:	3750      	adds	r7, #80	; 0x50
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40007000 	.word	0x40007000

080020e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <motorsInit>:
#include "move.h"
#include "encoders.h"
#include "tim.h"

void motorsInit()
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80020fc:	2100      	movs	r1, #0
 80020fe:	4804      	ldr	r0, [pc, #16]	; (8002110 <motorsInit+0x18>)
 8002100:	f002 ff28 	bl	8004f54 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002104:	2108      	movs	r1, #8
 8002106:	4802      	ldr	r0, [pc, #8]	; (8002110 <motorsInit+0x18>)
 8002108:	f002 ff24 	bl	8004f54 <HAL_TIM_PWM_Start>
}
 800210c:	bf00      	nop
 800210e:	bd80      	pop	{r7, pc}
 8002110:	200001a4 	.word	0x200001a4

08002114 <MPU6050_SetDlpf>:

//
// CONFIG
//
void MPU6050_SetDlpf(uint8_t Value)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af04      	add	r7, sp, #16
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 800211e:	4b18      	ldr	r3, [pc, #96]	; (8002180 <MPU6050_SetDlpf+0x6c>)
 8002120:	6818      	ldr	r0, [r3, #0]
 8002122:	230a      	movs	r3, #10
 8002124:	9302      	str	r3, [sp, #8]
 8002126:	2301      	movs	r3, #1
 8002128:	9301      	str	r3, [sp, #4]
 800212a:	f107 030f 	add.w	r3, r7, #15
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	2301      	movs	r3, #1
 8002132:	221a      	movs	r2, #26
 8002134:	21d0      	movs	r1, #208	; 0xd0
 8002136:	f001 fccd 	bl	8003ad4 <HAL_I2C_Mem_Read>
	tmp &= 0xF8;
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	f023 0307 	bic.w	r3, r3, #7
 8002140:	b2db      	uxtb	r3, r3
 8002142:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x7);
 8002144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	b25a      	sxtb	r2, r3
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	b25b      	sxtb	r3, r3
 8002152:	4313      	orrs	r3, r2
 8002154:	b25b      	sxtb	r3, r3
 8002156:	b2db      	uxtb	r3, r3
 8002158:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <MPU6050_SetDlpf+0x6c>)
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	230a      	movs	r3, #10
 8002160:	9302      	str	r3, [sp, #8]
 8002162:	2301      	movs	r3, #1
 8002164:	9301      	str	r3, [sp, #4]
 8002166:	f107 030f 	add.w	r3, r7, #15
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	2301      	movs	r3, #1
 800216e:	221a      	movs	r2, #26
 8002170:	21d0      	movs	r1, #208	; 0xd0
 8002172:	f001 fbb5 	bl	80038e0 <HAL_I2C_Mem_Write>
}
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000160 	.word	0x20000160

08002184 <MPU6050_DeviceReset>:

//
// PWR_MGMT_1
//
void MPU6050_DeviceReset(uint8_t Reset)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af04      	add	r7, sp, #16
 800218a:	4603      	mov	r3, r0
 800218c:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 800218e:	4b17      	ldr	r3, [pc, #92]	; (80021ec <MPU6050_DeviceReset+0x68>)
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	230a      	movs	r3, #10
 8002194:	9302      	str	r3, [sp, #8]
 8002196:	2301      	movs	r3, #1
 8002198:	9301      	str	r3, [sp, #4]
 800219a:	f107 030f 	add.w	r3, r7, #15
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	2301      	movs	r3, #1
 80021a2:	226b      	movs	r2, #107	; 0x6b
 80021a4:	21d0      	movs	r1, #208	; 0xd0
 80021a6:	f001 fc95 	bl	8003ad4 <HAL_I2C_Mem_Read>
	tmp &= ~(1<<MPU6050_PWR1_DEVICE_RESET_BIT);
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Reset & 0x1) << MPU6050_PWR1_DEVICE_RESET_BIT);
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	01db      	lsls	r3, r3, #7
 80021b8:	b25a      	sxtb	r2, r3
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	b25b      	sxtb	r3, r3
 80021be:	4313      	orrs	r3, r2
 80021c0:	b25b      	sxtb	r3, r3
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 80021c6:	4b09      	ldr	r3, [pc, #36]	; (80021ec <MPU6050_DeviceReset+0x68>)
 80021c8:	6818      	ldr	r0, [r3, #0]
 80021ca:	230a      	movs	r3, #10
 80021cc:	9302      	str	r3, [sp, #8]
 80021ce:	2301      	movs	r3, #1
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	f107 030f 	add.w	r3, r7, #15
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	2301      	movs	r3, #1
 80021da:	226b      	movs	r2, #107	; 0x6b
 80021dc:	21d0      	movs	r1, #208	; 0xd0
 80021de:	f001 fb7f 	bl	80038e0 <HAL_I2C_Mem_Write>
}
 80021e2:	bf00      	nop
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000160 	.word	0x20000160

080021f0 <MPU6050_SetSleepEnabled>:

void MPU6050_SetSleepEnabled(uint8_t Enable)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af04      	add	r7, sp, #16
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 80021fa:	4b18      	ldr	r3, [pc, #96]	; (800225c <MPU6050_SetSleepEnabled+0x6c>)
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	230a      	movs	r3, #10
 8002200:	9302      	str	r3, [sp, #8]
 8002202:	2301      	movs	r3, #1
 8002204:	9301      	str	r3, [sp, #4]
 8002206:	f107 030f 	add.w	r3, r7, #15
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2301      	movs	r3, #1
 800220e:	226b      	movs	r2, #107	; 0x6b
 8002210:	21d0      	movs	r1, #208	; 0xd0
 8002212:	f001 fc5f 	bl	8003ad4 <HAL_I2C_Mem_Read>
	tmp &= ~(1<<MPU6050_PWR1_SLEEP_BIT);
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800221c:	b2db      	uxtb	r3, r3
 800221e:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Enable & 0x1) << MPU6050_PWR1_SLEEP_BIT);
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	019b      	lsls	r3, r3, #6
 8002224:	b25b      	sxtb	r3, r3
 8002226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222a:	b25a      	sxtb	r2, r3
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	b25b      	sxtb	r3, r3
 8002230:	4313      	orrs	r3, r2
 8002232:	b25b      	sxtb	r3, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <MPU6050_SetSleepEnabled+0x6c>)
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	230a      	movs	r3, #10
 800223e:	9302      	str	r3, [sp, #8]
 8002240:	2301      	movs	r3, #1
 8002242:	9301      	str	r3, [sp, #4]
 8002244:	f107 030f 	add.w	r3, r7, #15
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	2301      	movs	r3, #1
 800224c:	226b      	movs	r2, #107	; 0x6b
 800224e:	21d0      	movs	r1, #208	; 0xd0
 8002250:	f001 fb46 	bl	80038e0 <HAL_I2C_Mem_Write>
}
 8002254:	bf00      	nop
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000160 	.word	0x20000160

08002260 <MPU6050_SetClockSource>:
	tmp |= ((Disable & 0x1) << MPU6050_PWR1_TEMP_DIS_BIT);
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
}

void MPU6050_SetClockSource(uint8_t Source)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af04      	add	r7, sp, #16
 8002266:	4603      	mov	r3, r0
 8002268:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 800226a:	4b18      	ldr	r3, [pc, #96]	; (80022cc <MPU6050_SetClockSource+0x6c>)
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	230a      	movs	r3, #10
 8002270:	9302      	str	r3, [sp, #8]
 8002272:	2301      	movs	r3, #1
 8002274:	9301      	str	r3, [sp, #4]
 8002276:	f107 030f 	add.w	r3, r7, #15
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	2301      	movs	r3, #1
 800227e:	226b      	movs	r2, #107	; 0x6b
 8002280:	21d0      	movs	r1, #208	; 0xd0
 8002282:	f001 fc27 	bl	8003ad4 <HAL_I2C_Mem_Read>
	tmp &= 0xF8;
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	f023 0307 	bic.w	r3, r3, #7
 800228c:	b2db      	uxtb	r3, r3
 800228e:	73fb      	strb	r3, [r7, #15]
	tmp |= (Source & 0x7);
 8002290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	b25a      	sxtb	r2, r3
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	b25b      	sxtb	r3, r3
 800229e:	4313      	orrs	r3, r2
 80022a0:	b25b      	sxtb	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 80022a6:	4b09      	ldr	r3, [pc, #36]	; (80022cc <MPU6050_SetClockSource+0x6c>)
 80022a8:	6818      	ldr	r0, [r3, #0]
 80022aa:	230a      	movs	r3, #10
 80022ac:	9302      	str	r3, [sp, #8]
 80022ae:	2301      	movs	r3, #1
 80022b0:	9301      	str	r3, [sp, #4]
 80022b2:	f107 030f 	add.w	r3, r7, #15
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	2301      	movs	r3, #1
 80022ba:	226b      	movs	r2, #107	; 0x6b
 80022bc:	21d0      	movs	r1, #208	; 0xd0
 80022be:	f001 fb0f 	bl	80038e0 <HAL_I2C_Mem_Write>
}
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000160 	.word	0x20000160

080022d0 <MPU6050_SetFullScaleGyroRange>:

//
//	Measurement scale configuration
//
void MPU6050_SetFullScaleGyroRange(uint8_t Range)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af04      	add	r7, sp, #16
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 80022da:	4b28      	ldr	r3, [pc, #160]	; (800237c <MPU6050_SetFullScaleGyroRange+0xac>)
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	230a      	movs	r3, #10
 80022e0:	9302      	str	r3, [sp, #8]
 80022e2:	2301      	movs	r3, #1
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	f107 030f 	add.w	r3, r7, #15
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	2301      	movs	r3, #1
 80022ee:	221b      	movs	r2, #27
 80022f0:	21d0      	movs	r1, #208	; 0xd0
 80022f2:	f001 fbef 	bl	8003ad4 <HAL_I2C_Mem_Read>
	tmp &= 0xE7;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	f023 0318 	bic.w	r3, r3, #24
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Range & 0x7) << 3);
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	b25b      	sxtb	r3, r3
 8002306:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800230a:	b25a      	sxtb	r2, r3
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	b25b      	sxtb	r3, r3
 8002310:	4313      	orrs	r3, r2
 8002312:	b25b      	sxtb	r3, r3
 8002314:	b2db      	uxtb	r3, r3
 8002316:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 8002318:	4b18      	ldr	r3, [pc, #96]	; (800237c <MPU6050_SetFullScaleGyroRange+0xac>)
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	230a      	movs	r3, #10
 800231e:	9302      	str	r3, [sp, #8]
 8002320:	2301      	movs	r3, #1
 8002322:	9301      	str	r3, [sp, #4]
 8002324:	f107 030f 	add.w	r3, r7, #15
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	2301      	movs	r3, #1
 800232c:	221b      	movs	r2, #27
 800232e:	21d0      	movs	r1, #208	; 0xd0
 8002330:	f001 fad6 	bl	80038e0 <HAL_I2C_Mem_Write>

	switch(Range)
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	2b03      	cmp	r3, #3
 8002338:	d81a      	bhi.n	8002370 <MPU6050_SetFullScaleGyroRange+0xa0>
 800233a:	a201      	add	r2, pc, #4	; (adr r2, 8002340 <MPU6050_SetFullScaleGyroRange+0x70>)
 800233c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002340:	08002351 	.word	0x08002351
 8002344:	08002359 	.word	0x08002359
 8002348:	08002361 	.word	0x08002361
 800234c:	08002369 	.word	0x08002369
	{
		case MPU6050_GYRO_FS_250:
			Gyr_Scale = 0.007633;
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <MPU6050_SetFullScaleGyroRange+0xb0>)
 8002352:	4a0c      	ldr	r2, [pc, #48]	; (8002384 <MPU6050_SetFullScaleGyroRange+0xb4>)
 8002354:	601a      	str	r2, [r3, #0]
			break;
 8002356:	e00c      	b.n	8002372 <MPU6050_SetFullScaleGyroRange+0xa2>
		case MPU6050_GYRO_FS_500:
			Gyr_Scale = 0.015267;
 8002358:	4b09      	ldr	r3, [pc, #36]	; (8002380 <MPU6050_SetFullScaleGyroRange+0xb0>)
 800235a:	4a0b      	ldr	r2, [pc, #44]	; (8002388 <MPU6050_SetFullScaleGyroRange+0xb8>)
 800235c:	601a      	str	r2, [r3, #0]
			break;
 800235e:	e008      	b.n	8002372 <MPU6050_SetFullScaleGyroRange+0xa2>
		case MPU6050_GYRO_FS_1000:
			Gyr_Scale = 0.030487;
 8002360:	4b07      	ldr	r3, [pc, #28]	; (8002380 <MPU6050_SetFullScaleGyroRange+0xb0>)
 8002362:	4a0a      	ldr	r2, [pc, #40]	; (800238c <MPU6050_SetFullScaleGyroRange+0xbc>)
 8002364:	601a      	str	r2, [r3, #0]
			break;
 8002366:	e004      	b.n	8002372 <MPU6050_SetFullScaleGyroRange+0xa2>
		case MPU6050_GYRO_FS_2000:
			Gyr_Scale = 0.060975;
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <MPU6050_SetFullScaleGyroRange+0xb0>)
 800236a:	4a09      	ldr	r2, [pc, #36]	; (8002390 <MPU6050_SetFullScaleGyroRange+0xc0>)
 800236c:	601a      	str	r2, [r3, #0]
			break;
 800236e:	e000      	b.n	8002372 <MPU6050_SetFullScaleGyroRange+0xa2>
		default:
			break;
 8002370:	bf00      	nop
	}
}
 8002372:	bf00      	nop
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000160 	.word	0x20000160
 8002380:	2000015c 	.word	0x2000015c
 8002384:	3bfa1e3f 	.word	0x3bfa1e3f
 8002388:	3c7a2270 	.word	0x3c7a2270
 800238c:	3cf9bfdf 	.word	0x3cf9bfdf
 8002390:	3d79c0ec 	.word	0x3d79c0ec

08002394 <MPU6050_SetFullScaleAccelRange>:

void MPU6050_SetFullScaleAccelRange(uint8_t Range)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af04      	add	r7, sp, #16
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 800239e:	4b28      	ldr	r3, [pc, #160]	; (8002440 <MPU6050_SetFullScaleAccelRange+0xac>)
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	230a      	movs	r3, #10
 80023a4:	9302      	str	r3, [sp, #8]
 80023a6:	2301      	movs	r3, #1
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	f107 030f 	add.w	r3, r7, #15
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	2301      	movs	r3, #1
 80023b2:	221c      	movs	r2, #28
 80023b4:	21d0      	movs	r1, #208	; 0xd0
 80023b6:	f001 fb8d 	bl	8003ad4 <HAL_I2C_Mem_Read>
	tmp &= 0xE7;
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	f023 0318 	bic.w	r3, r3, #24
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Range & 0x7) << 3);
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	b25b      	sxtb	r3, r3
 80023ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023ce:	b25a      	sxtb	r2, r3
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	b25b      	sxtb	r3, r3
 80023d4:	4313      	orrs	r3, r2
 80023d6:	b25b      	sxtb	r3, r3
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 80023dc:	4b18      	ldr	r3, [pc, #96]	; (8002440 <MPU6050_SetFullScaleAccelRange+0xac>)
 80023de:	6818      	ldr	r0, [r3, #0]
 80023e0:	230a      	movs	r3, #10
 80023e2:	9302      	str	r3, [sp, #8]
 80023e4:	2301      	movs	r3, #1
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	f107 030f 	add.w	r3, r7, #15
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	2301      	movs	r3, #1
 80023f0:	221c      	movs	r2, #28
 80023f2:	21d0      	movs	r1, #208	; 0xd0
 80023f4:	f001 fa74 	bl	80038e0 <HAL_I2C_Mem_Write>

	switch(Range)
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d81a      	bhi.n	8002434 <MPU6050_SetFullScaleAccelRange+0xa0>
 80023fe:	a201      	add	r2, pc, #4	; (adr r2, 8002404 <MPU6050_SetFullScaleAccelRange+0x70>)
 8002400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002404:	08002415 	.word	0x08002415
 8002408:	0800241d 	.word	0x0800241d
 800240c:	08002425 	.word	0x08002425
 8002410:	0800242d 	.word	0x0800242d
	{
		case MPU6050_ACCEL_FS_2:
			Acc_Scale = 0.000061;
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <MPU6050_SetFullScaleAccelRange+0xb0>)
 8002416:	4a0c      	ldr	r2, [pc, #48]	; (8002448 <MPU6050_SetFullScaleAccelRange+0xb4>)
 8002418:	601a      	str	r2, [r3, #0]
			break;
 800241a:	e00c      	b.n	8002436 <MPU6050_SetFullScaleAccelRange+0xa2>
		case MPU6050_ACCEL_FS_4:
			Acc_Scale = 0.000122;
 800241c:	4b09      	ldr	r3, [pc, #36]	; (8002444 <MPU6050_SetFullScaleAccelRange+0xb0>)
 800241e:	4a0b      	ldr	r2, [pc, #44]	; (800244c <MPU6050_SetFullScaleAccelRange+0xb8>)
 8002420:	601a      	str	r2, [r3, #0]
			break;
 8002422:	e008      	b.n	8002436 <MPU6050_SetFullScaleAccelRange+0xa2>
		case MPU6050_ACCEL_FS_8:
			Acc_Scale = 0.000244;
 8002424:	4b07      	ldr	r3, [pc, #28]	; (8002444 <MPU6050_SetFullScaleAccelRange+0xb0>)
 8002426:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <MPU6050_SetFullScaleAccelRange+0xbc>)
 8002428:	601a      	str	r2, [r3, #0]
			break;
 800242a:	e004      	b.n	8002436 <MPU6050_SetFullScaleAccelRange+0xa2>
		case MPU6050_ACCEL_FS_16:
			Acc_Scale = 0.0004882;
 800242c:	4b05      	ldr	r3, [pc, #20]	; (8002444 <MPU6050_SetFullScaleAccelRange+0xb0>)
 800242e:	4a09      	ldr	r2, [pc, #36]	; (8002454 <MPU6050_SetFullScaleAccelRange+0xc0>)
 8002430:	601a      	str	r2, [r3, #0]
			break;
 8002432:	e000      	b.n	8002436 <MPU6050_SetFullScaleAccelRange+0xa2>
		default:
			break;
 8002434:	bf00      	nop
	}
}
 8002436:	bf00      	nop
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000160 	.word	0x20000160
 8002444:	20000158 	.word	0x20000158
 8002448:	387fda40 	.word	0x387fda40
 800244c:	38ffda40 	.word	0x38ffda40
 8002450:	397fda40 	.word	0x397fda40
 8002454:	39fff518 	.word	0x39fff518

08002458 <MPU6050_GetTemperatureRAW>:

//
// Reading data
//
int16_t MPU6050_GetTemperatureRAW(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af04      	add	r7, sp, #16
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_TEMP_OUT_H, 1, tmp, 2, I2C_TIMEOUT);
 800245e:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <MPU6050_GetTemperatureRAW+0x38>)
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	230a      	movs	r3, #10
 8002464:	9302      	str	r3, [sp, #8]
 8002466:	2302      	movs	r3, #2
 8002468:	9301      	str	r3, [sp, #4]
 800246a:	1d3b      	adds	r3, r7, #4
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	2301      	movs	r3, #1
 8002470:	2241      	movs	r2, #65	; 0x41
 8002472:	21d0      	movs	r1, #208	; 0xd0
 8002474:	f001 fb2e 	bl	8003ad4 <HAL_I2C_Mem_Read>
	return (((int16_t)tmp[0]) << 8) | tmp[1];
 8002478:	793b      	ldrb	r3, [r7, #4]
 800247a:	021b      	lsls	r3, r3, #8
 800247c:	b21a      	sxth	r2, r3
 800247e:	797b      	ldrb	r3, [r7, #5]
 8002480:	b21b      	sxth	r3, r3
 8002482:	4313      	orrs	r3, r2
 8002484:	b21b      	sxth	r3, r3
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000160 	.word	0x20000160
 8002494:	00000000 	.word	0x00000000

08002498 <MPU6050_GetTemperatureCelsius>:

float MPU6050_GetTemperatureCelsius(void)
{
 8002498:	b590      	push	{r4, r7, lr}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
	int16_t temp;

	temp = MPU6050_GetTemperatureRAW();
 800249e:	f7ff ffdb 	bl	8002458 <MPU6050_GetTemperatureRAW>
 80024a2:	4603      	mov	r3, r0
 80024a4:	80fb      	strh	r3, [r7, #6]

	return (float)temp / 340 + 36.53;
 80024a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024aa:	ee07 3a90 	vmov	s15, r3
 80024ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024b2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80024f0 <MPU6050_GetTemperatureCelsius+0x58>
 80024b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80024ba:	ee16 0a90 	vmov	r0, s13
 80024be:	f7fe f843 	bl	8000548 <__aeabi_f2d>
 80024c2:	a309      	add	r3, pc, #36	; (adr r3, 80024e8 <MPU6050_GetTemperatureCelsius+0x50>)
 80024c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c8:	f7fd fee0 	bl	800028c <__adddf3>
 80024cc:	4603      	mov	r3, r0
 80024ce:	460c      	mov	r4, r1
 80024d0:	4618      	mov	r0, r3
 80024d2:	4621      	mov	r1, r4
 80024d4:	f7fe f918 	bl	8000708 <__aeabi_d2f>
 80024d8:	4603      	mov	r3, r0
 80024da:	ee07 3a90 	vmov	s15, r3
}
 80024de:	eeb0 0a67 	vmov.f32	s0, s15
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd90      	pop	{r4, r7, pc}
 80024e8:	0a3d70a4 	.word	0x0a3d70a4
 80024ec:	404243d7 	.word	0x404243d7
 80024f0:	43aa0000 	.word	0x43aa0000

080024f4 <MPU6050_GetAccelerometerRAW>:
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, 1, tmp, 2, I2C_TIMEOUT);
	return (((int16_t)tmp[0]) << 8) | tmp[1];
}

void MPU6050_GetAccelerometerRAW(int16_t *x, int16_t *y, int16_t *z)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08a      	sub	sp, #40	; 0x28
 80024f8:	af04      	add	r7, sp, #16
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
	uint8_t tmp[6];
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, tmp, 6, I2C_TIMEOUT);
 8002500:	4b16      	ldr	r3, [pc, #88]	; (800255c <MPU6050_GetAccelerometerRAW+0x68>)
 8002502:	6818      	ldr	r0, [r3, #0]
 8002504:	230a      	movs	r3, #10
 8002506:	9302      	str	r3, [sp, #8]
 8002508:	2306      	movs	r3, #6
 800250a:	9301      	str	r3, [sp, #4]
 800250c:	f107 0310 	add.w	r3, r7, #16
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	2301      	movs	r3, #1
 8002514:	223b      	movs	r2, #59	; 0x3b
 8002516:	21d0      	movs	r1, #208	; 0xd0
 8002518:	f001 fadc 	bl	8003ad4 <HAL_I2C_Mem_Read>

	*x = (((int16_t)tmp[0]) << 8) | tmp[1];
 800251c:	7c3b      	ldrb	r3, [r7, #16]
 800251e:	021b      	lsls	r3, r3, #8
 8002520:	b21a      	sxth	r2, r3
 8002522:	7c7b      	ldrb	r3, [r7, #17]
 8002524:	b21b      	sxth	r3, r3
 8002526:	4313      	orrs	r3, r2
 8002528:	b21a      	sxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	801a      	strh	r2, [r3, #0]
	*y = (((int16_t)tmp[2]) << 8) | tmp[3];
 800252e:	7cbb      	ldrb	r3, [r7, #18]
 8002530:	021b      	lsls	r3, r3, #8
 8002532:	b21a      	sxth	r2, r3
 8002534:	7cfb      	ldrb	r3, [r7, #19]
 8002536:	b21b      	sxth	r3, r3
 8002538:	4313      	orrs	r3, r2
 800253a:	b21a      	sxth	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	801a      	strh	r2, [r3, #0]
	*z = (((int16_t)tmp[4]) << 8) | tmp[5];
 8002540:	7d3b      	ldrb	r3, [r7, #20]
 8002542:	021b      	lsls	r3, r3, #8
 8002544:	b21a      	sxth	r2, r3
 8002546:	7d7b      	ldrb	r3, [r7, #21]
 8002548:	b21b      	sxth	r3, r3
 800254a:	4313      	orrs	r3, r2
 800254c:	b21a      	sxth	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	801a      	strh	r2, [r3, #0]
}
 8002552:	bf00      	nop
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000160 	.word	0x20000160

08002560 <MPU6050_GetAccelerometerScaled>:

void MPU6050_GetAccelerometerScaled(float* x, float* y, float* z)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
	int16_t tmp_x, tmp_y, tmp_z;
	MPU6050_GetAccelerometerRAW(&tmp_x, &tmp_y, &tmp_z);
 800256c:	f107 0212 	add.w	r2, r7, #18
 8002570:	f107 0114 	add.w	r1, r7, #20
 8002574:	f107 0316 	add.w	r3, r7, #22
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ffbb 	bl	80024f4 <MPU6050_GetAccelerometerRAW>

	*x = (float)tmp_x * Acc_Scale;
 800257e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002582:	ee07 3a90 	vmov	s15, r3
 8002586:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800258a:	4b14      	ldr	r3, [pc, #80]	; (80025dc <MPU6050_GetAccelerometerScaled+0x7c>)
 800258c:	edd3 7a00 	vldr	s15, [r3]
 8002590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	edc3 7a00 	vstr	s15, [r3]
	*y = (float)tmp_y * Acc_Scale;
 800259a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800259e:	ee07 3a90 	vmov	s15, r3
 80025a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025a6:	4b0d      	ldr	r3, [pc, #52]	; (80025dc <MPU6050_GetAccelerometerScaled+0x7c>)
 80025a8:	edd3 7a00 	vldr	s15, [r3]
 80025ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	edc3 7a00 	vstr	s15, [r3]
	*z = (float)tmp_z * Acc_Scale;
 80025b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80025ba:	ee07 3a90 	vmov	s15, r3
 80025be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <MPU6050_GetAccelerometerScaled+0x7c>)
 80025c4:	edd3 7a00 	vldr	s15, [r3]
 80025c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	edc3 7a00 	vstr	s15, [r3]
}
 80025d2:	bf00      	nop
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000158 	.word	0x20000158

080025e0 <MPU6050_GetGyroscopeRAW>:
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, 1, tmp, 2, I2C_TIMEOUT);
	return (((int16_t)tmp[0]) << 8) | tmp[1];
}

void MPU6050_GetGyroscopeRAW(int16_t *x, int16_t *y, int16_t *z)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	; 0x28
 80025e4:	af04      	add	r7, sp, #16
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
	uint8_t tmp[6];
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 1, tmp, 6, I2C_TIMEOUT);
 80025ec:	4b16      	ldr	r3, [pc, #88]	; (8002648 <MPU6050_GetGyroscopeRAW+0x68>)
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	230a      	movs	r3, #10
 80025f2:	9302      	str	r3, [sp, #8]
 80025f4:	2306      	movs	r3, #6
 80025f6:	9301      	str	r3, [sp, #4]
 80025f8:	f107 0310 	add.w	r3, r7, #16
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	2301      	movs	r3, #1
 8002600:	2243      	movs	r2, #67	; 0x43
 8002602:	21d0      	movs	r1, #208	; 0xd0
 8002604:	f001 fa66 	bl	8003ad4 <HAL_I2C_Mem_Read>

	*x = (((int16_t)tmp[0]) << 8) | tmp[1];
 8002608:	7c3b      	ldrb	r3, [r7, #16]
 800260a:	021b      	lsls	r3, r3, #8
 800260c:	b21a      	sxth	r2, r3
 800260e:	7c7b      	ldrb	r3, [r7, #17]
 8002610:	b21b      	sxth	r3, r3
 8002612:	4313      	orrs	r3, r2
 8002614:	b21a      	sxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	801a      	strh	r2, [r3, #0]
	*y = (((int16_t)tmp[2]) << 8) | tmp[3];
 800261a:	7cbb      	ldrb	r3, [r7, #18]
 800261c:	021b      	lsls	r3, r3, #8
 800261e:	b21a      	sxth	r2, r3
 8002620:	7cfb      	ldrb	r3, [r7, #19]
 8002622:	b21b      	sxth	r3, r3
 8002624:	4313      	orrs	r3, r2
 8002626:	b21a      	sxth	r2, r3
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	801a      	strh	r2, [r3, #0]
	*z = (((int16_t)tmp[4]) << 8) | tmp[5];
 800262c:	7d3b      	ldrb	r3, [r7, #20]
 800262e:	021b      	lsls	r3, r3, #8
 8002630:	b21a      	sxth	r2, r3
 8002632:	7d7b      	ldrb	r3, [r7, #21]
 8002634:	b21b      	sxth	r3, r3
 8002636:	4313      	orrs	r3, r2
 8002638:	b21a      	sxth	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	801a      	strh	r2, [r3, #0]
}
 800263e:	bf00      	nop
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000160 	.word	0x20000160

0800264c <MPU6050_GetGyroscopeScaled>:

void MPU6050_GetGyroscopeScaled(float* x, float* y, float* z)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
	int16_t tmp_x, tmp_y, tmp_z;

	MPU6050_GetGyroscopeRAW(&tmp_x, &tmp_y, &tmp_z);
 8002658:	f107 0212 	add.w	r2, r7, #18
 800265c:	f107 0114 	add.w	r1, r7, #20
 8002660:	f107 0316 	add.w	r3, r7, #22
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ffbb 	bl	80025e0 <MPU6050_GetGyroscopeRAW>

	*x = (float)tmp_x * Gyr_Scale;
 800266a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800266e:	ee07 3a90 	vmov	s15, r3
 8002672:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002676:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <MPU6050_GetGyroscopeScaled+0x7c>)
 8002678:	edd3 7a00 	vldr	s15, [r3]
 800267c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	edc3 7a00 	vstr	s15, [r3]
	*y = (float)tmp_y * Gyr_Scale;
 8002686:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800268a:	ee07 3a90 	vmov	s15, r3
 800268e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002692:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <MPU6050_GetGyroscopeScaled+0x7c>)
 8002694:	edd3 7a00 	vldr	s15, [r3]
 8002698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	edc3 7a00 	vstr	s15, [r3]
	*z = (float)tmp_z * Gyr_Scale;
 80026a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026a6:	ee07 3a90 	vmov	s15, r3
 80026aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <MPU6050_GetGyroscopeScaled+0x7c>)
 80026b0:	edd3 7a00 	vldr	s15, [r3]
 80026b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	edc3 7a00 	vstr	s15, [r3]
}
 80026be:	bf00      	nop
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	2000015c 	.word	0x2000015c

080026cc <MPU6050_SetInterruptMode>:

//
//	Setting INT pin
//
void MPU6050_SetInterruptMode(uint8_t Mode)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af04      	add	r7, sp, #16
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 80026d6:	4b17      	ldr	r3, [pc, #92]	; (8002734 <MPU6050_SetInterruptMode+0x68>)
 80026d8:	6818      	ldr	r0, [r3, #0]
 80026da:	230a      	movs	r3, #10
 80026dc:	9302      	str	r3, [sp, #8]
 80026de:	2301      	movs	r3, #1
 80026e0:	9301      	str	r3, [sp, #4]
 80026e2:	f107 030f 	add.w	r3, r7, #15
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	2301      	movs	r3, #1
 80026ea:	2237      	movs	r2, #55	; 0x37
 80026ec:	21d0      	movs	r1, #208	; 0xd0
 80026ee:	f001 f9f1 	bl	8003ad4 <HAL_I2C_Mem_Read>
	tmp &= ~(1 << MPU6050_INTCFG_INT_LEVEL_BIT);
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Mode & 0x1) << MPU6050_INTCFG_INT_LEVEL_BIT);
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	01db      	lsls	r3, r3, #7
 8002700:	b25a      	sxtb	r2, r3
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	b25b      	sxtb	r3, r3
 8002706:	4313      	orrs	r3, r2
 8002708:	b25b      	sxtb	r3, r3
 800270a:	b2db      	uxtb	r3, r3
 800270c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <MPU6050_SetInterruptMode+0x68>)
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	230a      	movs	r3, #10
 8002714:	9302      	str	r3, [sp, #8]
 8002716:	2301      	movs	r3, #1
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	f107 030f 	add.w	r3, r7, #15
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	2301      	movs	r3, #1
 8002722:	2237      	movs	r2, #55	; 0x37
 8002724:	21d0      	movs	r1, #208	; 0xd0
 8002726:	f001 f8db 	bl	80038e0 <HAL_I2C_Mem_Write>
}
 800272a:	bf00      	nop
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20000160 	.word	0x20000160

08002738 <MPU6050_SetInterruptDrive>:

void MPU6050_SetInterruptDrive(uint8_t Drive)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af04      	add	r7, sp, #16
 800273e:	4603      	mov	r3, r0
 8002740:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8002742:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <MPU6050_SetInterruptDrive+0x6c>)
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	230a      	movs	r3, #10
 8002748:	9302      	str	r3, [sp, #8]
 800274a:	2301      	movs	r3, #1
 800274c:	9301      	str	r3, [sp, #4]
 800274e:	f107 030f 	add.w	r3, r7, #15
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	2301      	movs	r3, #1
 8002756:	2237      	movs	r2, #55	; 0x37
 8002758:	21d0      	movs	r1, #208	; 0xd0
 800275a:	f001 f9bb 	bl	8003ad4 <HAL_I2C_Mem_Read>
	tmp &= ~(1 << MPU6050_INTCFG_INT_OPEN_BIT);
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002764:	b2db      	uxtb	r3, r3
 8002766:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Drive & 0x1) << MPU6050_INTCFG_INT_OPEN_BIT);
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	019b      	lsls	r3, r3, #6
 800276c:	b25b      	sxtb	r3, r3
 800276e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002772:	b25a      	sxtb	r2, r3
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	b25b      	sxtb	r3, r3
 8002778:	4313      	orrs	r3, r2
 800277a:	b25b      	sxtb	r3, r3
 800277c:	b2db      	uxtb	r3, r3
 800277e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8002780:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <MPU6050_SetInterruptDrive+0x6c>)
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	230a      	movs	r3, #10
 8002786:	9302      	str	r3, [sp, #8]
 8002788:	2301      	movs	r3, #1
 800278a:	9301      	str	r3, [sp, #4]
 800278c:	f107 030f 	add.w	r3, r7, #15
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	2301      	movs	r3, #1
 8002794:	2237      	movs	r2, #55	; 0x37
 8002796:	21d0      	movs	r1, #208	; 0xd0
 8002798:	f001 f8a2 	bl	80038e0 <HAL_I2C_Mem_Write>
}
 800279c:	bf00      	nop
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20000160 	.word	0x20000160

080027a8 <MPU6050_SetInterruptLatch>:

void MPU6050_SetInterruptLatch(uint8_t Latch)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af04      	add	r7, sp, #16
 80027ae:	4603      	mov	r3, r0
 80027b0:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 80027b2:	4b18      	ldr	r3, [pc, #96]	; (8002814 <MPU6050_SetInterruptLatch+0x6c>)
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	230a      	movs	r3, #10
 80027b8:	9302      	str	r3, [sp, #8]
 80027ba:	2301      	movs	r3, #1
 80027bc:	9301      	str	r3, [sp, #4]
 80027be:	f107 030f 	add.w	r3, r7, #15
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	2301      	movs	r3, #1
 80027c6:	2237      	movs	r2, #55	; 0x37
 80027c8:	21d0      	movs	r1, #208	; 0xd0
 80027ca:	f001 f983 	bl	8003ad4 <HAL_I2C_Mem_Read>
	tmp &= ~(1 << MPU6050_INTCFG_INT_RD_CLEAR_BIT);
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
 80027d0:	f023 0310 	bic.w	r3, r3, #16
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Latch & 0x1) << MPU6050_INTCFG_INT_RD_CLEAR_BIT);
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	b25b      	sxtb	r3, r3
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	b25a      	sxtb	r2, r3
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	b25b      	sxtb	r3, r3
 80027e8:	4313      	orrs	r3, r2
 80027ea:	b25b      	sxtb	r3, r3
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 80027f0:	4b08      	ldr	r3, [pc, #32]	; (8002814 <MPU6050_SetInterruptLatch+0x6c>)
 80027f2:	6818      	ldr	r0, [r3, #0]
 80027f4:	230a      	movs	r3, #10
 80027f6:	9302      	str	r3, [sp, #8]
 80027f8:	2301      	movs	r3, #1
 80027fa:	9301      	str	r3, [sp, #4]
 80027fc:	f107 030f 	add.w	r3, r7, #15
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	2301      	movs	r3, #1
 8002804:	2237      	movs	r2, #55	; 0x37
 8002806:	21d0      	movs	r1, #208	; 0xd0
 8002808:	f001 f86a 	bl	80038e0 <HAL_I2C_Mem_Write>
}
 800280c:	bf00      	nop
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000160 	.word	0x20000160

08002818 <MPU6050_SetInterruptLatchClear>:

void MPU6050_SetInterruptLatchClear(uint8_t Clear)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af04      	add	r7, sp, #16
 800281e:	4603      	mov	r3, r0
 8002820:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8002822:	4b18      	ldr	r3, [pc, #96]	; (8002884 <MPU6050_SetInterruptLatchClear+0x6c>)
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	230a      	movs	r3, #10
 8002828:	9302      	str	r3, [sp, #8]
 800282a:	2301      	movs	r3, #1
 800282c:	9301      	str	r3, [sp, #4]
 800282e:	f107 030f 	add.w	r3, r7, #15
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	2301      	movs	r3, #1
 8002836:	2237      	movs	r2, #55	; 0x37
 8002838:	21d0      	movs	r1, #208	; 0xd0
 800283a:	f001 f94b 	bl	8003ad4 <HAL_I2C_Mem_Read>
	tmp &= ~(1 << MPU6050_INTCFG_LATCH_INT_EN_BIT);
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	f023 0320 	bic.w	r3, r3, #32
 8002844:	b2db      	uxtb	r3, r3
 8002846:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Clear & 0x1) << MPU6050_INTCFG_LATCH_INT_EN_BIT);
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	015b      	lsls	r3, r3, #5
 800284c:	b25b      	sxtb	r3, r3
 800284e:	f003 0320 	and.w	r3, r3, #32
 8002852:	b25a      	sxtb	r2, r3
 8002854:	7bfb      	ldrb	r3, [r7, #15]
 8002856:	b25b      	sxtb	r3, r3
 8002858:	4313      	orrs	r3, r2
 800285a:	b25b      	sxtb	r3, r3
 800285c:	b2db      	uxtb	r3, r3
 800285e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8002860:	4b08      	ldr	r3, [pc, #32]	; (8002884 <MPU6050_SetInterruptLatchClear+0x6c>)
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	230a      	movs	r3, #10
 8002866:	9302      	str	r3, [sp, #8]
 8002868:	2301      	movs	r3, #1
 800286a:	9301      	str	r3, [sp, #4]
 800286c:	f107 030f 	add.w	r3, r7, #15
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	2301      	movs	r3, #1
 8002874:	2237      	movs	r2, #55	; 0x37
 8002876:	21d0      	movs	r1, #208	; 0xd0
 8002878:	f001 f832 	bl	80038e0 <HAL_I2C_Mem_Write>
}
 800287c:	bf00      	nop
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	20000160 	.word	0x20000160

08002888 <MPU6050_SetIntEnableRegister>:

void MPU6050_SetIntEnableRegister(uint8_t Value)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af04      	add	r7, sp, #16
 800288e:	4603      	mov	r3, r0
 8002890:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &Value, 1, I2C_TIMEOUT);
 8002892:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <MPU6050_SetIntEnableRegister+0x2c>)
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	230a      	movs	r3, #10
 8002898:	9302      	str	r3, [sp, #8]
 800289a:	2301      	movs	r3, #1
 800289c:	9301      	str	r3, [sp, #4]
 800289e:	1dfb      	adds	r3, r7, #7
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	2301      	movs	r3, #1
 80028a4:	2238      	movs	r2, #56	; 0x38
 80028a6:	21d0      	movs	r1, #208	; 0xd0
 80028a8:	f001 f81a 	bl	80038e0 <HAL_I2C_Mem_Write>
}
 80028ac:	bf00      	nop
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	20000160 	.word	0x20000160

080028b8 <MPU6050_Init>:

//
//	Initialization
//
void MPU6050_Init(I2C_HandleTypeDef *hi2c)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
	i2c = hi2c;
 80028c0:	4a0c      	ldr	r2, [pc, #48]	; (80028f4 <MPU6050_Init+0x3c>)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6013      	str	r3, [r2, #0]
	MPU6050_DeviceReset(1);
 80028c6:	2001      	movs	r0, #1
 80028c8:	f7ff fc5c 	bl	8002184 <MPU6050_DeviceReset>
    MPU6050_SetSleepEnabled(0);
 80028cc:	2000      	movs	r0, #0
 80028ce:	f7ff fc8f 	bl	80021f0 <MPU6050_SetSleepEnabled>
    MPU6050_SetClockSource(MPU6050_CLOCK_INTERNAL);
 80028d2:	2000      	movs	r0, #0
 80028d4:	f7ff fcc4 	bl	8002260 <MPU6050_SetClockSource>
    MPU6050_SetDlpf(MPU6050_DLPF_BW_20);
 80028d8:	2004      	movs	r0, #4
 80028da:	f7ff fc1b 	bl	8002114 <MPU6050_SetDlpf>
    MPU6050_SetFullScaleGyroRange(MPU6050_GYRO_FS_500);
 80028de:	2001      	movs	r0, #1
 80028e0:	f7ff fcf6 	bl	80022d0 <MPU6050_SetFullScaleGyroRange>
    MPU6050_SetFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 80028e4:	2000      	movs	r0, #0
 80028e6:	f7ff fd55 	bl	8002394 <MPU6050_SetFullScaleAccelRange>

}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20000160 	.word	0x20000160

080028f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	607b      	str	r3, [r7, #4]
 8002902:	4b10      	ldr	r3, [pc, #64]	; (8002944 <HAL_MspInit+0x4c>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	4a0f      	ldr	r2, [pc, #60]	; (8002944 <HAL_MspInit+0x4c>)
 8002908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800290c:	6453      	str	r3, [r2, #68]	; 0x44
 800290e:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <HAL_MspInit+0x4c>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002916:	607b      	str	r3, [r7, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	603b      	str	r3, [r7, #0]
 800291e:	4b09      	ldr	r3, [pc, #36]	; (8002944 <HAL_MspInit+0x4c>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	4a08      	ldr	r2, [pc, #32]	; (8002944 <HAL_MspInit+0x4c>)
 8002924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002928:	6413      	str	r3, [r2, #64]	; 0x40
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <HAL_MspInit+0x4c>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002932:	603b      	str	r3, [r7, #0]
 8002934:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002936:	2007      	movs	r0, #7
 8002938:	f000 fcca 	bl	80032d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800293c:	bf00      	nop
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40023800 	.word	0x40023800

08002948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800295a:	e7fe      	b.n	800295a <HardFault_Handler+0x4>

0800295c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002960:	e7fe      	b.n	8002960 <MemManage_Handler+0x4>

08002962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002962:	b480      	push	{r7}
 8002964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002966:	e7fe      	b.n	8002966 <BusFault_Handler+0x4>

08002968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800296c:	e7fe      	b.n	800296c <UsageFault_Handler+0x4>

0800296e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800299c:	f000 fba4 	bl	80030e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029a0:	bf00      	nop
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	e00a      	b.n	80029cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029b6:	f3af 8000 	nop.w
 80029ba:	4601      	mov	r1, r0
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	60ba      	str	r2, [r7, #8]
 80029c2:	b2ca      	uxtb	r2, r1
 80029c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	3301      	adds	r3, #1
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	dbf0      	blt.n	80029b6 <_read+0x12>
	}

return len;
 80029d4:	687b      	ldr	r3, [r7, #4]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <_close>:
	}
	return len;
}

int _close(int file)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
	return -1;
 80029e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a06:	605a      	str	r2, [r3, #4]
	return 0;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <_isatty>:

int _isatty(int file)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
	return 1;
 8002a1e:	2301      	movs	r3, #1
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
	return 0;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
	...

08002a48 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002a50:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <_sbrk+0x50>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d102      	bne.n	8002a5e <_sbrk+0x16>
		heap_end = &end;
 8002a58:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <_sbrk+0x50>)
 8002a5a:	4a10      	ldr	r2, [pc, #64]	; (8002a9c <_sbrk+0x54>)
 8002a5c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <_sbrk+0x50>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002a64:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <_sbrk+0x50>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	466a      	mov	r2, sp
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d907      	bls.n	8002a82 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002a72:	f003 fccf 	bl	8006414 <__errno>
 8002a76:	4602      	mov	r2, r0
 8002a78:	230c      	movs	r3, #12
 8002a7a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a80:	e006      	b.n	8002a90 <_sbrk+0x48>
	}

	heap_end += incr;
 8002a82:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <_sbrk+0x50>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4413      	add	r3, r2
 8002a8a:	4a03      	ldr	r2, [pc, #12]	; (8002a98 <_sbrk+0x50>)
 8002a8c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	20000094 	.word	0x20000094
 8002a9c:	20000270 	.word	0x20000270

08002aa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002aa4:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <SystemInit+0x28>)
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aaa:	4a07      	ldr	r2, [pc, #28]	; (8002ac8 <SystemInit+0x28>)
 8002aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ab4:	4b04      	ldr	r3, [pc, #16]	; (8002ac8 <SystemInit+0x28>)
 8002ab6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002aba:	609a      	str	r2, [r3, #8]
#endif
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08c      	sub	sp, #48	; 0x30
 8002ad0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ad2:	f107 030c 	add.w	r3, r7, #12
 8002ad6:	2224      	movs	r2, #36	; 0x24
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4618      	mov	r0, r3
 8002adc:	f003 fcc4 	bl	8006468 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ae0:	1d3b      	adds	r3, r7, #4
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8002ae8:	4b21      	ldr	r3, [pc, #132]	; (8002b70 <MX_TIM2_Init+0xa4>)
 8002aea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002aee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002af0:	4b1f      	ldr	r3, [pc, #124]	; (8002b70 <MX_TIM2_Init+0xa4>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002af6:	4b1e      	ldr	r3, [pc, #120]	; (8002b70 <MX_TIM2_Init+0xa4>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002afc:	4b1c      	ldr	r3, [pc, #112]	; (8002b70 <MX_TIM2_Init+0xa4>)
 8002afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b04:	4b1a      	ldr	r3, [pc, #104]	; (8002b70 <MX_TIM2_Init+0xa4>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b0a:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <MX_TIM2_Init+0xa4>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b10:	2303      	movs	r3, #3
 8002b12:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002b14:	2302      	movs	r3, #2
 8002b16:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002b20:	230f      	movs	r3, #15
 8002b22:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b24:	2300      	movs	r3, #0
 8002b26:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002b30:	230f      	movs	r3, #15
 8002b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002b34:	f107 030c 	add.w	r3, r7, #12
 8002b38:	4619      	mov	r1, r3
 8002b3a:	480d      	ldr	r0, [pc, #52]	; (8002b70 <MX_TIM2_Init+0xa4>)
 8002b3c:	f002 fa3c 	bl	8004fb8 <HAL_TIM_Encoder_Init>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002b46:	f7ff facf 	bl	80020e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b52:	1d3b      	adds	r3, r7, #4
 8002b54:	4619      	mov	r1, r3
 8002b56:	4806      	ldr	r0, [pc, #24]	; (8002b70 <MX_TIM2_Init+0xa4>)
 8002b58:	f002 ff42 	bl	80059e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002b62:	f7ff fac1 	bl	80020e8 <Error_Handler>
  }

}
 8002b66:	bf00      	nop
 8002b68:	3730      	adds	r7, #48	; 0x30
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	200001e4 	.word	0x200001e4

08002b74 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08e      	sub	sp, #56	; 0x38
 8002b78:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	605a      	str	r2, [r3, #4]
 8002b84:	609a      	str	r2, [r3, #8]
 8002b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b88:	f107 0320 	add.w	r3, r7, #32
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b92:	1d3b      	adds	r3, r7, #4
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	605a      	str	r2, [r3, #4]
 8002b9a:	609a      	str	r2, [r3, #8]
 8002b9c:	60da      	str	r2, [r3, #12]
 8002b9e:	611a      	str	r2, [r3, #16]
 8002ba0:	615a      	str	r2, [r3, #20]
 8002ba2:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8002ba4:	4b32      	ldr	r3, [pc, #200]	; (8002c70 <MX_TIM3_Init+0xfc>)
 8002ba6:	4a33      	ldr	r2, [pc, #204]	; (8002c74 <MX_TIM3_Init+0x100>)
 8002ba8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 8002baa:	4b31      	ldr	r3, [pc, #196]	; (8002c70 <MX_TIM3_Init+0xfc>)
 8002bac:	2254      	movs	r2, #84	; 0x54
 8002bae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb0:	4b2f      	ldr	r3, [pc, #188]	; (8002c70 <MX_TIM3_Init+0xfc>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002bb6:	4b2e      	ldr	r3, [pc, #184]	; (8002c70 <MX_TIM3_Init+0xfc>)
 8002bb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bbe:	4b2c      	ldr	r3, [pc, #176]	; (8002c70 <MX_TIM3_Init+0xfc>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bc4:	4b2a      	ldr	r3, [pc, #168]	; (8002c70 <MX_TIM3_Init+0xfc>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002bca:	4829      	ldr	r0, [pc, #164]	; (8002c70 <MX_TIM3_Init+0xfc>)
 8002bcc:	f002 f962 	bl	8004e94 <HAL_TIM_Base_Init>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002bd6:	f7ff fa87 	bl	80020e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bde:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002be0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002be4:	4619      	mov	r1, r3
 8002be6:	4822      	ldr	r0, [pc, #136]	; (8002c70 <MX_TIM3_Init+0xfc>)
 8002be8:	f002 fb76 	bl	80052d8 <HAL_TIM_ConfigClockSource>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002bf2:	f7ff fa79 	bl	80020e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002bf6:	481e      	ldr	r0, [pc, #120]	; (8002c70 <MX_TIM3_Init+0xfc>)
 8002bf8:	f002 f977 	bl	8004eea <HAL_TIM_PWM_Init>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002c02:	f7ff fa71 	bl	80020e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c06:	2300      	movs	r3, #0
 8002c08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c0e:	f107 0320 	add.w	r3, r7, #32
 8002c12:	4619      	mov	r1, r3
 8002c14:	4816      	ldr	r0, [pc, #88]	; (8002c70 <MX_TIM3_Init+0xfc>)
 8002c16:	f002 fee3 	bl	80059e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002c20:	f7ff fa62 	bl	80020e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c24:	2360      	movs	r3, #96	; 0x60
 8002c26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c34:	1d3b      	adds	r3, r7, #4
 8002c36:	2200      	movs	r2, #0
 8002c38:	4619      	mov	r1, r3
 8002c3a:	480d      	ldr	r0, [pc, #52]	; (8002c70 <MX_TIM3_Init+0xfc>)
 8002c3c:	f002 fa86 	bl	800514c <HAL_TIM_PWM_ConfigChannel>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002c46:	f7ff fa4f 	bl	80020e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c4a:	1d3b      	adds	r3, r7, #4
 8002c4c:	2208      	movs	r2, #8
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4807      	ldr	r0, [pc, #28]	; (8002c70 <MX_TIM3_Init+0xfc>)
 8002c52:	f002 fa7b 	bl	800514c <HAL_TIM_PWM_ConfigChannel>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002c5c:	f7ff fa44 	bl	80020e8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8002c60:	4803      	ldr	r0, [pc, #12]	; (8002c70 <MX_TIM3_Init+0xfc>)
 8002c62:	f000 f919 	bl	8002e98 <HAL_TIM_MspPostInit>

}
 8002c66:	bf00      	nop
 8002c68:	3738      	adds	r7, #56	; 0x38
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	200001a4 	.word	0x200001a4
 8002c74:	40000400 	.word	0x40000400

08002c78 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08c      	sub	sp, #48	; 0x30
 8002c7c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002c7e:	f107 030c 	add.w	r3, r7, #12
 8002c82:	2224      	movs	r2, #36	; 0x24
 8002c84:	2100      	movs	r1, #0
 8002c86:	4618      	mov	r0, r3
 8002c88:	f003 fbee 	bl	8006468 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c8c:	1d3b      	adds	r3, r7, #4
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8002c94:	4b20      	ldr	r3, [pc, #128]	; (8002d18 <MX_TIM4_Init+0xa0>)
 8002c96:	4a21      	ldr	r2, [pc, #132]	; (8002d1c <MX_TIM4_Init+0xa4>)
 8002c98:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002c9a:	4b1f      	ldr	r3, [pc, #124]	; (8002d18 <MX_TIM4_Init+0xa0>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ca0:	4b1d      	ldr	r3, [pc, #116]	; (8002d18 <MX_TIM4_Init+0xa0>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002ca6:	4b1c      	ldr	r3, [pc, #112]	; (8002d18 <MX_TIM4_Init+0xa0>)
 8002ca8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cae:	4b1a      	ldr	r3, [pc, #104]	; (8002d18 <MX_TIM4_Init+0xa0>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cb4:	4b18      	ldr	r3, [pc, #96]	; (8002d18 <MX_TIM4_Init+0xa0>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002cca:	230f      	movs	r3, #15
 8002ccc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002cda:	230f      	movs	r3, #15
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002cde:	f107 030c 	add.w	r3, r7, #12
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	480c      	ldr	r0, [pc, #48]	; (8002d18 <MX_TIM4_Init+0xa0>)
 8002ce6:	f002 f967 	bl	8004fb8 <HAL_TIM_Encoder_Init>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002cf0:	f7ff f9fa 	bl	80020e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002cfc:	1d3b      	adds	r3, r7, #4
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4805      	ldr	r0, [pc, #20]	; (8002d18 <MX_TIM4_Init+0xa0>)
 8002d02:	f002 fe6d 	bl	80059e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002d0c:	f7ff f9ec 	bl	80020e8 <Error_Handler>
  }

}
 8002d10:	bf00      	nop
 8002d12:	3730      	adds	r7, #48	; 0x30
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	20000164 	.word	0x20000164
 8002d1c:	40000800 	.word	0x40000800

08002d20 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08c      	sub	sp, #48	; 0x30
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d28:	f107 031c 	add.w	r3, r7, #28
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	60da      	str	r2, [r3, #12]
 8002d36:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d40:	d14b      	bne.n	8002dda <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	61bb      	str	r3, [r7, #24]
 8002d46:	4b3f      	ldr	r3, [pc, #252]	; (8002e44 <HAL_TIM_Encoder_MspInit+0x124>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	4a3e      	ldr	r2, [pc, #248]	; (8002e44 <HAL_TIM_Encoder_MspInit+0x124>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	6413      	str	r3, [r2, #64]	; 0x40
 8002d52:	4b3c      	ldr	r3, [pc, #240]	; (8002e44 <HAL_TIM_Encoder_MspInit+0x124>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	61bb      	str	r3, [r7, #24]
 8002d5c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	4b38      	ldr	r3, [pc, #224]	; (8002e44 <HAL_TIM_Encoder_MspInit+0x124>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	4a37      	ldr	r2, [pc, #220]	; (8002e44 <HAL_TIM_Encoder_MspInit+0x124>)
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6e:	4b35      	ldr	r3, [pc, #212]	; (8002e44 <HAL_TIM_Encoder_MspInit+0x124>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	4b31      	ldr	r3, [pc, #196]	; (8002e44 <HAL_TIM_Encoder_MspInit+0x124>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	4a30      	ldr	r2, [pc, #192]	; (8002e44 <HAL_TIM_Encoder_MspInit+0x124>)
 8002d84:	f043 0302 	orr.w	r3, r3, #2
 8002d88:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8a:	4b2e      	ldr	r3, [pc, #184]	; (8002e44 <HAL_TIM_Encoder_MspInit+0x124>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = ENC_L_A_Pin;
 8002d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da4:	2300      	movs	r3, #0
 8002da6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002da8:	2301      	movs	r3, #1
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_L_A_GPIO_Port, &GPIO_InitStruct);
 8002dac:	f107 031c 	add.w	r3, r7, #28
 8002db0:	4619      	mov	r1, r3
 8002db2:	4825      	ldr	r0, [pc, #148]	; (8002e48 <HAL_TIM_Encoder_MspInit+0x128>)
 8002db4:	f000 fac0 	bl	8003338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_L_B_Pin;
 8002db8:	2308      	movs	r3, #8
 8002dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_L_B_GPIO_Port, &GPIO_InitStruct);
 8002dcc:	f107 031c 	add.w	r3, r7, #28
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	481e      	ldr	r0, [pc, #120]	; (8002e4c <HAL_TIM_Encoder_MspInit+0x12c>)
 8002dd4:	f000 fab0 	bl	8003338 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002dd8:	e030      	b.n	8002e3c <HAL_TIM_Encoder_MspInit+0x11c>
  else if(tim_encoderHandle->Instance==TIM4)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a1c      	ldr	r2, [pc, #112]	; (8002e50 <HAL_TIM_Encoder_MspInit+0x130>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d12b      	bne.n	8002e3c <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	4b16      	ldr	r3, [pc, #88]	; (8002e44 <HAL_TIM_Encoder_MspInit+0x124>)
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	4a15      	ldr	r2, [pc, #84]	; (8002e44 <HAL_TIM_Encoder_MspInit+0x124>)
 8002dee:	f043 0304 	orr.w	r3, r3, #4
 8002df2:	6413      	str	r3, [r2, #64]	; 0x40
 8002df4:	4b13      	ldr	r3, [pc, #76]	; (8002e44 <HAL_TIM_Encoder_MspInit+0x124>)
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e00:	2300      	movs	r3, #0
 8002e02:	60bb      	str	r3, [r7, #8]
 8002e04:	4b0f      	ldr	r3, [pc, #60]	; (8002e44 <HAL_TIM_Encoder_MspInit+0x124>)
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	4a0e      	ldr	r2, [pc, #56]	; (8002e44 <HAL_TIM_Encoder_MspInit+0x124>)
 8002e0a:	f043 0302 	orr.w	r3, r3, #2
 8002e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e10:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <HAL_TIM_Encoder_MspInit+0x124>)
 8002e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_R_A_Pin|ENC_R_B_Pin;
 8002e1c:	23c0      	movs	r3, #192	; 0xc0
 8002e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e20:	2302      	movs	r3, #2
 8002e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e30:	f107 031c 	add.w	r3, r7, #28
 8002e34:	4619      	mov	r1, r3
 8002e36:	4805      	ldr	r0, [pc, #20]	; (8002e4c <HAL_TIM_Encoder_MspInit+0x12c>)
 8002e38:	f000 fa7e 	bl	8003338 <HAL_GPIO_Init>
}
 8002e3c:	bf00      	nop
 8002e3e:	3730      	adds	r7, #48	; 0x30
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40020000 	.word	0x40020000
 8002e4c:	40020400 	.word	0x40020400
 8002e50:	40000800 	.word	0x40000800

08002e54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a0b      	ldr	r2, [pc, #44]	; (8002e90 <HAL_TIM_Base_MspInit+0x3c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d10d      	bne.n	8002e82 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <HAL_TIM_Base_MspInit+0x40>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	4a09      	ldr	r2, [pc, #36]	; (8002e94 <HAL_TIM_Base_MspInit+0x40>)
 8002e70:	f043 0302 	orr.w	r3, r3, #2
 8002e74:	6413      	str	r3, [r2, #64]	; 0x40
 8002e76:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <HAL_TIM_Base_MspInit+0x40>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002e82:	bf00      	nop
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40000400 	.word	0x40000400
 8002e94:	40023800 	.word	0x40023800

08002e98 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea0:	f107 030c 	add.w	r3, r7, #12
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	609a      	str	r2, [r3, #8]
 8002eac:	60da      	str	r2, [r3, #12]
 8002eae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a12      	ldr	r2, [pc, #72]	; (8002f00 <HAL_TIM_MspPostInit+0x68>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d11e      	bne.n	8002ef8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <HAL_TIM_MspPostInit+0x6c>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	4a10      	ldr	r2, [pc, #64]	; (8002f04 <HAL_TIM_MspPostInit+0x6c>)
 8002ec4:	f043 0304 	orr.w	r3, r3, #4
 8002ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eca:	4b0e      	ldr	r3, [pc, #56]	; (8002f04 <HAL_TIM_MspPostInit+0x6c>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	60bb      	str	r3, [r7, #8]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = PWML_Pin|PWMR_Pin;
 8002ed6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002eda:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002edc:	2302      	movs	r3, #2
 8002ede:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eec:	f107 030c 	add.w	r3, r7, #12
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4805      	ldr	r0, [pc, #20]	; (8002f08 <HAL_TIM_MspPostInit+0x70>)
 8002ef4:	f000 fa20 	bl	8003338 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002ef8:	bf00      	nop
 8002efa:	3720      	adds	r7, #32
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40000400 	.word	0x40000400
 8002f04:	40023800 	.word	0x40023800
 8002f08:	40020800 	.word	0x40020800

08002f0c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002f10:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <MX_USART2_UART_Init+0x4c>)
 8002f12:	4a12      	ldr	r2, [pc, #72]	; (8002f5c <MX_USART2_UART_Init+0x50>)
 8002f14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f16:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <MX_USART2_UART_Init+0x4c>)
 8002f18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f1e:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <MX_USART2_UART_Init+0x4c>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f24:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <MX_USART2_UART_Init+0x4c>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f2a:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <MX_USART2_UART_Init+0x4c>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f30:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <MX_USART2_UART_Init+0x4c>)
 8002f32:	220c      	movs	r2, #12
 8002f34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f36:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <MX_USART2_UART_Init+0x4c>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f3c:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <MX_USART2_UART_Init+0x4c>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f42:	4805      	ldr	r0, [pc, #20]	; (8002f58 <MX_USART2_UART_Init+0x4c>)
 8002f44:	f002 fdba 	bl	8005abc <HAL_UART_Init>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f4e:	f7ff f8cb 	bl	80020e8 <Error_Handler>
  }

}
 8002f52:	bf00      	nop
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000224 	.word	0x20000224
 8002f5c:	40004400 	.word	0x40004400

08002f60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08a      	sub	sp, #40	; 0x28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f68:	f107 0314 	add.w	r3, r7, #20
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	605a      	str	r2, [r3, #4]
 8002f72:	609a      	str	r2, [r3, #8]
 8002f74:	60da      	str	r2, [r3, #12]
 8002f76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a19      	ldr	r2, [pc, #100]	; (8002fe4 <HAL_UART_MspInit+0x84>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d12b      	bne.n	8002fda <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	613b      	str	r3, [r7, #16]
 8002f86:	4b18      	ldr	r3, [pc, #96]	; (8002fe8 <HAL_UART_MspInit+0x88>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	4a17      	ldr	r2, [pc, #92]	; (8002fe8 <HAL_UART_MspInit+0x88>)
 8002f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f90:	6413      	str	r3, [r2, #64]	; 0x40
 8002f92:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <HAL_UART_MspInit+0x88>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9a:	613b      	str	r3, [r7, #16]
 8002f9c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <HAL_UART_MspInit+0x88>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	4a10      	ldr	r2, [pc, #64]	; (8002fe8 <HAL_UART_MspInit+0x88>)
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	6313      	str	r3, [r2, #48]	; 0x30
 8002fae:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <HAL_UART_MspInit+0x88>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002fba:	230c      	movs	r3, #12
 8002fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fca:	2307      	movs	r3, #7
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fce:	f107 0314 	add.w	r3, r7, #20
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4805      	ldr	r0, [pc, #20]	; (8002fec <HAL_UART_MspInit+0x8c>)
 8002fd6:	f000 f9af 	bl	8003338 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002fda:	bf00      	nop
 8002fdc:	3728      	adds	r7, #40	; 0x28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40004400 	.word	0x40004400
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	40020000 	.word	0x40020000

08002ff0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ff0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003028 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ff4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ff6:	e003      	b.n	8003000 <LoopCopyDataInit>

08002ff8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	; (800302c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002ffa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ffc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ffe:	3104      	adds	r1, #4

08003000 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003000:	480b      	ldr	r0, [pc, #44]	; (8003030 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003002:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003004:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003006:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003008:	d3f6      	bcc.n	8002ff8 <CopyDataInit>
  ldr  r2, =_sbss
 800300a:	4a0b      	ldr	r2, [pc, #44]	; (8003038 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800300c:	e002      	b.n	8003014 <LoopFillZerobss>

0800300e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800300e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003010:	f842 3b04 	str.w	r3, [r2], #4

08003014 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003014:	4b09      	ldr	r3, [pc, #36]	; (800303c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003016:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003018:	d3f9      	bcc.n	800300e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800301a:	f7ff fd41 	bl	8002aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800301e:	f003 f9ff 	bl	8006420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003022:	f7fe ff59 	bl	8001ed8 <main>
  bx  lr    
 8003026:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003028:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800302c:	080078f0 	.word	0x080078f0
  ldr  r0, =_sdata
 8003030:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003034:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8003038:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 800303c:	2000026c 	.word	0x2000026c

08003040 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003040:	e7fe      	b.n	8003040 <ADC_IRQHandler>
	...

08003044 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003048:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <HAL_Init+0x40>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a0d      	ldr	r2, [pc, #52]	; (8003084 <HAL_Init+0x40>)
 800304e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003052:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003054:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <HAL_Init+0x40>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <HAL_Init+0x40>)
 800305a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800305e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003060:	4b08      	ldr	r3, [pc, #32]	; (8003084 <HAL_Init+0x40>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a07      	ldr	r2, [pc, #28]	; (8003084 <HAL_Init+0x40>)
 8003066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800306a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800306c:	2003      	movs	r0, #3
 800306e:	f000 f92f 	bl	80032d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003072:	2000      	movs	r0, #0
 8003074:	f000 f808 	bl	8003088 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003078:	f7ff fc3e 	bl	80028f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40023c00 	.word	0x40023c00

08003088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003090:	4b12      	ldr	r3, [pc, #72]	; (80030dc <HAL_InitTick+0x54>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <HAL_InitTick+0x58>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	4619      	mov	r1, r3
 800309a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800309e:	fbb3 f3f1 	udiv	r3, r3, r1
 80030a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 f939 	bl	800331e <HAL_SYSTICK_Config>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e00e      	b.n	80030d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b0f      	cmp	r3, #15
 80030ba:	d80a      	bhi.n	80030d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030bc:	2200      	movs	r2, #0
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	f04f 30ff 	mov.w	r0, #4294967295
 80030c4:	f000 f90f 	bl	80032e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030c8:	4a06      	ldr	r2, [pc, #24]	; (80030e4 <HAL_InitTick+0x5c>)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	e000      	b.n	80030d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	20000000 	.word	0x20000000
 80030e0:	20000008 	.word	0x20000008
 80030e4:	20000004 	.word	0x20000004

080030e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <HAL_IncTick+0x20>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	4b06      	ldr	r3, [pc, #24]	; (800310c <HAL_IncTick+0x24>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4413      	add	r3, r2
 80030f8:	4a04      	ldr	r2, [pc, #16]	; (800310c <HAL_IncTick+0x24>)
 80030fa:	6013      	str	r3, [r2, #0]
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	20000008 	.word	0x20000008
 800310c:	20000264 	.word	0x20000264

08003110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return uwTick;
 8003114:	4b03      	ldr	r3, [pc, #12]	; (8003124 <HAL_GetTick+0x14>)
 8003116:	681b      	ldr	r3, [r3, #0]
}
 8003118:	4618      	mov	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	20000264 	.word	0x20000264

08003128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003130:	f7ff ffee 	bl	8003110 <HAL_GetTick>
 8003134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003140:	d005      	beq.n	800314e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003142:	4b09      	ldr	r3, [pc, #36]	; (8003168 <HAL_Delay+0x40>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4413      	add	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800314e:	bf00      	nop
 8003150:	f7ff ffde 	bl	8003110 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	429a      	cmp	r2, r3
 800315e:	d8f7      	bhi.n	8003150 <HAL_Delay+0x28>
  {
  }
}
 8003160:	bf00      	nop
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	20000008 	.word	0x20000008

0800316c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <__NVIC_SetPriorityGrouping+0x44>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003188:	4013      	ands	r3, r2
 800318a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800319c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800319e:	4a04      	ldr	r2, [pc, #16]	; (80031b0 <__NVIC_SetPriorityGrouping+0x44>)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	60d3      	str	r3, [r2, #12]
}
 80031a4:	bf00      	nop
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	e000ed00 	.word	0xe000ed00

080031b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031b8:	4b04      	ldr	r3, [pc, #16]	; (80031cc <__NVIC_GetPriorityGrouping+0x18>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	0a1b      	lsrs	r3, r3, #8
 80031be:	f003 0307 	and.w	r3, r3, #7
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	e000ed00 	.word	0xe000ed00

080031d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	6039      	str	r1, [r7, #0]
 80031da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	db0a      	blt.n	80031fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	490c      	ldr	r1, [pc, #48]	; (800321c <__NVIC_SetPriority+0x4c>)
 80031ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ee:	0112      	lsls	r2, r2, #4
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	440b      	add	r3, r1
 80031f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031f8:	e00a      	b.n	8003210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	4908      	ldr	r1, [pc, #32]	; (8003220 <__NVIC_SetPriority+0x50>)
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	3b04      	subs	r3, #4
 8003208:	0112      	lsls	r2, r2, #4
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	440b      	add	r3, r1
 800320e:	761a      	strb	r2, [r3, #24]
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	e000e100 	.word	0xe000e100
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003224:	b480      	push	{r7}
 8003226:	b089      	sub	sp, #36	; 0x24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f1c3 0307 	rsb	r3, r3, #7
 800323e:	2b04      	cmp	r3, #4
 8003240:	bf28      	it	cs
 8003242:	2304      	movcs	r3, #4
 8003244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	3304      	adds	r3, #4
 800324a:	2b06      	cmp	r3, #6
 800324c:	d902      	bls.n	8003254 <NVIC_EncodePriority+0x30>
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	3b03      	subs	r3, #3
 8003252:	e000      	b.n	8003256 <NVIC_EncodePriority+0x32>
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003258:	f04f 32ff 	mov.w	r2, #4294967295
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43da      	mvns	r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	401a      	ands	r2, r3
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800326c:	f04f 31ff 	mov.w	r1, #4294967295
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	fa01 f303 	lsl.w	r3, r1, r3
 8003276:	43d9      	mvns	r1, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800327c:	4313      	orrs	r3, r2
         );
}
 800327e:	4618      	mov	r0, r3
 8003280:	3724      	adds	r7, #36	; 0x24
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3b01      	subs	r3, #1
 8003298:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800329c:	d301      	bcc.n	80032a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800329e:	2301      	movs	r3, #1
 80032a0:	e00f      	b.n	80032c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032a2:	4a0a      	ldr	r2, [pc, #40]	; (80032cc <SysTick_Config+0x40>)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032aa:	210f      	movs	r1, #15
 80032ac:	f04f 30ff 	mov.w	r0, #4294967295
 80032b0:	f7ff ff8e 	bl	80031d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032b4:	4b05      	ldr	r3, [pc, #20]	; (80032cc <SysTick_Config+0x40>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ba:	4b04      	ldr	r3, [pc, #16]	; (80032cc <SysTick_Config+0x40>)
 80032bc:	2207      	movs	r2, #7
 80032be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	e000e010 	.word	0xe000e010

080032d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff ff47 	bl	800316c <__NVIC_SetPriorityGrouping>
}
 80032de:	bf00      	nop
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b086      	sub	sp, #24
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	4603      	mov	r3, r0
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	607a      	str	r2, [r7, #4]
 80032f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032f8:	f7ff ff5c 	bl	80031b4 <__NVIC_GetPriorityGrouping>
 80032fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	68b9      	ldr	r1, [r7, #8]
 8003302:	6978      	ldr	r0, [r7, #20]
 8003304:	f7ff ff8e 	bl	8003224 <NVIC_EncodePriority>
 8003308:	4602      	mov	r2, r0
 800330a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800330e:	4611      	mov	r1, r2
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff ff5d 	bl	80031d0 <__NVIC_SetPriority>
}
 8003316:	bf00      	nop
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7ff ffb0 	bl	800328c <SysTick_Config>
 800332c:	4603      	mov	r3, r0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003338:	b480      	push	{r7}
 800333a:	b089      	sub	sp, #36	; 0x24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003346:	2300      	movs	r3, #0
 8003348:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800334a:	2300      	movs	r3, #0
 800334c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
 8003352:	e159      	b.n	8003608 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003354:	2201      	movs	r2, #1
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	4013      	ands	r3, r2
 8003366:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	429a      	cmp	r2, r3
 800336e:	f040 8148 	bne.w	8003602 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d00b      	beq.n	8003392 <HAL_GPIO_Init+0x5a>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d007      	beq.n	8003392 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003386:	2b11      	cmp	r3, #17
 8003388:	d003      	beq.n	8003392 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b12      	cmp	r3, #18
 8003390:	d130      	bne.n	80033f4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	2203      	movs	r2, #3
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4013      	ands	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033c8:	2201      	movs	r2, #1
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	43db      	mvns	r3, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4013      	ands	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	091b      	lsrs	r3, r3, #4
 80033de:	f003 0201 	and.w	r2, r3, #1
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	2203      	movs	r2, #3
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4013      	ands	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4313      	orrs	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b02      	cmp	r3, #2
 800342a:	d003      	beq.n	8003434 <HAL_GPIO_Init+0xfc>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b12      	cmp	r3, #18
 8003432:	d123      	bne.n	800347c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	08da      	lsrs	r2, r3, #3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3208      	adds	r2, #8
 800343c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003440:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	220f      	movs	r2, #15
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4013      	ands	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	08da      	lsrs	r2, r3, #3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3208      	adds	r2, #8
 8003476:	69b9      	ldr	r1, [r7, #24]
 8003478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	2203      	movs	r2, #3
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	43db      	mvns	r3, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4013      	ands	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 0203 	and.w	r2, r3, #3
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 80a2 	beq.w	8003602 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	4b56      	ldr	r3, [pc, #344]	; (800361c <HAL_GPIO_Init+0x2e4>)
 80034c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c6:	4a55      	ldr	r2, [pc, #340]	; (800361c <HAL_GPIO_Init+0x2e4>)
 80034c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034cc:	6453      	str	r3, [r2, #68]	; 0x44
 80034ce:	4b53      	ldr	r3, [pc, #332]	; (800361c <HAL_GPIO_Init+0x2e4>)
 80034d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034da:	4a51      	ldr	r2, [pc, #324]	; (8003620 <HAL_GPIO_Init+0x2e8>)
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	089b      	lsrs	r3, r3, #2
 80034e0:	3302      	adds	r3, #2
 80034e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	220f      	movs	r2, #15
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43db      	mvns	r3, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4013      	ands	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a48      	ldr	r2, [pc, #288]	; (8003624 <HAL_GPIO_Init+0x2ec>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d019      	beq.n	800353a <HAL_GPIO_Init+0x202>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a47      	ldr	r2, [pc, #284]	; (8003628 <HAL_GPIO_Init+0x2f0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d013      	beq.n	8003536 <HAL_GPIO_Init+0x1fe>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a46      	ldr	r2, [pc, #280]	; (800362c <HAL_GPIO_Init+0x2f4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00d      	beq.n	8003532 <HAL_GPIO_Init+0x1fa>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a45      	ldr	r2, [pc, #276]	; (8003630 <HAL_GPIO_Init+0x2f8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d007      	beq.n	800352e <HAL_GPIO_Init+0x1f6>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a44      	ldr	r2, [pc, #272]	; (8003634 <HAL_GPIO_Init+0x2fc>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d101      	bne.n	800352a <HAL_GPIO_Init+0x1f2>
 8003526:	2304      	movs	r3, #4
 8003528:	e008      	b.n	800353c <HAL_GPIO_Init+0x204>
 800352a:	2307      	movs	r3, #7
 800352c:	e006      	b.n	800353c <HAL_GPIO_Init+0x204>
 800352e:	2303      	movs	r3, #3
 8003530:	e004      	b.n	800353c <HAL_GPIO_Init+0x204>
 8003532:	2302      	movs	r3, #2
 8003534:	e002      	b.n	800353c <HAL_GPIO_Init+0x204>
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <HAL_GPIO_Init+0x204>
 800353a:	2300      	movs	r3, #0
 800353c:	69fa      	ldr	r2, [r7, #28]
 800353e:	f002 0203 	and.w	r2, r2, #3
 8003542:	0092      	lsls	r2, r2, #2
 8003544:	4093      	lsls	r3, r2
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4313      	orrs	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800354c:	4934      	ldr	r1, [pc, #208]	; (8003620 <HAL_GPIO_Init+0x2e8>)
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	089b      	lsrs	r3, r3, #2
 8003552:	3302      	adds	r3, #2
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800355a:	4b37      	ldr	r3, [pc, #220]	; (8003638 <HAL_GPIO_Init+0x300>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	43db      	mvns	r3, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4013      	ands	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800357e:	4a2e      	ldr	r2, [pc, #184]	; (8003638 <HAL_GPIO_Init+0x300>)
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003584:	4b2c      	ldr	r3, [pc, #176]	; (8003638 <HAL_GPIO_Init+0x300>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	43db      	mvns	r3, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4013      	ands	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035a8:	4a23      	ldr	r2, [pc, #140]	; (8003638 <HAL_GPIO_Init+0x300>)
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035ae:	4b22      	ldr	r3, [pc, #136]	; (8003638 <HAL_GPIO_Init+0x300>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	43db      	mvns	r3, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4013      	ands	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035d2:	4a19      	ldr	r2, [pc, #100]	; (8003638 <HAL_GPIO_Init+0x300>)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035d8:	4b17      	ldr	r3, [pc, #92]	; (8003638 <HAL_GPIO_Init+0x300>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	43db      	mvns	r3, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4013      	ands	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035fc:	4a0e      	ldr	r2, [pc, #56]	; (8003638 <HAL_GPIO_Init+0x300>)
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3301      	adds	r3, #1
 8003606:	61fb      	str	r3, [r7, #28]
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	2b0f      	cmp	r3, #15
 800360c:	f67f aea2 	bls.w	8003354 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003610:	bf00      	nop
 8003612:	3724      	adds	r7, #36	; 0x24
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	40023800 	.word	0x40023800
 8003620:	40013800 	.word	0x40013800
 8003624:	40020000 	.word	0x40020000
 8003628:	40020400 	.word	0x40020400
 800362c:	40020800 	.word	0x40020800
 8003630:	40020c00 	.word	0x40020c00
 8003634:	40021000 	.word	0x40021000
 8003638:	40013c00 	.word	0x40013c00

0800363c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	807b      	strh	r3, [r7, #2]
 8003648:	4613      	mov	r3, r2
 800364a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800364c:	787b      	ldrb	r3, [r7, #1]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003652:	887a      	ldrh	r2, [r7, #2]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003658:	e003      	b.n	8003662 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800365a:	887b      	ldrh	r3, [r7, #2]
 800365c:	041a      	lsls	r2, r3, #16
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	619a      	str	r2, [r3, #24]
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e11f      	b.n	80038c2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7fe fbc2 	bl	8001e20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2224      	movs	r2, #36	; 0x24
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0201 	bic.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036d4:	f001 fbb6 	bl	8004e44 <HAL_RCC_GetPCLK1Freq>
 80036d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	4a7b      	ldr	r2, [pc, #492]	; (80038cc <HAL_I2C_Init+0x25c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d807      	bhi.n	80036f4 <HAL_I2C_Init+0x84>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4a7a      	ldr	r2, [pc, #488]	; (80038d0 <HAL_I2C_Init+0x260>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	bf94      	ite	ls
 80036ec:	2301      	movls	r3, #1
 80036ee:	2300      	movhi	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	e006      	b.n	8003702 <HAL_I2C_Init+0x92>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4a77      	ldr	r2, [pc, #476]	; (80038d4 <HAL_I2C_Init+0x264>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	bf94      	ite	ls
 80036fc:	2301      	movls	r3, #1
 80036fe:	2300      	movhi	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e0db      	b.n	80038c2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4a72      	ldr	r2, [pc, #456]	; (80038d8 <HAL_I2C_Init+0x268>)
 800370e:	fba2 2303 	umull	r2, r3, r2, r3
 8003712:	0c9b      	lsrs	r3, r3, #18
 8003714:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	430a      	orrs	r2, r1
 8003728:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	4a64      	ldr	r2, [pc, #400]	; (80038cc <HAL_I2C_Init+0x25c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d802      	bhi.n	8003744 <HAL_I2C_Init+0xd4>
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	3301      	adds	r3, #1
 8003742:	e009      	b.n	8003758 <HAL_I2C_Init+0xe8>
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800374a:	fb02 f303 	mul.w	r3, r2, r3
 800374e:	4a63      	ldr	r2, [pc, #396]	; (80038dc <HAL_I2C_Init+0x26c>)
 8003750:	fba2 2303 	umull	r2, r3, r2, r3
 8003754:	099b      	lsrs	r3, r3, #6
 8003756:	3301      	adds	r3, #1
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	430b      	orrs	r3, r1
 800375e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800376a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	4956      	ldr	r1, [pc, #344]	; (80038cc <HAL_I2C_Init+0x25c>)
 8003774:	428b      	cmp	r3, r1
 8003776:	d80d      	bhi.n	8003794 <HAL_I2C_Init+0x124>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	1e59      	subs	r1, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	fbb1 f3f3 	udiv	r3, r1, r3
 8003786:	3301      	adds	r3, #1
 8003788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800378c:	2b04      	cmp	r3, #4
 800378e:	bf38      	it	cc
 8003790:	2304      	movcc	r3, #4
 8003792:	e04f      	b.n	8003834 <HAL_I2C_Init+0x1c4>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d111      	bne.n	80037c0 <HAL_I2C_Init+0x150>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	1e58      	subs	r0, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6859      	ldr	r1, [r3, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	440b      	add	r3, r1
 80037aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ae:	3301      	adds	r3, #1
 80037b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	bf0c      	ite	eq
 80037b8:	2301      	moveq	r3, #1
 80037ba:	2300      	movne	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	e012      	b.n	80037e6 <HAL_I2C_Init+0x176>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	1e58      	subs	r0, r3, #1
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6859      	ldr	r1, [r3, #4]
 80037c8:	460b      	mov	r3, r1
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	0099      	lsls	r1, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037d6:	3301      	adds	r3, #1
 80037d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037dc:	2b00      	cmp	r3, #0
 80037de:	bf0c      	ite	eq
 80037e0:	2301      	moveq	r3, #1
 80037e2:	2300      	movne	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <HAL_I2C_Init+0x17e>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e022      	b.n	8003834 <HAL_I2C_Init+0x1c4>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10e      	bne.n	8003814 <HAL_I2C_Init+0x1a4>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	1e58      	subs	r0, r3, #1
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6859      	ldr	r1, [r3, #4]
 80037fe:	460b      	mov	r3, r1
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	440b      	add	r3, r1
 8003804:	fbb0 f3f3 	udiv	r3, r0, r3
 8003808:	3301      	adds	r3, #1
 800380a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800380e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003812:	e00f      	b.n	8003834 <HAL_I2C_Init+0x1c4>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	1e58      	subs	r0, r3, #1
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6859      	ldr	r1, [r3, #4]
 800381c:	460b      	mov	r3, r1
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	0099      	lsls	r1, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	fbb0 f3f3 	udiv	r3, r0, r3
 800382a:	3301      	adds	r3, #1
 800382c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003830:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	6809      	ldr	r1, [r1, #0]
 8003838:	4313      	orrs	r3, r2
 800383a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69da      	ldr	r2, [r3, #28]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003862:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6911      	ldr	r1, [r2, #16]
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	68d2      	ldr	r2, [r2, #12]
 800386e:	4311      	orrs	r1, r2
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6812      	ldr	r2, [r2, #0]
 8003874:	430b      	orrs	r3, r1
 8003876:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	695a      	ldr	r2, [r3, #20]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	000186a0 	.word	0x000186a0
 80038d0:	001e847f 	.word	0x001e847f
 80038d4:	003d08ff 	.word	0x003d08ff
 80038d8:	431bde83 	.word	0x431bde83
 80038dc:	10624dd3 	.word	0x10624dd3

080038e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af02      	add	r7, sp, #8
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	4608      	mov	r0, r1
 80038ea:	4611      	mov	r1, r2
 80038ec:	461a      	mov	r2, r3
 80038ee:	4603      	mov	r3, r0
 80038f0:	817b      	strh	r3, [r7, #10]
 80038f2:	460b      	mov	r3, r1
 80038f4:	813b      	strh	r3, [r7, #8]
 80038f6:	4613      	mov	r3, r2
 80038f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038fa:	f7ff fc09 	bl	8003110 <HAL_GetTick>
 80038fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b20      	cmp	r3, #32
 800390a:	f040 80d9 	bne.w	8003ac0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	2319      	movs	r3, #25
 8003914:	2201      	movs	r2, #1
 8003916:	496d      	ldr	r1, [pc, #436]	; (8003acc <HAL_I2C_Mem_Write+0x1ec>)
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 fc7b 	bl	8004214 <I2C_WaitOnFlagUntilTimeout>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003924:	2302      	movs	r3, #2
 8003926:	e0cc      	b.n	8003ac2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800392e:	2b01      	cmp	r3, #1
 8003930:	d101      	bne.n	8003936 <HAL_I2C_Mem_Write+0x56>
 8003932:	2302      	movs	r3, #2
 8003934:	e0c5      	b.n	8003ac2 <HAL_I2C_Mem_Write+0x1e2>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b01      	cmp	r3, #1
 800394a:	d007      	beq.n	800395c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800396a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2221      	movs	r2, #33	; 0x21
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2240      	movs	r2, #64	; 0x40
 8003978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a3a      	ldr	r2, [r7, #32]
 8003986:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800398c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4a4d      	ldr	r2, [pc, #308]	; (8003ad0 <HAL_I2C_Mem_Write+0x1f0>)
 800399c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800399e:	88f8      	ldrh	r0, [r7, #6]
 80039a0:	893a      	ldrh	r2, [r7, #8]
 80039a2:	8979      	ldrh	r1, [r7, #10]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	9301      	str	r3, [sp, #4]
 80039a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	4603      	mov	r3, r0
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 fab6 	bl	8003f20 <I2C_RequestMemoryWrite>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d052      	beq.n	8003a60 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e081      	b.n	8003ac2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 fcfc 	bl	80043c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00d      	beq.n	80039ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d107      	bne.n	80039e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e06b      	b.n	8003ac2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	781a      	ldrb	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d11b      	bne.n	8003a60 <HAL_I2C_Mem_Write+0x180>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d017      	beq.n	8003a60 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	781a      	ldrb	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1aa      	bne.n	80039be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 fce8 	bl	8004442 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00d      	beq.n	8003a94 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d107      	bne.n	8003a90 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a8e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e016      	b.n	8003ac2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003abc:	2300      	movs	r3, #0
 8003abe:	e000      	b.n	8003ac2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ac0:	2302      	movs	r3, #2
  }
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	00100002 	.word	0x00100002
 8003ad0:	ffff0000 	.word	0xffff0000

08003ad4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08c      	sub	sp, #48	; 0x30
 8003ad8:	af02      	add	r7, sp, #8
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	4608      	mov	r0, r1
 8003ade:	4611      	mov	r1, r2
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	817b      	strh	r3, [r7, #10]
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	813b      	strh	r3, [r7, #8]
 8003aea:	4613      	mov	r3, r2
 8003aec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003aee:	f7ff fb0f 	bl	8003110 <HAL_GetTick>
 8003af2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	f040 8208 	bne.w	8003f12 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	2319      	movs	r3, #25
 8003b08:	2201      	movs	r2, #1
 8003b0a:	497b      	ldr	r1, [pc, #492]	; (8003cf8 <HAL_I2C_Mem_Read+0x224>)
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 fb81 	bl	8004214 <I2C_WaitOnFlagUntilTimeout>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e1fb      	b.n	8003f14 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d101      	bne.n	8003b2a <HAL_I2C_Mem_Read+0x56>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e1f4      	b.n	8003f14 <HAL_I2C_Mem_Read+0x440>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d007      	beq.n	8003b50 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2222      	movs	r2, #34	; 0x22
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2240      	movs	r2, #64	; 0x40
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003b80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4a5b      	ldr	r2, [pc, #364]	; (8003cfc <HAL_I2C_Mem_Read+0x228>)
 8003b90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b92:	88f8      	ldrh	r0, [r7, #6]
 8003b94:	893a      	ldrh	r2, [r7, #8]
 8003b96:	8979      	ldrh	r1, [r7, #10]
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	9301      	str	r3, [sp, #4]
 8003b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 fa50 	bl	8004048 <I2C_RequestMemoryRead>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e1b0      	b.n	8003f14 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d113      	bne.n	8003be2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bba:	2300      	movs	r3, #0
 8003bbc:	623b      	str	r3, [r7, #32]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	623b      	str	r3, [r7, #32]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	623b      	str	r3, [r7, #32]
 8003bce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	e184      	b.n	8003eec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d11b      	bne.n	8003c22 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61fb      	str	r3, [r7, #28]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	61fb      	str	r3, [r7, #28]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	61fb      	str	r3, [r7, #28]
 8003c0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	e164      	b.n	8003eec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d11b      	bne.n	8003c62 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61bb      	str	r3, [r7, #24]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	61bb      	str	r3, [r7, #24]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	e144      	b.n	8003eec <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c78:	e138      	b.n	8003eec <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	f200 80f1 	bhi.w	8003e66 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d123      	bne.n	8003cd4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 fc17 	bl	80044c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e139      	b.n	8003f14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691a      	ldr	r2, [r3, #16]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	1c5a      	adds	r2, r3, #1
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cd2:	e10b      	b.n	8003eec <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d14e      	bne.n	8003d7a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	4906      	ldr	r1, [pc, #24]	; (8003d00 <HAL_I2C_Mem_Read+0x22c>)
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 fa94 	bl	8004214 <I2C_WaitOnFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d008      	beq.n	8003d04 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e10e      	b.n	8003f14 <HAL_I2C_Mem_Read+0x440>
 8003cf6:	bf00      	nop
 8003cf8:	00100002 	.word	0x00100002
 8003cfc:	ffff0000 	.word	0xffff0000
 8003d00:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691a      	ldr	r2, [r3, #16]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d78:	e0b8      	b.n	8003eec <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d80:	2200      	movs	r2, #0
 8003d82:	4966      	ldr	r1, [pc, #408]	; (8003f1c <HAL_I2C_Mem_Read+0x448>)
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 fa45 	bl	8004214 <I2C_WaitOnFlagUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e0bf      	b.n	8003f14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003da2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691a      	ldr	r2, [r3, #16]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ddc:	2200      	movs	r2, #0
 8003dde:	494f      	ldr	r1, [pc, #316]	; (8003f1c <HAL_I2C_Mem_Read+0x448>)
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 fa17 	bl	8004214 <I2C_WaitOnFlagUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e091      	b.n	8003f14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	691a      	ldr	r2, [r3, #16]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	691a      	ldr	r2, [r3, #16]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e64:	e042      	b.n	8003eec <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 fb2a 	bl	80044c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e04c      	b.n	8003f14 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	f003 0304 	and.w	r3, r3, #4
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d118      	bne.n	8003eec <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	691a      	ldr	r2, [r3, #16]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f47f aec2 	bne.w	8003c7a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	e000      	b.n	8003f14 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003f12:	2302      	movs	r3, #2
  }
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3728      	adds	r7, #40	; 0x28
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	00010004 	.word	0x00010004

08003f20 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af02      	add	r7, sp, #8
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	4608      	mov	r0, r1
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4603      	mov	r3, r0
 8003f30:	817b      	strh	r3, [r7, #10]
 8003f32:	460b      	mov	r3, r1
 8003f34:	813b      	strh	r3, [r7, #8]
 8003f36:	4613      	mov	r3, r2
 8003f38:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 f95c 	bl	8004214 <I2C_WaitOnFlagUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00c      	beq.n	8003f7c <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e05f      	b.n	800403c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f7c:	897b      	ldrh	r3, [r7, #10]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	461a      	mov	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f8a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	6a3a      	ldr	r2, [r7, #32]
 8003f90:	492c      	ldr	r1, [pc, #176]	; (8004044 <I2C_RequestMemoryWrite+0x124>)
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 f995 	bl	80042c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e04c      	b.n	800403c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	617b      	str	r3, [r7, #20]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fba:	6a39      	ldr	r1, [r7, #32]
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 f9ff 	bl	80043c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00d      	beq.n	8003fe4 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d107      	bne.n	8003fe0 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fde:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e02b      	b.n	800403c <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fe4:	88fb      	ldrh	r3, [r7, #6]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d105      	bne.n	8003ff6 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fea:	893b      	ldrh	r3, [r7, #8]
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	611a      	str	r2, [r3, #16]
 8003ff4:	e021      	b.n	800403a <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ff6:	893b      	ldrh	r3, [r7, #8]
 8003ff8:	0a1b      	lsrs	r3, r3, #8
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004006:	6a39      	ldr	r1, [r7, #32]
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 f9d9 	bl	80043c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00d      	beq.n	8004030 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004018:	2b04      	cmp	r3, #4
 800401a:	d107      	bne.n	800402c <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800402a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e005      	b.n	800403c <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004030:	893b      	ldrh	r3, [r7, #8]
 8004032:	b2da      	uxtb	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	00010002 	.word	0x00010002

08004048 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af02      	add	r7, sp, #8
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	4608      	mov	r0, r1
 8004052:	4611      	mov	r1, r2
 8004054:	461a      	mov	r2, r3
 8004056:	4603      	mov	r3, r0
 8004058:	817b      	strh	r3, [r7, #10]
 800405a:	460b      	mov	r3, r1
 800405c:	813b      	strh	r3, [r7, #8]
 800405e:	4613      	mov	r3, r2
 8004060:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004070:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004080:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	2200      	movs	r2, #0
 800408a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 f8c0 	bl	8004214 <I2C_WaitOnFlagUntilTimeout>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00c      	beq.n	80040b4 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e0a9      	b.n	8004208 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040b4:	897b      	ldrh	r3, [r7, #10]
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	461a      	mov	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	6a3a      	ldr	r2, [r7, #32]
 80040c8:	4951      	ldr	r1, [pc, #324]	; (8004210 <I2C_RequestMemoryRead+0x1c8>)
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 f8f9 	bl	80042c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e096      	b.n	8004208 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040da:	2300      	movs	r3, #0
 80040dc:	617b      	str	r3, [r7, #20]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f2:	6a39      	ldr	r1, [r7, #32]
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 f963 	bl	80043c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00d      	beq.n	800411c <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	2b04      	cmp	r3, #4
 8004106:	d107      	bne.n	8004118 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004116:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e075      	b.n	8004208 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800411c:	88fb      	ldrh	r3, [r7, #6]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d105      	bne.n	800412e <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004122:	893b      	ldrh	r3, [r7, #8]
 8004124:	b2da      	uxtb	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	611a      	str	r2, [r3, #16]
 800412c:	e021      	b.n	8004172 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800412e:	893b      	ldrh	r3, [r7, #8]
 8004130:	0a1b      	lsrs	r3, r3, #8
 8004132:	b29b      	uxth	r3, r3
 8004134:	b2da      	uxtb	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800413c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800413e:	6a39      	ldr	r1, [r7, #32]
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f000 f93d 	bl	80043c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00d      	beq.n	8004168 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	2b04      	cmp	r3, #4
 8004152:	d107      	bne.n	8004164 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004162:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e04f      	b.n	8004208 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004168:	893b      	ldrh	r3, [r7, #8]
 800416a:	b2da      	uxtb	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004174:	6a39      	ldr	r1, [r7, #32]
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 f922 	bl	80043c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00d      	beq.n	800419e <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	2b04      	cmp	r3, #4
 8004188:	d107      	bne.n	800419a <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004198:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e034      	b.n	8004208 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 f82a 	bl	8004214 <I2C_WaitOnFlagUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00c      	beq.n	80041e0 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e013      	b.n	8004208 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041e0:	897b      	ldrh	r3, [r7, #10]
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	f043 0301 	orr.w	r3, r3, #1
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	6a3a      	ldr	r2, [r7, #32]
 80041f4:	4906      	ldr	r1, [pc, #24]	; (8004210 <I2C_RequestMemoryRead+0x1c8>)
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 f863 	bl	80042c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e000      	b.n	8004208 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	00010002 	.word	0x00010002

08004214 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	603b      	str	r3, [r7, #0]
 8004220:	4613      	mov	r3, r2
 8004222:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004224:	e025      	b.n	8004272 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422c:	d021      	beq.n	8004272 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422e:	f7fe ff6f 	bl	8003110 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d302      	bcc.n	8004244 <I2C_WaitOnFlagUntilTimeout+0x30>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d116      	bne.n	8004272 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	f043 0220 	orr.w	r2, r3, #32
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e023      	b.n	80042ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	0c1b      	lsrs	r3, r3, #16
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b01      	cmp	r3, #1
 800427a:	d10d      	bne.n	8004298 <I2C_WaitOnFlagUntilTimeout+0x84>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	43da      	mvns	r2, r3
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	4013      	ands	r3, r2
 8004288:	b29b      	uxth	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	bf0c      	ite	eq
 800428e:	2301      	moveq	r3, #1
 8004290:	2300      	movne	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	461a      	mov	r2, r3
 8004296:	e00c      	b.n	80042b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	43da      	mvns	r2, r3
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4013      	ands	r3, r2
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	bf0c      	ite	eq
 80042aa:	2301      	moveq	r3, #1
 80042ac:	2300      	movne	r3, #0
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	461a      	mov	r2, r3
 80042b2:	79fb      	ldrb	r3, [r7, #7]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d0b6      	beq.n	8004226 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	607a      	str	r2, [r7, #4]
 80042ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042d0:	e051      	b.n	8004376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e0:	d123      	bne.n	800432a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2220      	movs	r2, #32
 8004306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	f043 0204 	orr.w	r2, r3, #4
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e046      	b.n	80043b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004330:	d021      	beq.n	8004376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004332:	f7fe feed 	bl	8003110 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	429a      	cmp	r2, r3
 8004340:	d302      	bcc.n	8004348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d116      	bne.n	8004376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	f043 0220 	orr.w	r2, r3, #32
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e020      	b.n	80043b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	0c1b      	lsrs	r3, r3, #16
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b01      	cmp	r3, #1
 800437e:	d10c      	bne.n	800439a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	43da      	mvns	r2, r3
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	4013      	ands	r3, r2
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	bf14      	ite	ne
 8004392:	2301      	movne	r3, #1
 8004394:	2300      	moveq	r3, #0
 8004396:	b2db      	uxtb	r3, r3
 8004398:	e00b      	b.n	80043b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	43da      	mvns	r2, r3
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	4013      	ands	r3, r2
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	bf14      	ite	ne
 80043ac:	2301      	movne	r3, #1
 80043ae:	2300      	moveq	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d18d      	bne.n	80042d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043cc:	e02d      	b.n	800442a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 f8ce 	bl	8004570 <I2C_IsAcknowledgeFailed>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e02d      	b.n	800443a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e4:	d021      	beq.n	800442a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e6:	f7fe fe93 	bl	8003110 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d302      	bcc.n	80043fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d116      	bne.n	800442a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2220      	movs	r2, #32
 8004406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	f043 0220 	orr.w	r2, r3, #32
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e007      	b.n	800443a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004434:	2b80      	cmp	r3, #128	; 0x80
 8004436:	d1ca      	bne.n	80043ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b084      	sub	sp, #16
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800444e:	e02d      	b.n	80044ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 f88d 	bl	8004570 <I2C_IsAcknowledgeFailed>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e02d      	b.n	80044bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004466:	d021      	beq.n	80044ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004468:	f7fe fe52 	bl	8003110 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	429a      	cmp	r2, r3
 8004476:	d302      	bcc.n	800447e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d116      	bne.n	80044ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2220      	movs	r2, #32
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	f043 0220 	orr.w	r2, r3, #32
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e007      	b.n	80044bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	f003 0304 	and.w	r3, r3, #4
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d1ca      	bne.n	8004450 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044d0:	e042      	b.n	8004558 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	f003 0310 	and.w	r3, r3, #16
 80044dc:	2b10      	cmp	r3, #16
 80044de:	d119      	bne.n	8004514 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f06f 0210 	mvn.w	r2, #16
 80044e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e029      	b.n	8004568 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004514:	f7fe fdfc 	bl	8003110 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	429a      	cmp	r2, r3
 8004522:	d302      	bcc.n	800452a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d116      	bne.n	8004558 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	f043 0220 	orr.w	r2, r3, #32
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e007      	b.n	8004568 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004562:	2b40      	cmp	r3, #64	; 0x40
 8004564:	d1b5      	bne.n	80044d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004586:	d11b      	bne.n	80045c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004590:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2220      	movs	r2, #32
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ac:	f043 0204 	orr.w	r2, r3, #4
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
	...

080045d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e25b      	b.n	8004a9a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d075      	beq.n	80046da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045ee:	4ba3      	ldr	r3, [pc, #652]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 030c 	and.w	r3, r3, #12
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d00c      	beq.n	8004614 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045fa:	4ba0      	ldr	r3, [pc, #640]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004602:	2b08      	cmp	r3, #8
 8004604:	d112      	bne.n	800462c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004606:	4b9d      	ldr	r3, [pc, #628]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800460e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004612:	d10b      	bne.n	800462c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004614:	4b99      	ldr	r3, [pc, #612]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d05b      	beq.n	80046d8 <HAL_RCC_OscConfig+0x108>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d157      	bne.n	80046d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e236      	b.n	8004a9a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004634:	d106      	bne.n	8004644 <HAL_RCC_OscConfig+0x74>
 8004636:	4b91      	ldr	r3, [pc, #580]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a90      	ldr	r2, [pc, #576]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 800463c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	e01d      	b.n	8004680 <HAL_RCC_OscConfig+0xb0>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800464c:	d10c      	bne.n	8004668 <HAL_RCC_OscConfig+0x98>
 800464e:	4b8b      	ldr	r3, [pc, #556]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a8a      	ldr	r2, [pc, #552]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 8004654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	4b88      	ldr	r3, [pc, #544]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a87      	ldr	r2, [pc, #540]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 8004660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004664:	6013      	str	r3, [r2, #0]
 8004666:	e00b      	b.n	8004680 <HAL_RCC_OscConfig+0xb0>
 8004668:	4b84      	ldr	r3, [pc, #528]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a83      	ldr	r2, [pc, #524]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 800466e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004672:	6013      	str	r3, [r2, #0]
 8004674:	4b81      	ldr	r3, [pc, #516]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a80      	ldr	r2, [pc, #512]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 800467a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800467e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d013      	beq.n	80046b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004688:	f7fe fd42 	bl	8003110 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004690:	f7fe fd3e 	bl	8003110 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b64      	cmp	r3, #100	; 0x64
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e1fb      	b.n	8004a9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a2:	4b76      	ldr	r3, [pc, #472]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0f0      	beq.n	8004690 <HAL_RCC_OscConfig+0xc0>
 80046ae:	e014      	b.n	80046da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b0:	f7fe fd2e 	bl	8003110 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046b8:	f7fe fd2a 	bl	8003110 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b64      	cmp	r3, #100	; 0x64
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e1e7      	b.n	8004a9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ca:	4b6c      	ldr	r3, [pc, #432]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1f0      	bne.n	80046b8 <HAL_RCC_OscConfig+0xe8>
 80046d6:	e000      	b.n	80046da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d063      	beq.n	80047ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046e6:	4b65      	ldr	r3, [pc, #404]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 030c 	and.w	r3, r3, #12
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00b      	beq.n	800470a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046f2:	4b62      	ldr	r3, [pc, #392]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046fa:	2b08      	cmp	r3, #8
 80046fc:	d11c      	bne.n	8004738 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046fe:	4b5f      	ldr	r3, [pc, #380]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d116      	bne.n	8004738 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800470a:	4b5c      	ldr	r3, [pc, #368]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d005      	beq.n	8004722 <HAL_RCC_OscConfig+0x152>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d001      	beq.n	8004722 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e1bb      	b.n	8004a9a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004722:	4b56      	ldr	r3, [pc, #344]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	4952      	ldr	r1, [pc, #328]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 8004732:	4313      	orrs	r3, r2
 8004734:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004736:	e03a      	b.n	80047ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d020      	beq.n	8004782 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004740:	4b4f      	ldr	r3, [pc, #316]	; (8004880 <HAL_RCC_OscConfig+0x2b0>)
 8004742:	2201      	movs	r2, #1
 8004744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004746:	f7fe fce3 	bl	8003110 <HAL_GetTick>
 800474a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800474e:	f7fe fcdf 	bl	8003110 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e19c      	b.n	8004a9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004760:	4b46      	ldr	r3, [pc, #280]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0f0      	beq.n	800474e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800476c:	4b43      	ldr	r3, [pc, #268]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	4940      	ldr	r1, [pc, #256]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 800477c:	4313      	orrs	r3, r2
 800477e:	600b      	str	r3, [r1, #0]
 8004780:	e015      	b.n	80047ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004782:	4b3f      	ldr	r3, [pc, #252]	; (8004880 <HAL_RCC_OscConfig+0x2b0>)
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004788:	f7fe fcc2 	bl	8003110 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004790:	f7fe fcbe 	bl	8003110 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e17b      	b.n	8004a9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047a2:	4b36      	ldr	r3, [pc, #216]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1f0      	bne.n	8004790 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d030      	beq.n	800481c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d016      	beq.n	80047f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047c2:	4b30      	ldr	r3, [pc, #192]	; (8004884 <HAL_RCC_OscConfig+0x2b4>)
 80047c4:	2201      	movs	r2, #1
 80047c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c8:	f7fe fca2 	bl	8003110 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047d0:	f7fe fc9e 	bl	8003110 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e15b      	b.n	8004a9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047e2:	4b26      	ldr	r3, [pc, #152]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 80047e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0f0      	beq.n	80047d0 <HAL_RCC_OscConfig+0x200>
 80047ee:	e015      	b.n	800481c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047f0:	4b24      	ldr	r3, [pc, #144]	; (8004884 <HAL_RCC_OscConfig+0x2b4>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f6:	f7fe fc8b 	bl	8003110 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047fc:	e008      	b.n	8004810 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047fe:	f7fe fc87 	bl	8003110 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e144      	b.n	8004a9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004810:	4b1a      	ldr	r3, [pc, #104]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 8004812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1f0      	bne.n	80047fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 80a0 	beq.w	800496a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800482a:	2300      	movs	r3, #0
 800482c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800482e:	4b13      	ldr	r3, [pc, #76]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10f      	bne.n	800485a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800483a:	2300      	movs	r3, #0
 800483c:	60bb      	str	r3, [r7, #8]
 800483e:	4b0f      	ldr	r3, [pc, #60]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	4a0e      	ldr	r2, [pc, #56]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 8004844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004848:	6413      	str	r3, [r2, #64]	; 0x40
 800484a:	4b0c      	ldr	r3, [pc, #48]	; (800487c <HAL_RCC_OscConfig+0x2ac>)
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004852:	60bb      	str	r3, [r7, #8]
 8004854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004856:	2301      	movs	r3, #1
 8004858:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800485a:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <HAL_RCC_OscConfig+0x2b8>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004862:	2b00      	cmp	r3, #0
 8004864:	d121      	bne.n	80048aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004866:	4b08      	ldr	r3, [pc, #32]	; (8004888 <HAL_RCC_OscConfig+0x2b8>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a07      	ldr	r2, [pc, #28]	; (8004888 <HAL_RCC_OscConfig+0x2b8>)
 800486c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004870:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004872:	f7fe fc4d 	bl	8003110 <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004878:	e011      	b.n	800489e <HAL_RCC_OscConfig+0x2ce>
 800487a:	bf00      	nop
 800487c:	40023800 	.word	0x40023800
 8004880:	42470000 	.word	0x42470000
 8004884:	42470e80 	.word	0x42470e80
 8004888:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800488c:	f7fe fc40 	bl	8003110 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e0fd      	b.n	8004a9a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800489e:	4b81      	ldr	r3, [pc, #516]	; (8004aa4 <HAL_RCC_OscConfig+0x4d4>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0f0      	beq.n	800488c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d106      	bne.n	80048c0 <HAL_RCC_OscConfig+0x2f0>
 80048b2:	4b7d      	ldr	r3, [pc, #500]	; (8004aa8 <HAL_RCC_OscConfig+0x4d8>)
 80048b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b6:	4a7c      	ldr	r2, [pc, #496]	; (8004aa8 <HAL_RCC_OscConfig+0x4d8>)
 80048b8:	f043 0301 	orr.w	r3, r3, #1
 80048bc:	6713      	str	r3, [r2, #112]	; 0x70
 80048be:	e01c      	b.n	80048fa <HAL_RCC_OscConfig+0x32a>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	2b05      	cmp	r3, #5
 80048c6:	d10c      	bne.n	80048e2 <HAL_RCC_OscConfig+0x312>
 80048c8:	4b77      	ldr	r3, [pc, #476]	; (8004aa8 <HAL_RCC_OscConfig+0x4d8>)
 80048ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048cc:	4a76      	ldr	r2, [pc, #472]	; (8004aa8 <HAL_RCC_OscConfig+0x4d8>)
 80048ce:	f043 0304 	orr.w	r3, r3, #4
 80048d2:	6713      	str	r3, [r2, #112]	; 0x70
 80048d4:	4b74      	ldr	r3, [pc, #464]	; (8004aa8 <HAL_RCC_OscConfig+0x4d8>)
 80048d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d8:	4a73      	ldr	r2, [pc, #460]	; (8004aa8 <HAL_RCC_OscConfig+0x4d8>)
 80048da:	f043 0301 	orr.w	r3, r3, #1
 80048de:	6713      	str	r3, [r2, #112]	; 0x70
 80048e0:	e00b      	b.n	80048fa <HAL_RCC_OscConfig+0x32a>
 80048e2:	4b71      	ldr	r3, [pc, #452]	; (8004aa8 <HAL_RCC_OscConfig+0x4d8>)
 80048e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e6:	4a70      	ldr	r2, [pc, #448]	; (8004aa8 <HAL_RCC_OscConfig+0x4d8>)
 80048e8:	f023 0301 	bic.w	r3, r3, #1
 80048ec:	6713      	str	r3, [r2, #112]	; 0x70
 80048ee:	4b6e      	ldr	r3, [pc, #440]	; (8004aa8 <HAL_RCC_OscConfig+0x4d8>)
 80048f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f2:	4a6d      	ldr	r2, [pc, #436]	; (8004aa8 <HAL_RCC_OscConfig+0x4d8>)
 80048f4:	f023 0304 	bic.w	r3, r3, #4
 80048f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d015      	beq.n	800492e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004902:	f7fe fc05 	bl	8003110 <HAL_GetTick>
 8004906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004908:	e00a      	b.n	8004920 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800490a:	f7fe fc01 	bl	8003110 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	f241 3288 	movw	r2, #5000	; 0x1388
 8004918:	4293      	cmp	r3, r2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e0bc      	b.n	8004a9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004920:	4b61      	ldr	r3, [pc, #388]	; (8004aa8 <HAL_RCC_OscConfig+0x4d8>)
 8004922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0ee      	beq.n	800490a <HAL_RCC_OscConfig+0x33a>
 800492c:	e014      	b.n	8004958 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800492e:	f7fe fbef 	bl	8003110 <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004934:	e00a      	b.n	800494c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004936:	f7fe fbeb 	bl	8003110 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	f241 3288 	movw	r2, #5000	; 0x1388
 8004944:	4293      	cmp	r3, r2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e0a6      	b.n	8004a9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800494c:	4b56      	ldr	r3, [pc, #344]	; (8004aa8 <HAL_RCC_OscConfig+0x4d8>)
 800494e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1ee      	bne.n	8004936 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004958:	7dfb      	ldrb	r3, [r7, #23]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d105      	bne.n	800496a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800495e:	4b52      	ldr	r3, [pc, #328]	; (8004aa8 <HAL_RCC_OscConfig+0x4d8>)
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	4a51      	ldr	r2, [pc, #324]	; (8004aa8 <HAL_RCC_OscConfig+0x4d8>)
 8004964:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004968:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 8092 	beq.w	8004a98 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004974:	4b4c      	ldr	r3, [pc, #304]	; (8004aa8 <HAL_RCC_OscConfig+0x4d8>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f003 030c 	and.w	r3, r3, #12
 800497c:	2b08      	cmp	r3, #8
 800497e:	d05c      	beq.n	8004a3a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	2b02      	cmp	r3, #2
 8004986:	d141      	bne.n	8004a0c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004988:	4b48      	ldr	r3, [pc, #288]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498e:	f7fe fbbf 	bl	8003110 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004994:	e008      	b.n	80049a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004996:	f7fe fbbb 	bl	8003110 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e078      	b.n	8004a9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a8:	4b3f      	ldr	r3, [pc, #252]	; (8004aa8 <HAL_RCC_OscConfig+0x4d8>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1f0      	bne.n	8004996 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	69da      	ldr	r2, [r3, #28]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	431a      	orrs	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	019b      	lsls	r3, r3, #6
 80049c4:	431a      	orrs	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ca:	085b      	lsrs	r3, r3, #1
 80049cc:	3b01      	subs	r3, #1
 80049ce:	041b      	lsls	r3, r3, #16
 80049d0:	431a      	orrs	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d6:	061b      	lsls	r3, r3, #24
 80049d8:	4933      	ldr	r1, [pc, #204]	; (8004aa8 <HAL_RCC_OscConfig+0x4d8>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049de:	4b33      	ldr	r3, [pc, #204]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 80049e0:	2201      	movs	r2, #1
 80049e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e4:	f7fe fb94 	bl	8003110 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ec:	f7fe fb90 	bl	8003110 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e04d      	b.n	8004a9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049fe:	4b2a      	ldr	r3, [pc, #168]	; (8004aa8 <HAL_RCC_OscConfig+0x4d8>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0f0      	beq.n	80049ec <HAL_RCC_OscConfig+0x41c>
 8004a0a:	e045      	b.n	8004a98 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a0c:	4b27      	ldr	r3, [pc, #156]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a12:	f7fe fb7d 	bl	8003110 <HAL_GetTick>
 8004a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a18:	e008      	b.n	8004a2c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a1a:	f7fe fb79 	bl	8003110 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e036      	b.n	8004a9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a2c:	4b1e      	ldr	r3, [pc, #120]	; (8004aa8 <HAL_RCC_OscConfig+0x4d8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1f0      	bne.n	8004a1a <HAL_RCC_OscConfig+0x44a>
 8004a38:	e02e      	b.n	8004a98 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d101      	bne.n	8004a46 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e029      	b.n	8004a9a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a46:	4b18      	ldr	r3, [pc, #96]	; (8004aa8 <HAL_RCC_OscConfig+0x4d8>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d11c      	bne.n	8004a94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d115      	bne.n	8004a94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a6e:	4013      	ands	r3, r2
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d10d      	bne.n	8004a94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d106      	bne.n	8004a94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d001      	beq.n	8004a98 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e000      	b.n	8004a9a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40007000 	.word	0x40007000
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	42470060 	.word	0x42470060

08004ab0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e0cc      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ac4:	4b68      	ldr	r3, [pc, #416]	; (8004c68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 030f 	and.w	r3, r3, #15
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d90c      	bls.n	8004aec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad2:	4b65      	ldr	r3, [pc, #404]	; (8004c68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ada:	4b63      	ldr	r3, [pc, #396]	; (8004c68 <HAL_RCC_ClockConfig+0x1b8>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 030f 	and.w	r3, r3, #15
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d001      	beq.n	8004aec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e0b8      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d020      	beq.n	8004b3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d005      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b04:	4b59      	ldr	r3, [pc, #356]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	4a58      	ldr	r2, [pc, #352]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0308 	and.w	r3, r3, #8
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b1c:	4b53      	ldr	r3, [pc, #332]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	4a52      	ldr	r2, [pc, #328]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b28:	4b50      	ldr	r3, [pc, #320]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	494d      	ldr	r1, [pc, #308]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d044      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d107      	bne.n	8004b5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b4e:	4b47      	ldr	r3, [pc, #284]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d119      	bne.n	8004b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e07f      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d003      	beq.n	8004b6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b6a:	2b03      	cmp	r3, #3
 8004b6c:	d107      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b6e:	4b3f      	ldr	r3, [pc, #252]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d109      	bne.n	8004b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e06f      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b7e:	4b3b      	ldr	r3, [pc, #236]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e067      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b8e:	4b37      	ldr	r3, [pc, #220]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f023 0203 	bic.w	r2, r3, #3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	4934      	ldr	r1, [pc, #208]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ba0:	f7fe fab6 	bl	8003110 <HAL_GetTick>
 8004ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ba6:	e00a      	b.n	8004bbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ba8:	f7fe fab2 	bl	8003110 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e04f      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bbe:	4b2b      	ldr	r3, [pc, #172]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 020c 	and.w	r2, r3, #12
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d1eb      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bd0:	4b25      	ldr	r3, [pc, #148]	; (8004c68 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 030f 	and.w	r3, r3, #15
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d20c      	bcs.n	8004bf8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bde:	4b22      	ldr	r3, [pc, #136]	; (8004c68 <HAL_RCC_ClockConfig+0x1b8>)
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	b2d2      	uxtb	r2, r2
 8004be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be6:	4b20      	ldr	r3, [pc, #128]	; (8004c68 <HAL_RCC_ClockConfig+0x1b8>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d001      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e032      	b.n	8004c5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d008      	beq.n	8004c16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c04:	4b19      	ldr	r3, [pc, #100]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	4916      	ldr	r1, [pc, #88]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d009      	beq.n	8004c36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c22:	4b12      	ldr	r3, [pc, #72]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	490e      	ldr	r1, [pc, #56]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c36:	f000 f821 	bl	8004c7c <HAL_RCC_GetSysClockFreq>
 8004c3a:	4601      	mov	r1, r0
 8004c3c:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	091b      	lsrs	r3, r3, #4
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	4a0a      	ldr	r2, [pc, #40]	; (8004c70 <HAL_RCC_ClockConfig+0x1c0>)
 8004c48:	5cd3      	ldrb	r3, [r2, r3]
 8004c4a:	fa21 f303 	lsr.w	r3, r1, r3
 8004c4e:	4a09      	ldr	r2, [pc, #36]	; (8004c74 <HAL_RCC_ClockConfig+0x1c4>)
 8004c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c52:	4b09      	ldr	r3, [pc, #36]	; (8004c78 <HAL_RCC_ClockConfig+0x1c8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fe fa16 	bl	8003088 <HAL_InitTick>

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	40023c00 	.word	0x40023c00
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	08007830 	.word	0x08007830
 8004c74:	20000000 	.word	0x20000000
 8004c78:	20000004 	.word	0x20000004

08004c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c82:	2300      	movs	r3, #0
 8004c84:	607b      	str	r3, [r7, #4]
 8004c86:	2300      	movs	r3, #0
 8004c88:	60fb      	str	r3, [r7, #12]
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c92:	4b63      	ldr	r3, [pc, #396]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 030c 	and.w	r3, r3, #12
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d007      	beq.n	8004cae <HAL_RCC_GetSysClockFreq+0x32>
 8004c9e:	2b08      	cmp	r3, #8
 8004ca0:	d008      	beq.n	8004cb4 <HAL_RCC_GetSysClockFreq+0x38>
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f040 80b4 	bne.w	8004e10 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ca8:	4b5e      	ldr	r3, [pc, #376]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004caa:	60bb      	str	r3, [r7, #8]
       break;
 8004cac:	e0b3      	b.n	8004e16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cae:	4b5e      	ldr	r3, [pc, #376]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004cb0:	60bb      	str	r3, [r7, #8]
      break;
 8004cb2:	e0b0      	b.n	8004e16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cb4:	4b5a      	ldr	r3, [pc, #360]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cbc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cbe:	4b58      	ldr	r3, [pc, #352]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d04a      	beq.n	8004d60 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cca:	4b55      	ldr	r3, [pc, #340]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	099b      	lsrs	r3, r3, #6
 8004cd0:	f04f 0400 	mov.w	r4, #0
 8004cd4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	ea03 0501 	and.w	r5, r3, r1
 8004ce0:	ea04 0602 	and.w	r6, r4, r2
 8004ce4:	4629      	mov	r1, r5
 8004ce6:	4632      	mov	r2, r6
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	f04f 0400 	mov.w	r4, #0
 8004cf0:	0154      	lsls	r4, r2, #5
 8004cf2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004cf6:	014b      	lsls	r3, r1, #5
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	4622      	mov	r2, r4
 8004cfc:	1b49      	subs	r1, r1, r5
 8004cfe:	eb62 0206 	sbc.w	r2, r2, r6
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	f04f 0400 	mov.w	r4, #0
 8004d0a:	0194      	lsls	r4, r2, #6
 8004d0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d10:	018b      	lsls	r3, r1, #6
 8004d12:	1a5b      	subs	r3, r3, r1
 8004d14:	eb64 0402 	sbc.w	r4, r4, r2
 8004d18:	f04f 0100 	mov.w	r1, #0
 8004d1c:	f04f 0200 	mov.w	r2, #0
 8004d20:	00e2      	lsls	r2, r4, #3
 8004d22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004d26:	00d9      	lsls	r1, r3, #3
 8004d28:	460b      	mov	r3, r1
 8004d2a:	4614      	mov	r4, r2
 8004d2c:	195b      	adds	r3, r3, r5
 8004d2e:	eb44 0406 	adc.w	r4, r4, r6
 8004d32:	f04f 0100 	mov.w	r1, #0
 8004d36:	f04f 0200 	mov.w	r2, #0
 8004d3a:	0262      	lsls	r2, r4, #9
 8004d3c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004d40:	0259      	lsls	r1, r3, #9
 8004d42:	460b      	mov	r3, r1
 8004d44:	4614      	mov	r4, r2
 8004d46:	4618      	mov	r0, r3
 8004d48:	4621      	mov	r1, r4
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f04f 0400 	mov.w	r4, #0
 8004d50:	461a      	mov	r2, r3
 8004d52:	4623      	mov	r3, r4
 8004d54:	f7fb fd28 	bl	80007a8 <__aeabi_uldivmod>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	460c      	mov	r4, r1
 8004d5c:	60fb      	str	r3, [r7, #12]
 8004d5e:	e049      	b.n	8004df4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d60:	4b2f      	ldr	r3, [pc, #188]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	099b      	lsrs	r3, r3, #6
 8004d66:	f04f 0400 	mov.w	r4, #0
 8004d6a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	ea03 0501 	and.w	r5, r3, r1
 8004d76:	ea04 0602 	and.w	r6, r4, r2
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	4632      	mov	r2, r6
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	f04f 0400 	mov.w	r4, #0
 8004d86:	0154      	lsls	r4, r2, #5
 8004d88:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d8c:	014b      	lsls	r3, r1, #5
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4622      	mov	r2, r4
 8004d92:	1b49      	subs	r1, r1, r5
 8004d94:	eb62 0206 	sbc.w	r2, r2, r6
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	f04f 0400 	mov.w	r4, #0
 8004da0:	0194      	lsls	r4, r2, #6
 8004da2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004da6:	018b      	lsls	r3, r1, #6
 8004da8:	1a5b      	subs	r3, r3, r1
 8004daa:	eb64 0402 	sbc.w	r4, r4, r2
 8004dae:	f04f 0100 	mov.w	r1, #0
 8004db2:	f04f 0200 	mov.w	r2, #0
 8004db6:	00e2      	lsls	r2, r4, #3
 8004db8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004dbc:	00d9      	lsls	r1, r3, #3
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4614      	mov	r4, r2
 8004dc2:	195b      	adds	r3, r3, r5
 8004dc4:	eb44 0406 	adc.w	r4, r4, r6
 8004dc8:	f04f 0100 	mov.w	r1, #0
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	02a2      	lsls	r2, r4, #10
 8004dd2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004dd6:	0299      	lsls	r1, r3, #10
 8004dd8:	460b      	mov	r3, r1
 8004dda:	4614      	mov	r4, r2
 8004ddc:	4618      	mov	r0, r3
 8004dde:	4621      	mov	r1, r4
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f04f 0400 	mov.w	r4, #0
 8004de6:	461a      	mov	r2, r3
 8004de8:	4623      	mov	r3, r4
 8004dea:	f7fb fcdd 	bl	80007a8 <__aeabi_uldivmod>
 8004dee:	4603      	mov	r3, r0
 8004df0:	460c      	mov	r4, r1
 8004df2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004df4:	4b0a      	ldr	r3, [pc, #40]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	0c1b      	lsrs	r3, r3, #16
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	3301      	adds	r3, #1
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0c:	60bb      	str	r3, [r7, #8]
      break;
 8004e0e:	e002      	b.n	8004e16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e10:	4b04      	ldr	r3, [pc, #16]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004e12:	60bb      	str	r3, [r7, #8]
      break;
 8004e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e16:	68bb      	ldr	r3, [r7, #8]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e20:	40023800 	.word	0x40023800
 8004e24:	00f42400 	.word	0x00f42400
 8004e28:	007a1200 	.word	0x007a1200

08004e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e30:	4b03      	ldr	r3, [pc, #12]	; (8004e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e32:	681b      	ldr	r3, [r3, #0]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	20000000 	.word	0x20000000

08004e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e48:	f7ff fff0 	bl	8004e2c <HAL_RCC_GetHCLKFreq>
 8004e4c:	4601      	mov	r1, r0
 8004e4e:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	0a9b      	lsrs	r3, r3, #10
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	4a03      	ldr	r2, [pc, #12]	; (8004e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e5a:	5cd3      	ldrb	r3, [r2, r3]
 8004e5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40023800 	.word	0x40023800
 8004e68:	08007840 	.word	0x08007840

08004e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e70:	f7ff ffdc 	bl	8004e2c <HAL_RCC_GetHCLKFreq>
 8004e74:	4601      	mov	r1, r0
 8004e76:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	0b5b      	lsrs	r3, r3, #13
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	4a03      	ldr	r2, [pc, #12]	; (8004e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e82:	5cd3      	ldrb	r3, [r2, r3]
 8004e84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	08007840 	.word	0x08007840

08004e94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e01d      	b.n	8004ee2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fd ffca 	bl	8002e54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3304      	adds	r3, #4
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	f000 fab8 	bl	8005448 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b082      	sub	sp, #8
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e01d      	b.n	8004f38 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d106      	bne.n	8004f16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f815 	bl	8004f40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2202      	movs	r2, #2
 8004f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	3304      	adds	r3, #4
 8004f26:	4619      	mov	r1, r3
 8004f28:	4610      	mov	r0, r2
 8004f2a:	f000 fa8d 	bl	8005448 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2201      	movs	r2, #1
 8004f64:	6839      	ldr	r1, [r7, #0]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 fd14 	bl	8005994 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a10      	ldr	r2, [pc, #64]	; (8004fb4 <HAL_TIM_PWM_Start+0x60>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d107      	bne.n	8004f86 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2b06      	cmp	r3, #6
 8004f96:	d007      	beq.n	8004fa8 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f042 0201 	orr.w	r2, r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	40010000 	.word	0x40010000

08004fb8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e083      	b.n	80050d4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d106      	bne.n	8004fe6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7fd fe9d 	bl	8002d20 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2202      	movs	r2, #2
 8004fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6812      	ldr	r2, [r2, #0]
 8004ff8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ffc:	f023 0307 	bic.w	r3, r3, #7
 8005000:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	3304      	adds	r3, #4
 800500a:	4619      	mov	r1, r3
 800500c:	4610      	mov	r0, r2
 800500e:	f000 fa1b 	bl	8005448 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	4313      	orrs	r3, r2
 8005032:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800503a:	f023 0303 	bic.w	r3, r3, #3
 800503e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	021b      	lsls	r3, r3, #8
 800504a:	4313      	orrs	r3, r2
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4313      	orrs	r3, r2
 8005050:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005058:	f023 030c 	bic.w	r3, r3, #12
 800505c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005064:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005068:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	021b      	lsls	r3, r3, #8
 8005074:	4313      	orrs	r3, r2
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	4313      	orrs	r3, r2
 800507a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	011a      	lsls	r2, r3, #4
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	031b      	lsls	r3, r3, #12
 8005088:	4313      	orrs	r3, r2
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	4313      	orrs	r3, r2
 800508e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005096:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800509e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	011b      	lsls	r3, r3, #4
 80050aa:	4313      	orrs	r3, r2
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <HAL_TIM_Encoder_Start+0x16>
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d008      	beq.n	8005102 <HAL_TIM_Encoder_Start+0x26>
 80050f0:	e00f      	b.n	8005112 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2201      	movs	r2, #1
 80050f8:	2100      	movs	r1, #0
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 fc4a 	bl	8005994 <TIM_CCxChannelCmd>
      break;
 8005100:	e016      	b.n	8005130 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2201      	movs	r2, #1
 8005108:	2104      	movs	r1, #4
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fc42 	bl	8005994 <TIM_CCxChannelCmd>
      break;
 8005110:	e00e      	b.n	8005130 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2201      	movs	r2, #1
 8005118:	2100      	movs	r1, #0
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fc3a 	bl	8005994 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2201      	movs	r2, #1
 8005126:	2104      	movs	r1, #4
 8005128:	4618      	mov	r0, r3
 800512a:	f000 fc33 	bl	8005994 <TIM_CCxChannelCmd>
      break;
 800512e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0201 	orr.w	r2, r2, #1
 800513e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
	...

0800514c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800515e:	2b01      	cmp	r3, #1
 8005160:	d101      	bne.n	8005166 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005162:	2302      	movs	r3, #2
 8005164:	e0b4      	b.n	80052d0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2202      	movs	r2, #2
 8005172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b0c      	cmp	r3, #12
 800517a:	f200 809f 	bhi.w	80052bc <HAL_TIM_PWM_ConfigChannel+0x170>
 800517e:	a201      	add	r2, pc, #4	; (adr r2, 8005184 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005184:	080051b9 	.word	0x080051b9
 8005188:	080052bd 	.word	0x080052bd
 800518c:	080052bd 	.word	0x080052bd
 8005190:	080052bd 	.word	0x080052bd
 8005194:	080051f9 	.word	0x080051f9
 8005198:	080052bd 	.word	0x080052bd
 800519c:	080052bd 	.word	0x080052bd
 80051a0:	080052bd 	.word	0x080052bd
 80051a4:	0800523b 	.word	0x0800523b
 80051a8:	080052bd 	.word	0x080052bd
 80051ac:	080052bd 	.word	0x080052bd
 80051b0:	080052bd 	.word	0x080052bd
 80051b4:	0800527b 	.word	0x0800527b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68b9      	ldr	r1, [r7, #8]
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 f9c2 	bl	8005548 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699a      	ldr	r2, [r3, #24]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0208 	orr.w	r2, r2, #8
 80051d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699a      	ldr	r2, [r3, #24]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0204 	bic.w	r2, r2, #4
 80051e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6999      	ldr	r1, [r3, #24]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	691a      	ldr	r2, [r3, #16]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	619a      	str	r2, [r3, #24]
      break;
 80051f6:	e062      	b.n	80052be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68b9      	ldr	r1, [r7, #8]
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 fa08 	bl	8005614 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699a      	ldr	r2, [r3, #24]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699a      	ldr	r2, [r3, #24]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6999      	ldr	r1, [r3, #24]
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	021a      	lsls	r2, r3, #8
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	619a      	str	r2, [r3, #24]
      break;
 8005238:	e041      	b.n	80052be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68b9      	ldr	r1, [r7, #8]
 8005240:	4618      	mov	r0, r3
 8005242:	f000 fa53 	bl	80056ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69da      	ldr	r2, [r3, #28]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f042 0208 	orr.w	r2, r2, #8
 8005254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69da      	ldr	r2, [r3, #28]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0204 	bic.w	r2, r2, #4
 8005264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69d9      	ldr	r1, [r3, #28]
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	691a      	ldr	r2, [r3, #16]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	61da      	str	r2, [r3, #28]
      break;
 8005278:	e021      	b.n	80052be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68b9      	ldr	r1, [r7, #8]
 8005280:	4618      	mov	r0, r3
 8005282:	f000 fa9d 	bl	80057c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69da      	ldr	r2, [r3, #28]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69da      	ldr	r2, [r3, #28]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69d9      	ldr	r1, [r3, #28]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	021a      	lsls	r2, r3, #8
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	61da      	str	r2, [r3, #28]
      break;
 80052ba:	e000      	b.n	80052be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80052bc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d101      	bne.n	80052f0 <HAL_TIM_ConfigClockSource+0x18>
 80052ec:	2302      	movs	r3, #2
 80052ee:	e0a6      	b.n	800543e <HAL_TIM_ConfigClockSource+0x166>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800530e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005316:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b40      	cmp	r3, #64	; 0x40
 8005326:	d067      	beq.n	80053f8 <HAL_TIM_ConfigClockSource+0x120>
 8005328:	2b40      	cmp	r3, #64	; 0x40
 800532a:	d80b      	bhi.n	8005344 <HAL_TIM_ConfigClockSource+0x6c>
 800532c:	2b10      	cmp	r3, #16
 800532e:	d073      	beq.n	8005418 <HAL_TIM_ConfigClockSource+0x140>
 8005330:	2b10      	cmp	r3, #16
 8005332:	d802      	bhi.n	800533a <HAL_TIM_ConfigClockSource+0x62>
 8005334:	2b00      	cmp	r3, #0
 8005336:	d06f      	beq.n	8005418 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005338:	e078      	b.n	800542c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800533a:	2b20      	cmp	r3, #32
 800533c:	d06c      	beq.n	8005418 <HAL_TIM_ConfigClockSource+0x140>
 800533e:	2b30      	cmp	r3, #48	; 0x30
 8005340:	d06a      	beq.n	8005418 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005342:	e073      	b.n	800542c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005344:	2b70      	cmp	r3, #112	; 0x70
 8005346:	d00d      	beq.n	8005364 <HAL_TIM_ConfigClockSource+0x8c>
 8005348:	2b70      	cmp	r3, #112	; 0x70
 800534a:	d804      	bhi.n	8005356 <HAL_TIM_ConfigClockSource+0x7e>
 800534c:	2b50      	cmp	r3, #80	; 0x50
 800534e:	d033      	beq.n	80053b8 <HAL_TIM_ConfigClockSource+0xe0>
 8005350:	2b60      	cmp	r3, #96	; 0x60
 8005352:	d041      	beq.n	80053d8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005354:	e06a      	b.n	800542c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800535a:	d066      	beq.n	800542a <HAL_TIM_ConfigClockSource+0x152>
 800535c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005360:	d017      	beq.n	8005392 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005362:	e063      	b.n	800542c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6818      	ldr	r0, [r3, #0]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	6899      	ldr	r1, [r3, #8]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f000 faee 	bl	8005954 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005386:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	609a      	str	r2, [r3, #8]
      break;
 8005390:	e04c      	b.n	800542c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6818      	ldr	r0, [r3, #0]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	6899      	ldr	r1, [r3, #8]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f000 fad7 	bl	8005954 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053b4:	609a      	str	r2, [r3, #8]
      break;
 80053b6:	e039      	b.n	800542c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6818      	ldr	r0, [r3, #0]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	6859      	ldr	r1, [r3, #4]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	461a      	mov	r2, r3
 80053c6:	f000 fa4b 	bl	8005860 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2150      	movs	r1, #80	; 0x50
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 faa4 	bl	800591e <TIM_ITRx_SetConfig>
      break;
 80053d6:	e029      	b.n	800542c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6818      	ldr	r0, [r3, #0]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	6859      	ldr	r1, [r3, #4]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	461a      	mov	r2, r3
 80053e6:	f000 fa6a 	bl	80058be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2160      	movs	r1, #96	; 0x60
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 fa94 	bl	800591e <TIM_ITRx_SetConfig>
      break;
 80053f6:	e019      	b.n	800542c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6818      	ldr	r0, [r3, #0]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	6859      	ldr	r1, [r3, #4]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	461a      	mov	r2, r3
 8005406:	f000 fa2b 	bl	8005860 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2140      	movs	r1, #64	; 0x40
 8005410:	4618      	mov	r0, r3
 8005412:	f000 fa84 	bl	800591e <TIM_ITRx_SetConfig>
      break;
 8005416:	e009      	b.n	800542c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4619      	mov	r1, r3
 8005422:	4610      	mov	r0, r2
 8005424:	f000 fa7b 	bl	800591e <TIM_ITRx_SetConfig>
      break;
 8005428:	e000      	b.n	800542c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800542a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
	...

08005448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a34      	ldr	r2, [pc, #208]	; (800552c <TIM_Base_SetConfig+0xe4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d00f      	beq.n	8005480 <TIM_Base_SetConfig+0x38>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005466:	d00b      	beq.n	8005480 <TIM_Base_SetConfig+0x38>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a31      	ldr	r2, [pc, #196]	; (8005530 <TIM_Base_SetConfig+0xe8>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d007      	beq.n	8005480 <TIM_Base_SetConfig+0x38>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a30      	ldr	r2, [pc, #192]	; (8005534 <TIM_Base_SetConfig+0xec>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d003      	beq.n	8005480 <TIM_Base_SetConfig+0x38>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a2f      	ldr	r2, [pc, #188]	; (8005538 <TIM_Base_SetConfig+0xf0>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d108      	bne.n	8005492 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005486:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	4313      	orrs	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a25      	ldr	r2, [pc, #148]	; (800552c <TIM_Base_SetConfig+0xe4>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d01b      	beq.n	80054d2 <TIM_Base_SetConfig+0x8a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a0:	d017      	beq.n	80054d2 <TIM_Base_SetConfig+0x8a>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a22      	ldr	r2, [pc, #136]	; (8005530 <TIM_Base_SetConfig+0xe8>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d013      	beq.n	80054d2 <TIM_Base_SetConfig+0x8a>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a21      	ldr	r2, [pc, #132]	; (8005534 <TIM_Base_SetConfig+0xec>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d00f      	beq.n	80054d2 <TIM_Base_SetConfig+0x8a>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a20      	ldr	r2, [pc, #128]	; (8005538 <TIM_Base_SetConfig+0xf0>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00b      	beq.n	80054d2 <TIM_Base_SetConfig+0x8a>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a1f      	ldr	r2, [pc, #124]	; (800553c <TIM_Base_SetConfig+0xf4>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d007      	beq.n	80054d2 <TIM_Base_SetConfig+0x8a>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a1e      	ldr	r2, [pc, #120]	; (8005540 <TIM_Base_SetConfig+0xf8>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d003      	beq.n	80054d2 <TIM_Base_SetConfig+0x8a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a1d      	ldr	r2, [pc, #116]	; (8005544 <TIM_Base_SetConfig+0xfc>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d108      	bne.n	80054e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a08      	ldr	r2, [pc, #32]	; (800552c <TIM_Base_SetConfig+0xe4>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d103      	bne.n	8005518 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	691a      	ldr	r2, [r3, #16]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	615a      	str	r2, [r3, #20]
}
 800551e:	bf00      	nop
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	40010000 	.word	0x40010000
 8005530:	40000400 	.word	0x40000400
 8005534:	40000800 	.word	0x40000800
 8005538:	40000c00 	.word	0x40000c00
 800553c:	40014000 	.word	0x40014000
 8005540:	40014400 	.word	0x40014400
 8005544:	40014800 	.word	0x40014800

08005548 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005548:	b480      	push	{r7}
 800554a:	b087      	sub	sp, #28
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	f023 0201 	bic.w	r2, r3, #1
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0303 	bic.w	r3, r3, #3
 800557e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4313      	orrs	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f023 0302 	bic.w	r3, r3, #2
 8005590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	4313      	orrs	r3, r2
 800559a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a1c      	ldr	r2, [pc, #112]	; (8005610 <TIM_OC1_SetConfig+0xc8>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d10c      	bne.n	80055be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f023 0308 	bic.w	r3, r3, #8
 80055aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f023 0304 	bic.w	r3, r3, #4
 80055bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a13      	ldr	r2, [pc, #76]	; (8005610 <TIM_OC1_SetConfig+0xc8>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d111      	bne.n	80055ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	4313      	orrs	r3, r2
 80055de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	621a      	str	r2, [r3, #32]
}
 8005604:	bf00      	nop
 8005606:	371c      	adds	r7, #28
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	40010000 	.word	0x40010000

08005614 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	f023 0210 	bic.w	r2, r3, #16
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800564a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	021b      	lsls	r3, r3, #8
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	4313      	orrs	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f023 0320 	bic.w	r3, r3, #32
 800565e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	011b      	lsls	r3, r3, #4
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	4313      	orrs	r3, r2
 800566a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a1e      	ldr	r2, [pc, #120]	; (80056e8 <TIM_OC2_SetConfig+0xd4>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d10d      	bne.n	8005690 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800567a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	011b      	lsls	r3, r3, #4
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	4313      	orrs	r3, r2
 8005686:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800568e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a15      	ldr	r2, [pc, #84]	; (80056e8 <TIM_OC2_SetConfig+0xd4>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d113      	bne.n	80056c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800569e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	4313      	orrs	r3, r2
 80056be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	621a      	str	r2, [r3, #32]
}
 80056da:	bf00      	nop
 80056dc:	371c      	adds	r7, #28
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	40010000 	.word	0x40010000

080056ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0303 	bic.w	r3, r3, #3
 8005722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	021b      	lsls	r3, r3, #8
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a1d      	ldr	r2, [pc, #116]	; (80057bc <TIM_OC3_SetConfig+0xd0>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d10d      	bne.n	8005766 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005750:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	021b      	lsls	r3, r3, #8
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	4313      	orrs	r3, r2
 800575c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005764:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a14      	ldr	r2, [pc, #80]	; (80057bc <TIM_OC3_SetConfig+0xd0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d113      	bne.n	8005796 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800577c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	4313      	orrs	r3, r2
 8005788:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	011b      	lsls	r3, r3, #4
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	621a      	str	r2, [r3, #32]
}
 80057b0:	bf00      	nop
 80057b2:	371c      	adds	r7, #28
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	40010000 	.word	0x40010000

080057c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	021b      	lsls	r3, r3, #8
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4313      	orrs	r3, r2
 8005802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800580a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	031b      	lsls	r3, r3, #12
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	4313      	orrs	r3, r2
 8005816:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a10      	ldr	r2, [pc, #64]	; (800585c <TIM_OC4_SetConfig+0x9c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d109      	bne.n	8005834 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005826:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	019b      	lsls	r3, r3, #6
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	4313      	orrs	r3, r2
 8005832:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	621a      	str	r2, [r3, #32]
}
 800584e:	bf00      	nop
 8005850:	371c      	adds	r7, #28
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	40010000 	.word	0x40010000

08005860 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005860:	b480      	push	{r7}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	f023 0201 	bic.w	r2, r3, #1
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800588a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	011b      	lsls	r3, r3, #4
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	4313      	orrs	r3, r2
 8005894:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f023 030a 	bic.w	r3, r3, #10
 800589c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800589e:	697a      	ldr	r2, [r7, #20]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	621a      	str	r2, [r3, #32]
}
 80058b2:	bf00      	nop
 80058b4:	371c      	adds	r7, #28
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058be:	b480      	push	{r7}
 80058c0:	b087      	sub	sp, #28
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	60f8      	str	r0, [r7, #12]
 80058c6:	60b9      	str	r1, [r7, #8]
 80058c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	f023 0210 	bic.w	r2, r3, #16
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	031b      	lsls	r3, r3, #12
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	011b      	lsls	r3, r3, #4
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	4313      	orrs	r3, r2
 8005904:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	621a      	str	r2, [r3, #32]
}
 8005912:	bf00      	nop
 8005914:	371c      	adds	r7, #28
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800591e:	b480      	push	{r7}
 8005920:	b085      	sub	sp, #20
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005934:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4313      	orrs	r3, r2
 800593c:	f043 0307 	orr.w	r3, r3, #7
 8005940:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	609a      	str	r2, [r3, #8]
}
 8005948:	bf00      	nop
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
 8005960:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800596e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	021a      	lsls	r2, r3, #8
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	431a      	orrs	r2, r3
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	4313      	orrs	r3, r2
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	4313      	orrs	r3, r2
 8005980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	609a      	str	r2, [r3, #8]
}
 8005988:	bf00      	nop
 800598a:	371c      	adds	r7, #28
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	f003 031f 	and.w	r3, r3, #31
 80059a6:	2201      	movs	r2, #1
 80059a8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6a1a      	ldr	r2, [r3, #32]
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	43db      	mvns	r3, r3
 80059b6:	401a      	ands	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6a1a      	ldr	r2, [r3, #32]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	f003 031f 	and.w	r3, r3, #31
 80059c6:	6879      	ldr	r1, [r7, #4]
 80059c8:	fa01 f303 	lsl.w	r3, r1, r3
 80059cc:	431a      	orrs	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	621a      	str	r2, [r3, #32]
}
 80059d2:	bf00      	nop
 80059d4:	371c      	adds	r7, #28
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
	...

080059e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d101      	bne.n	80059f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059f4:	2302      	movs	r3, #2
 80059f6:	e050      	b.n	8005a9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a1c      	ldr	r2, [pc, #112]	; (8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d018      	beq.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a44:	d013      	beq.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a18      	ldr	r2, [pc, #96]	; (8005aac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d00e      	beq.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a16      	ldr	r2, [pc, #88]	; (8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d009      	beq.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a15      	ldr	r2, [pc, #84]	; (8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d004      	beq.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a13      	ldr	r2, [pc, #76]	; (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d10c      	bne.n	8005a88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	40010000 	.word	0x40010000
 8005aac:	40000400 	.word	0x40000400
 8005ab0:	40000800 	.word	0x40000800
 8005ab4:	40000c00 	.word	0x40000c00
 8005ab8:	40014000 	.word	0x40014000

08005abc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e03f      	b.n	8005b4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d106      	bne.n	8005ae8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7fd fa3c 	bl	8002f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2224      	movs	r2, #36	; 0x24
 8005aec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005afe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f90b 	bl	8005d1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	691a      	ldr	r2, [r3, #16]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	695a      	ldr	r2, [r3, #20]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68da      	ldr	r2, [r3, #12]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2220      	movs	r2, #32
 8005b48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3708      	adds	r7, #8
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b088      	sub	sp, #32
 8005b5a:	af02      	add	r7, sp, #8
 8005b5c:	60f8      	str	r0, [r7, #12]
 8005b5e:	60b9      	str	r1, [r7, #8]
 8005b60:	603b      	str	r3, [r7, #0]
 8005b62:	4613      	mov	r3, r2
 8005b64:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b20      	cmp	r3, #32
 8005b74:	f040 8083 	bne.w	8005c7e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d002      	beq.n	8005b84 <HAL_UART_Transmit+0x2e>
 8005b7e:	88fb      	ldrh	r3, [r7, #6]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e07b      	b.n	8005c80 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d101      	bne.n	8005b96 <HAL_UART_Transmit+0x40>
 8005b92:	2302      	movs	r3, #2
 8005b94:	e074      	b.n	8005c80 <HAL_UART_Transmit+0x12a>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2221      	movs	r2, #33	; 0x21
 8005ba8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005bac:	f7fd fab0 	bl	8003110 <HAL_GetTick>
 8005bb0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	88fa      	ldrh	r2, [r7, #6]
 8005bb6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	88fa      	ldrh	r2, [r7, #6]
 8005bbc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005bc6:	e042      	b.n	8005c4e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bde:	d122      	bne.n	8005c26 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	2200      	movs	r2, #0
 8005be8:	2180      	movs	r1, #128	; 0x80
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 f84c 	bl	8005c88 <UART_WaitOnFlagUntilTimeout>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e042      	b.n	8005c80 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	461a      	mov	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c0c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d103      	bne.n	8005c1e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	3302      	adds	r3, #2
 8005c1a:	60bb      	str	r3, [r7, #8]
 8005c1c:	e017      	b.n	8005c4e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	3301      	adds	r3, #1
 8005c22:	60bb      	str	r3, [r7, #8]
 8005c24:	e013      	b.n	8005c4e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2180      	movs	r1, #128	; 0x80
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 f829 	bl	8005c88 <UART_WaitOnFlagUntilTimeout>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e01f      	b.n	8005c80 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	1c5a      	adds	r2, r3, #1
 8005c44:	60ba      	str	r2, [r7, #8]
 8005c46:	781a      	ldrb	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1b7      	bne.n	8005bc8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	2140      	movs	r1, #64	; 0x40
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 f810 	bl	8005c88 <UART_WaitOnFlagUntilTimeout>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e006      	b.n	8005c80 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2220      	movs	r2, #32
 8005c76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	e000      	b.n	8005c80 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005c7e:	2302      	movs	r3, #2
  }
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	603b      	str	r3, [r7, #0]
 8005c94:	4613      	mov	r3, r2
 8005c96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c98:	e02c      	b.n	8005cf4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca0:	d028      	beq.n	8005cf4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d007      	beq.n	8005cb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ca8:	f7fd fa32 	bl	8003110 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d21d      	bcs.n	8005cf4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005cc6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695a      	ldr	r2, [r3, #20]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 0201 	bic.w	r2, r2, #1
 8005cd6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e00f      	b.n	8005d14 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	bf0c      	ite	eq
 8005d04:	2301      	moveq	r3, #1
 8005d06:	2300      	movne	r3, #0
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	79fb      	ldrb	r3, [r7, #7]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d0c3      	beq.n	8005c9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d20:	b085      	sub	sp, #20
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68da      	ldr	r2, [r3, #12]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	431a      	orrs	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005d5e:	f023 030c 	bic.w	r3, r3, #12
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	6812      	ldr	r2, [r2, #0]
 8005d66:	68f9      	ldr	r1, [r7, #12]
 8005d68:	430b      	orrs	r3, r1
 8005d6a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	699a      	ldr	r2, [r3, #24]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d8a:	f040 818b 	bne.w	80060a4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4ac1      	ldr	r2, [pc, #772]	; (8006098 <UART_SetConfig+0x37c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d005      	beq.n	8005da4 <UART_SetConfig+0x88>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4abf      	ldr	r2, [pc, #764]	; (800609c <UART_SetConfig+0x380>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	f040 80bd 	bne.w	8005f1e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005da4:	f7ff f862 	bl	8004e6c <HAL_RCC_GetPCLK2Freq>
 8005da8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	461d      	mov	r5, r3
 8005dae:	f04f 0600 	mov.w	r6, #0
 8005db2:	46a8      	mov	r8, r5
 8005db4:	46b1      	mov	r9, r6
 8005db6:	eb18 0308 	adds.w	r3, r8, r8
 8005dba:	eb49 0409 	adc.w	r4, r9, r9
 8005dbe:	4698      	mov	r8, r3
 8005dc0:	46a1      	mov	r9, r4
 8005dc2:	eb18 0805 	adds.w	r8, r8, r5
 8005dc6:	eb49 0906 	adc.w	r9, r9, r6
 8005dca:	f04f 0100 	mov.w	r1, #0
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005dd6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005dda:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005dde:	4688      	mov	r8, r1
 8005de0:	4691      	mov	r9, r2
 8005de2:	eb18 0005 	adds.w	r0, r8, r5
 8005de6:	eb49 0106 	adc.w	r1, r9, r6
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	461d      	mov	r5, r3
 8005df0:	f04f 0600 	mov.w	r6, #0
 8005df4:	196b      	adds	r3, r5, r5
 8005df6:	eb46 0406 	adc.w	r4, r6, r6
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	4623      	mov	r3, r4
 8005dfe:	f7fa fcd3 	bl	80007a8 <__aeabi_uldivmod>
 8005e02:	4603      	mov	r3, r0
 8005e04:	460c      	mov	r4, r1
 8005e06:	461a      	mov	r2, r3
 8005e08:	4ba5      	ldr	r3, [pc, #660]	; (80060a0 <UART_SetConfig+0x384>)
 8005e0a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e0e:	095b      	lsrs	r3, r3, #5
 8005e10:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	461d      	mov	r5, r3
 8005e18:	f04f 0600 	mov.w	r6, #0
 8005e1c:	46a9      	mov	r9, r5
 8005e1e:	46b2      	mov	sl, r6
 8005e20:	eb19 0309 	adds.w	r3, r9, r9
 8005e24:	eb4a 040a 	adc.w	r4, sl, sl
 8005e28:	4699      	mov	r9, r3
 8005e2a:	46a2      	mov	sl, r4
 8005e2c:	eb19 0905 	adds.w	r9, r9, r5
 8005e30:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e34:	f04f 0100 	mov.w	r1, #0
 8005e38:	f04f 0200 	mov.w	r2, #0
 8005e3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e48:	4689      	mov	r9, r1
 8005e4a:	4692      	mov	sl, r2
 8005e4c:	eb19 0005 	adds.w	r0, r9, r5
 8005e50:	eb4a 0106 	adc.w	r1, sl, r6
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	461d      	mov	r5, r3
 8005e5a:	f04f 0600 	mov.w	r6, #0
 8005e5e:	196b      	adds	r3, r5, r5
 8005e60:	eb46 0406 	adc.w	r4, r6, r6
 8005e64:	461a      	mov	r2, r3
 8005e66:	4623      	mov	r3, r4
 8005e68:	f7fa fc9e 	bl	80007a8 <__aeabi_uldivmod>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	460c      	mov	r4, r1
 8005e70:	461a      	mov	r2, r3
 8005e72:	4b8b      	ldr	r3, [pc, #556]	; (80060a0 <UART_SetConfig+0x384>)
 8005e74:	fba3 1302 	umull	r1, r3, r3, r2
 8005e78:	095b      	lsrs	r3, r3, #5
 8005e7a:	2164      	movs	r1, #100	; 0x64
 8005e7c:	fb01 f303 	mul.w	r3, r1, r3
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	00db      	lsls	r3, r3, #3
 8005e84:	3332      	adds	r3, #50	; 0x32
 8005e86:	4a86      	ldr	r2, [pc, #536]	; (80060a0 <UART_SetConfig+0x384>)
 8005e88:	fba2 2303 	umull	r2, r3, r2, r3
 8005e8c:	095b      	lsrs	r3, r3, #5
 8005e8e:	005b      	lsls	r3, r3, #1
 8005e90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e94:	4498      	add	r8, r3
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	461d      	mov	r5, r3
 8005e9a:	f04f 0600 	mov.w	r6, #0
 8005e9e:	46a9      	mov	r9, r5
 8005ea0:	46b2      	mov	sl, r6
 8005ea2:	eb19 0309 	adds.w	r3, r9, r9
 8005ea6:	eb4a 040a 	adc.w	r4, sl, sl
 8005eaa:	4699      	mov	r9, r3
 8005eac:	46a2      	mov	sl, r4
 8005eae:	eb19 0905 	adds.w	r9, r9, r5
 8005eb2:	eb4a 0a06 	adc.w	sl, sl, r6
 8005eb6:	f04f 0100 	mov.w	r1, #0
 8005eba:	f04f 0200 	mov.w	r2, #0
 8005ebe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ec2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ec6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005eca:	4689      	mov	r9, r1
 8005ecc:	4692      	mov	sl, r2
 8005ece:	eb19 0005 	adds.w	r0, r9, r5
 8005ed2:	eb4a 0106 	adc.w	r1, sl, r6
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	461d      	mov	r5, r3
 8005edc:	f04f 0600 	mov.w	r6, #0
 8005ee0:	196b      	adds	r3, r5, r5
 8005ee2:	eb46 0406 	adc.w	r4, r6, r6
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	4623      	mov	r3, r4
 8005eea:	f7fa fc5d 	bl	80007a8 <__aeabi_uldivmod>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	460c      	mov	r4, r1
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	4b6a      	ldr	r3, [pc, #424]	; (80060a0 <UART_SetConfig+0x384>)
 8005ef6:	fba3 1302 	umull	r1, r3, r3, r2
 8005efa:	095b      	lsrs	r3, r3, #5
 8005efc:	2164      	movs	r1, #100	; 0x64
 8005efe:	fb01 f303 	mul.w	r3, r1, r3
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	00db      	lsls	r3, r3, #3
 8005f06:	3332      	adds	r3, #50	; 0x32
 8005f08:	4a65      	ldr	r2, [pc, #404]	; (80060a0 <UART_SetConfig+0x384>)
 8005f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0e:	095b      	lsrs	r3, r3, #5
 8005f10:	f003 0207 	and.w	r2, r3, #7
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4442      	add	r2, r8
 8005f1a:	609a      	str	r2, [r3, #8]
 8005f1c:	e26f      	b.n	80063fe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f1e:	f7fe ff91 	bl	8004e44 <HAL_RCC_GetPCLK1Freq>
 8005f22:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	461d      	mov	r5, r3
 8005f28:	f04f 0600 	mov.w	r6, #0
 8005f2c:	46a8      	mov	r8, r5
 8005f2e:	46b1      	mov	r9, r6
 8005f30:	eb18 0308 	adds.w	r3, r8, r8
 8005f34:	eb49 0409 	adc.w	r4, r9, r9
 8005f38:	4698      	mov	r8, r3
 8005f3a:	46a1      	mov	r9, r4
 8005f3c:	eb18 0805 	adds.w	r8, r8, r5
 8005f40:	eb49 0906 	adc.w	r9, r9, r6
 8005f44:	f04f 0100 	mov.w	r1, #0
 8005f48:	f04f 0200 	mov.w	r2, #0
 8005f4c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f50:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f54:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f58:	4688      	mov	r8, r1
 8005f5a:	4691      	mov	r9, r2
 8005f5c:	eb18 0005 	adds.w	r0, r8, r5
 8005f60:	eb49 0106 	adc.w	r1, r9, r6
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	461d      	mov	r5, r3
 8005f6a:	f04f 0600 	mov.w	r6, #0
 8005f6e:	196b      	adds	r3, r5, r5
 8005f70:	eb46 0406 	adc.w	r4, r6, r6
 8005f74:	461a      	mov	r2, r3
 8005f76:	4623      	mov	r3, r4
 8005f78:	f7fa fc16 	bl	80007a8 <__aeabi_uldivmod>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	460c      	mov	r4, r1
 8005f80:	461a      	mov	r2, r3
 8005f82:	4b47      	ldr	r3, [pc, #284]	; (80060a0 <UART_SetConfig+0x384>)
 8005f84:	fba3 2302 	umull	r2, r3, r3, r2
 8005f88:	095b      	lsrs	r3, r3, #5
 8005f8a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	461d      	mov	r5, r3
 8005f92:	f04f 0600 	mov.w	r6, #0
 8005f96:	46a9      	mov	r9, r5
 8005f98:	46b2      	mov	sl, r6
 8005f9a:	eb19 0309 	adds.w	r3, r9, r9
 8005f9e:	eb4a 040a 	adc.w	r4, sl, sl
 8005fa2:	4699      	mov	r9, r3
 8005fa4:	46a2      	mov	sl, r4
 8005fa6:	eb19 0905 	adds.w	r9, r9, r5
 8005faa:	eb4a 0a06 	adc.w	sl, sl, r6
 8005fae:	f04f 0100 	mov.w	r1, #0
 8005fb2:	f04f 0200 	mov.w	r2, #0
 8005fb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fbe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fc2:	4689      	mov	r9, r1
 8005fc4:	4692      	mov	sl, r2
 8005fc6:	eb19 0005 	adds.w	r0, r9, r5
 8005fca:	eb4a 0106 	adc.w	r1, sl, r6
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	461d      	mov	r5, r3
 8005fd4:	f04f 0600 	mov.w	r6, #0
 8005fd8:	196b      	adds	r3, r5, r5
 8005fda:	eb46 0406 	adc.w	r4, r6, r6
 8005fde:	461a      	mov	r2, r3
 8005fe0:	4623      	mov	r3, r4
 8005fe2:	f7fa fbe1 	bl	80007a8 <__aeabi_uldivmod>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	460c      	mov	r4, r1
 8005fea:	461a      	mov	r2, r3
 8005fec:	4b2c      	ldr	r3, [pc, #176]	; (80060a0 <UART_SetConfig+0x384>)
 8005fee:	fba3 1302 	umull	r1, r3, r3, r2
 8005ff2:	095b      	lsrs	r3, r3, #5
 8005ff4:	2164      	movs	r1, #100	; 0x64
 8005ff6:	fb01 f303 	mul.w	r3, r1, r3
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	00db      	lsls	r3, r3, #3
 8005ffe:	3332      	adds	r3, #50	; 0x32
 8006000:	4a27      	ldr	r2, [pc, #156]	; (80060a0 <UART_SetConfig+0x384>)
 8006002:	fba2 2303 	umull	r2, r3, r2, r3
 8006006:	095b      	lsrs	r3, r3, #5
 8006008:	005b      	lsls	r3, r3, #1
 800600a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800600e:	4498      	add	r8, r3
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	461d      	mov	r5, r3
 8006014:	f04f 0600 	mov.w	r6, #0
 8006018:	46a9      	mov	r9, r5
 800601a:	46b2      	mov	sl, r6
 800601c:	eb19 0309 	adds.w	r3, r9, r9
 8006020:	eb4a 040a 	adc.w	r4, sl, sl
 8006024:	4699      	mov	r9, r3
 8006026:	46a2      	mov	sl, r4
 8006028:	eb19 0905 	adds.w	r9, r9, r5
 800602c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006030:	f04f 0100 	mov.w	r1, #0
 8006034:	f04f 0200 	mov.w	r2, #0
 8006038:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800603c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006040:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006044:	4689      	mov	r9, r1
 8006046:	4692      	mov	sl, r2
 8006048:	eb19 0005 	adds.w	r0, r9, r5
 800604c:	eb4a 0106 	adc.w	r1, sl, r6
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	461d      	mov	r5, r3
 8006056:	f04f 0600 	mov.w	r6, #0
 800605a:	196b      	adds	r3, r5, r5
 800605c:	eb46 0406 	adc.w	r4, r6, r6
 8006060:	461a      	mov	r2, r3
 8006062:	4623      	mov	r3, r4
 8006064:	f7fa fba0 	bl	80007a8 <__aeabi_uldivmod>
 8006068:	4603      	mov	r3, r0
 800606a:	460c      	mov	r4, r1
 800606c:	461a      	mov	r2, r3
 800606e:	4b0c      	ldr	r3, [pc, #48]	; (80060a0 <UART_SetConfig+0x384>)
 8006070:	fba3 1302 	umull	r1, r3, r3, r2
 8006074:	095b      	lsrs	r3, r3, #5
 8006076:	2164      	movs	r1, #100	; 0x64
 8006078:	fb01 f303 	mul.w	r3, r1, r3
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	00db      	lsls	r3, r3, #3
 8006080:	3332      	adds	r3, #50	; 0x32
 8006082:	4a07      	ldr	r2, [pc, #28]	; (80060a0 <UART_SetConfig+0x384>)
 8006084:	fba2 2303 	umull	r2, r3, r2, r3
 8006088:	095b      	lsrs	r3, r3, #5
 800608a:	f003 0207 	and.w	r2, r3, #7
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4442      	add	r2, r8
 8006094:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006096:	e1b2      	b.n	80063fe <UART_SetConfig+0x6e2>
 8006098:	40011000 	.word	0x40011000
 800609c:	40011400 	.word	0x40011400
 80060a0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4ad7      	ldr	r2, [pc, #860]	; (8006408 <UART_SetConfig+0x6ec>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d005      	beq.n	80060ba <UART_SetConfig+0x39e>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4ad6      	ldr	r2, [pc, #856]	; (800640c <UART_SetConfig+0x6f0>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	f040 80d1 	bne.w	800625c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80060ba:	f7fe fed7 	bl	8004e6c <HAL_RCC_GetPCLK2Freq>
 80060be:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	469a      	mov	sl, r3
 80060c4:	f04f 0b00 	mov.w	fp, #0
 80060c8:	46d0      	mov	r8, sl
 80060ca:	46d9      	mov	r9, fp
 80060cc:	eb18 0308 	adds.w	r3, r8, r8
 80060d0:	eb49 0409 	adc.w	r4, r9, r9
 80060d4:	4698      	mov	r8, r3
 80060d6:	46a1      	mov	r9, r4
 80060d8:	eb18 080a 	adds.w	r8, r8, sl
 80060dc:	eb49 090b 	adc.w	r9, r9, fp
 80060e0:	f04f 0100 	mov.w	r1, #0
 80060e4:	f04f 0200 	mov.w	r2, #0
 80060e8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80060ec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060f0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80060f4:	4688      	mov	r8, r1
 80060f6:	4691      	mov	r9, r2
 80060f8:	eb1a 0508 	adds.w	r5, sl, r8
 80060fc:	eb4b 0609 	adc.w	r6, fp, r9
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	4619      	mov	r1, r3
 8006106:	f04f 0200 	mov.w	r2, #0
 800610a:	f04f 0300 	mov.w	r3, #0
 800610e:	f04f 0400 	mov.w	r4, #0
 8006112:	0094      	lsls	r4, r2, #2
 8006114:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006118:	008b      	lsls	r3, r1, #2
 800611a:	461a      	mov	r2, r3
 800611c:	4623      	mov	r3, r4
 800611e:	4628      	mov	r0, r5
 8006120:	4631      	mov	r1, r6
 8006122:	f7fa fb41 	bl	80007a8 <__aeabi_uldivmod>
 8006126:	4603      	mov	r3, r0
 8006128:	460c      	mov	r4, r1
 800612a:	461a      	mov	r2, r3
 800612c:	4bb8      	ldr	r3, [pc, #736]	; (8006410 <UART_SetConfig+0x6f4>)
 800612e:	fba3 2302 	umull	r2, r3, r3, r2
 8006132:	095b      	lsrs	r3, r3, #5
 8006134:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	469b      	mov	fp, r3
 800613c:	f04f 0c00 	mov.w	ip, #0
 8006140:	46d9      	mov	r9, fp
 8006142:	46e2      	mov	sl, ip
 8006144:	eb19 0309 	adds.w	r3, r9, r9
 8006148:	eb4a 040a 	adc.w	r4, sl, sl
 800614c:	4699      	mov	r9, r3
 800614e:	46a2      	mov	sl, r4
 8006150:	eb19 090b 	adds.w	r9, r9, fp
 8006154:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006158:	f04f 0100 	mov.w	r1, #0
 800615c:	f04f 0200 	mov.w	r2, #0
 8006160:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006164:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006168:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800616c:	4689      	mov	r9, r1
 800616e:	4692      	mov	sl, r2
 8006170:	eb1b 0509 	adds.w	r5, fp, r9
 8006174:	eb4c 060a 	adc.w	r6, ip, sl
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	4619      	mov	r1, r3
 800617e:	f04f 0200 	mov.w	r2, #0
 8006182:	f04f 0300 	mov.w	r3, #0
 8006186:	f04f 0400 	mov.w	r4, #0
 800618a:	0094      	lsls	r4, r2, #2
 800618c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006190:	008b      	lsls	r3, r1, #2
 8006192:	461a      	mov	r2, r3
 8006194:	4623      	mov	r3, r4
 8006196:	4628      	mov	r0, r5
 8006198:	4631      	mov	r1, r6
 800619a:	f7fa fb05 	bl	80007a8 <__aeabi_uldivmod>
 800619e:	4603      	mov	r3, r0
 80061a0:	460c      	mov	r4, r1
 80061a2:	461a      	mov	r2, r3
 80061a4:	4b9a      	ldr	r3, [pc, #616]	; (8006410 <UART_SetConfig+0x6f4>)
 80061a6:	fba3 1302 	umull	r1, r3, r3, r2
 80061aa:	095b      	lsrs	r3, r3, #5
 80061ac:	2164      	movs	r1, #100	; 0x64
 80061ae:	fb01 f303 	mul.w	r3, r1, r3
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	011b      	lsls	r3, r3, #4
 80061b6:	3332      	adds	r3, #50	; 0x32
 80061b8:	4a95      	ldr	r2, [pc, #596]	; (8006410 <UART_SetConfig+0x6f4>)
 80061ba:	fba2 2303 	umull	r2, r3, r2, r3
 80061be:	095b      	lsrs	r3, r3, #5
 80061c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061c4:	4498      	add	r8, r3
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	469b      	mov	fp, r3
 80061ca:	f04f 0c00 	mov.w	ip, #0
 80061ce:	46d9      	mov	r9, fp
 80061d0:	46e2      	mov	sl, ip
 80061d2:	eb19 0309 	adds.w	r3, r9, r9
 80061d6:	eb4a 040a 	adc.w	r4, sl, sl
 80061da:	4699      	mov	r9, r3
 80061dc:	46a2      	mov	sl, r4
 80061de:	eb19 090b 	adds.w	r9, r9, fp
 80061e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80061e6:	f04f 0100 	mov.w	r1, #0
 80061ea:	f04f 0200 	mov.w	r2, #0
 80061ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061fa:	4689      	mov	r9, r1
 80061fc:	4692      	mov	sl, r2
 80061fe:	eb1b 0509 	adds.w	r5, fp, r9
 8006202:	eb4c 060a 	adc.w	r6, ip, sl
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	4619      	mov	r1, r3
 800620c:	f04f 0200 	mov.w	r2, #0
 8006210:	f04f 0300 	mov.w	r3, #0
 8006214:	f04f 0400 	mov.w	r4, #0
 8006218:	0094      	lsls	r4, r2, #2
 800621a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800621e:	008b      	lsls	r3, r1, #2
 8006220:	461a      	mov	r2, r3
 8006222:	4623      	mov	r3, r4
 8006224:	4628      	mov	r0, r5
 8006226:	4631      	mov	r1, r6
 8006228:	f7fa fabe 	bl	80007a8 <__aeabi_uldivmod>
 800622c:	4603      	mov	r3, r0
 800622e:	460c      	mov	r4, r1
 8006230:	461a      	mov	r2, r3
 8006232:	4b77      	ldr	r3, [pc, #476]	; (8006410 <UART_SetConfig+0x6f4>)
 8006234:	fba3 1302 	umull	r1, r3, r3, r2
 8006238:	095b      	lsrs	r3, r3, #5
 800623a:	2164      	movs	r1, #100	; 0x64
 800623c:	fb01 f303 	mul.w	r3, r1, r3
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	011b      	lsls	r3, r3, #4
 8006244:	3332      	adds	r3, #50	; 0x32
 8006246:	4a72      	ldr	r2, [pc, #456]	; (8006410 <UART_SetConfig+0x6f4>)
 8006248:	fba2 2303 	umull	r2, r3, r2, r3
 800624c:	095b      	lsrs	r3, r3, #5
 800624e:	f003 020f 	and.w	r2, r3, #15
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4442      	add	r2, r8
 8006258:	609a      	str	r2, [r3, #8]
 800625a:	e0d0      	b.n	80063fe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800625c:	f7fe fdf2 	bl	8004e44 <HAL_RCC_GetPCLK1Freq>
 8006260:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	469a      	mov	sl, r3
 8006266:	f04f 0b00 	mov.w	fp, #0
 800626a:	46d0      	mov	r8, sl
 800626c:	46d9      	mov	r9, fp
 800626e:	eb18 0308 	adds.w	r3, r8, r8
 8006272:	eb49 0409 	adc.w	r4, r9, r9
 8006276:	4698      	mov	r8, r3
 8006278:	46a1      	mov	r9, r4
 800627a:	eb18 080a 	adds.w	r8, r8, sl
 800627e:	eb49 090b 	adc.w	r9, r9, fp
 8006282:	f04f 0100 	mov.w	r1, #0
 8006286:	f04f 0200 	mov.w	r2, #0
 800628a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800628e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006292:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006296:	4688      	mov	r8, r1
 8006298:	4691      	mov	r9, r2
 800629a:	eb1a 0508 	adds.w	r5, sl, r8
 800629e:	eb4b 0609 	adc.w	r6, fp, r9
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	4619      	mov	r1, r3
 80062a8:	f04f 0200 	mov.w	r2, #0
 80062ac:	f04f 0300 	mov.w	r3, #0
 80062b0:	f04f 0400 	mov.w	r4, #0
 80062b4:	0094      	lsls	r4, r2, #2
 80062b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062ba:	008b      	lsls	r3, r1, #2
 80062bc:	461a      	mov	r2, r3
 80062be:	4623      	mov	r3, r4
 80062c0:	4628      	mov	r0, r5
 80062c2:	4631      	mov	r1, r6
 80062c4:	f7fa fa70 	bl	80007a8 <__aeabi_uldivmod>
 80062c8:	4603      	mov	r3, r0
 80062ca:	460c      	mov	r4, r1
 80062cc:	461a      	mov	r2, r3
 80062ce:	4b50      	ldr	r3, [pc, #320]	; (8006410 <UART_SetConfig+0x6f4>)
 80062d0:	fba3 2302 	umull	r2, r3, r3, r2
 80062d4:	095b      	lsrs	r3, r3, #5
 80062d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	469b      	mov	fp, r3
 80062de:	f04f 0c00 	mov.w	ip, #0
 80062e2:	46d9      	mov	r9, fp
 80062e4:	46e2      	mov	sl, ip
 80062e6:	eb19 0309 	adds.w	r3, r9, r9
 80062ea:	eb4a 040a 	adc.w	r4, sl, sl
 80062ee:	4699      	mov	r9, r3
 80062f0:	46a2      	mov	sl, r4
 80062f2:	eb19 090b 	adds.w	r9, r9, fp
 80062f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80062fa:	f04f 0100 	mov.w	r1, #0
 80062fe:	f04f 0200 	mov.w	r2, #0
 8006302:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006306:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800630a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800630e:	4689      	mov	r9, r1
 8006310:	4692      	mov	sl, r2
 8006312:	eb1b 0509 	adds.w	r5, fp, r9
 8006316:	eb4c 060a 	adc.w	r6, ip, sl
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	4619      	mov	r1, r3
 8006320:	f04f 0200 	mov.w	r2, #0
 8006324:	f04f 0300 	mov.w	r3, #0
 8006328:	f04f 0400 	mov.w	r4, #0
 800632c:	0094      	lsls	r4, r2, #2
 800632e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006332:	008b      	lsls	r3, r1, #2
 8006334:	461a      	mov	r2, r3
 8006336:	4623      	mov	r3, r4
 8006338:	4628      	mov	r0, r5
 800633a:	4631      	mov	r1, r6
 800633c:	f7fa fa34 	bl	80007a8 <__aeabi_uldivmod>
 8006340:	4603      	mov	r3, r0
 8006342:	460c      	mov	r4, r1
 8006344:	461a      	mov	r2, r3
 8006346:	4b32      	ldr	r3, [pc, #200]	; (8006410 <UART_SetConfig+0x6f4>)
 8006348:	fba3 1302 	umull	r1, r3, r3, r2
 800634c:	095b      	lsrs	r3, r3, #5
 800634e:	2164      	movs	r1, #100	; 0x64
 8006350:	fb01 f303 	mul.w	r3, r1, r3
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	011b      	lsls	r3, r3, #4
 8006358:	3332      	adds	r3, #50	; 0x32
 800635a:	4a2d      	ldr	r2, [pc, #180]	; (8006410 <UART_SetConfig+0x6f4>)
 800635c:	fba2 2303 	umull	r2, r3, r2, r3
 8006360:	095b      	lsrs	r3, r3, #5
 8006362:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006366:	4498      	add	r8, r3
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	469b      	mov	fp, r3
 800636c:	f04f 0c00 	mov.w	ip, #0
 8006370:	46d9      	mov	r9, fp
 8006372:	46e2      	mov	sl, ip
 8006374:	eb19 0309 	adds.w	r3, r9, r9
 8006378:	eb4a 040a 	adc.w	r4, sl, sl
 800637c:	4699      	mov	r9, r3
 800637e:	46a2      	mov	sl, r4
 8006380:	eb19 090b 	adds.w	r9, r9, fp
 8006384:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006388:	f04f 0100 	mov.w	r1, #0
 800638c:	f04f 0200 	mov.w	r2, #0
 8006390:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006394:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006398:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800639c:	4689      	mov	r9, r1
 800639e:	4692      	mov	sl, r2
 80063a0:	eb1b 0509 	adds.w	r5, fp, r9
 80063a4:	eb4c 060a 	adc.w	r6, ip, sl
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	4619      	mov	r1, r3
 80063ae:	f04f 0200 	mov.w	r2, #0
 80063b2:	f04f 0300 	mov.w	r3, #0
 80063b6:	f04f 0400 	mov.w	r4, #0
 80063ba:	0094      	lsls	r4, r2, #2
 80063bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063c0:	008b      	lsls	r3, r1, #2
 80063c2:	461a      	mov	r2, r3
 80063c4:	4623      	mov	r3, r4
 80063c6:	4628      	mov	r0, r5
 80063c8:	4631      	mov	r1, r6
 80063ca:	f7fa f9ed 	bl	80007a8 <__aeabi_uldivmod>
 80063ce:	4603      	mov	r3, r0
 80063d0:	460c      	mov	r4, r1
 80063d2:	461a      	mov	r2, r3
 80063d4:	4b0e      	ldr	r3, [pc, #56]	; (8006410 <UART_SetConfig+0x6f4>)
 80063d6:	fba3 1302 	umull	r1, r3, r3, r2
 80063da:	095b      	lsrs	r3, r3, #5
 80063dc:	2164      	movs	r1, #100	; 0x64
 80063de:	fb01 f303 	mul.w	r3, r1, r3
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	011b      	lsls	r3, r3, #4
 80063e6:	3332      	adds	r3, #50	; 0x32
 80063e8:	4a09      	ldr	r2, [pc, #36]	; (8006410 <UART_SetConfig+0x6f4>)
 80063ea:	fba2 2303 	umull	r2, r3, r2, r3
 80063ee:	095b      	lsrs	r3, r3, #5
 80063f0:	f003 020f 	and.w	r2, r3, #15
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4442      	add	r2, r8
 80063fa:	609a      	str	r2, [r3, #8]
}
 80063fc:	e7ff      	b.n	80063fe <UART_SetConfig+0x6e2>
 80063fe:	bf00      	nop
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006408:	40011000 	.word	0x40011000
 800640c:	40011400 	.word	0x40011400
 8006410:	51eb851f 	.word	0x51eb851f

08006414 <__errno>:
 8006414:	4b01      	ldr	r3, [pc, #4]	; (800641c <__errno+0x8>)
 8006416:	6818      	ldr	r0, [r3, #0]
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	2000000c 	.word	0x2000000c

08006420 <__libc_init_array>:
 8006420:	b570      	push	{r4, r5, r6, lr}
 8006422:	4e0d      	ldr	r6, [pc, #52]	; (8006458 <__libc_init_array+0x38>)
 8006424:	4c0d      	ldr	r4, [pc, #52]	; (800645c <__libc_init_array+0x3c>)
 8006426:	1ba4      	subs	r4, r4, r6
 8006428:	10a4      	asrs	r4, r4, #2
 800642a:	2500      	movs	r5, #0
 800642c:	42a5      	cmp	r5, r4
 800642e:	d109      	bne.n	8006444 <__libc_init_array+0x24>
 8006430:	4e0b      	ldr	r6, [pc, #44]	; (8006460 <__libc_init_array+0x40>)
 8006432:	4c0c      	ldr	r4, [pc, #48]	; (8006464 <__libc_init_array+0x44>)
 8006434:	f000 ffd4 	bl	80073e0 <_init>
 8006438:	1ba4      	subs	r4, r4, r6
 800643a:	10a4      	asrs	r4, r4, #2
 800643c:	2500      	movs	r5, #0
 800643e:	42a5      	cmp	r5, r4
 8006440:	d105      	bne.n	800644e <__libc_init_array+0x2e>
 8006442:	bd70      	pop	{r4, r5, r6, pc}
 8006444:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006448:	4798      	blx	r3
 800644a:	3501      	adds	r5, #1
 800644c:	e7ee      	b.n	800642c <__libc_init_array+0xc>
 800644e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006452:	4798      	blx	r3
 8006454:	3501      	adds	r5, #1
 8006456:	e7f2      	b.n	800643e <__libc_init_array+0x1e>
 8006458:	080078e8 	.word	0x080078e8
 800645c:	080078e8 	.word	0x080078e8
 8006460:	080078e8 	.word	0x080078e8
 8006464:	080078ec 	.word	0x080078ec

08006468 <memset>:
 8006468:	4402      	add	r2, r0
 800646a:	4603      	mov	r3, r0
 800646c:	4293      	cmp	r3, r2
 800646e:	d100      	bne.n	8006472 <memset+0xa>
 8006470:	4770      	bx	lr
 8006472:	f803 1b01 	strb.w	r1, [r3], #1
 8006476:	e7f9      	b.n	800646c <memset+0x4>

08006478 <_puts_r>:
 8006478:	b570      	push	{r4, r5, r6, lr}
 800647a:	460e      	mov	r6, r1
 800647c:	4605      	mov	r5, r0
 800647e:	b118      	cbz	r0, 8006488 <_puts_r+0x10>
 8006480:	6983      	ldr	r3, [r0, #24]
 8006482:	b90b      	cbnz	r3, 8006488 <_puts_r+0x10>
 8006484:	f000 fa2c 	bl	80068e0 <__sinit>
 8006488:	69ab      	ldr	r3, [r5, #24]
 800648a:	68ac      	ldr	r4, [r5, #8]
 800648c:	b913      	cbnz	r3, 8006494 <_puts_r+0x1c>
 800648e:	4628      	mov	r0, r5
 8006490:	f000 fa26 	bl	80068e0 <__sinit>
 8006494:	4b23      	ldr	r3, [pc, #140]	; (8006524 <_puts_r+0xac>)
 8006496:	429c      	cmp	r4, r3
 8006498:	d117      	bne.n	80064ca <_puts_r+0x52>
 800649a:	686c      	ldr	r4, [r5, #4]
 800649c:	89a3      	ldrh	r3, [r4, #12]
 800649e:	071b      	lsls	r3, r3, #28
 80064a0:	d51d      	bpl.n	80064de <_puts_r+0x66>
 80064a2:	6923      	ldr	r3, [r4, #16]
 80064a4:	b1db      	cbz	r3, 80064de <_puts_r+0x66>
 80064a6:	3e01      	subs	r6, #1
 80064a8:	68a3      	ldr	r3, [r4, #8]
 80064aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80064ae:	3b01      	subs	r3, #1
 80064b0:	60a3      	str	r3, [r4, #8]
 80064b2:	b9e9      	cbnz	r1, 80064f0 <_puts_r+0x78>
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	da2e      	bge.n	8006516 <_puts_r+0x9e>
 80064b8:	4622      	mov	r2, r4
 80064ba:	210a      	movs	r1, #10
 80064bc:	4628      	mov	r0, r5
 80064be:	f000 f85f 	bl	8006580 <__swbuf_r>
 80064c2:	3001      	adds	r0, #1
 80064c4:	d011      	beq.n	80064ea <_puts_r+0x72>
 80064c6:	200a      	movs	r0, #10
 80064c8:	e011      	b.n	80064ee <_puts_r+0x76>
 80064ca:	4b17      	ldr	r3, [pc, #92]	; (8006528 <_puts_r+0xb0>)
 80064cc:	429c      	cmp	r4, r3
 80064ce:	d101      	bne.n	80064d4 <_puts_r+0x5c>
 80064d0:	68ac      	ldr	r4, [r5, #8]
 80064d2:	e7e3      	b.n	800649c <_puts_r+0x24>
 80064d4:	4b15      	ldr	r3, [pc, #84]	; (800652c <_puts_r+0xb4>)
 80064d6:	429c      	cmp	r4, r3
 80064d8:	bf08      	it	eq
 80064da:	68ec      	ldreq	r4, [r5, #12]
 80064dc:	e7de      	b.n	800649c <_puts_r+0x24>
 80064de:	4621      	mov	r1, r4
 80064e0:	4628      	mov	r0, r5
 80064e2:	f000 f89f 	bl	8006624 <__swsetup_r>
 80064e6:	2800      	cmp	r0, #0
 80064e8:	d0dd      	beq.n	80064a6 <_puts_r+0x2e>
 80064ea:	f04f 30ff 	mov.w	r0, #4294967295
 80064ee:	bd70      	pop	{r4, r5, r6, pc}
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	da04      	bge.n	80064fe <_puts_r+0x86>
 80064f4:	69a2      	ldr	r2, [r4, #24]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	dc06      	bgt.n	8006508 <_puts_r+0x90>
 80064fa:	290a      	cmp	r1, #10
 80064fc:	d004      	beq.n	8006508 <_puts_r+0x90>
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	1c5a      	adds	r2, r3, #1
 8006502:	6022      	str	r2, [r4, #0]
 8006504:	7019      	strb	r1, [r3, #0]
 8006506:	e7cf      	b.n	80064a8 <_puts_r+0x30>
 8006508:	4622      	mov	r2, r4
 800650a:	4628      	mov	r0, r5
 800650c:	f000 f838 	bl	8006580 <__swbuf_r>
 8006510:	3001      	adds	r0, #1
 8006512:	d1c9      	bne.n	80064a8 <_puts_r+0x30>
 8006514:	e7e9      	b.n	80064ea <_puts_r+0x72>
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	200a      	movs	r0, #10
 800651a:	1c5a      	adds	r2, r3, #1
 800651c:	6022      	str	r2, [r4, #0]
 800651e:	7018      	strb	r0, [r3, #0]
 8006520:	e7e5      	b.n	80064ee <_puts_r+0x76>
 8006522:	bf00      	nop
 8006524:	0800786c 	.word	0x0800786c
 8006528:	0800788c 	.word	0x0800788c
 800652c:	0800784c 	.word	0x0800784c

08006530 <puts>:
 8006530:	4b02      	ldr	r3, [pc, #8]	; (800653c <puts+0xc>)
 8006532:	4601      	mov	r1, r0
 8006534:	6818      	ldr	r0, [r3, #0]
 8006536:	f7ff bf9f 	b.w	8006478 <_puts_r>
 800653a:	bf00      	nop
 800653c:	2000000c 	.word	0x2000000c

08006540 <siprintf>:
 8006540:	b40e      	push	{r1, r2, r3}
 8006542:	b500      	push	{lr}
 8006544:	b09c      	sub	sp, #112	; 0x70
 8006546:	ab1d      	add	r3, sp, #116	; 0x74
 8006548:	9002      	str	r0, [sp, #8]
 800654a:	9006      	str	r0, [sp, #24]
 800654c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006550:	4809      	ldr	r0, [pc, #36]	; (8006578 <siprintf+0x38>)
 8006552:	9107      	str	r1, [sp, #28]
 8006554:	9104      	str	r1, [sp, #16]
 8006556:	4909      	ldr	r1, [pc, #36]	; (800657c <siprintf+0x3c>)
 8006558:	f853 2b04 	ldr.w	r2, [r3], #4
 800655c:	9105      	str	r1, [sp, #20]
 800655e:	6800      	ldr	r0, [r0, #0]
 8006560:	9301      	str	r3, [sp, #4]
 8006562:	a902      	add	r1, sp, #8
 8006564:	f000 fbac 	bl	8006cc0 <_svfiprintf_r>
 8006568:	9b02      	ldr	r3, [sp, #8]
 800656a:	2200      	movs	r2, #0
 800656c:	701a      	strb	r2, [r3, #0]
 800656e:	b01c      	add	sp, #112	; 0x70
 8006570:	f85d eb04 	ldr.w	lr, [sp], #4
 8006574:	b003      	add	sp, #12
 8006576:	4770      	bx	lr
 8006578:	2000000c 	.word	0x2000000c
 800657c:	ffff0208 	.word	0xffff0208

08006580 <__swbuf_r>:
 8006580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006582:	460e      	mov	r6, r1
 8006584:	4614      	mov	r4, r2
 8006586:	4605      	mov	r5, r0
 8006588:	b118      	cbz	r0, 8006592 <__swbuf_r+0x12>
 800658a:	6983      	ldr	r3, [r0, #24]
 800658c:	b90b      	cbnz	r3, 8006592 <__swbuf_r+0x12>
 800658e:	f000 f9a7 	bl	80068e0 <__sinit>
 8006592:	4b21      	ldr	r3, [pc, #132]	; (8006618 <__swbuf_r+0x98>)
 8006594:	429c      	cmp	r4, r3
 8006596:	d12a      	bne.n	80065ee <__swbuf_r+0x6e>
 8006598:	686c      	ldr	r4, [r5, #4]
 800659a:	69a3      	ldr	r3, [r4, #24]
 800659c:	60a3      	str	r3, [r4, #8]
 800659e:	89a3      	ldrh	r3, [r4, #12]
 80065a0:	071a      	lsls	r2, r3, #28
 80065a2:	d52e      	bpl.n	8006602 <__swbuf_r+0x82>
 80065a4:	6923      	ldr	r3, [r4, #16]
 80065a6:	b363      	cbz	r3, 8006602 <__swbuf_r+0x82>
 80065a8:	6923      	ldr	r3, [r4, #16]
 80065aa:	6820      	ldr	r0, [r4, #0]
 80065ac:	1ac0      	subs	r0, r0, r3
 80065ae:	6963      	ldr	r3, [r4, #20]
 80065b0:	b2f6      	uxtb	r6, r6
 80065b2:	4283      	cmp	r3, r0
 80065b4:	4637      	mov	r7, r6
 80065b6:	dc04      	bgt.n	80065c2 <__swbuf_r+0x42>
 80065b8:	4621      	mov	r1, r4
 80065ba:	4628      	mov	r0, r5
 80065bc:	f000 f926 	bl	800680c <_fflush_r>
 80065c0:	bb28      	cbnz	r0, 800660e <__swbuf_r+0x8e>
 80065c2:	68a3      	ldr	r3, [r4, #8]
 80065c4:	3b01      	subs	r3, #1
 80065c6:	60a3      	str	r3, [r4, #8]
 80065c8:	6823      	ldr	r3, [r4, #0]
 80065ca:	1c5a      	adds	r2, r3, #1
 80065cc:	6022      	str	r2, [r4, #0]
 80065ce:	701e      	strb	r6, [r3, #0]
 80065d0:	6963      	ldr	r3, [r4, #20]
 80065d2:	3001      	adds	r0, #1
 80065d4:	4283      	cmp	r3, r0
 80065d6:	d004      	beq.n	80065e2 <__swbuf_r+0x62>
 80065d8:	89a3      	ldrh	r3, [r4, #12]
 80065da:	07db      	lsls	r3, r3, #31
 80065dc:	d519      	bpl.n	8006612 <__swbuf_r+0x92>
 80065de:	2e0a      	cmp	r6, #10
 80065e0:	d117      	bne.n	8006612 <__swbuf_r+0x92>
 80065e2:	4621      	mov	r1, r4
 80065e4:	4628      	mov	r0, r5
 80065e6:	f000 f911 	bl	800680c <_fflush_r>
 80065ea:	b190      	cbz	r0, 8006612 <__swbuf_r+0x92>
 80065ec:	e00f      	b.n	800660e <__swbuf_r+0x8e>
 80065ee:	4b0b      	ldr	r3, [pc, #44]	; (800661c <__swbuf_r+0x9c>)
 80065f0:	429c      	cmp	r4, r3
 80065f2:	d101      	bne.n	80065f8 <__swbuf_r+0x78>
 80065f4:	68ac      	ldr	r4, [r5, #8]
 80065f6:	e7d0      	b.n	800659a <__swbuf_r+0x1a>
 80065f8:	4b09      	ldr	r3, [pc, #36]	; (8006620 <__swbuf_r+0xa0>)
 80065fa:	429c      	cmp	r4, r3
 80065fc:	bf08      	it	eq
 80065fe:	68ec      	ldreq	r4, [r5, #12]
 8006600:	e7cb      	b.n	800659a <__swbuf_r+0x1a>
 8006602:	4621      	mov	r1, r4
 8006604:	4628      	mov	r0, r5
 8006606:	f000 f80d 	bl	8006624 <__swsetup_r>
 800660a:	2800      	cmp	r0, #0
 800660c:	d0cc      	beq.n	80065a8 <__swbuf_r+0x28>
 800660e:	f04f 37ff 	mov.w	r7, #4294967295
 8006612:	4638      	mov	r0, r7
 8006614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006616:	bf00      	nop
 8006618:	0800786c 	.word	0x0800786c
 800661c:	0800788c 	.word	0x0800788c
 8006620:	0800784c 	.word	0x0800784c

08006624 <__swsetup_r>:
 8006624:	4b32      	ldr	r3, [pc, #200]	; (80066f0 <__swsetup_r+0xcc>)
 8006626:	b570      	push	{r4, r5, r6, lr}
 8006628:	681d      	ldr	r5, [r3, #0]
 800662a:	4606      	mov	r6, r0
 800662c:	460c      	mov	r4, r1
 800662e:	b125      	cbz	r5, 800663a <__swsetup_r+0x16>
 8006630:	69ab      	ldr	r3, [r5, #24]
 8006632:	b913      	cbnz	r3, 800663a <__swsetup_r+0x16>
 8006634:	4628      	mov	r0, r5
 8006636:	f000 f953 	bl	80068e0 <__sinit>
 800663a:	4b2e      	ldr	r3, [pc, #184]	; (80066f4 <__swsetup_r+0xd0>)
 800663c:	429c      	cmp	r4, r3
 800663e:	d10f      	bne.n	8006660 <__swsetup_r+0x3c>
 8006640:	686c      	ldr	r4, [r5, #4]
 8006642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006646:	b29a      	uxth	r2, r3
 8006648:	0715      	lsls	r5, r2, #28
 800664a:	d42c      	bmi.n	80066a6 <__swsetup_r+0x82>
 800664c:	06d0      	lsls	r0, r2, #27
 800664e:	d411      	bmi.n	8006674 <__swsetup_r+0x50>
 8006650:	2209      	movs	r2, #9
 8006652:	6032      	str	r2, [r6, #0]
 8006654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006658:	81a3      	strh	r3, [r4, #12]
 800665a:	f04f 30ff 	mov.w	r0, #4294967295
 800665e:	e03e      	b.n	80066de <__swsetup_r+0xba>
 8006660:	4b25      	ldr	r3, [pc, #148]	; (80066f8 <__swsetup_r+0xd4>)
 8006662:	429c      	cmp	r4, r3
 8006664:	d101      	bne.n	800666a <__swsetup_r+0x46>
 8006666:	68ac      	ldr	r4, [r5, #8]
 8006668:	e7eb      	b.n	8006642 <__swsetup_r+0x1e>
 800666a:	4b24      	ldr	r3, [pc, #144]	; (80066fc <__swsetup_r+0xd8>)
 800666c:	429c      	cmp	r4, r3
 800666e:	bf08      	it	eq
 8006670:	68ec      	ldreq	r4, [r5, #12]
 8006672:	e7e6      	b.n	8006642 <__swsetup_r+0x1e>
 8006674:	0751      	lsls	r1, r2, #29
 8006676:	d512      	bpl.n	800669e <__swsetup_r+0x7a>
 8006678:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800667a:	b141      	cbz	r1, 800668e <__swsetup_r+0x6a>
 800667c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006680:	4299      	cmp	r1, r3
 8006682:	d002      	beq.n	800668a <__swsetup_r+0x66>
 8006684:	4630      	mov	r0, r6
 8006686:	f000 fa19 	bl	8006abc <_free_r>
 800668a:	2300      	movs	r3, #0
 800668c:	6363      	str	r3, [r4, #52]	; 0x34
 800668e:	89a3      	ldrh	r3, [r4, #12]
 8006690:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006694:	81a3      	strh	r3, [r4, #12]
 8006696:	2300      	movs	r3, #0
 8006698:	6063      	str	r3, [r4, #4]
 800669a:	6923      	ldr	r3, [r4, #16]
 800669c:	6023      	str	r3, [r4, #0]
 800669e:	89a3      	ldrh	r3, [r4, #12]
 80066a0:	f043 0308 	orr.w	r3, r3, #8
 80066a4:	81a3      	strh	r3, [r4, #12]
 80066a6:	6923      	ldr	r3, [r4, #16]
 80066a8:	b94b      	cbnz	r3, 80066be <__swsetup_r+0x9a>
 80066aa:	89a3      	ldrh	r3, [r4, #12]
 80066ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80066b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066b4:	d003      	beq.n	80066be <__swsetup_r+0x9a>
 80066b6:	4621      	mov	r1, r4
 80066b8:	4630      	mov	r0, r6
 80066ba:	f000 f9bf 	bl	8006a3c <__smakebuf_r>
 80066be:	89a2      	ldrh	r2, [r4, #12]
 80066c0:	f012 0301 	ands.w	r3, r2, #1
 80066c4:	d00c      	beq.n	80066e0 <__swsetup_r+0xbc>
 80066c6:	2300      	movs	r3, #0
 80066c8:	60a3      	str	r3, [r4, #8]
 80066ca:	6963      	ldr	r3, [r4, #20]
 80066cc:	425b      	negs	r3, r3
 80066ce:	61a3      	str	r3, [r4, #24]
 80066d0:	6923      	ldr	r3, [r4, #16]
 80066d2:	b953      	cbnz	r3, 80066ea <__swsetup_r+0xc6>
 80066d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066d8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80066dc:	d1ba      	bne.n	8006654 <__swsetup_r+0x30>
 80066de:	bd70      	pop	{r4, r5, r6, pc}
 80066e0:	0792      	lsls	r2, r2, #30
 80066e2:	bf58      	it	pl
 80066e4:	6963      	ldrpl	r3, [r4, #20]
 80066e6:	60a3      	str	r3, [r4, #8]
 80066e8:	e7f2      	b.n	80066d0 <__swsetup_r+0xac>
 80066ea:	2000      	movs	r0, #0
 80066ec:	e7f7      	b.n	80066de <__swsetup_r+0xba>
 80066ee:	bf00      	nop
 80066f0:	2000000c 	.word	0x2000000c
 80066f4:	0800786c 	.word	0x0800786c
 80066f8:	0800788c 	.word	0x0800788c
 80066fc:	0800784c 	.word	0x0800784c

08006700 <__sflush_r>:
 8006700:	898a      	ldrh	r2, [r1, #12]
 8006702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006706:	4605      	mov	r5, r0
 8006708:	0710      	lsls	r0, r2, #28
 800670a:	460c      	mov	r4, r1
 800670c:	d458      	bmi.n	80067c0 <__sflush_r+0xc0>
 800670e:	684b      	ldr	r3, [r1, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	dc05      	bgt.n	8006720 <__sflush_r+0x20>
 8006714:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006716:	2b00      	cmp	r3, #0
 8006718:	dc02      	bgt.n	8006720 <__sflush_r+0x20>
 800671a:	2000      	movs	r0, #0
 800671c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006720:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006722:	2e00      	cmp	r6, #0
 8006724:	d0f9      	beq.n	800671a <__sflush_r+0x1a>
 8006726:	2300      	movs	r3, #0
 8006728:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800672c:	682f      	ldr	r7, [r5, #0]
 800672e:	6a21      	ldr	r1, [r4, #32]
 8006730:	602b      	str	r3, [r5, #0]
 8006732:	d032      	beq.n	800679a <__sflush_r+0x9a>
 8006734:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006736:	89a3      	ldrh	r3, [r4, #12]
 8006738:	075a      	lsls	r2, r3, #29
 800673a:	d505      	bpl.n	8006748 <__sflush_r+0x48>
 800673c:	6863      	ldr	r3, [r4, #4]
 800673e:	1ac0      	subs	r0, r0, r3
 8006740:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006742:	b10b      	cbz	r3, 8006748 <__sflush_r+0x48>
 8006744:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006746:	1ac0      	subs	r0, r0, r3
 8006748:	2300      	movs	r3, #0
 800674a:	4602      	mov	r2, r0
 800674c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800674e:	6a21      	ldr	r1, [r4, #32]
 8006750:	4628      	mov	r0, r5
 8006752:	47b0      	blx	r6
 8006754:	1c43      	adds	r3, r0, #1
 8006756:	89a3      	ldrh	r3, [r4, #12]
 8006758:	d106      	bne.n	8006768 <__sflush_r+0x68>
 800675a:	6829      	ldr	r1, [r5, #0]
 800675c:	291d      	cmp	r1, #29
 800675e:	d848      	bhi.n	80067f2 <__sflush_r+0xf2>
 8006760:	4a29      	ldr	r2, [pc, #164]	; (8006808 <__sflush_r+0x108>)
 8006762:	40ca      	lsrs	r2, r1
 8006764:	07d6      	lsls	r6, r2, #31
 8006766:	d544      	bpl.n	80067f2 <__sflush_r+0xf2>
 8006768:	2200      	movs	r2, #0
 800676a:	6062      	str	r2, [r4, #4]
 800676c:	04d9      	lsls	r1, r3, #19
 800676e:	6922      	ldr	r2, [r4, #16]
 8006770:	6022      	str	r2, [r4, #0]
 8006772:	d504      	bpl.n	800677e <__sflush_r+0x7e>
 8006774:	1c42      	adds	r2, r0, #1
 8006776:	d101      	bne.n	800677c <__sflush_r+0x7c>
 8006778:	682b      	ldr	r3, [r5, #0]
 800677a:	b903      	cbnz	r3, 800677e <__sflush_r+0x7e>
 800677c:	6560      	str	r0, [r4, #84]	; 0x54
 800677e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006780:	602f      	str	r7, [r5, #0]
 8006782:	2900      	cmp	r1, #0
 8006784:	d0c9      	beq.n	800671a <__sflush_r+0x1a>
 8006786:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800678a:	4299      	cmp	r1, r3
 800678c:	d002      	beq.n	8006794 <__sflush_r+0x94>
 800678e:	4628      	mov	r0, r5
 8006790:	f000 f994 	bl	8006abc <_free_r>
 8006794:	2000      	movs	r0, #0
 8006796:	6360      	str	r0, [r4, #52]	; 0x34
 8006798:	e7c0      	b.n	800671c <__sflush_r+0x1c>
 800679a:	2301      	movs	r3, #1
 800679c:	4628      	mov	r0, r5
 800679e:	47b0      	blx	r6
 80067a0:	1c41      	adds	r1, r0, #1
 80067a2:	d1c8      	bne.n	8006736 <__sflush_r+0x36>
 80067a4:	682b      	ldr	r3, [r5, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d0c5      	beq.n	8006736 <__sflush_r+0x36>
 80067aa:	2b1d      	cmp	r3, #29
 80067ac:	d001      	beq.n	80067b2 <__sflush_r+0xb2>
 80067ae:	2b16      	cmp	r3, #22
 80067b0:	d101      	bne.n	80067b6 <__sflush_r+0xb6>
 80067b2:	602f      	str	r7, [r5, #0]
 80067b4:	e7b1      	b.n	800671a <__sflush_r+0x1a>
 80067b6:	89a3      	ldrh	r3, [r4, #12]
 80067b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067bc:	81a3      	strh	r3, [r4, #12]
 80067be:	e7ad      	b.n	800671c <__sflush_r+0x1c>
 80067c0:	690f      	ldr	r7, [r1, #16]
 80067c2:	2f00      	cmp	r7, #0
 80067c4:	d0a9      	beq.n	800671a <__sflush_r+0x1a>
 80067c6:	0793      	lsls	r3, r2, #30
 80067c8:	680e      	ldr	r6, [r1, #0]
 80067ca:	bf08      	it	eq
 80067cc:	694b      	ldreq	r3, [r1, #20]
 80067ce:	600f      	str	r7, [r1, #0]
 80067d0:	bf18      	it	ne
 80067d2:	2300      	movne	r3, #0
 80067d4:	eba6 0807 	sub.w	r8, r6, r7
 80067d8:	608b      	str	r3, [r1, #8]
 80067da:	f1b8 0f00 	cmp.w	r8, #0
 80067de:	dd9c      	ble.n	800671a <__sflush_r+0x1a>
 80067e0:	4643      	mov	r3, r8
 80067e2:	463a      	mov	r2, r7
 80067e4:	6a21      	ldr	r1, [r4, #32]
 80067e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80067e8:	4628      	mov	r0, r5
 80067ea:	47b0      	blx	r6
 80067ec:	2800      	cmp	r0, #0
 80067ee:	dc06      	bgt.n	80067fe <__sflush_r+0xfe>
 80067f0:	89a3      	ldrh	r3, [r4, #12]
 80067f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067f6:	81a3      	strh	r3, [r4, #12]
 80067f8:	f04f 30ff 	mov.w	r0, #4294967295
 80067fc:	e78e      	b.n	800671c <__sflush_r+0x1c>
 80067fe:	4407      	add	r7, r0
 8006800:	eba8 0800 	sub.w	r8, r8, r0
 8006804:	e7e9      	b.n	80067da <__sflush_r+0xda>
 8006806:	bf00      	nop
 8006808:	20400001 	.word	0x20400001

0800680c <_fflush_r>:
 800680c:	b538      	push	{r3, r4, r5, lr}
 800680e:	690b      	ldr	r3, [r1, #16]
 8006810:	4605      	mov	r5, r0
 8006812:	460c      	mov	r4, r1
 8006814:	b1db      	cbz	r3, 800684e <_fflush_r+0x42>
 8006816:	b118      	cbz	r0, 8006820 <_fflush_r+0x14>
 8006818:	6983      	ldr	r3, [r0, #24]
 800681a:	b90b      	cbnz	r3, 8006820 <_fflush_r+0x14>
 800681c:	f000 f860 	bl	80068e0 <__sinit>
 8006820:	4b0c      	ldr	r3, [pc, #48]	; (8006854 <_fflush_r+0x48>)
 8006822:	429c      	cmp	r4, r3
 8006824:	d109      	bne.n	800683a <_fflush_r+0x2e>
 8006826:	686c      	ldr	r4, [r5, #4]
 8006828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800682c:	b17b      	cbz	r3, 800684e <_fflush_r+0x42>
 800682e:	4621      	mov	r1, r4
 8006830:	4628      	mov	r0, r5
 8006832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006836:	f7ff bf63 	b.w	8006700 <__sflush_r>
 800683a:	4b07      	ldr	r3, [pc, #28]	; (8006858 <_fflush_r+0x4c>)
 800683c:	429c      	cmp	r4, r3
 800683e:	d101      	bne.n	8006844 <_fflush_r+0x38>
 8006840:	68ac      	ldr	r4, [r5, #8]
 8006842:	e7f1      	b.n	8006828 <_fflush_r+0x1c>
 8006844:	4b05      	ldr	r3, [pc, #20]	; (800685c <_fflush_r+0x50>)
 8006846:	429c      	cmp	r4, r3
 8006848:	bf08      	it	eq
 800684a:	68ec      	ldreq	r4, [r5, #12]
 800684c:	e7ec      	b.n	8006828 <_fflush_r+0x1c>
 800684e:	2000      	movs	r0, #0
 8006850:	bd38      	pop	{r3, r4, r5, pc}
 8006852:	bf00      	nop
 8006854:	0800786c 	.word	0x0800786c
 8006858:	0800788c 	.word	0x0800788c
 800685c:	0800784c 	.word	0x0800784c

08006860 <std>:
 8006860:	2300      	movs	r3, #0
 8006862:	b510      	push	{r4, lr}
 8006864:	4604      	mov	r4, r0
 8006866:	e9c0 3300 	strd	r3, r3, [r0]
 800686a:	6083      	str	r3, [r0, #8]
 800686c:	8181      	strh	r1, [r0, #12]
 800686e:	6643      	str	r3, [r0, #100]	; 0x64
 8006870:	81c2      	strh	r2, [r0, #14]
 8006872:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006876:	6183      	str	r3, [r0, #24]
 8006878:	4619      	mov	r1, r3
 800687a:	2208      	movs	r2, #8
 800687c:	305c      	adds	r0, #92	; 0x5c
 800687e:	f7ff fdf3 	bl	8006468 <memset>
 8006882:	4b05      	ldr	r3, [pc, #20]	; (8006898 <std+0x38>)
 8006884:	6263      	str	r3, [r4, #36]	; 0x24
 8006886:	4b05      	ldr	r3, [pc, #20]	; (800689c <std+0x3c>)
 8006888:	62a3      	str	r3, [r4, #40]	; 0x28
 800688a:	4b05      	ldr	r3, [pc, #20]	; (80068a0 <std+0x40>)
 800688c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800688e:	4b05      	ldr	r3, [pc, #20]	; (80068a4 <std+0x44>)
 8006890:	6224      	str	r4, [r4, #32]
 8006892:	6323      	str	r3, [r4, #48]	; 0x30
 8006894:	bd10      	pop	{r4, pc}
 8006896:	bf00      	nop
 8006898:	080071e1 	.word	0x080071e1
 800689c:	08007203 	.word	0x08007203
 80068a0:	0800723b 	.word	0x0800723b
 80068a4:	0800725f 	.word	0x0800725f

080068a8 <_cleanup_r>:
 80068a8:	4901      	ldr	r1, [pc, #4]	; (80068b0 <_cleanup_r+0x8>)
 80068aa:	f000 b885 	b.w	80069b8 <_fwalk_reent>
 80068ae:	bf00      	nop
 80068b0:	0800680d 	.word	0x0800680d

080068b4 <__sfmoreglue>:
 80068b4:	b570      	push	{r4, r5, r6, lr}
 80068b6:	1e4a      	subs	r2, r1, #1
 80068b8:	2568      	movs	r5, #104	; 0x68
 80068ba:	4355      	muls	r5, r2
 80068bc:	460e      	mov	r6, r1
 80068be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80068c2:	f000 f949 	bl	8006b58 <_malloc_r>
 80068c6:	4604      	mov	r4, r0
 80068c8:	b140      	cbz	r0, 80068dc <__sfmoreglue+0x28>
 80068ca:	2100      	movs	r1, #0
 80068cc:	e9c0 1600 	strd	r1, r6, [r0]
 80068d0:	300c      	adds	r0, #12
 80068d2:	60a0      	str	r0, [r4, #8]
 80068d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80068d8:	f7ff fdc6 	bl	8006468 <memset>
 80068dc:	4620      	mov	r0, r4
 80068de:	bd70      	pop	{r4, r5, r6, pc}

080068e0 <__sinit>:
 80068e0:	6983      	ldr	r3, [r0, #24]
 80068e2:	b510      	push	{r4, lr}
 80068e4:	4604      	mov	r4, r0
 80068e6:	bb33      	cbnz	r3, 8006936 <__sinit+0x56>
 80068e8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80068ec:	6503      	str	r3, [r0, #80]	; 0x50
 80068ee:	4b12      	ldr	r3, [pc, #72]	; (8006938 <__sinit+0x58>)
 80068f0:	4a12      	ldr	r2, [pc, #72]	; (800693c <__sinit+0x5c>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6282      	str	r2, [r0, #40]	; 0x28
 80068f6:	4298      	cmp	r0, r3
 80068f8:	bf04      	itt	eq
 80068fa:	2301      	moveq	r3, #1
 80068fc:	6183      	streq	r3, [r0, #24]
 80068fe:	f000 f81f 	bl	8006940 <__sfp>
 8006902:	6060      	str	r0, [r4, #4]
 8006904:	4620      	mov	r0, r4
 8006906:	f000 f81b 	bl	8006940 <__sfp>
 800690a:	60a0      	str	r0, [r4, #8]
 800690c:	4620      	mov	r0, r4
 800690e:	f000 f817 	bl	8006940 <__sfp>
 8006912:	2200      	movs	r2, #0
 8006914:	60e0      	str	r0, [r4, #12]
 8006916:	2104      	movs	r1, #4
 8006918:	6860      	ldr	r0, [r4, #4]
 800691a:	f7ff ffa1 	bl	8006860 <std>
 800691e:	2201      	movs	r2, #1
 8006920:	2109      	movs	r1, #9
 8006922:	68a0      	ldr	r0, [r4, #8]
 8006924:	f7ff ff9c 	bl	8006860 <std>
 8006928:	2202      	movs	r2, #2
 800692a:	2112      	movs	r1, #18
 800692c:	68e0      	ldr	r0, [r4, #12]
 800692e:	f7ff ff97 	bl	8006860 <std>
 8006932:	2301      	movs	r3, #1
 8006934:	61a3      	str	r3, [r4, #24]
 8006936:	bd10      	pop	{r4, pc}
 8006938:	08007848 	.word	0x08007848
 800693c:	080068a9 	.word	0x080068a9

08006940 <__sfp>:
 8006940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006942:	4b1b      	ldr	r3, [pc, #108]	; (80069b0 <__sfp+0x70>)
 8006944:	681e      	ldr	r6, [r3, #0]
 8006946:	69b3      	ldr	r3, [r6, #24]
 8006948:	4607      	mov	r7, r0
 800694a:	b913      	cbnz	r3, 8006952 <__sfp+0x12>
 800694c:	4630      	mov	r0, r6
 800694e:	f7ff ffc7 	bl	80068e0 <__sinit>
 8006952:	3648      	adds	r6, #72	; 0x48
 8006954:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006958:	3b01      	subs	r3, #1
 800695a:	d503      	bpl.n	8006964 <__sfp+0x24>
 800695c:	6833      	ldr	r3, [r6, #0]
 800695e:	b133      	cbz	r3, 800696e <__sfp+0x2e>
 8006960:	6836      	ldr	r6, [r6, #0]
 8006962:	e7f7      	b.n	8006954 <__sfp+0x14>
 8006964:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006968:	b16d      	cbz	r5, 8006986 <__sfp+0x46>
 800696a:	3468      	adds	r4, #104	; 0x68
 800696c:	e7f4      	b.n	8006958 <__sfp+0x18>
 800696e:	2104      	movs	r1, #4
 8006970:	4638      	mov	r0, r7
 8006972:	f7ff ff9f 	bl	80068b4 <__sfmoreglue>
 8006976:	6030      	str	r0, [r6, #0]
 8006978:	2800      	cmp	r0, #0
 800697a:	d1f1      	bne.n	8006960 <__sfp+0x20>
 800697c:	230c      	movs	r3, #12
 800697e:	603b      	str	r3, [r7, #0]
 8006980:	4604      	mov	r4, r0
 8006982:	4620      	mov	r0, r4
 8006984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006986:	4b0b      	ldr	r3, [pc, #44]	; (80069b4 <__sfp+0x74>)
 8006988:	6665      	str	r5, [r4, #100]	; 0x64
 800698a:	e9c4 5500 	strd	r5, r5, [r4]
 800698e:	60a5      	str	r5, [r4, #8]
 8006990:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006994:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006998:	2208      	movs	r2, #8
 800699a:	4629      	mov	r1, r5
 800699c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80069a0:	f7ff fd62 	bl	8006468 <memset>
 80069a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80069a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80069ac:	e7e9      	b.n	8006982 <__sfp+0x42>
 80069ae:	bf00      	nop
 80069b0:	08007848 	.word	0x08007848
 80069b4:	ffff0001 	.word	0xffff0001

080069b8 <_fwalk_reent>:
 80069b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069bc:	4680      	mov	r8, r0
 80069be:	4689      	mov	r9, r1
 80069c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069c4:	2600      	movs	r6, #0
 80069c6:	b914      	cbnz	r4, 80069ce <_fwalk_reent+0x16>
 80069c8:	4630      	mov	r0, r6
 80069ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80069d2:	3f01      	subs	r7, #1
 80069d4:	d501      	bpl.n	80069da <_fwalk_reent+0x22>
 80069d6:	6824      	ldr	r4, [r4, #0]
 80069d8:	e7f5      	b.n	80069c6 <_fwalk_reent+0xe>
 80069da:	89ab      	ldrh	r3, [r5, #12]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d907      	bls.n	80069f0 <_fwalk_reent+0x38>
 80069e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069e4:	3301      	adds	r3, #1
 80069e6:	d003      	beq.n	80069f0 <_fwalk_reent+0x38>
 80069e8:	4629      	mov	r1, r5
 80069ea:	4640      	mov	r0, r8
 80069ec:	47c8      	blx	r9
 80069ee:	4306      	orrs	r6, r0
 80069f0:	3568      	adds	r5, #104	; 0x68
 80069f2:	e7ee      	b.n	80069d2 <_fwalk_reent+0x1a>

080069f4 <__swhatbuf_r>:
 80069f4:	b570      	push	{r4, r5, r6, lr}
 80069f6:	460e      	mov	r6, r1
 80069f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069fc:	2900      	cmp	r1, #0
 80069fe:	b096      	sub	sp, #88	; 0x58
 8006a00:	4614      	mov	r4, r2
 8006a02:	461d      	mov	r5, r3
 8006a04:	da07      	bge.n	8006a16 <__swhatbuf_r+0x22>
 8006a06:	2300      	movs	r3, #0
 8006a08:	602b      	str	r3, [r5, #0]
 8006a0a:	89b3      	ldrh	r3, [r6, #12]
 8006a0c:	061a      	lsls	r2, r3, #24
 8006a0e:	d410      	bmi.n	8006a32 <__swhatbuf_r+0x3e>
 8006a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a14:	e00e      	b.n	8006a34 <__swhatbuf_r+0x40>
 8006a16:	466a      	mov	r2, sp
 8006a18:	f000 fc48 	bl	80072ac <_fstat_r>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	dbf2      	blt.n	8006a06 <__swhatbuf_r+0x12>
 8006a20:	9a01      	ldr	r2, [sp, #4]
 8006a22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a2a:	425a      	negs	r2, r3
 8006a2c:	415a      	adcs	r2, r3
 8006a2e:	602a      	str	r2, [r5, #0]
 8006a30:	e7ee      	b.n	8006a10 <__swhatbuf_r+0x1c>
 8006a32:	2340      	movs	r3, #64	; 0x40
 8006a34:	2000      	movs	r0, #0
 8006a36:	6023      	str	r3, [r4, #0]
 8006a38:	b016      	add	sp, #88	; 0x58
 8006a3a:	bd70      	pop	{r4, r5, r6, pc}

08006a3c <__smakebuf_r>:
 8006a3c:	898b      	ldrh	r3, [r1, #12]
 8006a3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a40:	079d      	lsls	r5, r3, #30
 8006a42:	4606      	mov	r6, r0
 8006a44:	460c      	mov	r4, r1
 8006a46:	d507      	bpl.n	8006a58 <__smakebuf_r+0x1c>
 8006a48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a4c:	6023      	str	r3, [r4, #0]
 8006a4e:	6123      	str	r3, [r4, #16]
 8006a50:	2301      	movs	r3, #1
 8006a52:	6163      	str	r3, [r4, #20]
 8006a54:	b002      	add	sp, #8
 8006a56:	bd70      	pop	{r4, r5, r6, pc}
 8006a58:	ab01      	add	r3, sp, #4
 8006a5a:	466a      	mov	r2, sp
 8006a5c:	f7ff ffca 	bl	80069f4 <__swhatbuf_r>
 8006a60:	9900      	ldr	r1, [sp, #0]
 8006a62:	4605      	mov	r5, r0
 8006a64:	4630      	mov	r0, r6
 8006a66:	f000 f877 	bl	8006b58 <_malloc_r>
 8006a6a:	b948      	cbnz	r0, 8006a80 <__smakebuf_r+0x44>
 8006a6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a70:	059a      	lsls	r2, r3, #22
 8006a72:	d4ef      	bmi.n	8006a54 <__smakebuf_r+0x18>
 8006a74:	f023 0303 	bic.w	r3, r3, #3
 8006a78:	f043 0302 	orr.w	r3, r3, #2
 8006a7c:	81a3      	strh	r3, [r4, #12]
 8006a7e:	e7e3      	b.n	8006a48 <__smakebuf_r+0xc>
 8006a80:	4b0d      	ldr	r3, [pc, #52]	; (8006ab8 <__smakebuf_r+0x7c>)
 8006a82:	62b3      	str	r3, [r6, #40]	; 0x28
 8006a84:	89a3      	ldrh	r3, [r4, #12]
 8006a86:	6020      	str	r0, [r4, #0]
 8006a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a8c:	81a3      	strh	r3, [r4, #12]
 8006a8e:	9b00      	ldr	r3, [sp, #0]
 8006a90:	6163      	str	r3, [r4, #20]
 8006a92:	9b01      	ldr	r3, [sp, #4]
 8006a94:	6120      	str	r0, [r4, #16]
 8006a96:	b15b      	cbz	r3, 8006ab0 <__smakebuf_r+0x74>
 8006a98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	f000 fc17 	bl	80072d0 <_isatty_r>
 8006aa2:	b128      	cbz	r0, 8006ab0 <__smakebuf_r+0x74>
 8006aa4:	89a3      	ldrh	r3, [r4, #12]
 8006aa6:	f023 0303 	bic.w	r3, r3, #3
 8006aaa:	f043 0301 	orr.w	r3, r3, #1
 8006aae:	81a3      	strh	r3, [r4, #12]
 8006ab0:	89a3      	ldrh	r3, [r4, #12]
 8006ab2:	431d      	orrs	r5, r3
 8006ab4:	81a5      	strh	r5, [r4, #12]
 8006ab6:	e7cd      	b.n	8006a54 <__smakebuf_r+0x18>
 8006ab8:	080068a9 	.word	0x080068a9

08006abc <_free_r>:
 8006abc:	b538      	push	{r3, r4, r5, lr}
 8006abe:	4605      	mov	r5, r0
 8006ac0:	2900      	cmp	r1, #0
 8006ac2:	d045      	beq.n	8006b50 <_free_r+0x94>
 8006ac4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ac8:	1f0c      	subs	r4, r1, #4
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	bfb8      	it	lt
 8006ace:	18e4      	addlt	r4, r4, r3
 8006ad0:	f000 fc44 	bl	800735c <__malloc_lock>
 8006ad4:	4a1f      	ldr	r2, [pc, #124]	; (8006b54 <_free_r+0x98>)
 8006ad6:	6813      	ldr	r3, [r2, #0]
 8006ad8:	4610      	mov	r0, r2
 8006ada:	b933      	cbnz	r3, 8006aea <_free_r+0x2e>
 8006adc:	6063      	str	r3, [r4, #4]
 8006ade:	6014      	str	r4, [r2, #0]
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ae6:	f000 bc3a 	b.w	800735e <__malloc_unlock>
 8006aea:	42a3      	cmp	r3, r4
 8006aec:	d90c      	bls.n	8006b08 <_free_r+0x4c>
 8006aee:	6821      	ldr	r1, [r4, #0]
 8006af0:	1862      	adds	r2, r4, r1
 8006af2:	4293      	cmp	r3, r2
 8006af4:	bf04      	itt	eq
 8006af6:	681a      	ldreq	r2, [r3, #0]
 8006af8:	685b      	ldreq	r3, [r3, #4]
 8006afa:	6063      	str	r3, [r4, #4]
 8006afc:	bf04      	itt	eq
 8006afe:	1852      	addeq	r2, r2, r1
 8006b00:	6022      	streq	r2, [r4, #0]
 8006b02:	6004      	str	r4, [r0, #0]
 8006b04:	e7ec      	b.n	8006ae0 <_free_r+0x24>
 8006b06:	4613      	mov	r3, r2
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	b10a      	cbz	r2, 8006b10 <_free_r+0x54>
 8006b0c:	42a2      	cmp	r2, r4
 8006b0e:	d9fa      	bls.n	8006b06 <_free_r+0x4a>
 8006b10:	6819      	ldr	r1, [r3, #0]
 8006b12:	1858      	adds	r0, r3, r1
 8006b14:	42a0      	cmp	r0, r4
 8006b16:	d10b      	bne.n	8006b30 <_free_r+0x74>
 8006b18:	6820      	ldr	r0, [r4, #0]
 8006b1a:	4401      	add	r1, r0
 8006b1c:	1858      	adds	r0, r3, r1
 8006b1e:	4282      	cmp	r2, r0
 8006b20:	6019      	str	r1, [r3, #0]
 8006b22:	d1dd      	bne.n	8006ae0 <_free_r+0x24>
 8006b24:	6810      	ldr	r0, [r2, #0]
 8006b26:	6852      	ldr	r2, [r2, #4]
 8006b28:	605a      	str	r2, [r3, #4]
 8006b2a:	4401      	add	r1, r0
 8006b2c:	6019      	str	r1, [r3, #0]
 8006b2e:	e7d7      	b.n	8006ae0 <_free_r+0x24>
 8006b30:	d902      	bls.n	8006b38 <_free_r+0x7c>
 8006b32:	230c      	movs	r3, #12
 8006b34:	602b      	str	r3, [r5, #0]
 8006b36:	e7d3      	b.n	8006ae0 <_free_r+0x24>
 8006b38:	6820      	ldr	r0, [r4, #0]
 8006b3a:	1821      	adds	r1, r4, r0
 8006b3c:	428a      	cmp	r2, r1
 8006b3e:	bf04      	itt	eq
 8006b40:	6811      	ldreq	r1, [r2, #0]
 8006b42:	6852      	ldreq	r2, [r2, #4]
 8006b44:	6062      	str	r2, [r4, #4]
 8006b46:	bf04      	itt	eq
 8006b48:	1809      	addeq	r1, r1, r0
 8006b4a:	6021      	streq	r1, [r4, #0]
 8006b4c:	605c      	str	r4, [r3, #4]
 8006b4e:	e7c7      	b.n	8006ae0 <_free_r+0x24>
 8006b50:	bd38      	pop	{r3, r4, r5, pc}
 8006b52:	bf00      	nop
 8006b54:	20000098 	.word	0x20000098

08006b58 <_malloc_r>:
 8006b58:	b570      	push	{r4, r5, r6, lr}
 8006b5a:	1ccd      	adds	r5, r1, #3
 8006b5c:	f025 0503 	bic.w	r5, r5, #3
 8006b60:	3508      	adds	r5, #8
 8006b62:	2d0c      	cmp	r5, #12
 8006b64:	bf38      	it	cc
 8006b66:	250c      	movcc	r5, #12
 8006b68:	2d00      	cmp	r5, #0
 8006b6a:	4606      	mov	r6, r0
 8006b6c:	db01      	blt.n	8006b72 <_malloc_r+0x1a>
 8006b6e:	42a9      	cmp	r1, r5
 8006b70:	d903      	bls.n	8006b7a <_malloc_r+0x22>
 8006b72:	230c      	movs	r3, #12
 8006b74:	6033      	str	r3, [r6, #0]
 8006b76:	2000      	movs	r0, #0
 8006b78:	bd70      	pop	{r4, r5, r6, pc}
 8006b7a:	f000 fbef 	bl	800735c <__malloc_lock>
 8006b7e:	4a21      	ldr	r2, [pc, #132]	; (8006c04 <_malloc_r+0xac>)
 8006b80:	6814      	ldr	r4, [r2, #0]
 8006b82:	4621      	mov	r1, r4
 8006b84:	b991      	cbnz	r1, 8006bac <_malloc_r+0x54>
 8006b86:	4c20      	ldr	r4, [pc, #128]	; (8006c08 <_malloc_r+0xb0>)
 8006b88:	6823      	ldr	r3, [r4, #0]
 8006b8a:	b91b      	cbnz	r3, 8006b94 <_malloc_r+0x3c>
 8006b8c:	4630      	mov	r0, r6
 8006b8e:	f000 fb17 	bl	80071c0 <_sbrk_r>
 8006b92:	6020      	str	r0, [r4, #0]
 8006b94:	4629      	mov	r1, r5
 8006b96:	4630      	mov	r0, r6
 8006b98:	f000 fb12 	bl	80071c0 <_sbrk_r>
 8006b9c:	1c43      	adds	r3, r0, #1
 8006b9e:	d124      	bne.n	8006bea <_malloc_r+0x92>
 8006ba0:	230c      	movs	r3, #12
 8006ba2:	6033      	str	r3, [r6, #0]
 8006ba4:	4630      	mov	r0, r6
 8006ba6:	f000 fbda 	bl	800735e <__malloc_unlock>
 8006baa:	e7e4      	b.n	8006b76 <_malloc_r+0x1e>
 8006bac:	680b      	ldr	r3, [r1, #0]
 8006bae:	1b5b      	subs	r3, r3, r5
 8006bb0:	d418      	bmi.n	8006be4 <_malloc_r+0x8c>
 8006bb2:	2b0b      	cmp	r3, #11
 8006bb4:	d90f      	bls.n	8006bd6 <_malloc_r+0x7e>
 8006bb6:	600b      	str	r3, [r1, #0]
 8006bb8:	50cd      	str	r5, [r1, r3]
 8006bba:	18cc      	adds	r4, r1, r3
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	f000 fbce 	bl	800735e <__malloc_unlock>
 8006bc2:	f104 000b 	add.w	r0, r4, #11
 8006bc6:	1d23      	adds	r3, r4, #4
 8006bc8:	f020 0007 	bic.w	r0, r0, #7
 8006bcc:	1ac3      	subs	r3, r0, r3
 8006bce:	d0d3      	beq.n	8006b78 <_malloc_r+0x20>
 8006bd0:	425a      	negs	r2, r3
 8006bd2:	50e2      	str	r2, [r4, r3]
 8006bd4:	e7d0      	b.n	8006b78 <_malloc_r+0x20>
 8006bd6:	428c      	cmp	r4, r1
 8006bd8:	684b      	ldr	r3, [r1, #4]
 8006bda:	bf16      	itet	ne
 8006bdc:	6063      	strne	r3, [r4, #4]
 8006bde:	6013      	streq	r3, [r2, #0]
 8006be0:	460c      	movne	r4, r1
 8006be2:	e7eb      	b.n	8006bbc <_malloc_r+0x64>
 8006be4:	460c      	mov	r4, r1
 8006be6:	6849      	ldr	r1, [r1, #4]
 8006be8:	e7cc      	b.n	8006b84 <_malloc_r+0x2c>
 8006bea:	1cc4      	adds	r4, r0, #3
 8006bec:	f024 0403 	bic.w	r4, r4, #3
 8006bf0:	42a0      	cmp	r0, r4
 8006bf2:	d005      	beq.n	8006c00 <_malloc_r+0xa8>
 8006bf4:	1a21      	subs	r1, r4, r0
 8006bf6:	4630      	mov	r0, r6
 8006bf8:	f000 fae2 	bl	80071c0 <_sbrk_r>
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	d0cf      	beq.n	8006ba0 <_malloc_r+0x48>
 8006c00:	6025      	str	r5, [r4, #0]
 8006c02:	e7db      	b.n	8006bbc <_malloc_r+0x64>
 8006c04:	20000098 	.word	0x20000098
 8006c08:	2000009c 	.word	0x2000009c

08006c0c <__ssputs_r>:
 8006c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c10:	688e      	ldr	r6, [r1, #8]
 8006c12:	429e      	cmp	r6, r3
 8006c14:	4682      	mov	sl, r0
 8006c16:	460c      	mov	r4, r1
 8006c18:	4690      	mov	r8, r2
 8006c1a:	4699      	mov	r9, r3
 8006c1c:	d837      	bhi.n	8006c8e <__ssputs_r+0x82>
 8006c1e:	898a      	ldrh	r2, [r1, #12]
 8006c20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c24:	d031      	beq.n	8006c8a <__ssputs_r+0x7e>
 8006c26:	6825      	ldr	r5, [r4, #0]
 8006c28:	6909      	ldr	r1, [r1, #16]
 8006c2a:	1a6f      	subs	r7, r5, r1
 8006c2c:	6965      	ldr	r5, [r4, #20]
 8006c2e:	2302      	movs	r3, #2
 8006c30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c34:	fb95 f5f3 	sdiv	r5, r5, r3
 8006c38:	f109 0301 	add.w	r3, r9, #1
 8006c3c:	443b      	add	r3, r7
 8006c3e:	429d      	cmp	r5, r3
 8006c40:	bf38      	it	cc
 8006c42:	461d      	movcc	r5, r3
 8006c44:	0553      	lsls	r3, r2, #21
 8006c46:	d530      	bpl.n	8006caa <__ssputs_r+0x9e>
 8006c48:	4629      	mov	r1, r5
 8006c4a:	f7ff ff85 	bl	8006b58 <_malloc_r>
 8006c4e:	4606      	mov	r6, r0
 8006c50:	b950      	cbnz	r0, 8006c68 <__ssputs_r+0x5c>
 8006c52:	230c      	movs	r3, #12
 8006c54:	f8ca 3000 	str.w	r3, [sl]
 8006c58:	89a3      	ldrh	r3, [r4, #12]
 8006c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c5e:	81a3      	strh	r3, [r4, #12]
 8006c60:	f04f 30ff 	mov.w	r0, #4294967295
 8006c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c68:	463a      	mov	r2, r7
 8006c6a:	6921      	ldr	r1, [r4, #16]
 8006c6c:	f000 fb52 	bl	8007314 <memcpy>
 8006c70:	89a3      	ldrh	r3, [r4, #12]
 8006c72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c7a:	81a3      	strh	r3, [r4, #12]
 8006c7c:	6126      	str	r6, [r4, #16]
 8006c7e:	6165      	str	r5, [r4, #20]
 8006c80:	443e      	add	r6, r7
 8006c82:	1bed      	subs	r5, r5, r7
 8006c84:	6026      	str	r6, [r4, #0]
 8006c86:	60a5      	str	r5, [r4, #8]
 8006c88:	464e      	mov	r6, r9
 8006c8a:	454e      	cmp	r6, r9
 8006c8c:	d900      	bls.n	8006c90 <__ssputs_r+0x84>
 8006c8e:	464e      	mov	r6, r9
 8006c90:	4632      	mov	r2, r6
 8006c92:	4641      	mov	r1, r8
 8006c94:	6820      	ldr	r0, [r4, #0]
 8006c96:	f000 fb48 	bl	800732a <memmove>
 8006c9a:	68a3      	ldr	r3, [r4, #8]
 8006c9c:	1b9b      	subs	r3, r3, r6
 8006c9e:	60a3      	str	r3, [r4, #8]
 8006ca0:	6823      	ldr	r3, [r4, #0]
 8006ca2:	441e      	add	r6, r3
 8006ca4:	6026      	str	r6, [r4, #0]
 8006ca6:	2000      	movs	r0, #0
 8006ca8:	e7dc      	b.n	8006c64 <__ssputs_r+0x58>
 8006caa:	462a      	mov	r2, r5
 8006cac:	f000 fb58 	bl	8007360 <_realloc_r>
 8006cb0:	4606      	mov	r6, r0
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d1e2      	bne.n	8006c7c <__ssputs_r+0x70>
 8006cb6:	6921      	ldr	r1, [r4, #16]
 8006cb8:	4650      	mov	r0, sl
 8006cba:	f7ff feff 	bl	8006abc <_free_r>
 8006cbe:	e7c8      	b.n	8006c52 <__ssputs_r+0x46>

08006cc0 <_svfiprintf_r>:
 8006cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc4:	461d      	mov	r5, r3
 8006cc6:	898b      	ldrh	r3, [r1, #12]
 8006cc8:	061f      	lsls	r7, r3, #24
 8006cca:	b09d      	sub	sp, #116	; 0x74
 8006ccc:	4680      	mov	r8, r0
 8006cce:	460c      	mov	r4, r1
 8006cd0:	4616      	mov	r6, r2
 8006cd2:	d50f      	bpl.n	8006cf4 <_svfiprintf_r+0x34>
 8006cd4:	690b      	ldr	r3, [r1, #16]
 8006cd6:	b96b      	cbnz	r3, 8006cf4 <_svfiprintf_r+0x34>
 8006cd8:	2140      	movs	r1, #64	; 0x40
 8006cda:	f7ff ff3d 	bl	8006b58 <_malloc_r>
 8006cde:	6020      	str	r0, [r4, #0]
 8006ce0:	6120      	str	r0, [r4, #16]
 8006ce2:	b928      	cbnz	r0, 8006cf0 <_svfiprintf_r+0x30>
 8006ce4:	230c      	movs	r3, #12
 8006ce6:	f8c8 3000 	str.w	r3, [r8]
 8006cea:	f04f 30ff 	mov.w	r0, #4294967295
 8006cee:	e0c8      	b.n	8006e82 <_svfiprintf_r+0x1c2>
 8006cf0:	2340      	movs	r3, #64	; 0x40
 8006cf2:	6163      	str	r3, [r4, #20]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8006cf8:	2320      	movs	r3, #32
 8006cfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cfe:	2330      	movs	r3, #48	; 0x30
 8006d00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d04:	9503      	str	r5, [sp, #12]
 8006d06:	f04f 0b01 	mov.w	fp, #1
 8006d0a:	4637      	mov	r7, r6
 8006d0c:	463d      	mov	r5, r7
 8006d0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006d12:	b10b      	cbz	r3, 8006d18 <_svfiprintf_r+0x58>
 8006d14:	2b25      	cmp	r3, #37	; 0x25
 8006d16:	d13e      	bne.n	8006d96 <_svfiprintf_r+0xd6>
 8006d18:	ebb7 0a06 	subs.w	sl, r7, r6
 8006d1c:	d00b      	beq.n	8006d36 <_svfiprintf_r+0x76>
 8006d1e:	4653      	mov	r3, sl
 8006d20:	4632      	mov	r2, r6
 8006d22:	4621      	mov	r1, r4
 8006d24:	4640      	mov	r0, r8
 8006d26:	f7ff ff71 	bl	8006c0c <__ssputs_r>
 8006d2a:	3001      	adds	r0, #1
 8006d2c:	f000 80a4 	beq.w	8006e78 <_svfiprintf_r+0x1b8>
 8006d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d32:	4453      	add	r3, sl
 8006d34:	9309      	str	r3, [sp, #36]	; 0x24
 8006d36:	783b      	ldrb	r3, [r7, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f000 809d 	beq.w	8006e78 <_svfiprintf_r+0x1b8>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	f04f 32ff 	mov.w	r2, #4294967295
 8006d44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d48:	9304      	str	r3, [sp, #16]
 8006d4a:	9307      	str	r3, [sp, #28]
 8006d4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d50:	931a      	str	r3, [sp, #104]	; 0x68
 8006d52:	462f      	mov	r7, r5
 8006d54:	2205      	movs	r2, #5
 8006d56:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006d5a:	4850      	ldr	r0, [pc, #320]	; (8006e9c <_svfiprintf_r+0x1dc>)
 8006d5c:	f7f9 fa40 	bl	80001e0 <memchr>
 8006d60:	9b04      	ldr	r3, [sp, #16]
 8006d62:	b9d0      	cbnz	r0, 8006d9a <_svfiprintf_r+0xda>
 8006d64:	06d9      	lsls	r1, r3, #27
 8006d66:	bf44      	itt	mi
 8006d68:	2220      	movmi	r2, #32
 8006d6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d6e:	071a      	lsls	r2, r3, #28
 8006d70:	bf44      	itt	mi
 8006d72:	222b      	movmi	r2, #43	; 0x2b
 8006d74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d78:	782a      	ldrb	r2, [r5, #0]
 8006d7a:	2a2a      	cmp	r2, #42	; 0x2a
 8006d7c:	d015      	beq.n	8006daa <_svfiprintf_r+0xea>
 8006d7e:	9a07      	ldr	r2, [sp, #28]
 8006d80:	462f      	mov	r7, r5
 8006d82:	2000      	movs	r0, #0
 8006d84:	250a      	movs	r5, #10
 8006d86:	4639      	mov	r1, r7
 8006d88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d8c:	3b30      	subs	r3, #48	; 0x30
 8006d8e:	2b09      	cmp	r3, #9
 8006d90:	d94d      	bls.n	8006e2e <_svfiprintf_r+0x16e>
 8006d92:	b1b8      	cbz	r0, 8006dc4 <_svfiprintf_r+0x104>
 8006d94:	e00f      	b.n	8006db6 <_svfiprintf_r+0xf6>
 8006d96:	462f      	mov	r7, r5
 8006d98:	e7b8      	b.n	8006d0c <_svfiprintf_r+0x4c>
 8006d9a:	4a40      	ldr	r2, [pc, #256]	; (8006e9c <_svfiprintf_r+0x1dc>)
 8006d9c:	1a80      	subs	r0, r0, r2
 8006d9e:	fa0b f000 	lsl.w	r0, fp, r0
 8006da2:	4318      	orrs	r0, r3
 8006da4:	9004      	str	r0, [sp, #16]
 8006da6:	463d      	mov	r5, r7
 8006da8:	e7d3      	b.n	8006d52 <_svfiprintf_r+0x92>
 8006daa:	9a03      	ldr	r2, [sp, #12]
 8006dac:	1d11      	adds	r1, r2, #4
 8006dae:	6812      	ldr	r2, [r2, #0]
 8006db0:	9103      	str	r1, [sp, #12]
 8006db2:	2a00      	cmp	r2, #0
 8006db4:	db01      	blt.n	8006dba <_svfiprintf_r+0xfa>
 8006db6:	9207      	str	r2, [sp, #28]
 8006db8:	e004      	b.n	8006dc4 <_svfiprintf_r+0x104>
 8006dba:	4252      	negs	r2, r2
 8006dbc:	f043 0302 	orr.w	r3, r3, #2
 8006dc0:	9207      	str	r2, [sp, #28]
 8006dc2:	9304      	str	r3, [sp, #16]
 8006dc4:	783b      	ldrb	r3, [r7, #0]
 8006dc6:	2b2e      	cmp	r3, #46	; 0x2e
 8006dc8:	d10c      	bne.n	8006de4 <_svfiprintf_r+0x124>
 8006dca:	787b      	ldrb	r3, [r7, #1]
 8006dcc:	2b2a      	cmp	r3, #42	; 0x2a
 8006dce:	d133      	bne.n	8006e38 <_svfiprintf_r+0x178>
 8006dd0:	9b03      	ldr	r3, [sp, #12]
 8006dd2:	1d1a      	adds	r2, r3, #4
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	9203      	str	r2, [sp, #12]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	bfb8      	it	lt
 8006ddc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006de0:	3702      	adds	r7, #2
 8006de2:	9305      	str	r3, [sp, #20]
 8006de4:	4d2e      	ldr	r5, [pc, #184]	; (8006ea0 <_svfiprintf_r+0x1e0>)
 8006de6:	7839      	ldrb	r1, [r7, #0]
 8006de8:	2203      	movs	r2, #3
 8006dea:	4628      	mov	r0, r5
 8006dec:	f7f9 f9f8 	bl	80001e0 <memchr>
 8006df0:	b138      	cbz	r0, 8006e02 <_svfiprintf_r+0x142>
 8006df2:	2340      	movs	r3, #64	; 0x40
 8006df4:	1b40      	subs	r0, r0, r5
 8006df6:	fa03 f000 	lsl.w	r0, r3, r0
 8006dfa:	9b04      	ldr	r3, [sp, #16]
 8006dfc:	4303      	orrs	r3, r0
 8006dfe:	3701      	adds	r7, #1
 8006e00:	9304      	str	r3, [sp, #16]
 8006e02:	7839      	ldrb	r1, [r7, #0]
 8006e04:	4827      	ldr	r0, [pc, #156]	; (8006ea4 <_svfiprintf_r+0x1e4>)
 8006e06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e0a:	2206      	movs	r2, #6
 8006e0c:	1c7e      	adds	r6, r7, #1
 8006e0e:	f7f9 f9e7 	bl	80001e0 <memchr>
 8006e12:	2800      	cmp	r0, #0
 8006e14:	d038      	beq.n	8006e88 <_svfiprintf_r+0x1c8>
 8006e16:	4b24      	ldr	r3, [pc, #144]	; (8006ea8 <_svfiprintf_r+0x1e8>)
 8006e18:	bb13      	cbnz	r3, 8006e60 <_svfiprintf_r+0x1a0>
 8006e1a:	9b03      	ldr	r3, [sp, #12]
 8006e1c:	3307      	adds	r3, #7
 8006e1e:	f023 0307 	bic.w	r3, r3, #7
 8006e22:	3308      	adds	r3, #8
 8006e24:	9303      	str	r3, [sp, #12]
 8006e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e28:	444b      	add	r3, r9
 8006e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8006e2c:	e76d      	b.n	8006d0a <_svfiprintf_r+0x4a>
 8006e2e:	fb05 3202 	mla	r2, r5, r2, r3
 8006e32:	2001      	movs	r0, #1
 8006e34:	460f      	mov	r7, r1
 8006e36:	e7a6      	b.n	8006d86 <_svfiprintf_r+0xc6>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	3701      	adds	r7, #1
 8006e3c:	9305      	str	r3, [sp, #20]
 8006e3e:	4619      	mov	r1, r3
 8006e40:	250a      	movs	r5, #10
 8006e42:	4638      	mov	r0, r7
 8006e44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e48:	3a30      	subs	r2, #48	; 0x30
 8006e4a:	2a09      	cmp	r2, #9
 8006e4c:	d903      	bls.n	8006e56 <_svfiprintf_r+0x196>
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d0c8      	beq.n	8006de4 <_svfiprintf_r+0x124>
 8006e52:	9105      	str	r1, [sp, #20]
 8006e54:	e7c6      	b.n	8006de4 <_svfiprintf_r+0x124>
 8006e56:	fb05 2101 	mla	r1, r5, r1, r2
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	4607      	mov	r7, r0
 8006e5e:	e7f0      	b.n	8006e42 <_svfiprintf_r+0x182>
 8006e60:	ab03      	add	r3, sp, #12
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	4622      	mov	r2, r4
 8006e66:	4b11      	ldr	r3, [pc, #68]	; (8006eac <_svfiprintf_r+0x1ec>)
 8006e68:	a904      	add	r1, sp, #16
 8006e6a:	4640      	mov	r0, r8
 8006e6c:	f3af 8000 	nop.w
 8006e70:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006e74:	4681      	mov	r9, r0
 8006e76:	d1d6      	bne.n	8006e26 <_svfiprintf_r+0x166>
 8006e78:	89a3      	ldrh	r3, [r4, #12]
 8006e7a:	065b      	lsls	r3, r3, #25
 8006e7c:	f53f af35 	bmi.w	8006cea <_svfiprintf_r+0x2a>
 8006e80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e82:	b01d      	add	sp, #116	; 0x74
 8006e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e88:	ab03      	add	r3, sp, #12
 8006e8a:	9300      	str	r3, [sp, #0]
 8006e8c:	4622      	mov	r2, r4
 8006e8e:	4b07      	ldr	r3, [pc, #28]	; (8006eac <_svfiprintf_r+0x1ec>)
 8006e90:	a904      	add	r1, sp, #16
 8006e92:	4640      	mov	r0, r8
 8006e94:	f000 f882 	bl	8006f9c <_printf_i>
 8006e98:	e7ea      	b.n	8006e70 <_svfiprintf_r+0x1b0>
 8006e9a:	bf00      	nop
 8006e9c:	080078ac 	.word	0x080078ac
 8006ea0:	080078b2 	.word	0x080078b2
 8006ea4:	080078b6 	.word	0x080078b6
 8006ea8:	00000000 	.word	0x00000000
 8006eac:	08006c0d 	.word	0x08006c0d

08006eb0 <_printf_common>:
 8006eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb4:	4691      	mov	r9, r2
 8006eb6:	461f      	mov	r7, r3
 8006eb8:	688a      	ldr	r2, [r1, #8]
 8006eba:	690b      	ldr	r3, [r1, #16]
 8006ebc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	bfb8      	it	lt
 8006ec4:	4613      	movlt	r3, r2
 8006ec6:	f8c9 3000 	str.w	r3, [r9]
 8006eca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ece:	4606      	mov	r6, r0
 8006ed0:	460c      	mov	r4, r1
 8006ed2:	b112      	cbz	r2, 8006eda <_printf_common+0x2a>
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	f8c9 3000 	str.w	r3, [r9]
 8006eda:	6823      	ldr	r3, [r4, #0]
 8006edc:	0699      	lsls	r1, r3, #26
 8006ede:	bf42      	ittt	mi
 8006ee0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006ee4:	3302      	addmi	r3, #2
 8006ee6:	f8c9 3000 	strmi.w	r3, [r9]
 8006eea:	6825      	ldr	r5, [r4, #0]
 8006eec:	f015 0506 	ands.w	r5, r5, #6
 8006ef0:	d107      	bne.n	8006f02 <_printf_common+0x52>
 8006ef2:	f104 0a19 	add.w	sl, r4, #25
 8006ef6:	68e3      	ldr	r3, [r4, #12]
 8006ef8:	f8d9 2000 	ldr.w	r2, [r9]
 8006efc:	1a9b      	subs	r3, r3, r2
 8006efe:	42ab      	cmp	r3, r5
 8006f00:	dc28      	bgt.n	8006f54 <_printf_common+0xa4>
 8006f02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006f06:	6822      	ldr	r2, [r4, #0]
 8006f08:	3300      	adds	r3, #0
 8006f0a:	bf18      	it	ne
 8006f0c:	2301      	movne	r3, #1
 8006f0e:	0692      	lsls	r2, r2, #26
 8006f10:	d42d      	bmi.n	8006f6e <_printf_common+0xbe>
 8006f12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f16:	4639      	mov	r1, r7
 8006f18:	4630      	mov	r0, r6
 8006f1a:	47c0      	blx	r8
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	d020      	beq.n	8006f62 <_printf_common+0xb2>
 8006f20:	6823      	ldr	r3, [r4, #0]
 8006f22:	68e5      	ldr	r5, [r4, #12]
 8006f24:	f8d9 2000 	ldr.w	r2, [r9]
 8006f28:	f003 0306 	and.w	r3, r3, #6
 8006f2c:	2b04      	cmp	r3, #4
 8006f2e:	bf08      	it	eq
 8006f30:	1aad      	subeq	r5, r5, r2
 8006f32:	68a3      	ldr	r3, [r4, #8]
 8006f34:	6922      	ldr	r2, [r4, #16]
 8006f36:	bf0c      	ite	eq
 8006f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f3c:	2500      	movne	r5, #0
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	bfc4      	itt	gt
 8006f42:	1a9b      	subgt	r3, r3, r2
 8006f44:	18ed      	addgt	r5, r5, r3
 8006f46:	f04f 0900 	mov.w	r9, #0
 8006f4a:	341a      	adds	r4, #26
 8006f4c:	454d      	cmp	r5, r9
 8006f4e:	d11a      	bne.n	8006f86 <_printf_common+0xd6>
 8006f50:	2000      	movs	r0, #0
 8006f52:	e008      	b.n	8006f66 <_printf_common+0xb6>
 8006f54:	2301      	movs	r3, #1
 8006f56:	4652      	mov	r2, sl
 8006f58:	4639      	mov	r1, r7
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	47c0      	blx	r8
 8006f5e:	3001      	adds	r0, #1
 8006f60:	d103      	bne.n	8006f6a <_printf_common+0xba>
 8006f62:	f04f 30ff 	mov.w	r0, #4294967295
 8006f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f6a:	3501      	adds	r5, #1
 8006f6c:	e7c3      	b.n	8006ef6 <_printf_common+0x46>
 8006f6e:	18e1      	adds	r1, r4, r3
 8006f70:	1c5a      	adds	r2, r3, #1
 8006f72:	2030      	movs	r0, #48	; 0x30
 8006f74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f78:	4422      	add	r2, r4
 8006f7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f82:	3302      	adds	r3, #2
 8006f84:	e7c5      	b.n	8006f12 <_printf_common+0x62>
 8006f86:	2301      	movs	r3, #1
 8006f88:	4622      	mov	r2, r4
 8006f8a:	4639      	mov	r1, r7
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	47c0      	blx	r8
 8006f90:	3001      	adds	r0, #1
 8006f92:	d0e6      	beq.n	8006f62 <_printf_common+0xb2>
 8006f94:	f109 0901 	add.w	r9, r9, #1
 8006f98:	e7d8      	b.n	8006f4c <_printf_common+0x9c>
	...

08006f9c <_printf_i>:
 8006f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006fa0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006fa4:	460c      	mov	r4, r1
 8006fa6:	7e09      	ldrb	r1, [r1, #24]
 8006fa8:	b085      	sub	sp, #20
 8006faa:	296e      	cmp	r1, #110	; 0x6e
 8006fac:	4617      	mov	r7, r2
 8006fae:	4606      	mov	r6, r0
 8006fb0:	4698      	mov	r8, r3
 8006fb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fb4:	f000 80b3 	beq.w	800711e <_printf_i+0x182>
 8006fb8:	d822      	bhi.n	8007000 <_printf_i+0x64>
 8006fba:	2963      	cmp	r1, #99	; 0x63
 8006fbc:	d036      	beq.n	800702c <_printf_i+0x90>
 8006fbe:	d80a      	bhi.n	8006fd6 <_printf_i+0x3a>
 8006fc0:	2900      	cmp	r1, #0
 8006fc2:	f000 80b9 	beq.w	8007138 <_printf_i+0x19c>
 8006fc6:	2958      	cmp	r1, #88	; 0x58
 8006fc8:	f000 8083 	beq.w	80070d2 <_printf_i+0x136>
 8006fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fd0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006fd4:	e032      	b.n	800703c <_printf_i+0xa0>
 8006fd6:	2964      	cmp	r1, #100	; 0x64
 8006fd8:	d001      	beq.n	8006fde <_printf_i+0x42>
 8006fda:	2969      	cmp	r1, #105	; 0x69
 8006fdc:	d1f6      	bne.n	8006fcc <_printf_i+0x30>
 8006fde:	6820      	ldr	r0, [r4, #0]
 8006fe0:	6813      	ldr	r3, [r2, #0]
 8006fe2:	0605      	lsls	r5, r0, #24
 8006fe4:	f103 0104 	add.w	r1, r3, #4
 8006fe8:	d52a      	bpl.n	8007040 <_printf_i+0xa4>
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6011      	str	r1, [r2, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	da03      	bge.n	8006ffa <_printf_i+0x5e>
 8006ff2:	222d      	movs	r2, #45	; 0x2d
 8006ff4:	425b      	negs	r3, r3
 8006ff6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006ffa:	486f      	ldr	r0, [pc, #444]	; (80071b8 <_printf_i+0x21c>)
 8006ffc:	220a      	movs	r2, #10
 8006ffe:	e039      	b.n	8007074 <_printf_i+0xd8>
 8007000:	2973      	cmp	r1, #115	; 0x73
 8007002:	f000 809d 	beq.w	8007140 <_printf_i+0x1a4>
 8007006:	d808      	bhi.n	800701a <_printf_i+0x7e>
 8007008:	296f      	cmp	r1, #111	; 0x6f
 800700a:	d020      	beq.n	800704e <_printf_i+0xb2>
 800700c:	2970      	cmp	r1, #112	; 0x70
 800700e:	d1dd      	bne.n	8006fcc <_printf_i+0x30>
 8007010:	6823      	ldr	r3, [r4, #0]
 8007012:	f043 0320 	orr.w	r3, r3, #32
 8007016:	6023      	str	r3, [r4, #0]
 8007018:	e003      	b.n	8007022 <_printf_i+0x86>
 800701a:	2975      	cmp	r1, #117	; 0x75
 800701c:	d017      	beq.n	800704e <_printf_i+0xb2>
 800701e:	2978      	cmp	r1, #120	; 0x78
 8007020:	d1d4      	bne.n	8006fcc <_printf_i+0x30>
 8007022:	2378      	movs	r3, #120	; 0x78
 8007024:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007028:	4864      	ldr	r0, [pc, #400]	; (80071bc <_printf_i+0x220>)
 800702a:	e055      	b.n	80070d8 <_printf_i+0x13c>
 800702c:	6813      	ldr	r3, [r2, #0]
 800702e:	1d19      	adds	r1, r3, #4
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	6011      	str	r1, [r2, #0]
 8007034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800703c:	2301      	movs	r3, #1
 800703e:	e08c      	b.n	800715a <_printf_i+0x1be>
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6011      	str	r1, [r2, #0]
 8007044:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007048:	bf18      	it	ne
 800704a:	b21b      	sxthne	r3, r3
 800704c:	e7cf      	b.n	8006fee <_printf_i+0x52>
 800704e:	6813      	ldr	r3, [r2, #0]
 8007050:	6825      	ldr	r5, [r4, #0]
 8007052:	1d18      	adds	r0, r3, #4
 8007054:	6010      	str	r0, [r2, #0]
 8007056:	0628      	lsls	r0, r5, #24
 8007058:	d501      	bpl.n	800705e <_printf_i+0xc2>
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	e002      	b.n	8007064 <_printf_i+0xc8>
 800705e:	0668      	lsls	r0, r5, #25
 8007060:	d5fb      	bpl.n	800705a <_printf_i+0xbe>
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	4854      	ldr	r0, [pc, #336]	; (80071b8 <_printf_i+0x21c>)
 8007066:	296f      	cmp	r1, #111	; 0x6f
 8007068:	bf14      	ite	ne
 800706a:	220a      	movne	r2, #10
 800706c:	2208      	moveq	r2, #8
 800706e:	2100      	movs	r1, #0
 8007070:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007074:	6865      	ldr	r5, [r4, #4]
 8007076:	60a5      	str	r5, [r4, #8]
 8007078:	2d00      	cmp	r5, #0
 800707a:	f2c0 8095 	blt.w	80071a8 <_printf_i+0x20c>
 800707e:	6821      	ldr	r1, [r4, #0]
 8007080:	f021 0104 	bic.w	r1, r1, #4
 8007084:	6021      	str	r1, [r4, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d13d      	bne.n	8007106 <_printf_i+0x16a>
 800708a:	2d00      	cmp	r5, #0
 800708c:	f040 808e 	bne.w	80071ac <_printf_i+0x210>
 8007090:	4665      	mov	r5, ip
 8007092:	2a08      	cmp	r2, #8
 8007094:	d10b      	bne.n	80070ae <_printf_i+0x112>
 8007096:	6823      	ldr	r3, [r4, #0]
 8007098:	07db      	lsls	r3, r3, #31
 800709a:	d508      	bpl.n	80070ae <_printf_i+0x112>
 800709c:	6923      	ldr	r3, [r4, #16]
 800709e:	6862      	ldr	r2, [r4, #4]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	bfde      	ittt	le
 80070a4:	2330      	movle	r3, #48	; 0x30
 80070a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80070ae:	ebac 0305 	sub.w	r3, ip, r5
 80070b2:	6123      	str	r3, [r4, #16]
 80070b4:	f8cd 8000 	str.w	r8, [sp]
 80070b8:	463b      	mov	r3, r7
 80070ba:	aa03      	add	r2, sp, #12
 80070bc:	4621      	mov	r1, r4
 80070be:	4630      	mov	r0, r6
 80070c0:	f7ff fef6 	bl	8006eb0 <_printf_common>
 80070c4:	3001      	adds	r0, #1
 80070c6:	d14d      	bne.n	8007164 <_printf_i+0x1c8>
 80070c8:	f04f 30ff 	mov.w	r0, #4294967295
 80070cc:	b005      	add	sp, #20
 80070ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070d2:	4839      	ldr	r0, [pc, #228]	; (80071b8 <_printf_i+0x21c>)
 80070d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80070d8:	6813      	ldr	r3, [r2, #0]
 80070da:	6821      	ldr	r1, [r4, #0]
 80070dc:	1d1d      	adds	r5, r3, #4
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6015      	str	r5, [r2, #0]
 80070e2:	060a      	lsls	r2, r1, #24
 80070e4:	d50b      	bpl.n	80070fe <_printf_i+0x162>
 80070e6:	07ca      	lsls	r2, r1, #31
 80070e8:	bf44      	itt	mi
 80070ea:	f041 0120 	orrmi.w	r1, r1, #32
 80070ee:	6021      	strmi	r1, [r4, #0]
 80070f0:	b91b      	cbnz	r3, 80070fa <_printf_i+0x15e>
 80070f2:	6822      	ldr	r2, [r4, #0]
 80070f4:	f022 0220 	bic.w	r2, r2, #32
 80070f8:	6022      	str	r2, [r4, #0]
 80070fa:	2210      	movs	r2, #16
 80070fc:	e7b7      	b.n	800706e <_printf_i+0xd2>
 80070fe:	064d      	lsls	r5, r1, #25
 8007100:	bf48      	it	mi
 8007102:	b29b      	uxthmi	r3, r3
 8007104:	e7ef      	b.n	80070e6 <_printf_i+0x14a>
 8007106:	4665      	mov	r5, ip
 8007108:	fbb3 f1f2 	udiv	r1, r3, r2
 800710c:	fb02 3311 	mls	r3, r2, r1, r3
 8007110:	5cc3      	ldrb	r3, [r0, r3]
 8007112:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007116:	460b      	mov	r3, r1
 8007118:	2900      	cmp	r1, #0
 800711a:	d1f5      	bne.n	8007108 <_printf_i+0x16c>
 800711c:	e7b9      	b.n	8007092 <_printf_i+0xf6>
 800711e:	6813      	ldr	r3, [r2, #0]
 8007120:	6825      	ldr	r5, [r4, #0]
 8007122:	6961      	ldr	r1, [r4, #20]
 8007124:	1d18      	adds	r0, r3, #4
 8007126:	6010      	str	r0, [r2, #0]
 8007128:	0628      	lsls	r0, r5, #24
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	d501      	bpl.n	8007132 <_printf_i+0x196>
 800712e:	6019      	str	r1, [r3, #0]
 8007130:	e002      	b.n	8007138 <_printf_i+0x19c>
 8007132:	066a      	lsls	r2, r5, #25
 8007134:	d5fb      	bpl.n	800712e <_printf_i+0x192>
 8007136:	8019      	strh	r1, [r3, #0]
 8007138:	2300      	movs	r3, #0
 800713a:	6123      	str	r3, [r4, #16]
 800713c:	4665      	mov	r5, ip
 800713e:	e7b9      	b.n	80070b4 <_printf_i+0x118>
 8007140:	6813      	ldr	r3, [r2, #0]
 8007142:	1d19      	adds	r1, r3, #4
 8007144:	6011      	str	r1, [r2, #0]
 8007146:	681d      	ldr	r5, [r3, #0]
 8007148:	6862      	ldr	r2, [r4, #4]
 800714a:	2100      	movs	r1, #0
 800714c:	4628      	mov	r0, r5
 800714e:	f7f9 f847 	bl	80001e0 <memchr>
 8007152:	b108      	cbz	r0, 8007158 <_printf_i+0x1bc>
 8007154:	1b40      	subs	r0, r0, r5
 8007156:	6060      	str	r0, [r4, #4]
 8007158:	6863      	ldr	r3, [r4, #4]
 800715a:	6123      	str	r3, [r4, #16]
 800715c:	2300      	movs	r3, #0
 800715e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007162:	e7a7      	b.n	80070b4 <_printf_i+0x118>
 8007164:	6923      	ldr	r3, [r4, #16]
 8007166:	462a      	mov	r2, r5
 8007168:	4639      	mov	r1, r7
 800716a:	4630      	mov	r0, r6
 800716c:	47c0      	blx	r8
 800716e:	3001      	adds	r0, #1
 8007170:	d0aa      	beq.n	80070c8 <_printf_i+0x12c>
 8007172:	6823      	ldr	r3, [r4, #0]
 8007174:	079b      	lsls	r3, r3, #30
 8007176:	d413      	bmi.n	80071a0 <_printf_i+0x204>
 8007178:	68e0      	ldr	r0, [r4, #12]
 800717a:	9b03      	ldr	r3, [sp, #12]
 800717c:	4298      	cmp	r0, r3
 800717e:	bfb8      	it	lt
 8007180:	4618      	movlt	r0, r3
 8007182:	e7a3      	b.n	80070cc <_printf_i+0x130>
 8007184:	2301      	movs	r3, #1
 8007186:	464a      	mov	r2, r9
 8007188:	4639      	mov	r1, r7
 800718a:	4630      	mov	r0, r6
 800718c:	47c0      	blx	r8
 800718e:	3001      	adds	r0, #1
 8007190:	d09a      	beq.n	80070c8 <_printf_i+0x12c>
 8007192:	3501      	adds	r5, #1
 8007194:	68e3      	ldr	r3, [r4, #12]
 8007196:	9a03      	ldr	r2, [sp, #12]
 8007198:	1a9b      	subs	r3, r3, r2
 800719a:	42ab      	cmp	r3, r5
 800719c:	dcf2      	bgt.n	8007184 <_printf_i+0x1e8>
 800719e:	e7eb      	b.n	8007178 <_printf_i+0x1dc>
 80071a0:	2500      	movs	r5, #0
 80071a2:	f104 0919 	add.w	r9, r4, #25
 80071a6:	e7f5      	b.n	8007194 <_printf_i+0x1f8>
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1ac      	bne.n	8007106 <_printf_i+0x16a>
 80071ac:	7803      	ldrb	r3, [r0, #0]
 80071ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071b6:	e76c      	b.n	8007092 <_printf_i+0xf6>
 80071b8:	080078bd 	.word	0x080078bd
 80071bc:	080078ce 	.word	0x080078ce

080071c0 <_sbrk_r>:
 80071c0:	b538      	push	{r3, r4, r5, lr}
 80071c2:	4c06      	ldr	r4, [pc, #24]	; (80071dc <_sbrk_r+0x1c>)
 80071c4:	2300      	movs	r3, #0
 80071c6:	4605      	mov	r5, r0
 80071c8:	4608      	mov	r0, r1
 80071ca:	6023      	str	r3, [r4, #0]
 80071cc:	f7fb fc3c 	bl	8002a48 <_sbrk>
 80071d0:	1c43      	adds	r3, r0, #1
 80071d2:	d102      	bne.n	80071da <_sbrk_r+0x1a>
 80071d4:	6823      	ldr	r3, [r4, #0]
 80071d6:	b103      	cbz	r3, 80071da <_sbrk_r+0x1a>
 80071d8:	602b      	str	r3, [r5, #0]
 80071da:	bd38      	pop	{r3, r4, r5, pc}
 80071dc:	20000268 	.word	0x20000268

080071e0 <__sread>:
 80071e0:	b510      	push	{r4, lr}
 80071e2:	460c      	mov	r4, r1
 80071e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071e8:	f000 f8e0 	bl	80073ac <_read_r>
 80071ec:	2800      	cmp	r0, #0
 80071ee:	bfab      	itete	ge
 80071f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071f2:	89a3      	ldrhlt	r3, [r4, #12]
 80071f4:	181b      	addge	r3, r3, r0
 80071f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071fa:	bfac      	ite	ge
 80071fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80071fe:	81a3      	strhlt	r3, [r4, #12]
 8007200:	bd10      	pop	{r4, pc}

08007202 <__swrite>:
 8007202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007206:	461f      	mov	r7, r3
 8007208:	898b      	ldrh	r3, [r1, #12]
 800720a:	05db      	lsls	r3, r3, #23
 800720c:	4605      	mov	r5, r0
 800720e:	460c      	mov	r4, r1
 8007210:	4616      	mov	r6, r2
 8007212:	d505      	bpl.n	8007220 <__swrite+0x1e>
 8007214:	2302      	movs	r3, #2
 8007216:	2200      	movs	r2, #0
 8007218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800721c:	f000 f868 	bl	80072f0 <_lseek_r>
 8007220:	89a3      	ldrh	r3, [r4, #12]
 8007222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007226:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800722a:	81a3      	strh	r3, [r4, #12]
 800722c:	4632      	mov	r2, r6
 800722e:	463b      	mov	r3, r7
 8007230:	4628      	mov	r0, r5
 8007232:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007236:	f000 b817 	b.w	8007268 <_write_r>

0800723a <__sseek>:
 800723a:	b510      	push	{r4, lr}
 800723c:	460c      	mov	r4, r1
 800723e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007242:	f000 f855 	bl	80072f0 <_lseek_r>
 8007246:	1c43      	adds	r3, r0, #1
 8007248:	89a3      	ldrh	r3, [r4, #12]
 800724a:	bf15      	itete	ne
 800724c:	6560      	strne	r0, [r4, #84]	; 0x54
 800724e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007252:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007256:	81a3      	strheq	r3, [r4, #12]
 8007258:	bf18      	it	ne
 800725a:	81a3      	strhne	r3, [r4, #12]
 800725c:	bd10      	pop	{r4, pc}

0800725e <__sclose>:
 800725e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007262:	f000 b813 	b.w	800728c <_close_r>
	...

08007268 <_write_r>:
 8007268:	b538      	push	{r3, r4, r5, lr}
 800726a:	4c07      	ldr	r4, [pc, #28]	; (8007288 <_write_r+0x20>)
 800726c:	4605      	mov	r5, r0
 800726e:	4608      	mov	r0, r1
 8007270:	4611      	mov	r1, r2
 8007272:	2200      	movs	r2, #0
 8007274:	6022      	str	r2, [r4, #0]
 8007276:	461a      	mov	r2, r3
 8007278:	f7fa fe1a 	bl	8001eb0 <_write>
 800727c:	1c43      	adds	r3, r0, #1
 800727e:	d102      	bne.n	8007286 <_write_r+0x1e>
 8007280:	6823      	ldr	r3, [r4, #0]
 8007282:	b103      	cbz	r3, 8007286 <_write_r+0x1e>
 8007284:	602b      	str	r3, [r5, #0]
 8007286:	bd38      	pop	{r3, r4, r5, pc}
 8007288:	20000268 	.word	0x20000268

0800728c <_close_r>:
 800728c:	b538      	push	{r3, r4, r5, lr}
 800728e:	4c06      	ldr	r4, [pc, #24]	; (80072a8 <_close_r+0x1c>)
 8007290:	2300      	movs	r3, #0
 8007292:	4605      	mov	r5, r0
 8007294:	4608      	mov	r0, r1
 8007296:	6023      	str	r3, [r4, #0]
 8007298:	f7fb fba1 	bl	80029de <_close>
 800729c:	1c43      	adds	r3, r0, #1
 800729e:	d102      	bne.n	80072a6 <_close_r+0x1a>
 80072a0:	6823      	ldr	r3, [r4, #0]
 80072a2:	b103      	cbz	r3, 80072a6 <_close_r+0x1a>
 80072a4:	602b      	str	r3, [r5, #0]
 80072a6:	bd38      	pop	{r3, r4, r5, pc}
 80072a8:	20000268 	.word	0x20000268

080072ac <_fstat_r>:
 80072ac:	b538      	push	{r3, r4, r5, lr}
 80072ae:	4c07      	ldr	r4, [pc, #28]	; (80072cc <_fstat_r+0x20>)
 80072b0:	2300      	movs	r3, #0
 80072b2:	4605      	mov	r5, r0
 80072b4:	4608      	mov	r0, r1
 80072b6:	4611      	mov	r1, r2
 80072b8:	6023      	str	r3, [r4, #0]
 80072ba:	f7fb fb9c 	bl	80029f6 <_fstat>
 80072be:	1c43      	adds	r3, r0, #1
 80072c0:	d102      	bne.n	80072c8 <_fstat_r+0x1c>
 80072c2:	6823      	ldr	r3, [r4, #0]
 80072c4:	b103      	cbz	r3, 80072c8 <_fstat_r+0x1c>
 80072c6:	602b      	str	r3, [r5, #0]
 80072c8:	bd38      	pop	{r3, r4, r5, pc}
 80072ca:	bf00      	nop
 80072cc:	20000268 	.word	0x20000268

080072d0 <_isatty_r>:
 80072d0:	b538      	push	{r3, r4, r5, lr}
 80072d2:	4c06      	ldr	r4, [pc, #24]	; (80072ec <_isatty_r+0x1c>)
 80072d4:	2300      	movs	r3, #0
 80072d6:	4605      	mov	r5, r0
 80072d8:	4608      	mov	r0, r1
 80072da:	6023      	str	r3, [r4, #0]
 80072dc:	f7fb fb9b 	bl	8002a16 <_isatty>
 80072e0:	1c43      	adds	r3, r0, #1
 80072e2:	d102      	bne.n	80072ea <_isatty_r+0x1a>
 80072e4:	6823      	ldr	r3, [r4, #0]
 80072e6:	b103      	cbz	r3, 80072ea <_isatty_r+0x1a>
 80072e8:	602b      	str	r3, [r5, #0]
 80072ea:	bd38      	pop	{r3, r4, r5, pc}
 80072ec:	20000268 	.word	0x20000268

080072f0 <_lseek_r>:
 80072f0:	b538      	push	{r3, r4, r5, lr}
 80072f2:	4c07      	ldr	r4, [pc, #28]	; (8007310 <_lseek_r+0x20>)
 80072f4:	4605      	mov	r5, r0
 80072f6:	4608      	mov	r0, r1
 80072f8:	4611      	mov	r1, r2
 80072fa:	2200      	movs	r2, #0
 80072fc:	6022      	str	r2, [r4, #0]
 80072fe:	461a      	mov	r2, r3
 8007300:	f7fb fb94 	bl	8002a2c <_lseek>
 8007304:	1c43      	adds	r3, r0, #1
 8007306:	d102      	bne.n	800730e <_lseek_r+0x1e>
 8007308:	6823      	ldr	r3, [r4, #0]
 800730a:	b103      	cbz	r3, 800730e <_lseek_r+0x1e>
 800730c:	602b      	str	r3, [r5, #0]
 800730e:	bd38      	pop	{r3, r4, r5, pc}
 8007310:	20000268 	.word	0x20000268

08007314 <memcpy>:
 8007314:	b510      	push	{r4, lr}
 8007316:	1e43      	subs	r3, r0, #1
 8007318:	440a      	add	r2, r1
 800731a:	4291      	cmp	r1, r2
 800731c:	d100      	bne.n	8007320 <memcpy+0xc>
 800731e:	bd10      	pop	{r4, pc}
 8007320:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007324:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007328:	e7f7      	b.n	800731a <memcpy+0x6>

0800732a <memmove>:
 800732a:	4288      	cmp	r0, r1
 800732c:	b510      	push	{r4, lr}
 800732e:	eb01 0302 	add.w	r3, r1, r2
 8007332:	d807      	bhi.n	8007344 <memmove+0x1a>
 8007334:	1e42      	subs	r2, r0, #1
 8007336:	4299      	cmp	r1, r3
 8007338:	d00a      	beq.n	8007350 <memmove+0x26>
 800733a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800733e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007342:	e7f8      	b.n	8007336 <memmove+0xc>
 8007344:	4283      	cmp	r3, r0
 8007346:	d9f5      	bls.n	8007334 <memmove+0xa>
 8007348:	1881      	adds	r1, r0, r2
 800734a:	1ad2      	subs	r2, r2, r3
 800734c:	42d3      	cmn	r3, r2
 800734e:	d100      	bne.n	8007352 <memmove+0x28>
 8007350:	bd10      	pop	{r4, pc}
 8007352:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007356:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800735a:	e7f7      	b.n	800734c <memmove+0x22>

0800735c <__malloc_lock>:
 800735c:	4770      	bx	lr

0800735e <__malloc_unlock>:
 800735e:	4770      	bx	lr

08007360 <_realloc_r>:
 8007360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007362:	4607      	mov	r7, r0
 8007364:	4614      	mov	r4, r2
 8007366:	460e      	mov	r6, r1
 8007368:	b921      	cbnz	r1, 8007374 <_realloc_r+0x14>
 800736a:	4611      	mov	r1, r2
 800736c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007370:	f7ff bbf2 	b.w	8006b58 <_malloc_r>
 8007374:	b922      	cbnz	r2, 8007380 <_realloc_r+0x20>
 8007376:	f7ff fba1 	bl	8006abc <_free_r>
 800737a:	4625      	mov	r5, r4
 800737c:	4628      	mov	r0, r5
 800737e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007380:	f000 f826 	bl	80073d0 <_malloc_usable_size_r>
 8007384:	42a0      	cmp	r0, r4
 8007386:	d20f      	bcs.n	80073a8 <_realloc_r+0x48>
 8007388:	4621      	mov	r1, r4
 800738a:	4638      	mov	r0, r7
 800738c:	f7ff fbe4 	bl	8006b58 <_malloc_r>
 8007390:	4605      	mov	r5, r0
 8007392:	2800      	cmp	r0, #0
 8007394:	d0f2      	beq.n	800737c <_realloc_r+0x1c>
 8007396:	4631      	mov	r1, r6
 8007398:	4622      	mov	r2, r4
 800739a:	f7ff ffbb 	bl	8007314 <memcpy>
 800739e:	4631      	mov	r1, r6
 80073a0:	4638      	mov	r0, r7
 80073a2:	f7ff fb8b 	bl	8006abc <_free_r>
 80073a6:	e7e9      	b.n	800737c <_realloc_r+0x1c>
 80073a8:	4635      	mov	r5, r6
 80073aa:	e7e7      	b.n	800737c <_realloc_r+0x1c>

080073ac <_read_r>:
 80073ac:	b538      	push	{r3, r4, r5, lr}
 80073ae:	4c07      	ldr	r4, [pc, #28]	; (80073cc <_read_r+0x20>)
 80073b0:	4605      	mov	r5, r0
 80073b2:	4608      	mov	r0, r1
 80073b4:	4611      	mov	r1, r2
 80073b6:	2200      	movs	r2, #0
 80073b8:	6022      	str	r2, [r4, #0]
 80073ba:	461a      	mov	r2, r3
 80073bc:	f7fb faf2 	bl	80029a4 <_read>
 80073c0:	1c43      	adds	r3, r0, #1
 80073c2:	d102      	bne.n	80073ca <_read_r+0x1e>
 80073c4:	6823      	ldr	r3, [r4, #0]
 80073c6:	b103      	cbz	r3, 80073ca <_read_r+0x1e>
 80073c8:	602b      	str	r3, [r5, #0]
 80073ca:	bd38      	pop	{r3, r4, r5, pc}
 80073cc:	20000268 	.word	0x20000268

080073d0 <_malloc_usable_size_r>:
 80073d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073d4:	1f18      	subs	r0, r3, #4
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	bfbc      	itt	lt
 80073da:	580b      	ldrlt	r3, [r1, r0]
 80073dc:	18c0      	addlt	r0, r0, r3
 80073de:	4770      	bx	lr

080073e0 <_init>:
 80073e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e2:	bf00      	nop
 80073e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073e6:	bc08      	pop	{r3}
 80073e8:	469e      	mov	lr, r3
 80073ea:	4770      	bx	lr

080073ec <_fini>:
 80073ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ee:	bf00      	nop
 80073f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073f2:	bc08      	pop	{r3}
 80073f4:	469e      	mov	lr, r3
 80073f6:	4770      	bx	lr
