
HAL_micromouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069d8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006b70  08006b70  00016b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bf8  08006bf8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006bf8  08006bf8  00016bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c00  08006c00  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c00  08006c00  00016c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c04  08006c04  00016c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000070  08006c78  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08006c78  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129a7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a71  00000000  00000000  00032a47  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011c8  00000000  00000000  000354b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001080  00000000  00000000  00036680  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001912c  00000000  00000000  00037700  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e236  00000000  00000000  0005082c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093e63  00000000  00000000  0005ea62  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f28c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005128  00000000  00000000  000f2940  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006b58 	.word	0x08006b58

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08006b58 	.word	0x08006b58

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__gedf2>:
 8000550:	f04f 3cff 	mov.w	ip, #4294967295
 8000554:	e006      	b.n	8000564 <__cmpdf2+0x4>
 8000556:	bf00      	nop

08000558 <__ledf2>:
 8000558:	f04f 0c01 	mov.w	ip, #1
 800055c:	e002      	b.n	8000564 <__cmpdf2+0x4>
 800055e:	bf00      	nop

08000560 <__cmpdf2>:
 8000560:	f04f 0c01 	mov.w	ip, #1
 8000564:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000568:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800056c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000570:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000574:	bf18      	it	ne
 8000576:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800057a:	d01b      	beq.n	80005b4 <__cmpdf2+0x54>
 800057c:	b001      	add	sp, #4
 800057e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000582:	bf0c      	ite	eq
 8000584:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000588:	ea91 0f03 	teqne	r1, r3
 800058c:	bf02      	ittt	eq
 800058e:	ea90 0f02 	teqeq	r0, r2
 8000592:	2000      	moveq	r0, #0
 8000594:	4770      	bxeq	lr
 8000596:	f110 0f00 	cmn.w	r0, #0
 800059a:	ea91 0f03 	teq	r1, r3
 800059e:	bf58      	it	pl
 80005a0:	4299      	cmppl	r1, r3
 80005a2:	bf08      	it	eq
 80005a4:	4290      	cmpeq	r0, r2
 80005a6:	bf2c      	ite	cs
 80005a8:	17d8      	asrcs	r0, r3, #31
 80005aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005ae:	f040 0001 	orr.w	r0, r0, #1
 80005b2:	4770      	bx	lr
 80005b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005bc:	d102      	bne.n	80005c4 <__cmpdf2+0x64>
 80005be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005c2:	d107      	bne.n	80005d4 <__cmpdf2+0x74>
 80005c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005cc:	d1d6      	bne.n	800057c <__cmpdf2+0x1c>
 80005ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005d2:	d0d3      	beq.n	800057c <__cmpdf2+0x1c>
 80005d4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__aeabi_cdrcmple>:
 80005dc:	4684      	mov	ip, r0
 80005de:	4610      	mov	r0, r2
 80005e0:	4662      	mov	r2, ip
 80005e2:	468c      	mov	ip, r1
 80005e4:	4619      	mov	r1, r3
 80005e6:	4663      	mov	r3, ip
 80005e8:	e000      	b.n	80005ec <__aeabi_cdcmpeq>
 80005ea:	bf00      	nop

080005ec <__aeabi_cdcmpeq>:
 80005ec:	b501      	push	{r0, lr}
 80005ee:	f7ff ffb7 	bl	8000560 <__cmpdf2>
 80005f2:	2800      	cmp	r0, #0
 80005f4:	bf48      	it	mi
 80005f6:	f110 0f00 	cmnmi.w	r0, #0
 80005fa:	bd01      	pop	{r0, pc}

080005fc <__aeabi_dcmpeq>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff fff4 	bl	80005ec <__aeabi_cdcmpeq>
 8000604:	bf0c      	ite	eq
 8000606:	2001      	moveq	r0, #1
 8000608:	2000      	movne	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_dcmplt>:
 8000610:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000614:	f7ff ffea 	bl	80005ec <__aeabi_cdcmpeq>
 8000618:	bf34      	ite	cc
 800061a:	2001      	movcc	r0, #1
 800061c:	2000      	movcs	r0, #0
 800061e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000622:	bf00      	nop

08000624 <__aeabi_dcmple>:
 8000624:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000628:	f7ff ffe0 	bl	80005ec <__aeabi_cdcmpeq>
 800062c:	bf94      	ite	ls
 800062e:	2001      	movls	r0, #1
 8000630:	2000      	movhi	r0, #0
 8000632:	f85d fb08 	ldr.w	pc, [sp], #8
 8000636:	bf00      	nop

08000638 <__aeabi_dcmpge>:
 8000638:	f84d ed08 	str.w	lr, [sp, #-8]!
 800063c:	f7ff ffce 	bl	80005dc <__aeabi_cdrcmple>
 8000640:	bf94      	ite	ls
 8000642:	2001      	movls	r0, #1
 8000644:	2000      	movhi	r0, #0
 8000646:	f85d fb08 	ldr.w	pc, [sp], #8
 800064a:	bf00      	nop

0800064c <__aeabi_dcmpgt>:
 800064c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000650:	f7ff ffc4 	bl	80005dc <__aeabi_cdrcmple>
 8000654:	bf34      	ite	cc
 8000656:	2001      	movcc	r0, #1
 8000658:	2000      	movcs	r0, #0
 800065a:	f85d fb08 	ldr.w	pc, [sp], #8
 800065e:	bf00      	nop

08000660 <__aeabi_d2f>:
 8000660:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000664:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000668:	bf24      	itt	cs
 800066a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800066e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000672:	d90d      	bls.n	8000690 <__aeabi_d2f+0x30>
 8000674:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000678:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800067c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000680:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000684:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000688:	bf08      	it	eq
 800068a:	f020 0001 	biceq.w	r0, r0, #1
 800068e:	4770      	bx	lr
 8000690:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000694:	d121      	bne.n	80006da <__aeabi_d2f+0x7a>
 8000696:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800069a:	bfbc      	itt	lt
 800069c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80006a0:	4770      	bxlt	lr
 80006a2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80006aa:	f1c2 0218 	rsb	r2, r2, #24
 80006ae:	f1c2 0c20 	rsb	ip, r2, #32
 80006b2:	fa10 f30c 	lsls.w	r3, r0, ip
 80006b6:	fa20 f002 	lsr.w	r0, r0, r2
 80006ba:	bf18      	it	ne
 80006bc:	f040 0001 	orrne.w	r0, r0, #1
 80006c0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006c4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80006c8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80006cc:	ea40 000c 	orr.w	r0, r0, ip
 80006d0:	fa23 f302 	lsr.w	r3, r3, r2
 80006d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006d8:	e7cc      	b.n	8000674 <__aeabi_d2f+0x14>
 80006da:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006de:	d107      	bne.n	80006f0 <__aeabi_d2f+0x90>
 80006e0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006e4:	bf1e      	ittt	ne
 80006e6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006ea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006ee:	4770      	bxne	lr
 80006f0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006f4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop

08000700 <__aeabi_uldivmod>:
 8000700:	b953      	cbnz	r3, 8000718 <__aeabi_uldivmod+0x18>
 8000702:	b94a      	cbnz	r2, 8000718 <__aeabi_uldivmod+0x18>
 8000704:	2900      	cmp	r1, #0
 8000706:	bf08      	it	eq
 8000708:	2800      	cmpeq	r0, #0
 800070a:	bf1c      	itt	ne
 800070c:	f04f 31ff 	movne.w	r1, #4294967295
 8000710:	f04f 30ff 	movne.w	r0, #4294967295
 8000714:	f000 b972 	b.w	80009fc <__aeabi_idiv0>
 8000718:	f1ad 0c08 	sub.w	ip, sp, #8
 800071c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000720:	f000 f806 	bl	8000730 <__udivmoddi4>
 8000724:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000728:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800072c:	b004      	add	sp, #16
 800072e:	4770      	bx	lr

08000730 <__udivmoddi4>:
 8000730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000734:	9e08      	ldr	r6, [sp, #32]
 8000736:	4604      	mov	r4, r0
 8000738:	4688      	mov	r8, r1
 800073a:	2b00      	cmp	r3, #0
 800073c:	d14b      	bne.n	80007d6 <__udivmoddi4+0xa6>
 800073e:	428a      	cmp	r2, r1
 8000740:	4615      	mov	r5, r2
 8000742:	d967      	bls.n	8000814 <__udivmoddi4+0xe4>
 8000744:	fab2 f282 	clz	r2, r2
 8000748:	b14a      	cbz	r2, 800075e <__udivmoddi4+0x2e>
 800074a:	f1c2 0720 	rsb	r7, r2, #32
 800074e:	fa01 f302 	lsl.w	r3, r1, r2
 8000752:	fa20 f707 	lsr.w	r7, r0, r7
 8000756:	4095      	lsls	r5, r2
 8000758:	ea47 0803 	orr.w	r8, r7, r3
 800075c:	4094      	lsls	r4, r2
 800075e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000762:	0c23      	lsrs	r3, r4, #16
 8000764:	fbb8 f7fe 	udiv	r7, r8, lr
 8000768:	fa1f fc85 	uxth.w	ip, r5
 800076c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000770:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000774:	fb07 f10c 	mul.w	r1, r7, ip
 8000778:	4299      	cmp	r1, r3
 800077a:	d909      	bls.n	8000790 <__udivmoddi4+0x60>
 800077c:	18eb      	adds	r3, r5, r3
 800077e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000782:	f080 811b 	bcs.w	80009bc <__udivmoddi4+0x28c>
 8000786:	4299      	cmp	r1, r3
 8000788:	f240 8118 	bls.w	80009bc <__udivmoddi4+0x28c>
 800078c:	3f02      	subs	r7, #2
 800078e:	442b      	add	r3, r5
 8000790:	1a5b      	subs	r3, r3, r1
 8000792:	b2a4      	uxth	r4, r4
 8000794:	fbb3 f0fe 	udiv	r0, r3, lr
 8000798:	fb0e 3310 	mls	r3, lr, r0, r3
 800079c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007a0:	fb00 fc0c 	mul.w	ip, r0, ip
 80007a4:	45a4      	cmp	ip, r4
 80007a6:	d909      	bls.n	80007bc <__udivmoddi4+0x8c>
 80007a8:	192c      	adds	r4, r5, r4
 80007aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80007ae:	f080 8107 	bcs.w	80009c0 <__udivmoddi4+0x290>
 80007b2:	45a4      	cmp	ip, r4
 80007b4:	f240 8104 	bls.w	80009c0 <__udivmoddi4+0x290>
 80007b8:	3802      	subs	r0, #2
 80007ba:	442c      	add	r4, r5
 80007bc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80007c0:	eba4 040c 	sub.w	r4, r4, ip
 80007c4:	2700      	movs	r7, #0
 80007c6:	b11e      	cbz	r6, 80007d0 <__udivmoddi4+0xa0>
 80007c8:	40d4      	lsrs	r4, r2
 80007ca:	2300      	movs	r3, #0
 80007cc:	e9c6 4300 	strd	r4, r3, [r6]
 80007d0:	4639      	mov	r1, r7
 80007d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007d6:	428b      	cmp	r3, r1
 80007d8:	d909      	bls.n	80007ee <__udivmoddi4+0xbe>
 80007da:	2e00      	cmp	r6, #0
 80007dc:	f000 80eb 	beq.w	80009b6 <__udivmoddi4+0x286>
 80007e0:	2700      	movs	r7, #0
 80007e2:	e9c6 0100 	strd	r0, r1, [r6]
 80007e6:	4638      	mov	r0, r7
 80007e8:	4639      	mov	r1, r7
 80007ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ee:	fab3 f783 	clz	r7, r3
 80007f2:	2f00      	cmp	r7, #0
 80007f4:	d147      	bne.n	8000886 <__udivmoddi4+0x156>
 80007f6:	428b      	cmp	r3, r1
 80007f8:	d302      	bcc.n	8000800 <__udivmoddi4+0xd0>
 80007fa:	4282      	cmp	r2, r0
 80007fc:	f200 80fa 	bhi.w	80009f4 <__udivmoddi4+0x2c4>
 8000800:	1a84      	subs	r4, r0, r2
 8000802:	eb61 0303 	sbc.w	r3, r1, r3
 8000806:	2001      	movs	r0, #1
 8000808:	4698      	mov	r8, r3
 800080a:	2e00      	cmp	r6, #0
 800080c:	d0e0      	beq.n	80007d0 <__udivmoddi4+0xa0>
 800080e:	e9c6 4800 	strd	r4, r8, [r6]
 8000812:	e7dd      	b.n	80007d0 <__udivmoddi4+0xa0>
 8000814:	b902      	cbnz	r2, 8000818 <__udivmoddi4+0xe8>
 8000816:	deff      	udf	#255	; 0xff
 8000818:	fab2 f282 	clz	r2, r2
 800081c:	2a00      	cmp	r2, #0
 800081e:	f040 808f 	bne.w	8000940 <__udivmoddi4+0x210>
 8000822:	1b49      	subs	r1, r1, r5
 8000824:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000828:	fa1f f885 	uxth.w	r8, r5
 800082c:	2701      	movs	r7, #1
 800082e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000832:	0c23      	lsrs	r3, r4, #16
 8000834:	fb0e 111c 	mls	r1, lr, ip, r1
 8000838:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800083c:	fb08 f10c 	mul.w	r1, r8, ip
 8000840:	4299      	cmp	r1, r3
 8000842:	d907      	bls.n	8000854 <__udivmoddi4+0x124>
 8000844:	18eb      	adds	r3, r5, r3
 8000846:	f10c 30ff 	add.w	r0, ip, #4294967295
 800084a:	d202      	bcs.n	8000852 <__udivmoddi4+0x122>
 800084c:	4299      	cmp	r1, r3
 800084e:	f200 80cd 	bhi.w	80009ec <__udivmoddi4+0x2bc>
 8000852:	4684      	mov	ip, r0
 8000854:	1a59      	subs	r1, r3, r1
 8000856:	b2a3      	uxth	r3, r4
 8000858:	fbb1 f0fe 	udiv	r0, r1, lr
 800085c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000860:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000864:	fb08 f800 	mul.w	r8, r8, r0
 8000868:	45a0      	cmp	r8, r4
 800086a:	d907      	bls.n	800087c <__udivmoddi4+0x14c>
 800086c:	192c      	adds	r4, r5, r4
 800086e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000872:	d202      	bcs.n	800087a <__udivmoddi4+0x14a>
 8000874:	45a0      	cmp	r8, r4
 8000876:	f200 80b6 	bhi.w	80009e6 <__udivmoddi4+0x2b6>
 800087a:	4618      	mov	r0, r3
 800087c:	eba4 0408 	sub.w	r4, r4, r8
 8000880:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000884:	e79f      	b.n	80007c6 <__udivmoddi4+0x96>
 8000886:	f1c7 0c20 	rsb	ip, r7, #32
 800088a:	40bb      	lsls	r3, r7
 800088c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000890:	ea4e 0e03 	orr.w	lr, lr, r3
 8000894:	fa01 f407 	lsl.w	r4, r1, r7
 8000898:	fa20 f50c 	lsr.w	r5, r0, ip
 800089c:	fa21 f30c 	lsr.w	r3, r1, ip
 80008a0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80008a4:	4325      	orrs	r5, r4
 80008a6:	fbb3 f9f8 	udiv	r9, r3, r8
 80008aa:	0c2c      	lsrs	r4, r5, #16
 80008ac:	fb08 3319 	mls	r3, r8, r9, r3
 80008b0:	fa1f fa8e 	uxth.w	sl, lr
 80008b4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80008b8:	fb09 f40a 	mul.w	r4, r9, sl
 80008bc:	429c      	cmp	r4, r3
 80008be:	fa02 f207 	lsl.w	r2, r2, r7
 80008c2:	fa00 f107 	lsl.w	r1, r0, r7
 80008c6:	d90b      	bls.n	80008e0 <__udivmoddi4+0x1b0>
 80008c8:	eb1e 0303 	adds.w	r3, lr, r3
 80008cc:	f109 30ff 	add.w	r0, r9, #4294967295
 80008d0:	f080 8087 	bcs.w	80009e2 <__udivmoddi4+0x2b2>
 80008d4:	429c      	cmp	r4, r3
 80008d6:	f240 8084 	bls.w	80009e2 <__udivmoddi4+0x2b2>
 80008da:	f1a9 0902 	sub.w	r9, r9, #2
 80008de:	4473      	add	r3, lr
 80008e0:	1b1b      	subs	r3, r3, r4
 80008e2:	b2ad      	uxth	r5, r5
 80008e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80008e8:	fb08 3310 	mls	r3, r8, r0, r3
 80008ec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80008f0:	fb00 fa0a 	mul.w	sl, r0, sl
 80008f4:	45a2      	cmp	sl, r4
 80008f6:	d908      	bls.n	800090a <__udivmoddi4+0x1da>
 80008f8:	eb1e 0404 	adds.w	r4, lr, r4
 80008fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000900:	d26b      	bcs.n	80009da <__udivmoddi4+0x2aa>
 8000902:	45a2      	cmp	sl, r4
 8000904:	d969      	bls.n	80009da <__udivmoddi4+0x2aa>
 8000906:	3802      	subs	r0, #2
 8000908:	4474      	add	r4, lr
 800090a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800090e:	fba0 8902 	umull	r8, r9, r0, r2
 8000912:	eba4 040a 	sub.w	r4, r4, sl
 8000916:	454c      	cmp	r4, r9
 8000918:	46c2      	mov	sl, r8
 800091a:	464b      	mov	r3, r9
 800091c:	d354      	bcc.n	80009c8 <__udivmoddi4+0x298>
 800091e:	d051      	beq.n	80009c4 <__udivmoddi4+0x294>
 8000920:	2e00      	cmp	r6, #0
 8000922:	d069      	beq.n	80009f8 <__udivmoddi4+0x2c8>
 8000924:	ebb1 050a 	subs.w	r5, r1, sl
 8000928:	eb64 0403 	sbc.w	r4, r4, r3
 800092c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000930:	40fd      	lsrs	r5, r7
 8000932:	40fc      	lsrs	r4, r7
 8000934:	ea4c 0505 	orr.w	r5, ip, r5
 8000938:	e9c6 5400 	strd	r5, r4, [r6]
 800093c:	2700      	movs	r7, #0
 800093e:	e747      	b.n	80007d0 <__udivmoddi4+0xa0>
 8000940:	f1c2 0320 	rsb	r3, r2, #32
 8000944:	fa20 f703 	lsr.w	r7, r0, r3
 8000948:	4095      	lsls	r5, r2
 800094a:	fa01 f002 	lsl.w	r0, r1, r2
 800094e:	fa21 f303 	lsr.w	r3, r1, r3
 8000952:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000956:	4338      	orrs	r0, r7
 8000958:	0c01      	lsrs	r1, r0, #16
 800095a:	fbb3 f7fe 	udiv	r7, r3, lr
 800095e:	fa1f f885 	uxth.w	r8, r5
 8000962:	fb0e 3317 	mls	r3, lr, r7, r3
 8000966:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800096a:	fb07 f308 	mul.w	r3, r7, r8
 800096e:	428b      	cmp	r3, r1
 8000970:	fa04 f402 	lsl.w	r4, r4, r2
 8000974:	d907      	bls.n	8000986 <__udivmoddi4+0x256>
 8000976:	1869      	adds	r1, r5, r1
 8000978:	f107 3cff 	add.w	ip, r7, #4294967295
 800097c:	d22f      	bcs.n	80009de <__udivmoddi4+0x2ae>
 800097e:	428b      	cmp	r3, r1
 8000980:	d92d      	bls.n	80009de <__udivmoddi4+0x2ae>
 8000982:	3f02      	subs	r7, #2
 8000984:	4429      	add	r1, r5
 8000986:	1acb      	subs	r3, r1, r3
 8000988:	b281      	uxth	r1, r0
 800098a:	fbb3 f0fe 	udiv	r0, r3, lr
 800098e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000992:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000996:	fb00 f308 	mul.w	r3, r0, r8
 800099a:	428b      	cmp	r3, r1
 800099c:	d907      	bls.n	80009ae <__udivmoddi4+0x27e>
 800099e:	1869      	adds	r1, r5, r1
 80009a0:	f100 3cff 	add.w	ip, r0, #4294967295
 80009a4:	d217      	bcs.n	80009d6 <__udivmoddi4+0x2a6>
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d915      	bls.n	80009d6 <__udivmoddi4+0x2a6>
 80009aa:	3802      	subs	r0, #2
 80009ac:	4429      	add	r1, r5
 80009ae:	1ac9      	subs	r1, r1, r3
 80009b0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80009b4:	e73b      	b.n	800082e <__udivmoddi4+0xfe>
 80009b6:	4637      	mov	r7, r6
 80009b8:	4630      	mov	r0, r6
 80009ba:	e709      	b.n	80007d0 <__udivmoddi4+0xa0>
 80009bc:	4607      	mov	r7, r0
 80009be:	e6e7      	b.n	8000790 <__udivmoddi4+0x60>
 80009c0:	4618      	mov	r0, r3
 80009c2:	e6fb      	b.n	80007bc <__udivmoddi4+0x8c>
 80009c4:	4541      	cmp	r1, r8
 80009c6:	d2ab      	bcs.n	8000920 <__udivmoddi4+0x1f0>
 80009c8:	ebb8 0a02 	subs.w	sl, r8, r2
 80009cc:	eb69 020e 	sbc.w	r2, r9, lr
 80009d0:	3801      	subs	r0, #1
 80009d2:	4613      	mov	r3, r2
 80009d4:	e7a4      	b.n	8000920 <__udivmoddi4+0x1f0>
 80009d6:	4660      	mov	r0, ip
 80009d8:	e7e9      	b.n	80009ae <__udivmoddi4+0x27e>
 80009da:	4618      	mov	r0, r3
 80009dc:	e795      	b.n	800090a <__udivmoddi4+0x1da>
 80009de:	4667      	mov	r7, ip
 80009e0:	e7d1      	b.n	8000986 <__udivmoddi4+0x256>
 80009e2:	4681      	mov	r9, r0
 80009e4:	e77c      	b.n	80008e0 <__udivmoddi4+0x1b0>
 80009e6:	3802      	subs	r0, #2
 80009e8:	442c      	add	r4, r5
 80009ea:	e747      	b.n	800087c <__udivmoddi4+0x14c>
 80009ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80009f0:	442b      	add	r3, r5
 80009f2:	e72f      	b.n	8000854 <__udivmoddi4+0x124>
 80009f4:	4638      	mov	r0, r7
 80009f6:	e708      	b.n	800080a <__udivmoddi4+0xda>
 80009f8:	4637      	mov	r7, r6
 80009fa:	e6e9      	b.n	80007d0 <__udivmoddi4+0xa0>

080009fc <__aeabi_idiv0>:
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <ToF_writeReg>:


//Zapisywanie do rejestrów

void ToF_writeReg(struct ToF_struct *ToF, uint8_t reg, uint8_t value)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af04      	add	r7, sp, #16
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	70fb      	strb	r3, [r7, #3]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(&hi2c1, (ToF->bus_address)<<1, reg, 1, (uint8_t*)&value, 1, HAL_MAX_DELAY);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	b299      	uxth	r1, r3
 8000a1a:	78fb      	ldrb	r3, [r7, #3]
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a22:	9302      	str	r3, [sp, #8]
 8000a24:	2301      	movs	r3, #1
 8000a26:	9301      	str	r3, [sp, #4]
 8000a28:	1cbb      	adds	r3, r7, #2
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	4803      	ldr	r0, [pc, #12]	; (8000a3c <ToF_writeReg+0x3c>)
 8000a30:	f002 fe5e 	bl	80036f0 <HAL_I2C_Mem_Write>
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000104 	.word	0x20000104

08000a40 <ToF_writeReg16Bit>:

void ToF_writeReg16Bit(struct ToF_struct *ToF, uint8_t reg, uint16_t value)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af04      	add	r7, sp, #16
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	70fb      	strb	r3, [r7, #3]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	803b      	strh	r3, [r7, #0]
	uint8_t tmp[2];
	tmp[0]=(uint8_t)value>>8 & 0xFF; //MSB
 8000a50:	2300      	movs	r3, #0
 8000a52:	733b      	strb	r3, [r7, #12]
	tmp[1]=(uint8_t)value    & 0xFF; //LSB
 8000a54:	883b      	ldrh	r3, [r7, #0]
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(&hi2c1, (ToF->bus_address)<<1, reg, 1, tmp, 2, HAL_MAX_DELAY);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	b299      	uxth	r1, r3
 8000a64:	78fb      	ldrb	r3, [r7, #3]
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6c:	9302      	str	r3, [sp, #8]
 8000a6e:	2302      	movs	r3, #2
 8000a70:	9301      	str	r3, [sp, #4]
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	2301      	movs	r3, #1
 8000a7a:	4803      	ldr	r0, [pc, #12]	; (8000a88 <ToF_writeReg16Bit+0x48>)
 8000a7c:	f002 fe38 	bl	80036f0 <HAL_I2C_Mem_Write>
}
 8000a80:	bf00      	nop
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000104 	.word	0x20000104

08000a8c <ToF_writeMulti>:
	tmp[1]=(uint8_t)value     & 0xFF; //LSB
	HAL_I2C_Mem_Write(&hi2c1, (ToF->bus_address)<<1, reg, 1, tmp, 4, HAL_MAX_DELAY);
}

void ToF_writeMulti(struct ToF_struct *ToF, uint8_t reg, uint8_t *src, uint8_t count)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af04      	add	r7, sp, #16
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	607a      	str	r2, [r7, #4]
 8000a96:	461a      	mov	r2, r3
 8000a98:	460b      	mov	r3, r1
 8000a9a:	72fb      	strb	r3, [r7, #11]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Mem_Write(&hi2c1, (ToF->bus_address)<<1, reg, 1, src, count, HAL_MAX_DELAY);
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	b299      	uxth	r1, r3
 8000aaa:	7afb      	ldrb	r3, [r7, #11]
 8000aac:	b298      	uxth	r0, r3
 8000aae:	7abb      	ldrb	r3, [r7, #10]
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab6:	9202      	str	r2, [sp, #8]
 8000ab8:	9301      	str	r3, [sp, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	2301      	movs	r3, #1
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	4803      	ldr	r0, [pc, #12]	; (8000ad0 <ToF_writeMulti+0x44>)
 8000ac4:	f002 fe14 	bl	80036f0 <HAL_I2C_Mem_Write>
}
 8000ac8:	bf00      	nop
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000104 	.word	0x20000104

08000ad4 <ToF_readReg>:
//HAL_I2C_Mem_Read (I2C_HandleTypeDef *hi2c, uint16_t DevAddress   , uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
//HAL_I2C_Mem_Read (&hi2c1                 ,  (ToF->bus_address)<<1, reg                , 1                  , &value        , sizeof(value), HAL_MAX_DELAY   )


uint8_t ToF_readReg(struct ToF_struct *ToF, uint8_t reg)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af04      	add	r7, sp, #16
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	70fb      	strb	r3, [r7, #3]
	uint8_t value = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Read(&hi2c1, (ToF->bus_address)<<1, reg, 1, &value, 1, HAL_MAX_DELAY);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	b299      	uxth	r1, r3
 8000aee:	78fb      	ldrb	r3, [r7, #3]
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	f04f 33ff 	mov.w	r3, #4294967295
 8000af6:	9302      	str	r3, [sp, #8]
 8000af8:	2301      	movs	r3, #1
 8000afa:	9301      	str	r3, [sp, #4]
 8000afc:	f107 030f 	add.w	r3, r7, #15
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	2301      	movs	r3, #1
 8000b04:	4803      	ldr	r0, [pc, #12]	; (8000b14 <ToF_readReg+0x40>)
 8000b06:	f002 feed 	bl	80038e4 <HAL_I2C_Mem_Read>

	return value;
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000104 	.word	0x20000104

08000b18 <ToF_readReg16Bit>:

uint16_t ToF_readReg16Bit(struct ToF_struct *ToF, uint8_t reg)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af04      	add	r7, sp, #16
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	460b      	mov	r3, r1
 8000b22:	70fb      	strb	r3, [r7, #3]
	uint8_t value_tab[2];

	HAL_I2C_Mem_Read(&hi2c1, (ToF->bus_address)<<1, reg, 1, value_tab, 2, HAL_MAX_DELAY);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	b299      	uxth	r1, r3
 8000b2e:	78fb      	ldrb	r3, [r7, #3]
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
 8000b36:	9302      	str	r3, [sp, #8]
 8000b38:	2302      	movs	r3, #2
 8000b3a:	9301      	str	r3, [sp, #4]
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	2301      	movs	r3, #1
 8000b44:	4807      	ldr	r0, [pc, #28]	; (8000b64 <ToF_readReg16Bit+0x4c>)
 8000b46:	f002 fecd 	bl	80038e4 <HAL_I2C_Mem_Read>

	uint16_t value = (value_tab[0] << 8) | value_tab[1];
 8000b4a:	7b3b      	ldrb	r3, [r7, #12]
 8000b4c:	021b      	lsls	r3, r3, #8
 8000b4e:	b21a      	sxth	r2, r3
 8000b50:	7b7b      	ldrb	r3, [r7, #13]
 8000b52:	b21b      	sxth	r3, r3
 8000b54:	4313      	orrs	r3, r2
 8000b56:	b21b      	sxth	r3, r3
 8000b58:	81fb      	strh	r3, [r7, #14]

	return value;
 8000b5a:	89fb      	ldrh	r3, [r7, #14]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000104 	.word	0x20000104

08000b68 <ToF_readMulti>:

void ToF_readMulti(struct ToF_struct *ToF, uint8_t reg, uint8_t *dst, uint8_t count)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af04      	add	r7, sp, #16
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	461a      	mov	r2, r3
 8000b74:	460b      	mov	r3, r1
 8000b76:	72fb      	strb	r3, [r7, #11]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Mem_Read(&hi2c1, (ToF->bus_address)<<1, reg, 1, dst, count, HAL_MAX_DELAY);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	b299      	uxth	r1, r3
 8000b86:	7afb      	ldrb	r3, [r7, #11]
 8000b88:	b298      	uxth	r0, r3
 8000b8a:	7abb      	ldrb	r3, [r7, #10]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b92:	9202      	str	r2, [sp, #8]
 8000b94:	9301      	str	r3, [sp, #4]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	4803      	ldr	r0, [pc, #12]	; (8000bac <ToF_readMulti+0x44>)
 8000ba0:	f002 fea0 	bl	80038e4 <HAL_I2C_Mem_Read>
}
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000104 	.word	0x20000104

08000bb0 <ToF_setSignalRateLimit>:

uint8_t ToF_setSignalRateLimit(struct ToF_struct *ToF, float limit_Mcps)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	ed87 0a00 	vstr	s0, [r7]
	if (limit_Mcps < 0 || limit_Mcps > 511.99) { return 0; }
 8000bbc:	edd7 7a00 	vldr	s15, [r7]
 8000bc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bc8:	d40a      	bmi.n	8000be0 <ToF_setSignalRateLimit+0x30>
 8000bca:	6838      	ldr	r0, [r7, #0]
 8000bcc:	f7ff fc68 	bl	80004a0 <__aeabi_f2d>
 8000bd0:	a310      	add	r3, pc, #64	; (adr r3, 8000c14 <ToF_setSignalRateLimit+0x64>)
 8000bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd6:	f7ff fd39 	bl	800064c <__aeabi_dcmpgt>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <ToF_setSignalRateLimit+0x34>
 8000be0:	2300      	movs	r3, #0
 8000be2:	e010      	b.n	8000c06 <ToF_setSignalRateLimit+0x56>
	// Q9.7 fixed point format (9 integer bits, 7 fractional bits)
	ToF_writeReg16Bit(ToF, FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 8000be4:	edd7 7a00 	vldr	s15, [r7]
 8000be8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000c10 <ToF_setSignalRateLimit+0x60>
 8000bec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bf4:	ee17 3a90 	vmov	r3, s15
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	2144      	movs	r1, #68	; 0x44
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff ff1e 	bl	8000a40 <ToF_writeReg16Bit>
	return 1;
 8000c04:	2301      	movs	r3, #1
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	43000000 	.word	0x43000000
 8000c14:	0a3d70a4 	.word	0x0a3d70a4
 8000c18:	407fffd7 	.word	0x407fffd7

08000c1c <ToF_getSpadInfo>:

uint8_t ToF_getSpadInfo(struct ToF_struct *ToF, uint8_t *count, uint8_t *type_is_aperture)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
	uint8_t tmp;

	tmp = ToF_readReg(ToF, 0xC0);
 8000c28:	21c0      	movs	r1, #192	; 0xc0
 8000c2a:	68f8      	ldr	r0, [r7, #12]
 8000c2c:	f7ff ff52 	bl	8000ad4 <ToF_readReg>
 8000c30:	4603      	mov	r3, r0
 8000c32:	75fb      	strb	r3, [r7, #23]
	ToF_writeReg(ToF, 0x80, 0x01);
 8000c34:	2201      	movs	r2, #1
 8000c36:	2180      	movs	r1, #128	; 0x80
 8000c38:	68f8      	ldr	r0, [r7, #12]
 8000c3a:	f7ff fee1 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x01);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	21ff      	movs	r1, #255	; 0xff
 8000c42:	68f8      	ldr	r0, [r7, #12]
 8000c44:	f7ff fedc 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x00, 0x00);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	68f8      	ldr	r0, [r7, #12]
 8000c4e:	f7ff fed7 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x06);
 8000c52:	2206      	movs	r2, #6
 8000c54:	21ff      	movs	r1, #255	; 0xff
 8000c56:	68f8      	ldr	r0, [r7, #12]
 8000c58:	f7ff fed2 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x83, ToF_readReg(ToF, 0x83) | 0x04);
 8000c5c:	2183      	movs	r1, #131	; 0x83
 8000c5e:	68f8      	ldr	r0, [r7, #12]
 8000c60:	f7ff ff38 	bl	8000ad4 <ToF_readReg>
 8000c64:	4603      	mov	r3, r0
 8000c66:	f043 0304 	orr.w	r3, r3, #4
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	2183      	movs	r1, #131	; 0x83
 8000c70:	68f8      	ldr	r0, [r7, #12]
 8000c72:	f7ff fec5 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x07);
 8000c76:	2207      	movs	r2, #7
 8000c78:	21ff      	movs	r1, #255	; 0xff
 8000c7a:	68f8      	ldr	r0, [r7, #12]
 8000c7c:	f7ff fec0 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x81, 0x01);
 8000c80:	2201      	movs	r2, #1
 8000c82:	2181      	movs	r1, #129	; 0x81
 8000c84:	68f8      	ldr	r0, [r7, #12]
 8000c86:	f7ff febb 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0x80, 0x01);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	2180      	movs	r1, #128	; 0x80
 8000c8e:	68f8      	ldr	r0, [r7, #12]
 8000c90:	f7ff feb6 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0x94, 0x6b);
 8000c94:	226b      	movs	r2, #107	; 0x6b
 8000c96:	2194      	movs	r1, #148	; 0x94
 8000c98:	68f8      	ldr	r0, [r7, #12]
 8000c9a:	f7ff feb1 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x83, 0x00);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2183      	movs	r1, #131	; 0x83
 8000ca2:	68f8      	ldr	r0, [r7, #12]
 8000ca4:	f7ff feac 	bl	8000a00 <ToF_writeReg>
	while (ToF_readReg(ToF, 0x83) == 0x00)
	{

	}
	*/
	ToF_writeReg(ToF, 0x83, 0x01);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2183      	movs	r1, #131	; 0x83
 8000cac:	68f8      	ldr	r0, [r7, #12]
 8000cae:	f7ff fea7 	bl	8000a00 <ToF_writeReg>
	tmp = ToF_readReg(ToF, 0x92);
 8000cb2:	2192      	movs	r1, #146	; 0x92
 8000cb4:	68f8      	ldr	r0, [r7, #12]
 8000cb6:	f7ff ff0d 	bl	8000ad4 <ToF_readReg>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	75fb      	strb	r3, [r7, #23]

	*count = tmp & 0x7f;
 8000cbe:	7dfb      	ldrb	r3, [r7, #23]
 8000cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	701a      	strb	r2, [r3, #0]
	*type_is_aperture = (tmp >> 7) & 0x01;
 8000cca:	7dfb      	ldrb	r3, [r7, #23]
 8000ccc:	09db      	lsrs	r3, r3, #7
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	701a      	strb	r2, [r3, #0]

	ToF_writeReg(ToF, 0x81, 0x00);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2181      	movs	r1, #129	; 0x81
 8000cd8:	68f8      	ldr	r0, [r7, #12]
 8000cda:	f7ff fe91 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x06);
 8000cde:	2206      	movs	r2, #6
 8000ce0:	21ff      	movs	r1, #255	; 0xff
 8000ce2:	68f8      	ldr	r0, [r7, #12]
 8000ce4:	f7ff fe8c 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x83, ToF_readReg(ToF, 0x83)  & ~0x04);
 8000ce8:	2183      	movs	r1, #131	; 0x83
 8000cea:	68f8      	ldr	r0, [r7, #12]
 8000cec:	f7ff fef2 	bl	8000ad4 <ToF_readReg>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	f023 0304 	bic.w	r3, r3, #4
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	2183      	movs	r1, #131	; 0x83
 8000cfc:	68f8      	ldr	r0, [r7, #12]
 8000cfe:	f7ff fe7f 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x01);
 8000d02:	2201      	movs	r2, #1
 8000d04:	21ff      	movs	r1, #255	; 0xff
 8000d06:	68f8      	ldr	r0, [r7, #12]
 8000d08:	f7ff fe7a 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x00, 0x01);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2100      	movs	r1, #0
 8000d10:	68f8      	ldr	r0, [r7, #12]
 8000d12:	f7ff fe75 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x00);
 8000d16:	2200      	movs	r2, #0
 8000d18:	21ff      	movs	r1, #255	; 0xff
 8000d1a:	68f8      	ldr	r0, [r7, #12]
 8000d1c:	f7ff fe70 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x80, 0x00);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2180      	movs	r1, #128	; 0x80
 8000d24:	68f8      	ldr	r0, [r7, #12]
 8000d26:	f7ff fe6b 	bl	8000a00 <ToF_writeReg>

	return 1;
 8000d2a:	2301      	movs	r3, #1
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <ToF_decodeTimeout>:

uint16_t ToF_decodeTimeout(struct ToF_struct *ToF, uint16_t reg_val)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	807b      	strh	r3, [r7, #2]
	  // format: "(LSByte * 2^MSByte) + 1"
	  return (uint16_t)((reg_val & 0x00FF) <<
 8000d40:	887b      	ldrh	r3, [r7, #2]
 8000d42:	b2db      	uxtb	r3, r3
	         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8000d44:	887a      	ldrh	r2, [r7, #2]
 8000d46:	0a12      	lsrs	r2, r2, #8
 8000d48:	b292      	uxth	r2, r2
	  return (uint16_t)((reg_val & 0x00FF) <<
 8000d4a:	4093      	lsls	r3, r2
 8000d4c:	b29b      	uxth	r3, r3
	         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8000d4e:	3301      	adds	r3, #1
 8000d50:	b29b      	uxth	r3, r3
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <ToF_encodeTimeout>:
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.

uint16_t ToF_encodeTimeout(struct ToF_struct *ToF, uint16_t timeout_mclks)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b085      	sub	sp, #20
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
 8000d66:	460b      	mov	r3, r1
 8000d68:	807b      	strh	r3, [r7, #2]
	  // format: "(LSByte * 2^MSByte) + 1"

	  uint32_t ls_byte = 0;                     // Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
	  uint16_t ms_byte = 0;                     // based on VL53L0X_calc_timeout_us()
 8000d6e:	2300      	movs	r3, #0
 8000d70:	817b      	strh	r3, [r7, #10]

	  if (timeout_mclks > 0)
 8000d72:	887b      	ldrh	r3, [r7, #2]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d018      	beq.n	8000daa <ToF_encodeTimeout+0x4c>
	  {
	    ls_byte = timeout_mclks - 1;
 8000d78:	887b      	ldrh	r3, [r7, #2]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	60fb      	str	r3, [r7, #12]
	    while ((ls_byte & 0xFFFFFF00) > 0)
 8000d7e:	e005      	b.n	8000d8c <ToF_encodeTimeout+0x2e>
	    {
	      ls_byte >>= 1;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	085b      	lsrs	r3, r3, #1
 8000d84:	60fb      	str	r3, [r7, #12]
	      ms_byte++;
 8000d86:	897b      	ldrh	r3, [r7, #10]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	817b      	strh	r3, [r7, #10]
	    while ((ls_byte & 0xFFFFFF00) > 0)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1f4      	bne.n	8000d80 <ToF_encodeTimeout+0x22>
	    }
	    return (ms_byte << 8) | (ls_byte & 0xFF);
 8000d96:	897b      	ldrh	r3, [r7, #10]
 8000d98:	021b      	lsls	r3, r3, #8
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	4313      	orrs	r3, r2
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	e000      	b.n	8000dac <ToF_encodeTimeout+0x4e>
	  }
	  else { return 0; }
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <ToF_timeoutMclksToMicroseconds>:

uint32_t ToF_timeoutMclksToMicroseconds(struct ToF_struct *ToF, uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	807b      	strh	r3, [r7, #2]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	707b      	strb	r3, [r7, #1]
	  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8000dc8:	787b      	ldrb	r3, [r7, #1]
 8000dca:	4a0d      	ldr	r2, [pc, #52]	; (8000e00 <ToF_timeoutMclksToMicroseconds+0x48>)
 8000dcc:	fb02 f303 	mul.w	r3, r2, r3
 8000dd0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000dd4:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <ToF_timeoutMclksToMicroseconds+0x4c>)
 8000dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dda:	099b      	lsrs	r3, r3, #6
 8000ddc:	60fb      	str	r3, [r7, #12]

	  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8000dde:	887b      	ldrh	r3, [r7, #2]
 8000de0:	68fa      	ldr	r2, [r7, #12]
 8000de2:	fb02 f203 	mul.w	r2, r2, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	085b      	lsrs	r3, r3, #1
 8000dea:	4413      	add	r3, r2
 8000dec:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <ToF_timeoutMclksToMicroseconds+0x4c>)
 8000dee:	fba2 2303 	umull	r2, r3, r2, r3
 8000df2:	099b      	lsrs	r3, r3, #6
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	003a2f00 	.word	0x003a2f00
 8000e04:	10624dd3 	.word	0x10624dd3

08000e08 <ToF_timeoutMicrosecondsToMclks>:
// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()

uint32_t ToF_timeoutMicrosecondsToMclks(struct ToF_struct *ToF, uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b087      	sub	sp, #28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	4613      	mov	r3, r2
 8000e14:	71fb      	strb	r3, [r7, #7]
	  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	4a0d      	ldr	r2, [pc, #52]	; (8000e50 <ToF_timeoutMicrosecondsToMclks+0x48>)
 8000e1a:	fb02 f303 	mul.w	r3, r2, r3
 8000e1e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000e22:	4a0c      	ldr	r2, [pc, #48]	; (8000e54 <ToF_timeoutMicrosecondsToMclks+0x4c>)
 8000e24:	fba2 2303 	umull	r2, r3, r2, r3
 8000e28:	099b      	lsrs	r3, r3, #6
 8000e2a:	617b      	str	r3, [r7, #20]

	  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e32:	fb02 f203 	mul.w	r2, r2, r3
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	085b      	lsrs	r3, r3, #1
 8000e3a:	441a      	add	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	371c      	adds	r7, #28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	003a2f00 	.word	0x003a2f00
 8000e54:	10624dd3 	.word	0x10624dd3

08000e58 <ToF_getSequenceStepEnables>:

void ToF_getSequenceStepEnables(struct ToF_struct *ToF, struct SequenceStepEnables *enables)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
	uint8_t sequence_config = ToF_readReg(ToF, SYSTEM_SEQUENCE_CONFIG);
 8000e62:	2101      	movs	r1, #1
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff fe35 	bl	8000ad4 <ToF_readReg>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	73fb      	strb	r3, [r7, #15]

	enables->tcc          = (sequence_config >> 4) & 0x1;
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	091b      	lsrs	r3, r3, #4
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	701a      	strb	r2, [r3, #0]
	enables->dss          = (sequence_config >> 3) & 0x1;
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
 8000e80:	08db      	lsrs	r3, r3, #3
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	709a      	strb	r2, [r3, #2]
	enables->msrc         = (sequence_config >> 2) & 0x1;
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
 8000e90:	089b      	lsrs	r3, r3, #2
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	705a      	strb	r2, [r3, #1]
	enables->pre_range    = (sequence_config >> 6) & 0x1;
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	099b      	lsrs	r3, r3, #6
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	70da      	strb	r2, [r3, #3]
	enables->final_range  = (sequence_config >> 7) & 0x1;
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	09db      	lsrs	r3, r3, #7
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	711a      	strb	r2, [r3, #4]
}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <ToF_getVcselPulsePeriod>:

uint8_t ToF_getVcselPulsePeriod(struct ToF_struct *ToF, enum vcselPeriodType type)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	70fb      	strb	r3, [r7, #3]
	  if (type == VcselPeriodPreRange)
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d109      	bne.n	8000ee6 <ToF_getVcselPulsePeriod+0x26>
	  {
	    return decodeVcselPeriod(ToF_readReg(ToF, PRE_RANGE_CONFIG_VCSEL_PERIOD));
 8000ed2:	2150      	movs	r1, #80	; 0x50
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff fdfd 	bl	8000ad4 <ToF_readReg>
 8000eda:	4603      	mov	r3, r0
 8000edc:	3301      	adds	r3, #1
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	e00d      	b.n	8000f02 <ToF_getVcselPulsePeriod+0x42>
	  }
	  else if (type == VcselPeriodFinalRange)
 8000ee6:	78fb      	ldrb	r3, [r7, #3]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d109      	bne.n	8000f00 <ToF_getVcselPulsePeriod+0x40>
	  {
	    return decodeVcselPeriod(ToF_readReg(ToF, FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 8000eec:	2170      	movs	r1, #112	; 0x70
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff fdf0 	bl	8000ad4 <ToF_readReg>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	e000      	b.n	8000f02 <ToF_getVcselPulsePeriod+0x42>
	  }
	  else { return 255; }
 8000f00:	23ff      	movs	r3, #255	; 0xff
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <ToF_getSequenceStepTimeouts>:

void ToF_getSequenceStepTimeouts(struct ToF_struct *ToF, struct SequenceStepEnables *enables, struct SequenceStepTimeouts *timeouts)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b084      	sub	sp, #16
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	60f8      	str	r0, [r7, #12]
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
	timeouts->pre_range_vcsel_period_pclks = ToF_getVcselPulsePeriod(ToF, VcselPeriodPreRange);
 8000f16:	2100      	movs	r1, #0
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f7ff ffd1 	bl	8000ec0 <ToF_getVcselPulsePeriod>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	801a      	strh	r2, [r3, #0]

		timeouts->msrc_dss_tcc_mclks = ToF_readReg(ToF, MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8000f26:	2146      	movs	r1, #70	; 0x46
 8000f28:	68f8      	ldr	r0, [r7, #12]
 8000f2a:	f7ff fdd3 	bl	8000ad4 <ToF_readReg>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	3301      	adds	r3, #1
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	809a      	strh	r2, [r3, #4]
		timeouts->msrc_dss_tcc_us =
		  ToF_timeoutMclksToMicroseconds(ToF, timeouts->msrc_dss_tcc_mclks,
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	8899      	ldrh	r1, [r3, #4]
		                             timeouts->pre_range_vcsel_period_pclks);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	881b      	ldrh	r3, [r3, #0]
		  ToF_timeoutMclksToMicroseconds(ToF, timeouts->msrc_dss_tcc_mclks,
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	461a      	mov	r2, r3
 8000f46:	68f8      	ldr	r0, [r7, #12]
 8000f48:	f7ff ff36 	bl	8000db8 <ToF_timeoutMclksToMicroseconds>
 8000f4c:	4602      	mov	r2, r0
		timeouts->msrc_dss_tcc_us =
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	60da      	str	r2, [r3, #12]

		timeouts->pre_range_mclks =
		  ToF_decodeTimeout(ToF, ToF_readReg16Bit(ToF, PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8000f52:	2151      	movs	r1, #81	; 0x51
 8000f54:	68f8      	ldr	r0, [r7, #12]
 8000f56:	f7ff fddf 	bl	8000b18 <ToF_readReg16Bit>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f7ff fee8 	bl	8000d34 <ToF_decodeTimeout>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
		timeouts->pre_range_mclks =
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	80da      	strh	r2, [r3, #6]
		timeouts->pre_range_us =
			ToF_timeoutMclksToMicroseconds(ToF, timeouts->pre_range_mclks,
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	88d9      	ldrh	r1, [r3, #6]
		                             timeouts->pre_range_vcsel_period_pclks);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	881b      	ldrh	r3, [r3, #0]
			ToF_timeoutMclksToMicroseconds(ToF, timeouts->pre_range_mclks,
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	461a      	mov	r2, r3
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f7ff ff1d 	bl	8000db8 <ToF_timeoutMclksToMicroseconds>
 8000f7e:	4602      	mov	r2, r0
		timeouts->pre_range_us =
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	611a      	str	r2, [r3, #16]

		timeouts->final_range_vcsel_period_pclks = ToF_getVcselPulsePeriod(ToF, VcselPeriodFinalRange);
 8000f84:	2101      	movs	r1, #1
 8000f86:	68f8      	ldr	r0, [r7, #12]
 8000f88:	f7ff ff9a 	bl	8000ec0 <ToF_getVcselPulsePeriod>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	805a      	strh	r2, [r3, #2]

		timeouts->final_range_mclks =
			ToF_decodeTimeout(ToF, ToF_readReg16Bit(ToF, FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8000f94:	2171      	movs	r1, #113	; 0x71
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f7ff fdbe 	bl	8000b18 <ToF_readReg16Bit>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f7ff fec7 	bl	8000d34 <ToF_decodeTimeout>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
		timeouts->final_range_mclks =
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	811a      	strh	r2, [r3, #8]

		if (enables->pre_range)
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	78db      	ldrb	r3, [r3, #3]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d007      	beq.n	8000fc6 <ToF_getSequenceStepTimeouts+0xbc>
		{
		  timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	891a      	ldrh	r2, [r3, #8]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	88db      	ldrh	r3, [r3, #6]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	811a      	strh	r2, [r3, #8]
		}

		timeouts->final_range_us =
			ToF_timeoutMclksToMicroseconds(ToF, timeouts->final_range_mclks,
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	8919      	ldrh	r1, [r3, #8]
		                               timeouts->final_range_vcsel_period_pclks);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	885b      	ldrh	r3, [r3, #2]
			ToF_timeoutMclksToMicroseconds(ToF, timeouts->final_range_mclks,
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f7ff fef0 	bl	8000db8 <ToF_timeoutMclksToMicroseconds>
 8000fd8:	4602      	mov	r2, r0
		timeouts->final_range_us =
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	615a      	str	r2, [r3, #20]
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <ToF_getMeasurementTimingBudget>:

uint32_t ToF_getMeasurementTimingBudget(struct ToF_struct *ToF)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b08e      	sub	sp, #56	; 0x38
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
	struct SequenceStepEnables enables;
		struct SequenceStepTimeouts timeouts;

		uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 8000fee:	f240 7376 	movw	r3, #1910	; 0x776
 8000ff2:	867b      	strh	r3, [r7, #50]	; 0x32
		uint16_t const EndOverhead        = 960;
 8000ff4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000ff8:	863b      	strh	r3, [r7, #48]	; 0x30
		uint16_t const MsrcOverhead       = 660;
 8000ffa:	f44f 7325 	mov.w	r3, #660	; 0x294
 8000ffe:	85fb      	strh	r3, [r7, #46]	; 0x2e
		uint16_t const TccOverhead        = 590;
 8001000:	f240 234e 	movw	r3, #590	; 0x24e
 8001004:	85bb      	strh	r3, [r7, #44]	; 0x2c
		uint16_t const DssOverhead        = 690;
 8001006:	f240 23b2 	movw	r3, #690	; 0x2b2
 800100a:	857b      	strh	r3, [r7, #42]	; 0x2a
		uint16_t const PreRangeOverhead   = 660;
 800100c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001010:	853b      	strh	r3, [r7, #40]	; 0x28
		uint16_t const FinalRangeOverhead = 550;
 8001012:	f240 2326 	movw	r3, #550	; 0x226
 8001016:	84fb      	strh	r3, [r7, #38]	; 0x26

		uint32_t budget_us = StartOverhead + EndOverhead;
 8001018:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800101a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800101c:	4413      	add	r3, r2
 800101e:	637b      	str	r3, [r7, #52]	; 0x34

		ToF_getSequenceStepEnables(ToF, &enables);
 8001020:	f107 0320 	add.w	r3, r7, #32
 8001024:	4619      	mov	r1, r3
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ff16 	bl	8000e58 <ToF_getSequenceStepEnables>
		ToF_getSequenceStepTimeouts(ToF, &enables, &timeouts);
 800102c:	f107 0208 	add.w	r2, r7, #8
 8001030:	f107 0320 	add.w	r3, r7, #32
 8001034:	4619      	mov	r1, r3
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ff67 	bl	8000f0a <ToF_getSequenceStepTimeouts>

		if (enables.tcc)
 800103c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d005      	beq.n	8001050 <ToF_getMeasurementTimingBudget+0x6a>
		{
		  budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001048:	4413      	add	r3, r2
 800104a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800104c:	4413      	add	r3, r2
 800104e:	637b      	str	r3, [r7, #52]	; 0x34
		}
	    if (enables.dss)
 8001050:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001054:	2b00      	cmp	r3, #0
 8001056:	d007      	beq.n	8001068 <ToF_getMeasurementTimingBudget+0x82>
		{
		  budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800105c:	4413      	add	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001062:	4413      	add	r3, r2
 8001064:	637b      	str	r3, [r7, #52]	; 0x34
 8001066:	e009      	b.n	800107c <ToF_getMeasurementTimingBudget+0x96>
		}
		else if (enables.msrc)
 8001068:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800106c:	2b00      	cmp	r3, #0
 800106e:	d005      	beq.n	800107c <ToF_getMeasurementTimingBudget+0x96>
		{
		  budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001074:	4413      	add	r3, r2
 8001076:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001078:	4413      	add	r3, r2
 800107a:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if (enables.pre_range)
 800107c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001080:	2b00      	cmp	r3, #0
 8001082:	d005      	beq.n	8001090 <ToF_getMeasurementTimingBudget+0xaa>
		{
		  budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001088:	4413      	add	r3, r2
 800108a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800108c:	4413      	add	r3, r2
 800108e:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if (enables.final_range)
 8001090:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001094:	2b00      	cmp	r3, #0
 8001096:	d005      	beq.n	80010a4 <ToF_getMeasurementTimingBudget+0xbe>
		{
		  budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 8001098:	69fa      	ldr	r2, [r7, #28]
 800109a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800109c:	4413      	add	r3, r2
 800109e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010a0:	4413      	add	r3, r2
 80010a2:	637b      	str	r3, [r7, #52]	; 0x34
		}

		ToF->measurement_timing_budget_us = budget_us; // store for internal reuse
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010a8:	605a      	str	r2, [r3, #4]
		return budget_us;
 80010aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3738      	adds	r7, #56	; 0x38
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <ToF_setMeasurementTimingBudget>:

uint8_t ToF_setMeasurementTimingBudget(struct ToF_struct *ToF, uint32_t budget_us)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b092      	sub	sp, #72	; 0x48
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
	  struct SequenceStepEnables enables;
	  struct SequenceStepTimeouts timeouts;

	  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 80010be:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 80010c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	  uint16_t const EndOverhead        = 960;
 80010c6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80010ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  uint16_t const MsrcOverhead       = 660;
 80010cc:	f44f 7325 	mov.w	r3, #660	; 0x294
 80010d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
	  uint16_t const TccOverhead        = 590;
 80010d2:	f240 234e 	movw	r3, #590	; 0x24e
 80010d6:	877b      	strh	r3, [r7, #58]	; 0x3a
	  uint16_t const DssOverhead        = 690;
 80010d8:	f240 23b2 	movw	r3, #690	; 0x2b2
 80010dc:	873b      	strh	r3, [r7, #56]	; 0x38
	  uint16_t const PreRangeOverhead   = 660;
 80010de:	f44f 7325 	mov.w	r3, #660	; 0x294
 80010e2:	86fb      	strh	r3, [r7, #54]	; 0x36
	  uint16_t const FinalRangeOverhead = 550;
 80010e4:	f240 2326 	movw	r3, #550	; 0x226
 80010e8:	86bb      	strh	r3, [r7, #52]	; 0x34

	  uint32_t const MinTimingBudget = 20000;
 80010ea:	f644 6320 	movw	r3, #20000	; 0x4e20
 80010ee:	633b      	str	r3, [r7, #48]	; 0x30

	  if (budget_us < MinTimingBudget) { return 0; }
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d201      	bcs.n	80010fc <ToF_setMeasurementTimingBudget+0x48>
 80010f8:	2300      	movs	r3, #0
 80010fa:	e072      	b.n	80011e2 <ToF_setMeasurementTimingBudget+0x12e>

	  uint32_t used_budget_us = StartOverhead + EndOverhead;
 80010fc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001100:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001102:	4413      	add	r3, r2
 8001104:	647b      	str	r3, [r7, #68]	; 0x44

	  ToF_getSequenceStepEnables(ToF, &enables);
 8001106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110a:	4619      	mov	r1, r3
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff fea3 	bl	8000e58 <ToF_getSequenceStepEnables>
	  ToF_getSequenceStepTimeouts(ToF, &enables, &timeouts);
 8001112:	f107 020c 	add.w	r2, r7, #12
 8001116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111a:	4619      	mov	r1, r3
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff fef4 	bl	8000f0a <ToF_getSequenceStepTimeouts>

	  if (enables.tcc)
 8001122:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001126:	2b00      	cmp	r3, #0
 8001128:	d005      	beq.n	8001136 <ToF_setMeasurementTimingBudget+0x82>
	  {
	    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800112e:	4413      	add	r3, r2
 8001130:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001132:	4413      	add	r3, r2
 8001134:	647b      	str	r3, [r7, #68]	; 0x44
	  }

	  if (enables.dss)
 8001136:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800113a:	2b00      	cmp	r3, #0
 800113c:	d007      	beq.n	800114e <ToF_setMeasurementTimingBudget+0x9a>
	  {
	    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001142:	4413      	add	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001148:	4413      	add	r3, r2
 800114a:	647b      	str	r3, [r7, #68]	; 0x44
 800114c:	e009      	b.n	8001162 <ToF_setMeasurementTimingBudget+0xae>
	  }
	  else if (enables.msrc)
 800114e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001152:	2b00      	cmp	r3, #0
 8001154:	d005      	beq.n	8001162 <ToF_setMeasurementTimingBudget+0xae>
	  {
	    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800115a:	4413      	add	r3, r2
 800115c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800115e:	4413      	add	r3, r2
 8001160:	647b      	str	r3, [r7, #68]	; 0x44
	  }

	  if (enables.pre_range)
 8001162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001166:	2b00      	cmp	r3, #0
 8001168:	d005      	beq.n	8001176 <ToF_setMeasurementTimingBudget+0xc2>
	  {
	    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 800116a:	69fa      	ldr	r2, [r7, #28]
 800116c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800116e:	4413      	add	r3, r2
 8001170:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001172:	4413      	add	r3, r2
 8001174:	647b      	str	r3, [r7, #68]	; 0x44
	  }

	  if (enables.final_range)
 8001176:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800117a:	2b00      	cmp	r3, #0
 800117c:	d030      	beq.n	80011e0 <ToF_setMeasurementTimingBudget+0x12c>
	  {
	    used_budget_us += FinalRangeOverhead;
 800117e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001180:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001182:	4413      	add	r3, r2
 8001184:	647b      	str	r3, [r7, #68]	; 0x44
	    // budget and the sum of all other timeouts within the sequence.
	    // If there is no room for the final range timeout, then an error
	    // will be set. Otherwise the remaining time will be applied to
	    // the final range."

	    if (used_budget_us > budget_us)
 8001186:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	429a      	cmp	r2, r3
 800118c:	d901      	bls.n	8001192 <ToF_setMeasurementTimingBudget+0xde>
	    {
	      // "Requested timeout too big."
	      return 0;
 800118e:	2300      	movs	r3, #0
 8001190:	e027      	b.n	80011e2 <ToF_setMeasurementTimingBudget+0x12e>
	    }

	    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
	    //  timeouts must be expressed in macro periods MClks
	    //  because they have different vcsel periods."

	    uint16_t final_range_timeout_mclks =
	      ToF_timeoutMicrosecondsToMclks(ToF, final_range_timeout_us,
	                                 timeouts.final_range_vcsel_period_pclks);
 800119a:	89fb      	ldrh	r3, [r7, #14]
	      ToF_timeoutMicrosecondsToMclks(ToF, final_range_timeout_us,
 800119c:	b2db      	uxtb	r3, r3
 800119e:	461a      	mov	r2, r3
 80011a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff fe30 	bl	8000e08 <ToF_timeoutMicrosecondsToMclks>
 80011a8:	4603      	mov	r3, r0
	    uint16_t final_range_timeout_mclks =
 80011aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	    if (enables.pre_range)
 80011ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d005      	beq.n	80011c2 <ToF_setMeasurementTimingBudget+0x10e>
	    {
	      final_range_timeout_mclks += timeouts.pre_range_mclks;
 80011b6:	8a7a      	ldrh	r2, [r7, #18]
 80011b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80011bc:	4413      	add	r3, r2
 80011be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	    }

	    ToF_writeReg16Bit(ToF, FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80011c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80011c6:	4619      	mov	r1, r3
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff fdc8 	bl	8000d5e <ToF_encodeTimeout>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	2171      	movs	r1, #113	; 0x71
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff fc33 	bl	8000a40 <ToF_writeReg16Bit>
	      ToF_encodeTimeout(ToF, final_range_timeout_mclks));

	    // set_sequence_step_timeout() end

	    ToF->measurement_timing_budget_us = budget_us; // store for internal reuse
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	605a      	str	r2, [r3, #4]
	  }
	  return 1;
 80011e0:	2301      	movs	r3, #1
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3748      	adds	r7, #72	; 0x48
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <ToF_performSingleRefCalibration>:

uint8_t ToF_performSingleRefCalibration(struct ToF_struct *ToF, uint8_t vhv_init_byte)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	460b      	mov	r3, r1
 80011f4:	70fb      	strb	r3, [r7, #3]
	ToF_writeReg(ToF, SYSRANGE_START, 0x01 | vhv_init_byte);
 80011f6:	78fb      	ldrb	r3, [r7, #3]
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	461a      	mov	r2, r3
 8001200:	2100      	movs	r1, #0
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff fbfc 	bl	8000a00 <ToF_writeReg>

	  while ((ToF_readReg(ToF, RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8001208:	bf00      	nop
 800120a:	2113      	movs	r1, #19
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff fc61 	bl	8000ad4 <ToF_readReg>
 8001212:	4603      	mov	r3, r0
 8001214:	f003 0307 	and.w	r3, r3, #7
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0f6      	beq.n	800120a <ToF_performSingleRefCalibration+0x20>
	  {
	    //timeout
	  }

	  ToF_writeReg(ToF, SYSTEM_INTERRUPT_CLEAR, 0x01);
 800121c:	2201      	movs	r2, #1
 800121e:	210b      	movs	r1, #11
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff fbed 	bl	8000a00 <ToF_writeReg>

	  ToF_writeReg(ToF, SYSRANGE_START, 0x00);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff fbe8 	bl	8000a00 <ToF_writeReg>

	  return 1;
 8001230:	2301      	movs	r3, #1
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <ToF_init>:

uint8_t ToF_init(struct ToF_struct *ToF)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
	ToF->bus_address = 0x29;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2229      	movs	r2, #41	; 0x29
 8001246:	701a      	strb	r2, [r3, #0]

	ToF_writeReg(ToF, 0x80, 0x01);
 8001248:	2201      	movs	r2, #1
 800124a:	2180      	movs	r1, #128	; 0x80
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff fbd7 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x01);
 8001252:	2201      	movs	r2, #1
 8001254:	21ff      	movs	r1, #255	; 0xff
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff fbd2 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x00, 0x00);
 800125c:	2200      	movs	r2, #0
 800125e:	2100      	movs	r1, #0
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff fbcd 	bl	8000a00 <ToF_writeReg>
	ToF->stop_variable = ToF_readReg(ToF, 0x91);
 8001266:	2191      	movs	r1, #145	; 0x91
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff fc33 	bl	8000ad4 <ToF_readReg>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	705a      	strb	r2, [r3, #1]
	ToF_writeReg(ToF, 0x00, 0x01);
 8001276:	2201      	movs	r2, #1
 8001278:	2100      	movs	r1, #0
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff fbc0 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x00);
 8001280:	2200      	movs	r2, #0
 8001282:	21ff      	movs	r1, #255	; 0xff
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff fbbb 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x80, 0x00);
 800128a:	2200      	movs	r2, #0
 800128c:	2180      	movs	r1, #128	; 0x80
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff fbb6 	bl	8000a00 <ToF_writeReg>

	// disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
	ToF_writeReg(ToF, MSRC_CONFIG_CONTROL, ToF_readReg(ToF, MSRC_CONFIG_CONTROL) | 0x12);
 8001294:	2160      	movs	r1, #96	; 0x60
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff fc1c 	bl	8000ad4 <ToF_readReg>
 800129c:	4603      	mov	r3, r0
 800129e:	f043 0312 	orr.w	r3, r3, #18
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	461a      	mov	r2, r3
 80012a6:	2160      	movs	r1, #96	; 0x60
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff fba9 	bl	8000a00 <ToF_writeReg>

	// set final range signal rate limit to 0.25 MCPS (million counts per second)
	ToF_setSignalRateLimit(ToF, 0.25);
 80012ae:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff fc7c 	bl	8000bb0 <ToF_setSignalRateLimit>

	ToF_writeReg(ToF, SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80012b8:	22ff      	movs	r2, #255	; 0xff
 80012ba:	2101      	movs	r1, #1
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff fb9f 	bl	8000a00 <ToF_writeReg>
	uint8_t spad_count;
	uint8_t spad_type_is_aperture;

	if (ToF_getSpadInfo(ToF, &spad_count, &spad_type_is_aperture) == 0)
 80012c2:	f107 0213 	add.w	r2, r7, #19
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff fca5 	bl	8000c1c <ToF_getSpadInfo>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d101      	bne.n	80012dc <ToF_init+0xa2>
	{
		return 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	e24c      	b.n	8001776 <ToF_init+0x53c>
	}

	uint8_t ref_spad_map[6];
	ToF_readMulti(ToF, GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80012dc:	f107 020c 	add.w	r2, r7, #12
 80012e0:	2306      	movs	r3, #6
 80012e2:	21b0      	movs	r1, #176	; 0xb0
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff fc3f 	bl	8000b68 <ToF_readMulti>

	ToF_writeReg(ToF, 0xFF, 0x01);
 80012ea:	2201      	movs	r2, #1
 80012ec:	21ff      	movs	r1, #255	; 0xff
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff fb86 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80012f4:	2200      	movs	r2, #0
 80012f6:	214f      	movs	r1, #79	; 0x4f
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff fb81 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 80012fe:	222c      	movs	r2, #44	; 0x2c
 8001300:	214e      	movs	r1, #78	; 0x4e
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff fb7c 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x00);
 8001308:	2200      	movs	r2, #0
 800130a:	21ff      	movs	r1, #255	; 0xff
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff fb77 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8001312:	22b4      	movs	r2, #180	; 0xb4
 8001314:	21b6      	movs	r1, #182	; 0xb6
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff fb72 	bl	8000a00 <ToF_writeReg>

	uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 800131c:	7cfb      	ldrb	r3, [r7, #19]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <ToF_init+0xec>
 8001322:	230c      	movs	r3, #12
 8001324:	e000      	b.n	8001328 <ToF_init+0xee>
 8001326:	2300      	movs	r3, #0
 8001328:	757b      	strb	r3, [r7, #21]
	uint8_t spads_enabled = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	75fb      	strb	r3, [r7, #23]

	for (uint8_t i = 0; i < 48; i++)
 800132e:	2300      	movs	r3, #0
 8001330:	75bb      	strb	r3, [r7, #22]
 8001332:	e03c      	b.n	80013ae <ToF_init+0x174>
	{
	  if (i < first_spad_to_enable || spads_enabled == spad_count)
 8001334:	7dba      	ldrb	r2, [r7, #22]
 8001336:	7d7b      	ldrb	r3, [r7, #21]
 8001338:	429a      	cmp	r2, r3
 800133a:	d303      	bcc.n	8001344 <ToF_init+0x10a>
 800133c:	7d3b      	ldrb	r3, [r7, #20]
 800133e:	7dfa      	ldrb	r2, [r7, #23]
 8001340:	429a      	cmp	r2, r3
 8001342:	d11c      	bne.n	800137e <ToF_init+0x144>
	  {
	    // This bit is lower than the first one that should be enabled, or
	    // (reference_spad_count) bits have already been enabled, so zero this bit
	    ref_spad_map[i / 8] &= ~(1 << (i % 8));
 8001344:	7dbb      	ldrb	r3, [r7, #22]
 8001346:	08db      	lsrs	r3, r3, #3
 8001348:	b2d8      	uxtb	r0, r3
 800134a:	4603      	mov	r3, r0
 800134c:	f107 0218 	add.w	r2, r7, #24
 8001350:	4413      	add	r3, r2
 8001352:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001356:	b25a      	sxtb	r2, r3
 8001358:	7dbb      	ldrb	r3, [r7, #22]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	2101      	movs	r1, #1
 8001360:	fa01 f303 	lsl.w	r3, r1, r3
 8001364:	b25b      	sxtb	r3, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	b25b      	sxtb	r3, r3
 800136a:	4013      	ands	r3, r2
 800136c:	b25a      	sxtb	r2, r3
 800136e:	4603      	mov	r3, r0
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	f107 0118 	add.w	r1, r7, #24
 8001376:	440b      	add	r3, r1
 8001378:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800137c:	e014      	b.n	80013a8 <ToF_init+0x16e>
	  }
	  else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 800137e:	7dbb      	ldrb	r3, [r7, #22]
 8001380:	08db      	lsrs	r3, r3, #3
 8001382:	b2db      	uxtb	r3, r3
 8001384:	f107 0218 	add.w	r2, r7, #24
 8001388:	4413      	add	r3, r2
 800138a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800138e:	461a      	mov	r2, r3
 8001390:	7dbb      	ldrb	r3, [r7, #22]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	fa42 f303 	asr.w	r3, r2, r3
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d002      	beq.n	80013a8 <ToF_init+0x16e>
	  {
		  spads_enabled++;
 80013a2:	7dfb      	ldrb	r3, [r7, #23]
 80013a4:	3301      	adds	r3, #1
 80013a6:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < 48; i++)
 80013a8:	7dbb      	ldrb	r3, [r7, #22]
 80013aa:	3301      	adds	r3, #1
 80013ac:	75bb      	strb	r3, [r7, #22]
 80013ae:	7dbb      	ldrb	r3, [r7, #22]
 80013b0:	2b2f      	cmp	r3, #47	; 0x2f
 80013b2:	d9bf      	bls.n	8001334 <ToF_init+0xfa>
	  }
	}
	ToF_writeMulti(ToF, GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80013b4:	f107 020c 	add.w	r2, r7, #12
 80013b8:	2306      	movs	r3, #6
 80013ba:	21b0      	movs	r1, #176	; 0xb0
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff fb65 	bl	8000a8c <ToF_writeMulti>

	ToF_writeReg(ToF, 0xFF, 0x01);
 80013c2:	2201      	movs	r2, #1
 80013c4:	21ff      	movs	r1, #255	; 0xff
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff fb1a 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x00, 0x00);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2100      	movs	r1, #0
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff fb15 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x00);
 80013d6:	2200      	movs	r2, #0
 80013d8:	21ff      	movs	r1, #255	; 0xff
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff fb10 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x09, 0x00);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2109      	movs	r1, #9
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fb0b 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x10, 0x00);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2110      	movs	r1, #16
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff fb06 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x11, 0x00);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2111      	movs	r1, #17
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff fb01 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0x24, 0x01);
 80013fe:	2201      	movs	r2, #1
 8001400:	2124      	movs	r1, #36	; 0x24
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff fafc 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x25, 0xFF);
 8001408:	22ff      	movs	r2, #255	; 0xff
 800140a:	2125      	movs	r1, #37	; 0x25
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff faf7 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x75, 0x00);
 8001412:	2200      	movs	r2, #0
 8001414:	2175      	movs	r1, #117	; 0x75
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff faf2 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x01);
 800141c:	2201      	movs	r2, #1
 800141e:	21ff      	movs	r1, #255	; 0xff
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff faed 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x4E, 0x2C);
 8001426:	222c      	movs	r2, #44	; 0x2c
 8001428:	214e      	movs	r1, #78	; 0x4e
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff fae8 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x48, 0x00);
 8001430:	2200      	movs	r2, #0
 8001432:	2148      	movs	r1, #72	; 0x48
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff fae3 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x30, 0x20);
 800143a:	2220      	movs	r2, #32
 800143c:	2130      	movs	r1, #48	; 0x30
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff fade 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x00);
 8001444:	2200      	movs	r2, #0
 8001446:	21ff      	movs	r1, #255	; 0xff
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff fad9 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x30, 0x09);
 800144e:	2209      	movs	r2, #9
 8001450:	2130      	movs	r1, #48	; 0x30
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff fad4 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x54, 0x00);
 8001458:	2200      	movs	r2, #0
 800145a:	2154      	movs	r1, #84	; 0x54
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff facf 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x31, 0x04);
 8001462:	2204      	movs	r2, #4
 8001464:	2131      	movs	r1, #49	; 0x31
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff faca 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x32, 0x03);
 800146c:	2203      	movs	r2, #3
 800146e:	2132      	movs	r1, #50	; 0x32
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff fac5 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x40, 0x83);
 8001476:	2283      	movs	r2, #131	; 0x83
 8001478:	2140      	movs	r1, #64	; 0x40
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fac0 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x46, 0x25);
 8001480:	2225      	movs	r2, #37	; 0x25
 8001482:	2146      	movs	r1, #70	; 0x46
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff fabb 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x60, 0x00);
 800148a:	2200      	movs	r2, #0
 800148c:	2160      	movs	r1, #96	; 0x60
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff fab6 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x27, 0x00);
 8001494:	2200      	movs	r2, #0
 8001496:	2127      	movs	r1, #39	; 0x27
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff fab1 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x50, 0x06);
 800149e:	2206      	movs	r2, #6
 80014a0:	2150      	movs	r1, #80	; 0x50
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff faac 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x51, 0x00);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2151      	movs	r1, #81	; 0x51
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff faa7 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x52, 0x96);
 80014b2:	2296      	movs	r2, #150	; 0x96
 80014b4:	2152      	movs	r1, #82	; 0x52
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff faa2 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x56, 0x08);
 80014bc:	2208      	movs	r2, #8
 80014be:	2156      	movs	r1, #86	; 0x56
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff fa9d 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x57, 0x30);
 80014c6:	2230      	movs	r2, #48	; 0x30
 80014c8:	2157      	movs	r1, #87	; 0x57
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff fa98 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x61, 0x00);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2161      	movs	r1, #97	; 0x61
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff fa93 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x62, 0x00);
 80014da:	2200      	movs	r2, #0
 80014dc:	2162      	movs	r1, #98	; 0x62
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff fa8e 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x64, 0x00);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2164      	movs	r1, #100	; 0x64
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff fa89 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x65, 0x00);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2165      	movs	r1, #101	; 0x65
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff fa84 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x66, 0xA0);
 80014f8:	22a0      	movs	r2, #160	; 0xa0
 80014fa:	2166      	movs	r1, #102	; 0x66
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff fa7f 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x01);
 8001502:	2201      	movs	r2, #1
 8001504:	21ff      	movs	r1, #255	; 0xff
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff fa7a 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x22, 0x32);
 800150c:	2232      	movs	r2, #50	; 0x32
 800150e:	2122      	movs	r1, #34	; 0x22
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff fa75 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x47, 0x14);
 8001516:	2214      	movs	r2, #20
 8001518:	2147      	movs	r1, #71	; 0x47
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff fa70 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x49, 0xFF);
 8001520:	22ff      	movs	r2, #255	; 0xff
 8001522:	2149      	movs	r1, #73	; 0x49
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff fa6b 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x4A, 0x00);
 800152a:	2200      	movs	r2, #0
 800152c:	214a      	movs	r1, #74	; 0x4a
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff fa66 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x00);
 8001534:	2200      	movs	r2, #0
 8001536:	21ff      	movs	r1, #255	; 0xff
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff fa61 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x7A, 0x0A);
 800153e:	220a      	movs	r2, #10
 8001540:	217a      	movs	r1, #122	; 0x7a
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff fa5c 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x7B, 0x00);
 8001548:	2200      	movs	r2, #0
 800154a:	217b      	movs	r1, #123	; 0x7b
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff fa57 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x78, 0x21);
 8001552:	2221      	movs	r2, #33	; 0x21
 8001554:	2178      	movs	r1, #120	; 0x78
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff fa52 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x01);
 800155c:	2201      	movs	r2, #1
 800155e:	21ff      	movs	r1, #255	; 0xff
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff fa4d 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x23, 0x34);
 8001566:	2234      	movs	r2, #52	; 0x34
 8001568:	2123      	movs	r1, #35	; 0x23
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff fa48 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x42, 0x00);
 8001570:	2200      	movs	r2, #0
 8001572:	2142      	movs	r1, #66	; 0x42
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff fa43 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x44, 0xFF);
 800157a:	22ff      	movs	r2, #255	; 0xff
 800157c:	2144      	movs	r1, #68	; 0x44
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff fa3e 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x45, 0x26);
 8001584:	2226      	movs	r2, #38	; 0x26
 8001586:	2145      	movs	r1, #69	; 0x45
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff fa39 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x46, 0x05);
 800158e:	2205      	movs	r2, #5
 8001590:	2146      	movs	r1, #70	; 0x46
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff fa34 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x40, 0x40);
 8001598:	2240      	movs	r2, #64	; 0x40
 800159a:	2140      	movs	r1, #64	; 0x40
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff fa2f 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x0E, 0x06);
 80015a2:	2206      	movs	r2, #6
 80015a4:	210e      	movs	r1, #14
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fa2a 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x20, 0x1A);
 80015ac:	221a      	movs	r2, #26
 80015ae:	2120      	movs	r1, #32
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff fa25 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x43, 0x40);
 80015b6:	2240      	movs	r2, #64	; 0x40
 80015b8:	2143      	movs	r1, #67	; 0x43
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff fa20 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x00);
 80015c0:	2200      	movs	r2, #0
 80015c2:	21ff      	movs	r1, #255	; 0xff
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff fa1b 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x34, 0x03);
 80015ca:	2203      	movs	r2, #3
 80015cc:	2134      	movs	r1, #52	; 0x34
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff fa16 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x35, 0x44);
 80015d4:	2244      	movs	r2, #68	; 0x44
 80015d6:	2135      	movs	r1, #53	; 0x35
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff fa11 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x01);
 80015de:	2201      	movs	r2, #1
 80015e0:	21ff      	movs	r1, #255	; 0xff
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff fa0c 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x31, 0x04);
 80015e8:	2204      	movs	r2, #4
 80015ea:	2131      	movs	r1, #49	; 0x31
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff fa07 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x4B, 0x09);
 80015f2:	2209      	movs	r2, #9
 80015f4:	214b      	movs	r1, #75	; 0x4b
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fa02 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x4C, 0x05);
 80015fc:	2205      	movs	r2, #5
 80015fe:	214c      	movs	r1, #76	; 0x4c
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff f9fd 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x4D, 0x04);
 8001606:	2204      	movs	r2, #4
 8001608:	214d      	movs	r1, #77	; 0x4d
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff f9f8 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x00);
 8001610:	2200      	movs	r2, #0
 8001612:	21ff      	movs	r1, #255	; 0xff
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff f9f3 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x44, 0x00);
 800161a:	2200      	movs	r2, #0
 800161c:	2144      	movs	r1, #68	; 0x44
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff f9ee 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x45, 0x20);
 8001624:	2220      	movs	r2, #32
 8001626:	2145      	movs	r1, #69	; 0x45
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff f9e9 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x47, 0x08);
 800162e:	2208      	movs	r2, #8
 8001630:	2147      	movs	r1, #71	; 0x47
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff f9e4 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x48, 0x28);
 8001638:	2228      	movs	r2, #40	; 0x28
 800163a:	2148      	movs	r1, #72	; 0x48
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff f9df 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x67, 0x00);
 8001642:	2200      	movs	r2, #0
 8001644:	2167      	movs	r1, #103	; 0x67
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff f9da 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x70, 0x04);
 800164c:	2204      	movs	r2, #4
 800164e:	2170      	movs	r1, #112	; 0x70
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff f9d5 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x71, 0x01);
 8001656:	2201      	movs	r2, #1
 8001658:	2171      	movs	r1, #113	; 0x71
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff f9d0 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x72, 0xFE);
 8001660:	22fe      	movs	r2, #254	; 0xfe
 8001662:	2172      	movs	r1, #114	; 0x72
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff f9cb 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x76, 0x00);
 800166a:	2200      	movs	r2, #0
 800166c:	2176      	movs	r1, #118	; 0x76
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff f9c6 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x77, 0x00);
 8001674:	2200      	movs	r2, #0
 8001676:	2177      	movs	r1, #119	; 0x77
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff f9c1 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x01);
 800167e:	2201      	movs	r2, #1
 8001680:	21ff      	movs	r1, #255	; 0xff
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff f9bc 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x0D, 0x01);
 8001688:	2201      	movs	r2, #1
 800168a:	210d      	movs	r1, #13
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff f9b7 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x00);
 8001692:	2200      	movs	r2, #0
 8001694:	21ff      	movs	r1, #255	; 0xff
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff f9b2 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x80, 0x01);
 800169c:	2201      	movs	r2, #1
 800169e:	2180      	movs	r1, #128	; 0x80
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff f9ad 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x01, 0xF8);
 80016a6:	22f8      	movs	r2, #248	; 0xf8
 80016a8:	2101      	movs	r1, #1
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff f9a8 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, 0xFF, 0x01);
 80016b0:	2201      	movs	r2, #1
 80016b2:	21ff      	movs	r1, #255	; 0xff
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff f9a3 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x8E, 0x01);
 80016ba:	2201      	movs	r2, #1
 80016bc:	218e      	movs	r1, #142	; 0x8e
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff f99e 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x00, 0x01);
 80016c4:	2201      	movs	r2, #1
 80016c6:	2100      	movs	r1, #0
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff f999 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x00);
 80016ce:	2200      	movs	r2, #0
 80016d0:	21ff      	movs	r1, #255	; 0xff
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff f994 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x80, 0x00);
 80016d8:	2200      	movs	r2, #0
 80016da:	2180      	movs	r1, #128	; 0x80
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff f98f 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80016e2:	2204      	movs	r2, #4
 80016e4:	210a      	movs	r1, #10
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff f98a 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, GPIO_HV_MUX_ACTIVE_HIGH, ToF_readReg(ToF, GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80016ec:	2184      	movs	r1, #132	; 0x84
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff f9f0 	bl	8000ad4 <ToF_readReg>
 80016f4:	4603      	mov	r3, r0
 80016f6:	f023 0310 	bic.w	r3, r3, #16
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	2184      	movs	r1, #132	; 0x84
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff f97d 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001706:	2201      	movs	r2, #1
 8001708:	210b      	movs	r1, #11
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff f978 	bl	8000a00 <ToF_writeReg>

	ToF->measurement_timing_budget_us = ToF_getMeasurementTimingBudget(ToF);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff fc68 	bl	8000fe6 <ToF_getMeasurementTimingBudget>
 8001716:	4602      	mov	r2, r0
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	605a      	str	r2, [r3, #4]

	ToF_writeReg(ToF, SYSTEM_SEQUENCE_CONFIG, 0xE8);
 800171c:	22e8      	movs	r2, #232	; 0xe8
 800171e:	2101      	movs	r1, #1
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff f96d 	bl	8000a00 <ToF_writeReg>

	ToF_setMeasurementTimingBudget(ToF, ToF->measurement_timing_budget_us);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	4619      	mov	r1, r3
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff fcc1 	bl	80010b4 <ToF_setMeasurementTimingBudget>

	ToF_writeReg(ToF, SYSTEM_SEQUENCE_CONFIG, 0x01);
 8001732:	2201      	movs	r2, #1
 8001734:	2101      	movs	r1, #1
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff f962 	bl	8000a00 <ToF_writeReg>

	if (!ToF_performSingleRefCalibration(ToF, 0x40)) { return 0; }
 800173c:	2140      	movs	r1, #64	; 0x40
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff fd53 	bl	80011ea <ToF_performSingleRefCalibration>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <ToF_init+0x514>
 800174a:	2300      	movs	r3, #0
 800174c:	e013      	b.n	8001776 <ToF_init+0x53c>

	ToF_writeReg(ToF, SYSTEM_SEQUENCE_CONFIG, 0x02);
 800174e:	2202      	movs	r2, #2
 8001750:	2101      	movs	r1, #1
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff f954 	bl	8000a00 <ToF_writeReg>

    if (!ToF_performSingleRefCalibration(ToF, 0x00)) { return 0; }
 8001758:	2100      	movs	r1, #0
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff fd45 	bl	80011ea <ToF_performSingleRefCalibration>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <ToF_init+0x530>
 8001766:	2300      	movs	r3, #0
 8001768:	e005      	b.n	8001776 <ToF_init+0x53c>

    ToF_writeReg(ToF, SYSTEM_SEQUENCE_CONFIG, 0xE8);
 800176a:	22e8      	movs	r2, #232	; 0xe8
 800176c:	2101      	movs	r1, #1
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff f946 	bl	8000a00 <ToF_writeReg>

	return 1;
 8001774:	2301      	movs	r3, #1
}
 8001776:	4618      	mov	r0, r3
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <ToF_setAddress>:

void ToF_setAddress(struct ToF_struct *ToF, uint8_t new_addr)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	460b      	mov	r3, r1
 8001788:	70fb      	strb	r3, [r7, #3]
	ToF_writeReg(ToF, I2C_SLAVE_DEVICE_ADDRESS, new_addr & 0x7F);
 800178a:	78fb      	ldrb	r3, [r7, #3]
 800178c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001790:	b2db      	uxtb	r3, r3
 8001792:	461a      	mov	r2, r3
 8001794:	218a      	movs	r1, #138	; 0x8a
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff f932 	bl	8000a00 <ToF_writeReg>
	ToF->bus_address = new_addr;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	78fa      	ldrb	r2, [r7, #3]
 80017a0:	701a      	strb	r2, [r3, #0]
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <ToF_startContinuous>:

void ToF_startContinuous(struct ToF_struct *ToF)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
	ToF_writeReg(ToF, 0x80, 0x01);
 80017b2:	2201      	movs	r2, #1
 80017b4:	2180      	movs	r1, #128	; 0x80
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff f922 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x01);
 80017bc:	2201      	movs	r2, #1
 80017be:	21ff      	movs	r1, #255	; 0xff
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff f91d 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x00, 0x00);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2100      	movs	r1, #0
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff f918 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x91, ToF->stop_variable);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	785b      	ldrb	r3, [r3, #1]
 80017d4:	461a      	mov	r2, r3
 80017d6:	2191      	movs	r1, #145	; 0x91
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff f911 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x00, 0x01);
 80017de:	2201      	movs	r2, #1
 80017e0:	2100      	movs	r1, #0
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff f90c 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0xFF, 0x00);
 80017e8:	2200      	movs	r2, #0
 80017ea:	21ff      	movs	r1, #255	; 0xff
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff f907 	bl	8000a00 <ToF_writeReg>
	ToF_writeReg(ToF, 0x80, 0x00);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2180      	movs	r1, #128	; 0x80
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff f902 	bl	8000a00 <ToF_writeReg>

	ToF_writeReg(ToF, SYSRANGE_START, 0x02);
 80017fc:	2202      	movs	r2, #2
 80017fe:	2100      	movs	r1, #0
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff f8fd 	bl	8000a00 <ToF_writeReg>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <initMicromouseVL53L0x>:
 *
 */


void initMicromouseVL53L0x()
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	  //////////////////////////////////////////////////////////////////////////
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_F_Pin, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2110      	movs	r1, #16
 8001818:	4863      	ldr	r0, [pc, #396]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 800181a:	f001 fe17 	bl	800344c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FR_Pin, 1);
 800181e:	2201      	movs	r2, #1
 8001820:	2101      	movs	r1, #1
 8001822:	4861      	ldr	r0, [pc, #388]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 8001824:	f001 fe12 	bl	800344c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FL_Pin, 0);
 8001828:	2200      	movs	r2, #0
 800182a:	2102      	movs	r1, #2
 800182c:	485e      	ldr	r0, [pc, #376]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 800182e:	f001 fe0d 	bl	800344c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_R_Pin, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2104      	movs	r1, #4
 8001836:	485c      	ldr	r0, [pc, #368]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 8001838:	f001 fe08 	bl	800344c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_L_Pin, 0);
 800183c:	2200      	movs	r2, #0
 800183e:	2108      	movs	r1, #8
 8001840:	4859      	ldr	r0, [pc, #356]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 8001842:	f001 fe03 	bl	800344c <HAL_GPIO_WritePin>

	  ToF_init(&ToF_FR);                      //inicjalizacja czujnika FR
 8001846:	4859      	ldr	r0, [pc, #356]	; (80019ac <initMicromouseVL53L0x+0x19c>)
 8001848:	f7ff fcf7 	bl	800123a <ToF_init>
	  ToF_setAddress(&ToF_FR, 0x30);
 800184c:	2130      	movs	r1, #48	; 0x30
 800184e:	4857      	ldr	r0, [pc, #348]	; (80019ac <initMicromouseVL53L0x+0x19c>)
 8001850:	f7ff ff95 	bl	800177e <ToF_setAddress>

	  //////////////////////////////////////////////////////////////////////////
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_F_Pin, 0);
 8001854:	2200      	movs	r2, #0
 8001856:	2110      	movs	r1, #16
 8001858:	4853      	ldr	r0, [pc, #332]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 800185a:	f001 fdf7 	bl	800344c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FR_Pin, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2101      	movs	r1, #1
 8001862:	4851      	ldr	r0, [pc, #324]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 8001864:	f001 fdf2 	bl	800344c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FL_Pin, 1);
 8001868:	2201      	movs	r2, #1
 800186a:	2102      	movs	r1, #2
 800186c:	484e      	ldr	r0, [pc, #312]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 800186e:	f001 fded 	bl	800344c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_R_Pin, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2104      	movs	r1, #4
 8001876:	484c      	ldr	r0, [pc, #304]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 8001878:	f001 fde8 	bl	800344c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_L_Pin, 0);
 800187c:	2200      	movs	r2, #0
 800187e:	2108      	movs	r1, #8
 8001880:	4849      	ldr	r0, [pc, #292]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 8001882:	f001 fde3 	bl	800344c <HAL_GPIO_WritePin>

	  ToF_init(&ToF_FL);                      //inicjalizacja czujnika FL
 8001886:	484a      	ldr	r0, [pc, #296]	; (80019b0 <initMicromouseVL53L0x+0x1a0>)
 8001888:	f7ff fcd7 	bl	800123a <ToF_init>
	  ToF_setAddress(&ToF_FL, 0x31);
 800188c:	2131      	movs	r1, #49	; 0x31
 800188e:	4848      	ldr	r0, [pc, #288]	; (80019b0 <initMicromouseVL53L0x+0x1a0>)
 8001890:	f7ff ff75 	bl	800177e <ToF_setAddress>

	  //////////////////////////////////////////////////////////////////////////
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_F_Pin, 0);
 8001894:	2200      	movs	r2, #0
 8001896:	2110      	movs	r1, #16
 8001898:	4843      	ldr	r0, [pc, #268]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 800189a:	f001 fdd7 	bl	800344c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FR_Pin, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	2101      	movs	r1, #1
 80018a2:	4841      	ldr	r0, [pc, #260]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 80018a4:	f001 fdd2 	bl	800344c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FL_Pin, 0);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2102      	movs	r1, #2
 80018ac:	483e      	ldr	r0, [pc, #248]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 80018ae:	f001 fdcd 	bl	800344c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_R_Pin, 1);
 80018b2:	2201      	movs	r2, #1
 80018b4:	2104      	movs	r1, #4
 80018b6:	483c      	ldr	r0, [pc, #240]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 80018b8:	f001 fdc8 	bl	800344c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_L_Pin, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	2108      	movs	r1, #8
 80018c0:	4839      	ldr	r0, [pc, #228]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 80018c2:	f001 fdc3 	bl	800344c <HAL_GPIO_WritePin>

	  ToF_init(&ToF_R);                     //inicjalizacja czujnika R
 80018c6:	483b      	ldr	r0, [pc, #236]	; (80019b4 <initMicromouseVL53L0x+0x1a4>)
 80018c8:	f7ff fcb7 	bl	800123a <ToF_init>
	  ToF_setAddress(&ToF_R, 0x32);
 80018cc:	2132      	movs	r1, #50	; 0x32
 80018ce:	4839      	ldr	r0, [pc, #228]	; (80019b4 <initMicromouseVL53L0x+0x1a4>)
 80018d0:	f7ff ff55 	bl	800177e <ToF_setAddress>

	  //////////////////////////////////////////////////////////////////////////
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_F_Pin, 0);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2110      	movs	r1, #16
 80018d8:	4833      	ldr	r0, [pc, #204]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 80018da:	f001 fdb7 	bl	800344c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FR_Pin, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2101      	movs	r1, #1
 80018e2:	4831      	ldr	r0, [pc, #196]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 80018e4:	f001 fdb2 	bl	800344c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FL_Pin, 0);
 80018e8:	2200      	movs	r2, #0
 80018ea:	2102      	movs	r1, #2
 80018ec:	482e      	ldr	r0, [pc, #184]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 80018ee:	f001 fdad 	bl	800344c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_R_Pin, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2104      	movs	r1, #4
 80018f6:	482c      	ldr	r0, [pc, #176]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 80018f8:	f001 fda8 	bl	800344c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_L_Pin, 1);
 80018fc:	2201      	movs	r2, #1
 80018fe:	2108      	movs	r1, #8
 8001900:	4829      	ldr	r0, [pc, #164]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 8001902:	f001 fda3 	bl	800344c <HAL_GPIO_WritePin>

	  ToF_init(&ToF_L);                     //inicjalizacja czujnika L
 8001906:	482c      	ldr	r0, [pc, #176]	; (80019b8 <initMicromouseVL53L0x+0x1a8>)
 8001908:	f7ff fc97 	bl	800123a <ToF_init>
	  ToF_setAddress(&ToF_L, 0x33);
 800190c:	2133      	movs	r1, #51	; 0x33
 800190e:	482a      	ldr	r0, [pc, #168]	; (80019b8 <initMicromouseVL53L0x+0x1a8>)
 8001910:	f7ff ff35 	bl	800177e <ToF_setAddress>

	  //////////////////////////////////////////////////////////////////////////
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_F_Pin, 1);
 8001914:	2201      	movs	r2, #1
 8001916:	2110      	movs	r1, #16
 8001918:	4823      	ldr	r0, [pc, #140]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 800191a:	f001 fd97 	bl	800344c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FR_Pin, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2101      	movs	r1, #1
 8001922:	4821      	ldr	r0, [pc, #132]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 8001924:	f001 fd92 	bl	800344c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FL_Pin, 0);
 8001928:	2200      	movs	r2, #0
 800192a:	2102      	movs	r1, #2
 800192c:	481e      	ldr	r0, [pc, #120]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 800192e:	f001 fd8d 	bl	800344c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_R_Pin, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2104      	movs	r1, #4
 8001936:	481c      	ldr	r0, [pc, #112]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 8001938:	f001 fd88 	bl	800344c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_L_Pin, 0);
 800193c:	2200      	movs	r2, #0
 800193e:	2108      	movs	r1, #8
 8001940:	4819      	ldr	r0, [pc, #100]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 8001942:	f001 fd83 	bl	800344c <HAL_GPIO_WritePin>

	  ToF_init(&ToF_F);                     //inicjalizacja czujnika F
 8001946:	481d      	ldr	r0, [pc, #116]	; (80019bc <initMicromouseVL53L0x+0x1ac>)
 8001948:	f7ff fc77 	bl	800123a <ToF_init>
	  ToF_setAddress(&ToF_F, 0x34);
 800194c:	2134      	movs	r1, #52	; 0x34
 800194e:	481b      	ldr	r0, [pc, #108]	; (80019bc <initMicromouseVL53L0x+0x1ac>)
 8001950:	f7ff ff15 	bl	800177e <ToF_setAddress>
	  //////////////////////////////////////////////////////////////////////////

	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_F_Pin, 1);     //uruchomienie wszystkich ToF
 8001954:	2201      	movs	r2, #1
 8001956:	2110      	movs	r1, #16
 8001958:	4813      	ldr	r0, [pc, #76]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 800195a:	f001 fd77 	bl	800344c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FR_Pin, 1);
 800195e:	2201      	movs	r2, #1
 8001960:	2101      	movs	r1, #1
 8001962:	4811      	ldr	r0, [pc, #68]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 8001964:	f001 fd72 	bl	800344c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FL_Pin, 1);
 8001968:	2201      	movs	r2, #1
 800196a:	2102      	movs	r1, #2
 800196c:	480e      	ldr	r0, [pc, #56]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 800196e:	f001 fd6d 	bl	800344c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_R_Pin, 1);
 8001972:	2201      	movs	r2, #1
 8001974:	2104      	movs	r1, #4
 8001976:	480c      	ldr	r0, [pc, #48]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 8001978:	f001 fd68 	bl	800344c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_L_Pin, 1);
 800197c:	2201      	movs	r2, #1
 800197e:	2108      	movs	r1, #8
 8001980:	4809      	ldr	r0, [pc, #36]	; (80019a8 <initMicromouseVL53L0x+0x198>)
 8001982:	f001 fd63 	bl	800344c <HAL_GPIO_WritePin>

	  ToF_startContinuous(&ToF_F);                     //uruchomienie trybu pomiaru ciągłego
 8001986:	480d      	ldr	r0, [pc, #52]	; (80019bc <initMicromouseVL53L0x+0x1ac>)
 8001988:	f7ff ff0f 	bl	80017aa <ToF_startContinuous>
	  ToF_startContinuous(&ToF_R);
 800198c:	4809      	ldr	r0, [pc, #36]	; (80019b4 <initMicromouseVL53L0x+0x1a4>)
 800198e:	f7ff ff0c 	bl	80017aa <ToF_startContinuous>
	  ToF_startContinuous(&ToF_L);
 8001992:	4809      	ldr	r0, [pc, #36]	; (80019b8 <initMicromouseVL53L0x+0x1a8>)
 8001994:	f7ff ff09 	bl	80017aa <ToF_startContinuous>
	  ToF_startContinuous(&ToF_FR);
 8001998:	4804      	ldr	r0, [pc, #16]	; (80019ac <initMicromouseVL53L0x+0x19c>)
 800199a:	f7ff ff06 	bl	80017aa <ToF_startContinuous>
	  ToF_startContinuous(&ToF_FL);
 800199e:	4804      	ldr	r0, [pc, #16]	; (80019b0 <initMicromouseVL53L0x+0x1a0>)
 80019a0:	f7ff ff03 	bl	80017aa <ToF_startContinuous>
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40020800 	.word	0x40020800
 80019ac:	200000a8 	.word	0x200000a8
 80019b0:	200000b4 	.word	0x200000b4
 80019b4:	200000cc 	.word	0x200000cc
 80019b8:	200000dc 	.word	0x200000dc
 80019bc:	200000c4 	.word	0x200000c4

080019c0 <encRead>:
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim4;


void encRead(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0


  oldLeftEncoder = leftEncoder;
 80019c4:	4b3a      	ldr	r3, [pc, #232]	; (8001ab0 <encRead+0xf0>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	b21a      	sxth	r2, r3
 80019ca:	4b3a      	ldr	r3, [pc, #232]	; (8001ab4 <encRead+0xf4>)
 80019cc:	801a      	strh	r2, [r3, #0]
  leftEncoder = TIM4->CNT; // przepisanie wartosci z rejestru timera 2 do zmiennej
 80019ce:	4b3a      	ldr	r3, [pc, #232]	; (8001ab8 <encRead+0xf8>)
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	b21a      	sxth	r2, r3
 80019d4:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <encRead+0xf0>)
 80019d6:	801a      	strh	r2, [r3, #0]
  oldRightEncoder = rightEncoder;
 80019d8:	4b38      	ldr	r3, [pc, #224]	; (8001abc <encRead+0xfc>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	b21a      	sxth	r2, r3
 80019de:	4b38      	ldr	r3, [pc, #224]	; (8001ac0 <encRead+0x100>)
 80019e0:	801a      	strh	r2, [r3, #0]
  rightEncoder = -TIM2->CNT; // przepisanie wartosci z rejestru timera 4 do zmiennej
 80019e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	425b      	negs	r3, r3
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	b21a      	sxth	r2, r3
 80019f0:	4b32      	ldr	r3, [pc, #200]	; (8001abc <encRead+0xfc>)
 80019f2:	801a      	strh	r2, [r3, #0]
  leftCount = leftEncoder - oldLeftEncoder;
 80019f4:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <encRead+0xf0>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	4b2d      	ldr	r3, [pc, #180]	; (8001ab4 <encRead+0xf4>)
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	b21b      	sxth	r3, r3
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	b21a      	sxth	r2, r3
 8001a0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ac4 <encRead+0x104>)
 8001a0c:	801a      	strh	r2, [r3, #0]
  rightCount = rightEncoder - oldRightEncoder;
 8001a0e:	4b2b      	ldr	r3, [pc, #172]	; (8001abc <encRead+0xfc>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	b21b      	sxth	r3, r3
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <encRead+0x100>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	b21b      	sxth	r3, r3
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	b21a      	sxth	r2, r3
 8001a24:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <encRead+0x108>)
 8001a26:	801a      	strh	r2, [r3, #0]
  fwdCount = leftCount + rightCount;
 8001a28:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <encRead+0x104>)
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	b21b      	sxth	r3, r3
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	4b25      	ldr	r3, [pc, #148]	; (8001ac8 <encRead+0x108>)
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	b21b      	sxth	r3, r3
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	4413      	add	r3, r2
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	b21a      	sxth	r2, r3
 8001a3e:	4b23      	ldr	r3, [pc, #140]	; (8001acc <encRead+0x10c>)
 8001a40:	801a      	strh	r2, [r3, #0]
  rotCount = - (leftCount - rightCount);
 8001a42:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <encRead+0x108>)
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	b21b      	sxth	r3, r3
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <encRead+0x104>)
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	b21b      	sxth	r3, r3
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	b21a      	sxth	r2, r3
 8001a58:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <encRead+0x110>)
 8001a5a:	801a      	strh	r2, [r3, #0]
  fwdTotal += fwdCount;
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <encRead+0x10c>)
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	b21b      	sxth	r3, r3
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <encRead+0x114>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4413      	add	r3, r2
 8001a6a:	4a1a      	ldr	r2, [pc, #104]	; (8001ad4 <encRead+0x114>)
 8001a6c:	6013      	str	r3, [r2, #0]
  rotTotal += rotCount;
 8001a6e:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <encRead+0x110>)
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	b21b      	sxth	r3, r3
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <encRead+0x118>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4a16      	ldr	r2, [pc, #88]	; (8001ad8 <encRead+0x118>)
 8001a7e:	6013      	str	r3, [r2, #0]
  leftTotal += leftCount;
 8001a80:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <encRead+0x104>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	b21b      	sxth	r3, r3
 8001a86:	461a      	mov	r2, r3
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <encRead+0x11c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4a13      	ldr	r2, [pc, #76]	; (8001adc <encRead+0x11c>)
 8001a90:	6013      	str	r3, [r2, #0]
  rightTotal += rightCount;
 8001a92:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <encRead+0x108>)
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	b21b      	sxth	r3, r3
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <encRead+0x120>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	4a0f      	ldr	r2, [pc, #60]	; (8001ae0 <encRead+0x120>)
 8001aa2:	6013      	str	r3, [r2, #0]


}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20000090 	.word	0x20000090
 8001ab4:	2000008c 	.word	0x2000008c
 8001ab8:	40000800 	.word	0x40000800
 8001abc:	20000092 	.word	0x20000092
 8001ac0:	2000008e 	.word	0x2000008e
 8001ac4:	200000f4 	.word	0x200000f4
 8001ac8:	20000100 	.word	0x20000100
 8001acc:	200000ec 	.word	0x200000ec
 8001ad0:	200000e4 	.word	0x200000e4
 8001ad4:	200000e8 	.word	0x200000e8
 8001ad8:	200000f0 	.word	0x200000f0
 8001adc:	200000fc 	.word	0x200000fc
 8001ae0:	200000f8 	.word	0x200000f8

08001ae4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	; 0x28
 8001ae8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
 8001af8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	4b3e      	ldr	r3, [pc, #248]	; (8001bf8 <MX_GPIO_Init+0x114>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a3d      	ldr	r2, [pc, #244]	; (8001bf8 <MX_GPIO_Init+0x114>)
 8001b04:	f043 0304 	orr.w	r3, r3, #4
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <MX_GPIO_Init+0x114>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <MX_GPIO_Init+0x114>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a36      	ldr	r2, [pc, #216]	; (8001bf8 <MX_GPIO_Init+0x114>)
 8001b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b34      	ldr	r3, [pc, #208]	; (8001bf8 <MX_GPIO_Init+0x114>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	4b30      	ldr	r3, [pc, #192]	; (8001bf8 <MX_GPIO_Init+0x114>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a2f      	ldr	r2, [pc, #188]	; (8001bf8 <MX_GPIO_Init+0x114>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b2d      	ldr	r3, [pc, #180]	; (8001bf8 <MX_GPIO_Init+0x114>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	4b29      	ldr	r3, [pc, #164]	; (8001bf8 <MX_GPIO_Init+0x114>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a28      	ldr	r2, [pc, #160]	; (8001bf8 <MX_GPIO_Init+0x114>)
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <MX_GPIO_Init+0x114>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TOF_GPIO_FR_Pin|TOF_GPIO_FL_Pin|TOF_GPIO_R_Pin|TOF_GPIO_L_Pin 
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f241 411f 	movw	r1, #5151	; 0x141f
 8001b70:	4822      	ldr	r0, [pc, #136]	; (8001bfc <MX_GPIO_Init+0x118>)
 8001b72:	f001 fc6b 	bl	800344c <HAL_GPIO_WritePin>
                          |TOF_GPIO_F_Pin|DIR_L_Pin|DIR_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001b76:	2200      	movs	r2, #0
 8001b78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b7c:	4820      	ldr	r0, [pc, #128]	; (8001c00 <MX_GPIO_Init+0x11c>)
 8001b7e:	f001 fc65 	bl	800344c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b88:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <MX_GPIO_Init+0x120>)
 8001b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	4619      	mov	r1, r3
 8001b96:	4819      	ldr	r0, [pc, #100]	; (8001bfc <MX_GPIO_Init+0x118>)
 8001b98:	f001 fad6 	bl	8003148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = TOF_GPIO_FR_Pin|TOF_GPIO_FL_Pin|TOF_GPIO_R_Pin|TOF_GPIO_L_Pin 
 8001b9c:	f241 431f 	movw	r3, #5151	; 0x141f
 8001ba0:	617b      	str	r3, [r7, #20]
                          |TOF_GPIO_F_Pin|DIR_L_Pin|DIR_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4811      	ldr	r0, [pc, #68]	; (8001bfc <MX_GPIO_Init+0x118>)
 8001bb6:	f001 fac7 	bl	8003148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001bba:	2310      	movs	r3, #16
 8001bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	4619      	mov	r1, r3
 8001bcc:	480e      	ldr	r0, [pc, #56]	; (8001c08 <MX_GPIO_Init+0x124>)
 8001bce:	f001 fabb 	bl	8003148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8001bd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be0:	2300      	movs	r3, #0
 8001be2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4619      	mov	r1, r3
 8001bea:	4805      	ldr	r0, [pc, #20]	; (8001c00 <MX_GPIO_Init+0x11c>)
 8001bec:	f001 faac 	bl	8003148 <HAL_GPIO_Init>

}
 8001bf0:	bf00      	nop
 8001bf2:	3728      	adds	r7, #40	; 0x28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40020800 	.word	0x40020800
 8001c00:	40020400 	.word	0x40020400
 8001c04:	10210000 	.word	0x10210000
 8001c08:	40020000 	.word	0x40020000

08001c0c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c12:	4a13      	ldr	r2, [pc, #76]	; (8001c60 <MX_I2C1_Init+0x54>)
 8001c14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c16:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c18:	4a12      	ldr	r2, [pc, #72]	; (8001c64 <MX_I2C1_Init+0x58>)
 8001c1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c22:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c30:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c48:	4804      	ldr	r0, [pc, #16]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c4a:	f001 fc19 	bl	8003480 <HAL_I2C_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c54:	f000 f952 	bl	8001efc <Error_Handler>
  }

}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000104 	.word	0x20000104
 8001c60:	40005400 	.word	0x40005400
 8001c64:	000186a0 	.word	0x000186a0

08001c68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	; 0x28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a19      	ldr	r2, [pc, #100]	; (8001cec <HAL_I2C_MspInit+0x84>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d12c      	bne.n	8001ce4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <HAL_I2C_MspInit+0x88>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a17      	ldr	r2, [pc, #92]	; (8001cf0 <HAL_I2C_MspInit+0x88>)
 8001c94:	f043 0302 	orr.w	r3, r3, #2
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <HAL_I2C_MspInit+0x88>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001ca6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cac:	2312      	movs	r3, #18
 8001cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cb8:	2304      	movs	r3, #4
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	480c      	ldr	r0, [pc, #48]	; (8001cf4 <HAL_I2C_MspInit+0x8c>)
 8001cc4:	f001 fa40 	bl	8003148 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <HAL_I2C_MspInit+0x88>)
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	4a07      	ldr	r2, [pc, #28]	; (8001cf0 <HAL_I2C_MspInit+0x88>)
 8001cd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_I2C_MspInit+0x88>)
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	3728      	adds	r7, #40	; 0x28
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40005400 	.word	0x40005400
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40020400 	.word	0x40020400

08001cf8 <_write>:
/* USER CODE BEGIN 0 */

//przekierowanie printf dla portu szeregowego

int _write ( int file, char *ptr, int len)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
 HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 50);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	2332      	movs	r3, #50	; 0x32
 8001d0a:	68b9      	ldr	r1, [r7, #8]
 8001d0c:	4803      	ldr	r0, [pc, #12]	; (8001d1c <_write+0x24>)
 8001d0e:	f003 fe2a 	bl	8005966 <HAL_UART_Transmit>
 return len;
 8001d12:	687b      	ldr	r3, [r7, #4]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000224 	.word	0x20000224

08001d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	; 0x28
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d26:	f001 f895 	bl	8002e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d2a:	f000 f87d 	bl	8001e28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d2e:	f7ff fed9 	bl	8001ae4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001d32:	f000 fff3 	bl	8002d1c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001d36:	f7ff ff69 	bl	8001c0c <MX_I2C1_Init>
  MX_TIM2_Init();
 8001d3a:	f000 fdcf 	bl	80028dc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001d3e:	f000 fe21 	bl	8002984 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001d42:	f000 fea1 	bl	8002a88 <MX_TIM4_Init>

  //zmienne lokalne funkcji main - ustawione jako lokalne by były od razu widoczne w debuggerze
  /************************************************************************/

  //zmienne dla MPU6050
  float ax = 0, ay = 0, az = 0, gx = 0, gy = 0, gz = 0, temperature = 0;
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	61bb      	str	r3, [r7, #24]
 8001d4c:	f04f 0300 	mov.w	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24

  //zmienne do podglądu enkoderów
  uint32_t prawy = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	623b      	str	r3, [r7, #32]
  uint32_t lewy = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61fb      	str	r3, [r7, #28]

  /************************************************************************/

  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin, 0);  //zapal LED
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d7e:	4823      	ldr	r0, [pc, #140]	; (8001e0c <main+0xec>)
 8001d80:	f001 fb64 	bl	800344c <HAL_GPIO_WritePin>

  //inicjalizacja PWM dla silników
  motorsInit();
 8001d84:	f000 f8c2 	bl	8001f0c <motorsInit>

  //inicjalizacja czujników ToF
  initMicromouseVL53L0x();
 8001d88:	f7ff fd42 	bl	8001810 <initMicromouseVL53L0x>

  //inicjalizacja MPU6050
  MPU6050_Init(&hi2c1);
 8001d8c:	4820      	ldr	r0, [pc, #128]	; (8001e10 <main+0xf0>)
 8001d8e:	f000 fc9b 	bl	80026c8 <MPU6050_Init>
  MPU6050_SetInterruptMode(MPU6050_INTMODE_ACTIVEHIGH);
 8001d92:	2000      	movs	r0, #0
 8001d94:	f000 fba2 	bl	80024dc <MPU6050_SetInterruptMode>
  MPU6050_SetInterruptDrive(MPU6050_INTDRV_PUSHPULL);
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f000 fbd5 	bl	8002548 <MPU6050_SetInterruptDrive>
  MPU6050_SetInterruptLatch(MPU6050_INTLATCH_WAITCLEAR);
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f000 fc0a 	bl	80025b8 <MPU6050_SetInterruptLatch>
  MPU6050_SetInterruptLatchClear(MPU6050_INTCLEAR_STATUSREAD);
 8001da4:	2000      	movs	r0, #0
 8001da6:	f000 fc3f 	bl	8002628 <MPU6050_SetInterruptLatchClear>
  MPU6050_SetIntEnableRegister(0);
 8001daa:	2000      	movs	r0, #0
 8001dac:	f000 fc74 	bl	8002698 <MPU6050_SetIntEnableRegister>
  dist_L = ToF_readRangeContinuousMillimeters(&ToF_L);
  dist_FL = ToF_readRangeContinuousMillimeters(&ToF_FL);
  dist_FR = ToF_readRangeContinuousMillimeters(&ToF_FR);
*/
  //inicjalizacja enkoderów
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001db0:	213c      	movs	r1, #60	; 0x3c
 8001db2:	4818      	ldr	r0, [pc, #96]	; (8001e14 <main+0xf4>)
 8001db4:	f003 f89a 	bl	8004eec <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001db8:	213c      	movs	r1, #60	; 0x3c
 8001dba:	4817      	ldr	r0, [pc, #92]	; (8001e18 <main+0xf8>)
 8001dbc:	f003 f896 	bl	8004eec <HAL_TIM_Encoder_Start>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  //odczyt danych z mpu6050
	  MPU6050_GetAccelerometerScaled(&ax, &ay, &az);
 8001dc0:	f107 0210 	add.w	r2, r7, #16
 8001dc4:	f107 0114 	add.w	r1, r7, #20
 8001dc8:	f107 0318 	add.w	r3, r7, #24
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 facf 	bl	8002370 <MPU6050_GetAccelerometerScaled>
	  MPU6050_GetGyroscopeScaled(&gx, &gy, &gz);
 8001dd2:	1d3a      	adds	r2, r7, #4
 8001dd4:	f107 0108 	add.w	r1, r7, #8
 8001dd8:	f107 030c 	add.w	r3, r7, #12
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f000 fb3d 	bl	800245c <MPU6050_GetGyroscopeScaled>
	  temperature = MPU6050_GetTemperatureCelsius();
 8001de2:	f000 fa61 	bl	80022a8 <MPU6050_GetTemperatureCelsius>
 8001de6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

	  //odczyt z enkoderów
	  encRead();
 8001dea:	f7ff fde9 	bl	80019c0 <encRead>
	  prawy = leftTotal;
 8001dee:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <main+0xfc>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	623b      	str	r3, [r7, #32]
	  lewy = rightTotal;
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <main+0x100>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	61fb      	str	r3, [r7, #28]
	  //setMoveR(1, 500);
	  //setMoveL(1, 500);


	  //test portu szeregowego
	  printf("Hello world\n");
 8001dfa:	480a      	ldr	r0, [pc, #40]	; (8001e24 <main+0x104>)
 8001dfc:	f004 faa0 	bl	8006340 <puts>

	  HAL_Delay(1000);
 8001e00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e04:	f001 f898 	bl	8002f38 <HAL_Delay>
  {
 8001e08:	e7da      	b.n	8001dc0 <main+0xa0>
 8001e0a:	bf00      	nop
 8001e0c:	40020400 	.word	0x40020400
 8001e10:	20000104 	.word	0x20000104
 8001e14:	200001e4 	.word	0x200001e4
 8001e18:	20000164 	.word	0x20000164
 8001e1c:	200000fc 	.word	0x200000fc
 8001e20:	200000f8 	.word	0x200000f8
 8001e24:	08006b70 	.word	0x08006b70

08001e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b094      	sub	sp, #80	; 0x50
 8001e2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e2e:	f107 0320 	add.w	r3, r7, #32
 8001e32:	2230      	movs	r2, #48	; 0x30
 8001e34:	2100      	movs	r1, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f004 fa1e 	bl	8006278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e3c:	f107 030c 	add.w	r3, r7, #12
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	4b28      	ldr	r3, [pc, #160]	; (8001ef4 <SystemClock_Config+0xcc>)
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	4a27      	ldr	r2, [pc, #156]	; (8001ef4 <SystemClock_Config+0xcc>)
 8001e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5c:	4b25      	ldr	r3, [pc, #148]	; (8001ef4 <SystemClock_Config+0xcc>)
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e68:	2300      	movs	r3, #0
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	4b22      	ldr	r3, [pc, #136]	; (8001ef8 <SystemClock_Config+0xd0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a21      	ldr	r2, [pc, #132]	; (8001ef8 <SystemClock_Config+0xd0>)
 8001e72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <SystemClock_Config+0xd0>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e80:	607b      	str	r3, [r7, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e84:	2302      	movs	r3, #2
 8001e86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e8c:	2310      	movs	r3, #16
 8001e8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e90:	2302      	movs	r3, #2
 8001e92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e94:	2300      	movs	r3, #0
 8001e96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001e98:	2310      	movs	r3, #16
 8001e9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e9c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001ea0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eaa:	f107 0320 	add.w	r3, r7, #32
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f002 fa96 	bl	80043e0 <HAL_RCC_OscConfig>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001eba:	f000 f81f 	bl	8001efc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ebe:	230f      	movs	r3, #15
 8001ec0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001eca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ece:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ed4:	f107 030c 	add.w	r3, r7, #12
 8001ed8:	2102      	movs	r1, #2
 8001eda:	4618      	mov	r0, r3
 8001edc:	f002 fcf0 	bl	80048c0 <HAL_RCC_ClockConfig>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001ee6:	f000 f809 	bl	8001efc <Error_Handler>
  }
}
 8001eea:	bf00      	nop
 8001eec:	3750      	adds	r7, #80	; 0x50
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40007000 	.word	0x40007000

08001efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <motorsInit>:
#include "move.h"
#include "encoders.h"
#include "tim.h"

void motorsInit()
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001f10:	2100      	movs	r1, #0
 8001f12:	4804      	ldr	r0, [pc, #16]	; (8001f24 <motorsInit+0x18>)
 8001f14:	f002 ff26 	bl	8004d64 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001f18:	2108      	movs	r1, #8
 8001f1a:	4802      	ldr	r0, [pc, #8]	; (8001f24 <motorsInit+0x18>)
 8001f1c:	f002 ff22 	bl	8004d64 <HAL_TIM_PWM_Start>
}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	200001a4 	.word	0x200001a4

08001f28 <MPU6050_SetDlpf>:

//
// CONFIG
//
void MPU6050_SetDlpf(uint8_t Value)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af04      	add	r7, sp, #16
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 8001f32:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <MPU6050_SetDlpf+0x6c>)
 8001f34:	6818      	ldr	r0, [r3, #0]
 8001f36:	230a      	movs	r3, #10
 8001f38:	9302      	str	r3, [sp, #8]
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	9301      	str	r3, [sp, #4]
 8001f3e:	f107 030f 	add.w	r3, r7, #15
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	2301      	movs	r3, #1
 8001f46:	221a      	movs	r2, #26
 8001f48:	21d0      	movs	r1, #208	; 0xd0
 8001f4a:	f001 fccb 	bl	80038e4 <HAL_I2C_Mem_Read>
	tmp &= 0xF8;
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	f023 0307 	bic.w	r3, r3, #7
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x7);
 8001f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	b25a      	sxtb	r2, r3
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	b25b      	sxtb	r3, r3
 8001f66:	4313      	orrs	r3, r2
 8001f68:	b25b      	sxtb	r3, r3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <MPU6050_SetDlpf+0x6c>)
 8001f70:	6818      	ldr	r0, [r3, #0]
 8001f72:	230a      	movs	r3, #10
 8001f74:	9302      	str	r3, [sp, #8]
 8001f76:	2301      	movs	r3, #1
 8001f78:	9301      	str	r3, [sp, #4]
 8001f7a:	f107 030f 	add.w	r3, r7, #15
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	2301      	movs	r3, #1
 8001f82:	221a      	movs	r2, #26
 8001f84:	21d0      	movs	r1, #208	; 0xd0
 8001f86:	f001 fbb3 	bl	80036f0 <HAL_I2C_Mem_Write>
}
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000160 	.word	0x20000160

08001f98 <MPU6050_DeviceReset>:

//
// PWR_MGMT_1
//
void MPU6050_DeviceReset(uint8_t Reset)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af04      	add	r7, sp, #16
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 8001fa2:	4b17      	ldr	r3, [pc, #92]	; (8002000 <MPU6050_DeviceReset+0x68>)
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	230a      	movs	r3, #10
 8001fa8:	9302      	str	r3, [sp, #8]
 8001faa:	2301      	movs	r3, #1
 8001fac:	9301      	str	r3, [sp, #4]
 8001fae:	f107 030f 	add.w	r3, r7, #15
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	226b      	movs	r2, #107	; 0x6b
 8001fb8:	21d0      	movs	r1, #208	; 0xd0
 8001fba:	f001 fc93 	bl	80038e4 <HAL_I2C_Mem_Read>
	tmp &= ~(1<<MPU6050_PWR1_DEVICE_RESET_BIT);
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
 8001fc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Reset & 0x1) << MPU6050_PWR1_DEVICE_RESET_BIT);
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	01db      	lsls	r3, r3, #7
 8001fcc:	b25a      	sxtb	r2, r3
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
 8001fd0:	b25b      	sxtb	r3, r3
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	b25b      	sxtb	r3, r3
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 8001fda:	4b09      	ldr	r3, [pc, #36]	; (8002000 <MPU6050_DeviceReset+0x68>)
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	230a      	movs	r3, #10
 8001fe0:	9302      	str	r3, [sp, #8]
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	9301      	str	r3, [sp, #4]
 8001fe6:	f107 030f 	add.w	r3, r7, #15
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	2301      	movs	r3, #1
 8001fee:	226b      	movs	r2, #107	; 0x6b
 8001ff0:	21d0      	movs	r1, #208	; 0xd0
 8001ff2:	f001 fb7d 	bl	80036f0 <HAL_I2C_Mem_Write>
}
 8001ff6:	bf00      	nop
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000160 	.word	0x20000160

08002004 <MPU6050_SetSleepEnabled>:

void MPU6050_SetSleepEnabled(uint8_t Enable)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af04      	add	r7, sp, #16
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 800200e:	4b18      	ldr	r3, [pc, #96]	; (8002070 <MPU6050_SetSleepEnabled+0x6c>)
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	230a      	movs	r3, #10
 8002014:	9302      	str	r3, [sp, #8]
 8002016:	2301      	movs	r3, #1
 8002018:	9301      	str	r3, [sp, #4]
 800201a:	f107 030f 	add.w	r3, r7, #15
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	2301      	movs	r3, #1
 8002022:	226b      	movs	r2, #107	; 0x6b
 8002024:	21d0      	movs	r1, #208	; 0xd0
 8002026:	f001 fc5d 	bl	80038e4 <HAL_I2C_Mem_Read>
	tmp &= ~(1<<MPU6050_PWR1_SLEEP_BIT);
 800202a:	7bfb      	ldrb	r3, [r7, #15]
 800202c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002030:	b2db      	uxtb	r3, r3
 8002032:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Enable & 0x1) << MPU6050_PWR1_SLEEP_BIT);
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	019b      	lsls	r3, r3, #6
 8002038:	b25b      	sxtb	r3, r3
 800203a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203e:	b25a      	sxtb	r2, r3
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	b25b      	sxtb	r3, r3
 8002044:	4313      	orrs	r3, r2
 8002046:	b25b      	sxtb	r3, r3
 8002048:	b2db      	uxtb	r3, r3
 800204a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 800204c:	4b08      	ldr	r3, [pc, #32]	; (8002070 <MPU6050_SetSleepEnabled+0x6c>)
 800204e:	6818      	ldr	r0, [r3, #0]
 8002050:	230a      	movs	r3, #10
 8002052:	9302      	str	r3, [sp, #8]
 8002054:	2301      	movs	r3, #1
 8002056:	9301      	str	r3, [sp, #4]
 8002058:	f107 030f 	add.w	r3, r7, #15
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	2301      	movs	r3, #1
 8002060:	226b      	movs	r2, #107	; 0x6b
 8002062:	21d0      	movs	r1, #208	; 0xd0
 8002064:	f001 fb44 	bl	80036f0 <HAL_I2C_Mem_Write>
}
 8002068:	bf00      	nop
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000160 	.word	0x20000160

08002074 <MPU6050_SetClockSource>:
	tmp |= ((Disable & 0x1) << MPU6050_PWR1_TEMP_DIS_BIT);
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
}

void MPU6050_SetClockSource(uint8_t Source)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af04      	add	r7, sp, #16
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 800207e:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <MPU6050_SetClockSource+0x6c>)
 8002080:	6818      	ldr	r0, [r3, #0]
 8002082:	230a      	movs	r3, #10
 8002084:	9302      	str	r3, [sp, #8]
 8002086:	2301      	movs	r3, #1
 8002088:	9301      	str	r3, [sp, #4]
 800208a:	f107 030f 	add.w	r3, r7, #15
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	2301      	movs	r3, #1
 8002092:	226b      	movs	r2, #107	; 0x6b
 8002094:	21d0      	movs	r1, #208	; 0xd0
 8002096:	f001 fc25 	bl	80038e4 <HAL_I2C_Mem_Read>
	tmp &= 0xF8;
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	f023 0307 	bic.w	r3, r3, #7
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	73fb      	strb	r3, [r7, #15]
	tmp |= (Source & 0x7);
 80020a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	b25a      	sxtb	r2, r3
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
 80020b0:	b25b      	sxtb	r3, r3
 80020b2:	4313      	orrs	r3, r2
 80020b4:	b25b      	sxtb	r3, r3
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &tmp, 1, I2C_TIMEOUT);
 80020ba:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <MPU6050_SetClockSource+0x6c>)
 80020bc:	6818      	ldr	r0, [r3, #0]
 80020be:	230a      	movs	r3, #10
 80020c0:	9302      	str	r3, [sp, #8]
 80020c2:	2301      	movs	r3, #1
 80020c4:	9301      	str	r3, [sp, #4]
 80020c6:	f107 030f 	add.w	r3, r7, #15
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	2301      	movs	r3, #1
 80020ce:	226b      	movs	r2, #107	; 0x6b
 80020d0:	21d0      	movs	r1, #208	; 0xd0
 80020d2:	f001 fb0d 	bl	80036f0 <HAL_I2C_Mem_Write>
}
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000160 	.word	0x20000160

080020e4 <MPU6050_SetFullScaleGyroRange>:

//
//	Measurement scale configuration
//
void MPU6050_SetFullScaleGyroRange(uint8_t Range)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af04      	add	r7, sp, #16
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 80020ee:	4b28      	ldr	r3, [pc, #160]	; (8002190 <MPU6050_SetFullScaleGyroRange+0xac>)
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	230a      	movs	r3, #10
 80020f4:	9302      	str	r3, [sp, #8]
 80020f6:	2301      	movs	r3, #1
 80020f8:	9301      	str	r3, [sp, #4]
 80020fa:	f107 030f 	add.w	r3, r7, #15
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	2301      	movs	r3, #1
 8002102:	221b      	movs	r2, #27
 8002104:	21d0      	movs	r1, #208	; 0xd0
 8002106:	f001 fbed 	bl	80038e4 <HAL_I2C_Mem_Read>
	tmp &= 0xE7;
 800210a:	7bfb      	ldrb	r3, [r7, #15]
 800210c:	f023 0318 	bic.w	r3, r3, #24
 8002110:	b2db      	uxtb	r3, r3
 8002112:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Range & 0x7) << 3);
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	b25b      	sxtb	r3, r3
 800211a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800211e:	b25a      	sxtb	r2, r3
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	b25b      	sxtb	r3, r3
 8002124:	4313      	orrs	r3, r2
 8002126:	b25b      	sxtb	r3, r3
 8002128:	b2db      	uxtb	r3, r3
 800212a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 800212c:	4b18      	ldr	r3, [pc, #96]	; (8002190 <MPU6050_SetFullScaleGyroRange+0xac>)
 800212e:	6818      	ldr	r0, [r3, #0]
 8002130:	230a      	movs	r3, #10
 8002132:	9302      	str	r3, [sp, #8]
 8002134:	2301      	movs	r3, #1
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	f107 030f 	add.w	r3, r7, #15
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	2301      	movs	r3, #1
 8002140:	221b      	movs	r2, #27
 8002142:	21d0      	movs	r1, #208	; 0xd0
 8002144:	f001 fad4 	bl	80036f0 <HAL_I2C_Mem_Write>

	switch(Range)
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	2b03      	cmp	r3, #3
 800214c:	d81a      	bhi.n	8002184 <MPU6050_SetFullScaleGyroRange+0xa0>
 800214e:	a201      	add	r2, pc, #4	; (adr r2, 8002154 <MPU6050_SetFullScaleGyroRange+0x70>)
 8002150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002154:	08002165 	.word	0x08002165
 8002158:	0800216d 	.word	0x0800216d
 800215c:	08002175 	.word	0x08002175
 8002160:	0800217d 	.word	0x0800217d
	{
		case MPU6050_GYRO_FS_250:
			Gyr_Scale = 0.007633;
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <MPU6050_SetFullScaleGyroRange+0xb0>)
 8002166:	4a0c      	ldr	r2, [pc, #48]	; (8002198 <MPU6050_SetFullScaleGyroRange+0xb4>)
 8002168:	601a      	str	r2, [r3, #0]
			break;
 800216a:	e00c      	b.n	8002186 <MPU6050_SetFullScaleGyroRange+0xa2>
		case MPU6050_GYRO_FS_500:
			Gyr_Scale = 0.015267;
 800216c:	4b09      	ldr	r3, [pc, #36]	; (8002194 <MPU6050_SetFullScaleGyroRange+0xb0>)
 800216e:	4a0b      	ldr	r2, [pc, #44]	; (800219c <MPU6050_SetFullScaleGyroRange+0xb8>)
 8002170:	601a      	str	r2, [r3, #0]
			break;
 8002172:	e008      	b.n	8002186 <MPU6050_SetFullScaleGyroRange+0xa2>
		case MPU6050_GYRO_FS_1000:
			Gyr_Scale = 0.030487;
 8002174:	4b07      	ldr	r3, [pc, #28]	; (8002194 <MPU6050_SetFullScaleGyroRange+0xb0>)
 8002176:	4a0a      	ldr	r2, [pc, #40]	; (80021a0 <MPU6050_SetFullScaleGyroRange+0xbc>)
 8002178:	601a      	str	r2, [r3, #0]
			break;
 800217a:	e004      	b.n	8002186 <MPU6050_SetFullScaleGyroRange+0xa2>
		case MPU6050_GYRO_FS_2000:
			Gyr_Scale = 0.060975;
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <MPU6050_SetFullScaleGyroRange+0xb0>)
 800217e:	4a09      	ldr	r2, [pc, #36]	; (80021a4 <MPU6050_SetFullScaleGyroRange+0xc0>)
 8002180:	601a      	str	r2, [r3, #0]
			break;
 8002182:	e000      	b.n	8002186 <MPU6050_SetFullScaleGyroRange+0xa2>
		default:
			break;
 8002184:	bf00      	nop
	}
}
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000160 	.word	0x20000160
 8002194:	2000015c 	.word	0x2000015c
 8002198:	3bfa1e3f 	.word	0x3bfa1e3f
 800219c:	3c7a2270 	.word	0x3c7a2270
 80021a0:	3cf9bfdf 	.word	0x3cf9bfdf
 80021a4:	3d79c0ec 	.word	0x3d79c0ec

080021a8 <MPU6050_SetFullScaleAccelRange>:

void MPU6050_SetFullScaleAccelRange(uint8_t Range)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b088      	sub	sp, #32
 80021ac:	af04      	add	r7, sp, #16
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 80021b2:	4b28      	ldr	r3, [pc, #160]	; (8002254 <MPU6050_SetFullScaleAccelRange+0xac>)
 80021b4:	6818      	ldr	r0, [r3, #0]
 80021b6:	230a      	movs	r3, #10
 80021b8:	9302      	str	r3, [sp, #8]
 80021ba:	2301      	movs	r3, #1
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	f107 030f 	add.w	r3, r7, #15
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	2301      	movs	r3, #1
 80021c6:	221c      	movs	r2, #28
 80021c8:	21d0      	movs	r1, #208	; 0xd0
 80021ca:	f001 fb8b 	bl	80038e4 <HAL_I2C_Mem_Read>
	tmp &= 0xE7;
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	f023 0318 	bic.w	r3, r3, #24
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Range & 0x7) << 3);
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	b25b      	sxtb	r3, r3
 80021de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021e2:	b25a      	sxtb	r2, r3
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	b25b      	sxtb	r3, r3
 80021e8:	4313      	orrs	r3, r2
 80021ea:	b25b      	sxtb	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &tmp, 1, I2C_TIMEOUT);
 80021f0:	4b18      	ldr	r3, [pc, #96]	; (8002254 <MPU6050_SetFullScaleAccelRange+0xac>)
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	230a      	movs	r3, #10
 80021f6:	9302      	str	r3, [sp, #8]
 80021f8:	2301      	movs	r3, #1
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	f107 030f 	add.w	r3, r7, #15
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	2301      	movs	r3, #1
 8002204:	221c      	movs	r2, #28
 8002206:	21d0      	movs	r1, #208	; 0xd0
 8002208:	f001 fa72 	bl	80036f0 <HAL_I2C_Mem_Write>

	switch(Range)
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	2b03      	cmp	r3, #3
 8002210:	d81a      	bhi.n	8002248 <MPU6050_SetFullScaleAccelRange+0xa0>
 8002212:	a201      	add	r2, pc, #4	; (adr r2, 8002218 <MPU6050_SetFullScaleAccelRange+0x70>)
 8002214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002218:	08002229 	.word	0x08002229
 800221c:	08002231 	.word	0x08002231
 8002220:	08002239 	.word	0x08002239
 8002224:	08002241 	.word	0x08002241
	{
		case MPU6050_ACCEL_FS_2:
			Acc_Scale = 0.000061;
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <MPU6050_SetFullScaleAccelRange+0xb0>)
 800222a:	4a0c      	ldr	r2, [pc, #48]	; (800225c <MPU6050_SetFullScaleAccelRange+0xb4>)
 800222c:	601a      	str	r2, [r3, #0]
			break;
 800222e:	e00c      	b.n	800224a <MPU6050_SetFullScaleAccelRange+0xa2>
		case MPU6050_ACCEL_FS_4:
			Acc_Scale = 0.000122;
 8002230:	4b09      	ldr	r3, [pc, #36]	; (8002258 <MPU6050_SetFullScaleAccelRange+0xb0>)
 8002232:	4a0b      	ldr	r2, [pc, #44]	; (8002260 <MPU6050_SetFullScaleAccelRange+0xb8>)
 8002234:	601a      	str	r2, [r3, #0]
			break;
 8002236:	e008      	b.n	800224a <MPU6050_SetFullScaleAccelRange+0xa2>
		case MPU6050_ACCEL_FS_8:
			Acc_Scale = 0.000244;
 8002238:	4b07      	ldr	r3, [pc, #28]	; (8002258 <MPU6050_SetFullScaleAccelRange+0xb0>)
 800223a:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <MPU6050_SetFullScaleAccelRange+0xbc>)
 800223c:	601a      	str	r2, [r3, #0]
			break;
 800223e:	e004      	b.n	800224a <MPU6050_SetFullScaleAccelRange+0xa2>
		case MPU6050_ACCEL_FS_16:
			Acc_Scale = 0.0004882;
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <MPU6050_SetFullScaleAccelRange+0xb0>)
 8002242:	4a09      	ldr	r2, [pc, #36]	; (8002268 <MPU6050_SetFullScaleAccelRange+0xc0>)
 8002244:	601a      	str	r2, [r3, #0]
			break;
 8002246:	e000      	b.n	800224a <MPU6050_SetFullScaleAccelRange+0xa2>
		default:
			break;
 8002248:	bf00      	nop
	}
}
 800224a:	bf00      	nop
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000160 	.word	0x20000160
 8002258:	20000158 	.word	0x20000158
 800225c:	387fda40 	.word	0x387fda40
 8002260:	38ffda40 	.word	0x38ffda40
 8002264:	397fda40 	.word	0x397fda40
 8002268:	39fff518 	.word	0x39fff518

0800226c <MPU6050_GetTemperatureRAW>:

//
// Reading data
//
int16_t MPU6050_GetTemperatureRAW(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af04      	add	r7, sp, #16
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_TEMP_OUT_H, 1, tmp, 2, I2C_TIMEOUT);
 8002272:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <MPU6050_GetTemperatureRAW+0x38>)
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	230a      	movs	r3, #10
 8002278:	9302      	str	r3, [sp, #8]
 800227a:	2302      	movs	r3, #2
 800227c:	9301      	str	r3, [sp, #4]
 800227e:	1d3b      	adds	r3, r7, #4
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	2301      	movs	r3, #1
 8002284:	2241      	movs	r2, #65	; 0x41
 8002286:	21d0      	movs	r1, #208	; 0xd0
 8002288:	f001 fb2c 	bl	80038e4 <HAL_I2C_Mem_Read>
	return (((int16_t)tmp[0]) << 8) | tmp[1];
 800228c:	793b      	ldrb	r3, [r7, #4]
 800228e:	021b      	lsls	r3, r3, #8
 8002290:	b21a      	sxth	r2, r3
 8002292:	797b      	ldrb	r3, [r7, #5]
 8002294:	b21b      	sxth	r3, r3
 8002296:	4313      	orrs	r3, r2
 8002298:	b21b      	sxth	r3, r3
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000160 	.word	0x20000160

080022a8 <MPU6050_GetTemperatureCelsius>:

float MPU6050_GetTemperatureCelsius(void)
{
 80022a8:	b590      	push	{r4, r7, lr}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
	int16_t temp;

	temp = MPU6050_GetTemperatureRAW();
 80022ae:	f7ff ffdd 	bl	800226c <MPU6050_GetTemperatureRAW>
 80022b2:	4603      	mov	r3, r0
 80022b4:	80fb      	strh	r3, [r7, #6]

	return (float)temp / 340 + 36.53;
 80022b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022ba:	ee07 3a90 	vmov	s15, r3
 80022be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022c2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002300 <MPU6050_GetTemperatureCelsius+0x58>
 80022c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80022ca:	ee16 0a90 	vmov	r0, s13
 80022ce:	f7fe f8e7 	bl	80004a0 <__aeabi_f2d>
 80022d2:	a309      	add	r3, pc, #36	; (adr r3, 80022f8 <MPU6050_GetTemperatureCelsius+0x50>)
 80022d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d8:	f7fd ff84 	bl	80001e4 <__adddf3>
 80022dc:	4603      	mov	r3, r0
 80022de:	460c      	mov	r4, r1
 80022e0:	4618      	mov	r0, r3
 80022e2:	4621      	mov	r1, r4
 80022e4:	f7fe f9bc 	bl	8000660 <__aeabi_d2f>
 80022e8:	4603      	mov	r3, r0
 80022ea:	ee07 3a90 	vmov	s15, r3
}
 80022ee:	eeb0 0a67 	vmov.f32	s0, s15
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd90      	pop	{r4, r7, pc}
 80022f8:	0a3d70a4 	.word	0x0a3d70a4
 80022fc:	404243d7 	.word	0x404243d7
 8002300:	43aa0000 	.word	0x43aa0000

08002304 <MPU6050_GetAccelerometerRAW>:
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, 1, tmp, 2, I2C_TIMEOUT);
	return (((int16_t)tmp[0]) << 8) | tmp[1];
}

void MPU6050_GetAccelerometerRAW(int16_t *x, int16_t *y, int16_t *z)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af04      	add	r7, sp, #16
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
	uint8_t tmp[6];
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, tmp, 6, I2C_TIMEOUT);
 8002310:	4b16      	ldr	r3, [pc, #88]	; (800236c <MPU6050_GetAccelerometerRAW+0x68>)
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	230a      	movs	r3, #10
 8002316:	9302      	str	r3, [sp, #8]
 8002318:	2306      	movs	r3, #6
 800231a:	9301      	str	r3, [sp, #4]
 800231c:	f107 0310 	add.w	r3, r7, #16
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	2301      	movs	r3, #1
 8002324:	223b      	movs	r2, #59	; 0x3b
 8002326:	21d0      	movs	r1, #208	; 0xd0
 8002328:	f001 fadc 	bl	80038e4 <HAL_I2C_Mem_Read>

	*x = (((int16_t)tmp[0]) << 8) | tmp[1];
 800232c:	7c3b      	ldrb	r3, [r7, #16]
 800232e:	021b      	lsls	r3, r3, #8
 8002330:	b21a      	sxth	r2, r3
 8002332:	7c7b      	ldrb	r3, [r7, #17]
 8002334:	b21b      	sxth	r3, r3
 8002336:	4313      	orrs	r3, r2
 8002338:	b21a      	sxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	801a      	strh	r2, [r3, #0]
	*y = (((int16_t)tmp[2]) << 8) | tmp[3];
 800233e:	7cbb      	ldrb	r3, [r7, #18]
 8002340:	021b      	lsls	r3, r3, #8
 8002342:	b21a      	sxth	r2, r3
 8002344:	7cfb      	ldrb	r3, [r7, #19]
 8002346:	b21b      	sxth	r3, r3
 8002348:	4313      	orrs	r3, r2
 800234a:	b21a      	sxth	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	801a      	strh	r2, [r3, #0]
	*z = (((int16_t)tmp[4]) << 8) | tmp[5];
 8002350:	7d3b      	ldrb	r3, [r7, #20]
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	b21a      	sxth	r2, r3
 8002356:	7d7b      	ldrb	r3, [r7, #21]
 8002358:	b21b      	sxth	r3, r3
 800235a:	4313      	orrs	r3, r2
 800235c:	b21a      	sxth	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	801a      	strh	r2, [r3, #0]
}
 8002362:	bf00      	nop
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000160 	.word	0x20000160

08002370 <MPU6050_GetAccelerometerScaled>:

void MPU6050_GetAccelerometerScaled(float* x, float* y, float* z)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
	int16_t tmp_x, tmp_y, tmp_z;
	MPU6050_GetAccelerometerRAW(&tmp_x, &tmp_y, &tmp_z);
 800237c:	f107 0212 	add.w	r2, r7, #18
 8002380:	f107 0114 	add.w	r1, r7, #20
 8002384:	f107 0316 	add.w	r3, r7, #22
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff ffbb 	bl	8002304 <MPU6050_GetAccelerometerRAW>

	*x = (float)tmp_x * Acc_Scale;
 800238e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002392:	ee07 3a90 	vmov	s15, r3
 8002396:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800239a:	4b14      	ldr	r3, [pc, #80]	; (80023ec <MPU6050_GetAccelerometerScaled+0x7c>)
 800239c:	edd3 7a00 	vldr	s15, [r3]
 80023a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	edc3 7a00 	vstr	s15, [r3]
	*y = (float)tmp_y * Acc_Scale;
 80023aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80023ae:	ee07 3a90 	vmov	s15, r3
 80023b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023b6:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <MPU6050_GetAccelerometerScaled+0x7c>)
 80023b8:	edd3 7a00 	vldr	s15, [r3]
 80023bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	edc3 7a00 	vstr	s15, [r3]
	*z = (float)tmp_z * Acc_Scale;
 80023c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80023ca:	ee07 3a90 	vmov	s15, r3
 80023ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <MPU6050_GetAccelerometerScaled+0x7c>)
 80023d4:	edd3 7a00 	vldr	s15, [r3]
 80023d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	edc3 7a00 	vstr	s15, [r3]
}
 80023e2:	bf00      	nop
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000158 	.word	0x20000158

080023f0 <MPU6050_GetGyroscopeRAW>:
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, 1, tmp, 2, I2C_TIMEOUT);
	return (((int16_t)tmp[0]) << 8) | tmp[1];
}

void MPU6050_GetGyroscopeRAW(int16_t *x, int16_t *y, int16_t *z)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08a      	sub	sp, #40	; 0x28
 80023f4:	af04      	add	r7, sp, #16
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
	uint8_t tmp[6];
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 1, tmp, 6, I2C_TIMEOUT);
 80023fc:	4b16      	ldr	r3, [pc, #88]	; (8002458 <MPU6050_GetGyroscopeRAW+0x68>)
 80023fe:	6818      	ldr	r0, [r3, #0]
 8002400:	230a      	movs	r3, #10
 8002402:	9302      	str	r3, [sp, #8]
 8002404:	2306      	movs	r3, #6
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	f107 0310 	add.w	r3, r7, #16
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	2301      	movs	r3, #1
 8002410:	2243      	movs	r2, #67	; 0x43
 8002412:	21d0      	movs	r1, #208	; 0xd0
 8002414:	f001 fa66 	bl	80038e4 <HAL_I2C_Mem_Read>

	*x = (((int16_t)tmp[0]) << 8) | tmp[1];
 8002418:	7c3b      	ldrb	r3, [r7, #16]
 800241a:	021b      	lsls	r3, r3, #8
 800241c:	b21a      	sxth	r2, r3
 800241e:	7c7b      	ldrb	r3, [r7, #17]
 8002420:	b21b      	sxth	r3, r3
 8002422:	4313      	orrs	r3, r2
 8002424:	b21a      	sxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	801a      	strh	r2, [r3, #0]
	*y = (((int16_t)tmp[2]) << 8) | tmp[3];
 800242a:	7cbb      	ldrb	r3, [r7, #18]
 800242c:	021b      	lsls	r3, r3, #8
 800242e:	b21a      	sxth	r2, r3
 8002430:	7cfb      	ldrb	r3, [r7, #19]
 8002432:	b21b      	sxth	r3, r3
 8002434:	4313      	orrs	r3, r2
 8002436:	b21a      	sxth	r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	801a      	strh	r2, [r3, #0]
	*z = (((int16_t)tmp[4]) << 8) | tmp[5];
 800243c:	7d3b      	ldrb	r3, [r7, #20]
 800243e:	021b      	lsls	r3, r3, #8
 8002440:	b21a      	sxth	r2, r3
 8002442:	7d7b      	ldrb	r3, [r7, #21]
 8002444:	b21b      	sxth	r3, r3
 8002446:	4313      	orrs	r3, r2
 8002448:	b21a      	sxth	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	801a      	strh	r2, [r3, #0]
}
 800244e:	bf00      	nop
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000160 	.word	0x20000160

0800245c <MPU6050_GetGyroscopeScaled>:

void MPU6050_GetGyroscopeScaled(float* x, float* y, float* z)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
	int16_t tmp_x, tmp_y, tmp_z;

	MPU6050_GetGyroscopeRAW(&tmp_x, &tmp_y, &tmp_z);
 8002468:	f107 0212 	add.w	r2, r7, #18
 800246c:	f107 0114 	add.w	r1, r7, #20
 8002470:	f107 0316 	add.w	r3, r7, #22
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ffbb 	bl	80023f0 <MPU6050_GetGyroscopeRAW>

	*x = (float)tmp_x * Gyr_Scale;
 800247a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800247e:	ee07 3a90 	vmov	s15, r3
 8002482:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002486:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <MPU6050_GetGyroscopeScaled+0x7c>)
 8002488:	edd3 7a00 	vldr	s15, [r3]
 800248c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	edc3 7a00 	vstr	s15, [r3]
	*y = (float)tmp_y * Gyr_Scale;
 8002496:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800249a:	ee07 3a90 	vmov	s15, r3
 800249e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024a2:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <MPU6050_GetGyroscopeScaled+0x7c>)
 80024a4:	edd3 7a00 	vldr	s15, [r3]
 80024a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	edc3 7a00 	vstr	s15, [r3]
	*z = (float)tmp_z * Gyr_Scale;
 80024b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80024b6:	ee07 3a90 	vmov	s15, r3
 80024ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <MPU6050_GetGyroscopeScaled+0x7c>)
 80024c0:	edd3 7a00 	vldr	s15, [r3]
 80024c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	edc3 7a00 	vstr	s15, [r3]
}
 80024ce:	bf00      	nop
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	2000015c 	.word	0x2000015c

080024dc <MPU6050_SetInterruptMode>:

//
//	Setting INT pin
//
void MPU6050_SetInterruptMode(uint8_t Mode)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af04      	add	r7, sp, #16
 80024e2:	4603      	mov	r3, r0
 80024e4:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 80024e6:	4b17      	ldr	r3, [pc, #92]	; (8002544 <MPU6050_SetInterruptMode+0x68>)
 80024e8:	6818      	ldr	r0, [r3, #0]
 80024ea:	230a      	movs	r3, #10
 80024ec:	9302      	str	r3, [sp, #8]
 80024ee:	2301      	movs	r3, #1
 80024f0:	9301      	str	r3, [sp, #4]
 80024f2:	f107 030f 	add.w	r3, r7, #15
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	2301      	movs	r3, #1
 80024fa:	2237      	movs	r2, #55	; 0x37
 80024fc:	21d0      	movs	r1, #208	; 0xd0
 80024fe:	f001 f9f1 	bl	80038e4 <HAL_I2C_Mem_Read>
	tmp &= ~(1 << MPU6050_INTCFG_INT_LEVEL_BIT);
 8002502:	7bfb      	ldrb	r3, [r7, #15]
 8002504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002508:	b2db      	uxtb	r3, r3
 800250a:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Mode & 0x1) << MPU6050_INTCFG_INT_LEVEL_BIT);
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	01db      	lsls	r3, r3, #7
 8002510:	b25a      	sxtb	r2, r3
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	b25b      	sxtb	r3, r3
 8002516:	4313      	orrs	r3, r2
 8002518:	b25b      	sxtb	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 800251e:	4b09      	ldr	r3, [pc, #36]	; (8002544 <MPU6050_SetInterruptMode+0x68>)
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	230a      	movs	r3, #10
 8002524:	9302      	str	r3, [sp, #8]
 8002526:	2301      	movs	r3, #1
 8002528:	9301      	str	r3, [sp, #4]
 800252a:	f107 030f 	add.w	r3, r7, #15
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	2301      	movs	r3, #1
 8002532:	2237      	movs	r2, #55	; 0x37
 8002534:	21d0      	movs	r1, #208	; 0xd0
 8002536:	f001 f8db 	bl	80036f0 <HAL_I2C_Mem_Write>
}
 800253a:	bf00      	nop
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000160 	.word	0x20000160

08002548 <MPU6050_SetInterruptDrive>:

void MPU6050_SetInterruptDrive(uint8_t Drive)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b088      	sub	sp, #32
 800254c:	af04      	add	r7, sp, #16
 800254e:	4603      	mov	r3, r0
 8002550:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8002552:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <MPU6050_SetInterruptDrive+0x6c>)
 8002554:	6818      	ldr	r0, [r3, #0]
 8002556:	230a      	movs	r3, #10
 8002558:	9302      	str	r3, [sp, #8]
 800255a:	2301      	movs	r3, #1
 800255c:	9301      	str	r3, [sp, #4]
 800255e:	f107 030f 	add.w	r3, r7, #15
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	2301      	movs	r3, #1
 8002566:	2237      	movs	r2, #55	; 0x37
 8002568:	21d0      	movs	r1, #208	; 0xd0
 800256a:	f001 f9bb 	bl	80038e4 <HAL_I2C_Mem_Read>
	tmp &= ~(1 << MPU6050_INTCFG_INT_OPEN_BIT);
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002574:	b2db      	uxtb	r3, r3
 8002576:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Drive & 0x1) << MPU6050_INTCFG_INT_OPEN_BIT);
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	019b      	lsls	r3, r3, #6
 800257c:	b25b      	sxtb	r3, r3
 800257e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002582:	b25a      	sxtb	r2, r3
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	b25b      	sxtb	r3, r3
 8002588:	4313      	orrs	r3, r2
 800258a:	b25b      	sxtb	r3, r3
 800258c:	b2db      	uxtb	r3, r3
 800258e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8002590:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <MPU6050_SetInterruptDrive+0x6c>)
 8002592:	6818      	ldr	r0, [r3, #0]
 8002594:	230a      	movs	r3, #10
 8002596:	9302      	str	r3, [sp, #8]
 8002598:	2301      	movs	r3, #1
 800259a:	9301      	str	r3, [sp, #4]
 800259c:	f107 030f 	add.w	r3, r7, #15
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	2301      	movs	r3, #1
 80025a4:	2237      	movs	r2, #55	; 0x37
 80025a6:	21d0      	movs	r1, #208	; 0xd0
 80025a8:	f001 f8a2 	bl	80036f0 <HAL_I2C_Mem_Write>
}
 80025ac:	bf00      	nop
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000160 	.word	0x20000160

080025b8 <MPU6050_SetInterruptLatch>:

void MPU6050_SetInterruptLatch(uint8_t Latch)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af04      	add	r7, sp, #16
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 80025c2:	4b18      	ldr	r3, [pc, #96]	; (8002624 <MPU6050_SetInterruptLatch+0x6c>)
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	230a      	movs	r3, #10
 80025c8:	9302      	str	r3, [sp, #8]
 80025ca:	2301      	movs	r3, #1
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	f107 030f 	add.w	r3, r7, #15
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	2301      	movs	r3, #1
 80025d6:	2237      	movs	r2, #55	; 0x37
 80025d8:	21d0      	movs	r1, #208	; 0xd0
 80025da:	f001 f983 	bl	80038e4 <HAL_I2C_Mem_Read>
	tmp &= ~(1 << MPU6050_INTCFG_INT_RD_CLEAR_BIT);
 80025de:	7bfb      	ldrb	r3, [r7, #15]
 80025e0:	f023 0310 	bic.w	r3, r3, #16
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Latch & 0x1) << MPU6050_INTCFG_INT_RD_CLEAR_BIT);
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	b25b      	sxtb	r3, r3
 80025ee:	f003 0310 	and.w	r3, r3, #16
 80025f2:	b25a      	sxtb	r2, r3
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	b25b      	sxtb	r3, r3
 80025f8:	4313      	orrs	r3, r2
 80025fa:	b25b      	sxtb	r3, r3
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8002600:	4b08      	ldr	r3, [pc, #32]	; (8002624 <MPU6050_SetInterruptLatch+0x6c>)
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	230a      	movs	r3, #10
 8002606:	9302      	str	r3, [sp, #8]
 8002608:	2301      	movs	r3, #1
 800260a:	9301      	str	r3, [sp, #4]
 800260c:	f107 030f 	add.w	r3, r7, #15
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	2301      	movs	r3, #1
 8002614:	2237      	movs	r2, #55	; 0x37
 8002616:	21d0      	movs	r1, #208	; 0xd0
 8002618:	f001 f86a 	bl	80036f0 <HAL_I2C_Mem_Write>
}
 800261c:	bf00      	nop
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20000160 	.word	0x20000160

08002628 <MPU6050_SetInterruptLatchClear>:

void MPU6050_SetInterruptLatchClear(uint8_t Clear)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af04      	add	r7, sp, #16
 800262e:	4603      	mov	r3, r0
 8002630:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	HAL_I2C_Mem_Read(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8002632:	4b18      	ldr	r3, [pc, #96]	; (8002694 <MPU6050_SetInterruptLatchClear+0x6c>)
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	230a      	movs	r3, #10
 8002638:	9302      	str	r3, [sp, #8]
 800263a:	2301      	movs	r3, #1
 800263c:	9301      	str	r3, [sp, #4]
 800263e:	f107 030f 	add.w	r3, r7, #15
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	2301      	movs	r3, #1
 8002646:	2237      	movs	r2, #55	; 0x37
 8002648:	21d0      	movs	r1, #208	; 0xd0
 800264a:	f001 f94b 	bl	80038e4 <HAL_I2C_Mem_Read>
	tmp &= ~(1 << MPU6050_INTCFG_LATCH_INT_EN_BIT);
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	f023 0320 	bic.w	r3, r3, #32
 8002654:	b2db      	uxtb	r3, r3
 8002656:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Clear & 0x1) << MPU6050_INTCFG_LATCH_INT_EN_BIT);
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	015b      	lsls	r3, r3, #5
 800265c:	b25b      	sxtb	r3, r3
 800265e:	f003 0320 	and.w	r3, r3, #32
 8002662:	b25a      	sxtb	r2, r3
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	b25b      	sxtb	r3, r3
 8002668:	4313      	orrs	r3, r2
 800266a:	b25b      	sxtb	r3, r3
 800266c:	b2db      	uxtb	r3, r3
 800266e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &tmp, 1, I2C_TIMEOUT);
 8002670:	4b08      	ldr	r3, [pc, #32]	; (8002694 <MPU6050_SetInterruptLatchClear+0x6c>)
 8002672:	6818      	ldr	r0, [r3, #0]
 8002674:	230a      	movs	r3, #10
 8002676:	9302      	str	r3, [sp, #8]
 8002678:	2301      	movs	r3, #1
 800267a:	9301      	str	r3, [sp, #4]
 800267c:	f107 030f 	add.w	r3, r7, #15
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	2301      	movs	r3, #1
 8002684:	2237      	movs	r2, #55	; 0x37
 8002686:	21d0      	movs	r1, #208	; 0xd0
 8002688:	f001 f832 	bl	80036f0 <HAL_I2C_Mem_Write>
}
 800268c:	bf00      	nop
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20000160 	.word	0x20000160

08002698 <MPU6050_SetIntEnableRegister>:

void MPU6050_SetIntEnableRegister(uint8_t Value)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af04      	add	r7, sp, #16
 800269e:	4603      	mov	r3, r0
 80026a0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(i2c, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &Value, 1, I2C_TIMEOUT);
 80026a2:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <MPU6050_SetIntEnableRegister+0x2c>)
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	230a      	movs	r3, #10
 80026a8:	9302      	str	r3, [sp, #8]
 80026aa:	2301      	movs	r3, #1
 80026ac:	9301      	str	r3, [sp, #4]
 80026ae:	1dfb      	adds	r3, r7, #7
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	2301      	movs	r3, #1
 80026b4:	2238      	movs	r2, #56	; 0x38
 80026b6:	21d0      	movs	r1, #208	; 0xd0
 80026b8:	f001 f81a 	bl	80036f0 <HAL_I2C_Mem_Write>
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20000160 	.word	0x20000160

080026c8 <MPU6050_Init>:

//
//	Initialization
//
void MPU6050_Init(I2C_HandleTypeDef *hi2c)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
	i2c = hi2c;
 80026d0:	4a0c      	ldr	r2, [pc, #48]	; (8002704 <MPU6050_Init+0x3c>)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6013      	str	r3, [r2, #0]
	MPU6050_DeviceReset(1);
 80026d6:	2001      	movs	r0, #1
 80026d8:	f7ff fc5e 	bl	8001f98 <MPU6050_DeviceReset>
    MPU6050_SetSleepEnabled(0);
 80026dc:	2000      	movs	r0, #0
 80026de:	f7ff fc91 	bl	8002004 <MPU6050_SetSleepEnabled>
    MPU6050_SetClockSource(MPU6050_CLOCK_INTERNAL);
 80026e2:	2000      	movs	r0, #0
 80026e4:	f7ff fcc6 	bl	8002074 <MPU6050_SetClockSource>
    MPU6050_SetDlpf(MPU6050_DLPF_BW_20);
 80026e8:	2004      	movs	r0, #4
 80026ea:	f7ff fc1d 	bl	8001f28 <MPU6050_SetDlpf>
    MPU6050_SetFullScaleGyroRange(MPU6050_GYRO_FS_500);
 80026ee:	2001      	movs	r0, #1
 80026f0:	f7ff fcf8 	bl	80020e4 <MPU6050_SetFullScaleGyroRange>
    MPU6050_SetFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 80026f4:	2000      	movs	r0, #0
 80026f6:	f7ff fd57 	bl	80021a8 <MPU6050_SetFullScaleAccelRange>

}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000160 	.word	0x20000160

08002708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	607b      	str	r3, [r7, #4]
 8002712:	4b10      	ldr	r3, [pc, #64]	; (8002754 <HAL_MspInit+0x4c>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	4a0f      	ldr	r2, [pc, #60]	; (8002754 <HAL_MspInit+0x4c>)
 8002718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800271c:	6453      	str	r3, [r2, #68]	; 0x44
 800271e:	4b0d      	ldr	r3, [pc, #52]	; (8002754 <HAL_MspInit+0x4c>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	603b      	str	r3, [r7, #0]
 800272e:	4b09      	ldr	r3, [pc, #36]	; (8002754 <HAL_MspInit+0x4c>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	4a08      	ldr	r2, [pc, #32]	; (8002754 <HAL_MspInit+0x4c>)
 8002734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002738:	6413      	str	r3, [r2, #64]	; 0x40
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_MspInit+0x4c>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002746:	2007      	movs	r0, #7
 8002748:	f000 fcca 	bl	80030e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40023800 	.word	0x40023800

08002758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002766:	b480      	push	{r7}
 8002768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800276a:	e7fe      	b.n	800276a <HardFault_Handler+0x4>

0800276c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002770:	e7fe      	b.n	8002770 <MemManage_Handler+0x4>

08002772 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002776:	e7fe      	b.n	8002776 <BusFault_Handler+0x4>

08002778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800277c:	e7fe      	b.n	800277c <UsageFault_Handler+0x4>

0800277e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800277e:	b480      	push	{r7}
 8002780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800279a:	b480      	push	{r7}
 800279c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027ac:	f000 fba4 	bl	8002ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027b0:	bf00      	nop
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	e00a      	b.n	80027dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027c6:	f3af 8000 	nop.w
 80027ca:	4601      	mov	r1, r0
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	60ba      	str	r2, [r7, #8]
 80027d2:	b2ca      	uxtb	r2, r1
 80027d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	3301      	adds	r3, #1
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	dbf0      	blt.n	80027c6 <_read+0x12>
	}

return len;
 80027e4:	687b      	ldr	r3, [r7, #4]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <_close>:
	}
	return len;
}

int _close(int file)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
	return -1;
 80027f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002816:	605a      	str	r2, [r3, #4]
	return 0;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <_isatty>:

int _isatty(int file)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
	return 1;
 800282e:	2301      	movs	r3, #1
}
 8002830:	4618      	mov	r0, r3
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
	return 0;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002860:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <_sbrk+0x50>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d102      	bne.n	800286e <_sbrk+0x16>
		heap_end = &end;
 8002868:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <_sbrk+0x50>)
 800286a:	4a10      	ldr	r2, [pc, #64]	; (80028ac <_sbrk+0x54>)
 800286c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800286e:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <_sbrk+0x50>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002874:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <_sbrk+0x50>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4413      	add	r3, r2
 800287c:	466a      	mov	r2, sp
 800287e:	4293      	cmp	r3, r2
 8002880:	d907      	bls.n	8002892 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002882:	f003 fccf 	bl	8006224 <__errno>
 8002886:	4602      	mov	r2, r0
 8002888:	230c      	movs	r3, #12
 800288a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800288c:	f04f 33ff 	mov.w	r3, #4294967295
 8002890:	e006      	b.n	80028a0 <_sbrk+0x48>
	}

	heap_end += incr;
 8002892:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <_sbrk+0x50>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4413      	add	r3, r2
 800289a:	4a03      	ldr	r2, [pc, #12]	; (80028a8 <_sbrk+0x50>)
 800289c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800289e:	68fb      	ldr	r3, [r7, #12]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20000094 	.word	0x20000094
 80028ac:	20000270 	.word	0x20000270

080028b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <SystemInit+0x28>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ba:	4a07      	ldr	r2, [pc, #28]	; (80028d8 <SystemInit+0x28>)
 80028bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028c4:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <SystemInit+0x28>)
 80028c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028ca:	609a      	str	r2, [r3, #8]
#endif
}
 80028cc:	bf00      	nop
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08c      	sub	sp, #48	; 0x30
 80028e0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80028e2:	f107 030c 	add.w	r3, r7, #12
 80028e6:	2224      	movs	r2, #36	; 0x24
 80028e8:	2100      	movs	r1, #0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f003 fcc4 	bl	8006278 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028f0:	1d3b      	adds	r3, r7, #4
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80028f8:	4b21      	ldr	r3, [pc, #132]	; (8002980 <MX_TIM2_Init+0xa4>)
 80028fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002900:	4b1f      	ldr	r3, [pc, #124]	; (8002980 <MX_TIM2_Init+0xa4>)
 8002902:	2200      	movs	r2, #0
 8002904:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002906:	4b1e      	ldr	r3, [pc, #120]	; (8002980 <MX_TIM2_Init+0xa4>)
 8002908:	2200      	movs	r2, #0
 800290a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800290c:	4b1c      	ldr	r3, [pc, #112]	; (8002980 <MX_TIM2_Init+0xa4>)
 800290e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002912:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002914:	4b1a      	ldr	r3, [pc, #104]	; (8002980 <MX_TIM2_Init+0xa4>)
 8002916:	2200      	movs	r2, #0
 8002918:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800291a:	4b19      	ldr	r3, [pc, #100]	; (8002980 <MX_TIM2_Init+0xa4>)
 800291c:	2200      	movs	r2, #0
 800291e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002920:	2303      	movs	r3, #3
 8002922:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002924:	2302      	movs	r3, #2
 8002926:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002928:	2301      	movs	r3, #1
 800292a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800292c:	2300      	movs	r3, #0
 800292e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002930:	230f      	movs	r3, #15
 8002932:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002934:	2300      	movs	r3, #0
 8002936:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002938:	2301      	movs	r3, #1
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800293c:	2300      	movs	r3, #0
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002940:	230f      	movs	r3, #15
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002944:	f107 030c 	add.w	r3, r7, #12
 8002948:	4619      	mov	r1, r3
 800294a:	480d      	ldr	r0, [pc, #52]	; (8002980 <MX_TIM2_Init+0xa4>)
 800294c:	f002 fa3c 	bl	8004dc8 <HAL_TIM_Encoder_Init>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002956:	f7ff fad1 	bl	8001efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800295a:	2300      	movs	r3, #0
 800295c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800295e:	2300      	movs	r3, #0
 8002960:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	4619      	mov	r1, r3
 8002966:	4806      	ldr	r0, [pc, #24]	; (8002980 <MX_TIM2_Init+0xa4>)
 8002968:	f002 ff42 	bl	80057f0 <HAL_TIMEx_MasterConfigSynchronization>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002972:	f7ff fac3 	bl	8001efc <Error_Handler>
  }

}
 8002976:	bf00      	nop
 8002978:	3730      	adds	r7, #48	; 0x30
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	200001e4 	.word	0x200001e4

08002984 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08e      	sub	sp, #56	; 0x38
 8002988:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800298a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	609a      	str	r2, [r3, #8]
 8002996:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002998:	f107 0320 	add.w	r3, r7, #32
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029a2:	1d3b      	adds	r3, r7, #4
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	60da      	str	r2, [r3, #12]
 80029ae:	611a      	str	r2, [r3, #16]
 80029b0:	615a      	str	r2, [r3, #20]
 80029b2:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80029b4:	4b32      	ldr	r3, [pc, #200]	; (8002a80 <MX_TIM3_Init+0xfc>)
 80029b6:	4a33      	ldr	r2, [pc, #204]	; (8002a84 <MX_TIM3_Init+0x100>)
 80029b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 80029ba:	4b31      	ldr	r3, [pc, #196]	; (8002a80 <MX_TIM3_Init+0xfc>)
 80029bc:	2254      	movs	r2, #84	; 0x54
 80029be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029c0:	4b2f      	ldr	r3, [pc, #188]	; (8002a80 <MX_TIM3_Init+0xfc>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80029c6:	4b2e      	ldr	r3, [pc, #184]	; (8002a80 <MX_TIM3_Init+0xfc>)
 80029c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ce:	4b2c      	ldr	r3, [pc, #176]	; (8002a80 <MX_TIM3_Init+0xfc>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029d4:	4b2a      	ldr	r3, [pc, #168]	; (8002a80 <MX_TIM3_Init+0xfc>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80029da:	4829      	ldr	r0, [pc, #164]	; (8002a80 <MX_TIM3_Init+0xfc>)
 80029dc:	f002 f962 	bl	8004ca4 <HAL_TIM_Base_Init>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80029e6:	f7ff fa89 	bl	8001efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80029f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029f4:	4619      	mov	r1, r3
 80029f6:	4822      	ldr	r0, [pc, #136]	; (8002a80 <MX_TIM3_Init+0xfc>)
 80029f8:	f002 fb76 	bl	80050e8 <HAL_TIM_ConfigClockSource>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002a02:	f7ff fa7b 	bl	8001efc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a06:	481e      	ldr	r0, [pc, #120]	; (8002a80 <MX_TIM3_Init+0xfc>)
 8002a08:	f002 f977 	bl	8004cfa <HAL_TIM_PWM_Init>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002a12:	f7ff fa73 	bl	8001efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a16:	2300      	movs	r3, #0
 8002a18:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a1e:	f107 0320 	add.w	r3, r7, #32
 8002a22:	4619      	mov	r1, r3
 8002a24:	4816      	ldr	r0, [pc, #88]	; (8002a80 <MX_TIM3_Init+0xfc>)
 8002a26:	f002 fee3 	bl	80057f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002a30:	f7ff fa64 	bl	8001efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a34:	2360      	movs	r3, #96	; 0x60
 8002a36:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a44:	1d3b      	adds	r3, r7, #4
 8002a46:	2200      	movs	r2, #0
 8002a48:	4619      	mov	r1, r3
 8002a4a:	480d      	ldr	r0, [pc, #52]	; (8002a80 <MX_TIM3_Init+0xfc>)
 8002a4c:	f002 fa86 	bl	8004f5c <HAL_TIM_PWM_ConfigChannel>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002a56:	f7ff fa51 	bl	8001efc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a5a:	1d3b      	adds	r3, r7, #4
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4807      	ldr	r0, [pc, #28]	; (8002a80 <MX_TIM3_Init+0xfc>)
 8002a62:	f002 fa7b 	bl	8004f5c <HAL_TIM_PWM_ConfigChannel>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002a6c:	f7ff fa46 	bl	8001efc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8002a70:	4803      	ldr	r0, [pc, #12]	; (8002a80 <MX_TIM3_Init+0xfc>)
 8002a72:	f000 f919 	bl	8002ca8 <HAL_TIM_MspPostInit>

}
 8002a76:	bf00      	nop
 8002a78:	3738      	adds	r7, #56	; 0x38
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	200001a4 	.word	0x200001a4
 8002a84:	40000400 	.word	0x40000400

08002a88 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08c      	sub	sp, #48	; 0x30
 8002a8c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a8e:	f107 030c 	add.w	r3, r7, #12
 8002a92:	2224      	movs	r2, #36	; 0x24
 8002a94:	2100      	movs	r1, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f003 fbee 	bl	8006278 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a9c:	1d3b      	adds	r3, r7, #4
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8002aa4:	4b20      	ldr	r3, [pc, #128]	; (8002b28 <MX_TIM4_Init+0xa0>)
 8002aa6:	4a21      	ldr	r2, [pc, #132]	; (8002b2c <MX_TIM4_Init+0xa4>)
 8002aa8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002aaa:	4b1f      	ldr	r3, [pc, #124]	; (8002b28 <MX_TIM4_Init+0xa0>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab0:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <MX_TIM4_Init+0xa0>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002ab6:	4b1c      	ldr	r3, [pc, #112]	; (8002b28 <MX_TIM4_Init+0xa0>)
 8002ab8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002abc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002abe:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <MX_TIM4_Init+0xa0>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac4:	4b18      	ldr	r3, [pc, #96]	; (8002b28 <MX_TIM4_Init+0xa0>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002aca:	2303      	movs	r3, #3
 8002acc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002ada:	230f      	movs	r3, #15
 8002adc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002aea:	230f      	movs	r3, #15
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002aee:	f107 030c 	add.w	r3, r7, #12
 8002af2:	4619      	mov	r1, r3
 8002af4:	480c      	ldr	r0, [pc, #48]	; (8002b28 <MX_TIM4_Init+0xa0>)
 8002af6:	f002 f967 	bl	8004dc8 <HAL_TIM_Encoder_Init>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002b00:	f7ff f9fc 	bl	8001efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b04:	2300      	movs	r3, #0
 8002b06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b0c:	1d3b      	adds	r3, r7, #4
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4805      	ldr	r0, [pc, #20]	; (8002b28 <MX_TIM4_Init+0xa0>)
 8002b12:	f002 fe6d 	bl	80057f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002b1c:	f7ff f9ee 	bl	8001efc <Error_Handler>
  }

}
 8002b20:	bf00      	nop
 8002b22:	3730      	adds	r7, #48	; 0x30
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20000164 	.word	0x20000164
 8002b2c:	40000800 	.word	0x40000800

08002b30 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08c      	sub	sp, #48	; 0x30
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b38:	f107 031c 	add.w	r3, r7, #28
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	60da      	str	r2, [r3, #12]
 8002b46:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b50:	d14b      	bne.n	8002bea <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	61bb      	str	r3, [r7, #24]
 8002b56:	4b3f      	ldr	r3, [pc, #252]	; (8002c54 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	4a3e      	ldr	r2, [pc, #248]	; (8002c54 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	6413      	str	r3, [r2, #64]	; 0x40
 8002b62:	4b3c      	ldr	r3, [pc, #240]	; (8002c54 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	61bb      	str	r3, [r7, #24]
 8002b6c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
 8002b72:	4b38      	ldr	r3, [pc, #224]	; (8002c54 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	4a37      	ldr	r2, [pc, #220]	; (8002c54 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7e:	4b35      	ldr	r3, [pc, #212]	; (8002c54 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	4b31      	ldr	r3, [pc, #196]	; (8002c54 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	4a30      	ldr	r2, [pc, #192]	; (8002c54 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b94:	f043 0302 	orr.w	r3, r3, #2
 8002b98:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9a:	4b2e      	ldr	r3, [pc, #184]	; (8002c54 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = ENC_L_A_Pin;
 8002ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bac:	2302      	movs	r3, #2
 8002bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_L_A_GPIO_Port, &GPIO_InitStruct);
 8002bbc:	f107 031c 	add.w	r3, r7, #28
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4825      	ldr	r0, [pc, #148]	; (8002c58 <HAL_TIM_Encoder_MspInit+0x128>)
 8002bc4:	f000 fac0 	bl	8003148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_L_B_Pin;
 8002bc8:	2308      	movs	r3, #8
 8002bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_L_B_GPIO_Port, &GPIO_InitStruct);
 8002bdc:	f107 031c 	add.w	r3, r7, #28
 8002be0:	4619      	mov	r1, r3
 8002be2:	481e      	ldr	r0, [pc, #120]	; (8002c5c <HAL_TIM_Encoder_MspInit+0x12c>)
 8002be4:	f000 fab0 	bl	8003148 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002be8:	e030      	b.n	8002c4c <HAL_TIM_Encoder_MspInit+0x11c>
  else if(tim_encoderHandle->Instance==TIM4)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a1c      	ldr	r2, [pc, #112]	; (8002c60 <HAL_TIM_Encoder_MspInit+0x130>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d12b      	bne.n	8002c4c <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	4b16      	ldr	r3, [pc, #88]	; (8002c54 <HAL_TIM_Encoder_MspInit+0x124>)
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	4a15      	ldr	r2, [pc, #84]	; (8002c54 <HAL_TIM_Encoder_MspInit+0x124>)
 8002bfe:	f043 0304 	orr.w	r3, r3, #4
 8002c02:	6413      	str	r3, [r2, #64]	; 0x40
 8002c04:	4b13      	ldr	r3, [pc, #76]	; (8002c54 <HAL_TIM_Encoder_MspInit+0x124>)
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c10:	2300      	movs	r3, #0
 8002c12:	60bb      	str	r3, [r7, #8]
 8002c14:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <HAL_TIM_Encoder_MspInit+0x124>)
 8002c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c18:	4a0e      	ldr	r2, [pc, #56]	; (8002c54 <HAL_TIM_Encoder_MspInit+0x124>)
 8002c1a:	f043 0302 	orr.w	r3, r3, #2
 8002c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c20:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <HAL_TIM_Encoder_MspInit+0x124>)
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_R_A_Pin|ENC_R_B_Pin;
 8002c2c:	23c0      	movs	r3, #192	; 0xc0
 8002c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c30:	2302      	movs	r3, #2
 8002c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c40:	f107 031c 	add.w	r3, r7, #28
 8002c44:	4619      	mov	r1, r3
 8002c46:	4805      	ldr	r0, [pc, #20]	; (8002c5c <HAL_TIM_Encoder_MspInit+0x12c>)
 8002c48:	f000 fa7e 	bl	8003148 <HAL_GPIO_Init>
}
 8002c4c:	bf00      	nop
 8002c4e:	3730      	adds	r7, #48	; 0x30
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40023800 	.word	0x40023800
 8002c58:	40020000 	.word	0x40020000
 8002c5c:	40020400 	.word	0x40020400
 8002c60:	40000800 	.word	0x40000800

08002c64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a0b      	ldr	r2, [pc, #44]	; (8002ca0 <HAL_TIM_Base_MspInit+0x3c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d10d      	bne.n	8002c92 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <HAL_TIM_Base_MspInit+0x40>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	4a09      	ldr	r2, [pc, #36]	; (8002ca4 <HAL_TIM_Base_MspInit+0x40>)
 8002c80:	f043 0302 	orr.w	r3, r3, #2
 8002c84:	6413      	str	r3, [r2, #64]	; 0x40
 8002c86:	4b07      	ldr	r3, [pc, #28]	; (8002ca4 <HAL_TIM_Base_MspInit+0x40>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002c92:	bf00      	nop
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40000400 	.word	0x40000400
 8002ca4:	40023800 	.word	0x40023800

08002ca8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b088      	sub	sp, #32
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb0:	f107 030c 	add.w	r3, r7, #12
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	60da      	str	r2, [r3, #12]
 8002cbe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a12      	ldr	r2, [pc, #72]	; (8002d10 <HAL_TIM_MspPostInit+0x68>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d11e      	bne.n	8002d08 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <HAL_TIM_MspPostInit+0x6c>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	4a10      	ldr	r2, [pc, #64]	; (8002d14 <HAL_TIM_MspPostInit+0x6c>)
 8002cd4:	f043 0304 	orr.w	r3, r3, #4
 8002cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cda:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <HAL_TIM_MspPostInit+0x6c>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = PWML_Pin|PWMR_Pin;
 8002ce6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002cea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cec:	2302      	movs	r3, #2
 8002cee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cfc:	f107 030c 	add.w	r3, r7, #12
 8002d00:	4619      	mov	r1, r3
 8002d02:	4805      	ldr	r0, [pc, #20]	; (8002d18 <HAL_TIM_MspPostInit+0x70>)
 8002d04:	f000 fa20 	bl	8003148 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002d08:	bf00      	nop
 8002d0a:	3720      	adds	r7, #32
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40000400 	.word	0x40000400
 8002d14:	40023800 	.word	0x40023800
 8002d18:	40020800 	.word	0x40020800

08002d1c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002d20:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <MX_USART2_UART_Init+0x4c>)
 8002d22:	4a12      	ldr	r2, [pc, #72]	; (8002d6c <MX_USART2_UART_Init+0x50>)
 8002d24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d26:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <MX_USART2_UART_Init+0x4c>)
 8002d28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <MX_USART2_UART_Init+0x4c>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d34:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <MX_USART2_UART_Init+0x4c>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d3a:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <MX_USART2_UART_Init+0x4c>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d40:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <MX_USART2_UART_Init+0x4c>)
 8002d42:	220c      	movs	r2, #12
 8002d44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d46:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <MX_USART2_UART_Init+0x4c>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d4c:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <MX_USART2_UART_Init+0x4c>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d52:	4805      	ldr	r0, [pc, #20]	; (8002d68 <MX_USART2_UART_Init+0x4c>)
 8002d54:	f002 fdba 	bl	80058cc <HAL_UART_Init>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002d5e:	f7ff f8cd 	bl	8001efc <Error_Handler>
  }

}
 8002d62:	bf00      	nop
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000224 	.word	0x20000224
 8002d6c:	40004400 	.word	0x40004400

08002d70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08a      	sub	sp, #40	; 0x28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d78:	f107 0314 	add.w	r3, r7, #20
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	60da      	str	r2, [r3, #12]
 8002d86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a19      	ldr	r2, [pc, #100]	; (8002df4 <HAL_UART_MspInit+0x84>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d12b      	bne.n	8002dea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	4b18      	ldr	r3, [pc, #96]	; (8002df8 <HAL_UART_MspInit+0x88>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	4a17      	ldr	r2, [pc, #92]	; (8002df8 <HAL_UART_MspInit+0x88>)
 8002d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002da0:	6413      	str	r3, [r2, #64]	; 0x40
 8002da2:	4b15      	ldr	r3, [pc, #84]	; (8002df8 <HAL_UART_MspInit+0x88>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <HAL_UART_MspInit+0x88>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	4a10      	ldr	r2, [pc, #64]	; (8002df8 <HAL_UART_MspInit+0x88>)
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dbe:	4b0e      	ldr	r3, [pc, #56]	; (8002df8 <HAL_UART_MspInit+0x88>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002dca:	230c      	movs	r3, #12
 8002dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dda:	2307      	movs	r3, #7
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dde:	f107 0314 	add.w	r3, r7, #20
 8002de2:	4619      	mov	r1, r3
 8002de4:	4805      	ldr	r0, [pc, #20]	; (8002dfc <HAL_UART_MspInit+0x8c>)
 8002de6:	f000 f9af 	bl	8003148 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002dea:	bf00      	nop
 8002dec:	3728      	adds	r7, #40	; 0x28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40004400 	.word	0x40004400
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40020000 	.word	0x40020000

08002e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e06:	e003      	b.n	8002e10 <LoopCopyDataInit>

08002e08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e08:	4b0c      	ldr	r3, [pc, #48]	; (8002e3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e0e:	3104      	adds	r1, #4

08002e10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e10:	480b      	ldr	r0, [pc, #44]	; (8002e40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e12:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e18:	d3f6      	bcc.n	8002e08 <CopyDataInit>
  ldr  r2, =_sbss
 8002e1a:	4a0b      	ldr	r2, [pc, #44]	; (8002e48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002e1c:	e002      	b.n	8002e24 <LoopFillZerobss>

08002e1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002e1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e20:	f842 3b04 	str.w	r3, [r2], #4

08002e24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e24:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e28:	d3f9      	bcc.n	8002e1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e2a:	f7ff fd41 	bl	80028b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e2e:	f003 f9ff 	bl	8006230 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e32:	f7fe ff75 	bl	8001d20 <main>
  bx  lr    
 8002e36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e38:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002e3c:	08006c08 	.word	0x08006c08
  ldr  r0, =_sdata
 8002e40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e44:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002e48:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002e4c:	2000026c 	.word	0x2000026c

08002e50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e50:	e7fe      	b.n	8002e50 <ADC_IRQHandler>
	...

08002e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e58:	4b0e      	ldr	r3, [pc, #56]	; (8002e94 <HAL_Init+0x40>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a0d      	ldr	r2, [pc, #52]	; (8002e94 <HAL_Init+0x40>)
 8002e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <HAL_Init+0x40>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a0a      	ldr	r2, [pc, #40]	; (8002e94 <HAL_Init+0x40>)
 8002e6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e70:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <HAL_Init+0x40>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a07      	ldr	r2, [pc, #28]	; (8002e94 <HAL_Init+0x40>)
 8002e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e7c:	2003      	movs	r0, #3
 8002e7e:	f000 f92f 	bl	80030e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e82:	2000      	movs	r0, #0
 8002e84:	f000 f808 	bl	8002e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e88:	f7ff fc3e 	bl	8002708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40023c00 	.word	0x40023c00

08002e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ea0:	4b12      	ldr	r3, [pc, #72]	; (8002eec <HAL_InitTick+0x54>)
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <HAL_InitTick+0x58>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 f939 	bl	800312e <HAL_SYSTICK_Config>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e00e      	b.n	8002ee4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b0f      	cmp	r3, #15
 8002eca:	d80a      	bhi.n	8002ee2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ecc:	2200      	movs	r2, #0
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed4:	f000 f90f 	bl	80030f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ed8:	4a06      	ldr	r2, [pc, #24]	; (8002ef4 <HAL_InitTick+0x5c>)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	e000      	b.n	8002ee4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20000000 	.word	0x20000000
 8002ef0:	20000008 	.word	0x20000008
 8002ef4:	20000004 	.word	0x20000004

08002ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002efc:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_IncTick+0x20>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <HAL_IncTick+0x24>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4413      	add	r3, r2
 8002f08:	4a04      	ldr	r2, [pc, #16]	; (8002f1c <HAL_IncTick+0x24>)
 8002f0a:	6013      	str	r3, [r2, #0]
}
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	20000008 	.word	0x20000008
 8002f1c:	20000264 	.word	0x20000264

08002f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return uwTick;
 8002f24:	4b03      	ldr	r3, [pc, #12]	; (8002f34 <HAL_GetTick+0x14>)
 8002f26:	681b      	ldr	r3, [r3, #0]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	20000264 	.word	0x20000264

08002f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f40:	f7ff ffee 	bl	8002f20 <HAL_GetTick>
 8002f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f50:	d005      	beq.n	8002f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f52:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <HAL_Delay+0x40>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f5e:	bf00      	nop
 8002f60:	f7ff ffde 	bl	8002f20 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d8f7      	bhi.n	8002f60 <HAL_Delay+0x28>
  {
  }
}
 8002f70:	bf00      	nop
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	20000008 	.word	0x20000008

08002f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f98:	4013      	ands	r3, r2
 8002f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fae:	4a04      	ldr	r2, [pc, #16]	; (8002fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	60d3      	str	r3, [r2, #12]
}
 8002fb4:	bf00      	nop
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	e000ed00 	.word	0xe000ed00

08002fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc8:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <__NVIC_GetPriorityGrouping+0x18>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	0a1b      	lsrs	r3, r3, #8
 8002fce:	f003 0307 	and.w	r3, r3, #7
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	6039      	str	r1, [r7, #0]
 8002fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	db0a      	blt.n	800300a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	490c      	ldr	r1, [pc, #48]	; (800302c <__NVIC_SetPriority+0x4c>)
 8002ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffe:	0112      	lsls	r2, r2, #4
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	440b      	add	r3, r1
 8003004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003008:	e00a      	b.n	8003020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	b2da      	uxtb	r2, r3
 800300e:	4908      	ldr	r1, [pc, #32]	; (8003030 <__NVIC_SetPriority+0x50>)
 8003010:	79fb      	ldrb	r3, [r7, #7]
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	3b04      	subs	r3, #4
 8003018:	0112      	lsls	r2, r2, #4
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	440b      	add	r3, r1
 800301e:	761a      	strb	r2, [r3, #24]
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000e100 	.word	0xe000e100
 8003030:	e000ed00 	.word	0xe000ed00

08003034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003034:	b480      	push	{r7}
 8003036:	b089      	sub	sp, #36	; 0x24
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	f1c3 0307 	rsb	r3, r3, #7
 800304e:	2b04      	cmp	r3, #4
 8003050:	bf28      	it	cs
 8003052:	2304      	movcs	r3, #4
 8003054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	3304      	adds	r3, #4
 800305a:	2b06      	cmp	r3, #6
 800305c:	d902      	bls.n	8003064 <NVIC_EncodePriority+0x30>
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	3b03      	subs	r3, #3
 8003062:	e000      	b.n	8003066 <NVIC_EncodePriority+0x32>
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003068:	f04f 32ff 	mov.w	r2, #4294967295
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43da      	mvns	r2, r3
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	401a      	ands	r2, r3
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800307c:	f04f 31ff 	mov.w	r1, #4294967295
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	fa01 f303 	lsl.w	r3, r1, r3
 8003086:	43d9      	mvns	r1, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800308c:	4313      	orrs	r3, r2
         );
}
 800308e:	4618      	mov	r0, r3
 8003090:	3724      	adds	r7, #36	; 0x24
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030ac:	d301      	bcc.n	80030b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ae:	2301      	movs	r3, #1
 80030b0:	e00f      	b.n	80030d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030b2:	4a0a      	ldr	r2, [pc, #40]	; (80030dc <SysTick_Config+0x40>)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ba:	210f      	movs	r1, #15
 80030bc:	f04f 30ff 	mov.w	r0, #4294967295
 80030c0:	f7ff ff8e 	bl	8002fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030c4:	4b05      	ldr	r3, [pc, #20]	; (80030dc <SysTick_Config+0x40>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ca:	4b04      	ldr	r3, [pc, #16]	; (80030dc <SysTick_Config+0x40>)
 80030cc:	2207      	movs	r2, #7
 80030ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	e000e010 	.word	0xe000e010

080030e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7ff ff47 	bl	8002f7c <__NVIC_SetPriorityGrouping>
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b086      	sub	sp, #24
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	4603      	mov	r3, r0
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
 8003102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003108:	f7ff ff5c 	bl	8002fc4 <__NVIC_GetPriorityGrouping>
 800310c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	68b9      	ldr	r1, [r7, #8]
 8003112:	6978      	ldr	r0, [r7, #20]
 8003114:	f7ff ff8e 	bl	8003034 <NVIC_EncodePriority>
 8003118:	4602      	mov	r2, r0
 800311a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800311e:	4611      	mov	r1, r2
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff ff5d 	bl	8002fe0 <__NVIC_SetPriority>
}
 8003126:	bf00      	nop
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff ffb0 	bl	800309c <SysTick_Config>
 800313c:	4603      	mov	r3, r0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003148:	b480      	push	{r7}
 800314a:	b089      	sub	sp, #36	; 0x24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003156:	2300      	movs	r3, #0
 8003158:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800315a:	2300      	movs	r3, #0
 800315c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800315e:	2300      	movs	r3, #0
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	e159      	b.n	8003418 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003164:	2201      	movs	r2, #1
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4013      	ands	r3, r2
 8003176:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	429a      	cmp	r2, r3
 800317e:	f040 8148 	bne.w	8003412 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d00b      	beq.n	80031a2 <HAL_GPIO_Init+0x5a>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d007      	beq.n	80031a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003196:	2b11      	cmp	r3, #17
 8003198:	d003      	beq.n	80031a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b12      	cmp	r3, #18
 80031a0:	d130      	bne.n	8003204 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	2203      	movs	r2, #3
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4013      	ands	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031d8:	2201      	movs	r2, #1
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	091b      	lsrs	r3, r3, #4
 80031ee:	f003 0201 	and.w	r2, r3, #1
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	2203      	movs	r2, #3
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	43db      	mvns	r3, r3
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4013      	ands	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4313      	orrs	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b02      	cmp	r3, #2
 800323a:	d003      	beq.n	8003244 <HAL_GPIO_Init+0xfc>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b12      	cmp	r3, #18
 8003242:	d123      	bne.n	800328c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	08da      	lsrs	r2, r3, #3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3208      	adds	r2, #8
 800324c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003250:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	220f      	movs	r2, #15
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4013      	ands	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4313      	orrs	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	08da      	lsrs	r2, r3, #3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3208      	adds	r2, #8
 8003286:	69b9      	ldr	r1, [r7, #24]
 8003288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	2203      	movs	r2, #3
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4013      	ands	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 0203 	and.w	r2, r3, #3
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 80a2 	beq.w	8003412 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	4b56      	ldr	r3, [pc, #344]	; (800342c <HAL_GPIO_Init+0x2e4>)
 80032d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d6:	4a55      	ldr	r2, [pc, #340]	; (800342c <HAL_GPIO_Init+0x2e4>)
 80032d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032dc:	6453      	str	r3, [r2, #68]	; 0x44
 80032de:	4b53      	ldr	r3, [pc, #332]	; (800342c <HAL_GPIO_Init+0x2e4>)
 80032e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032ea:	4a51      	ldr	r2, [pc, #324]	; (8003430 <HAL_GPIO_Init+0x2e8>)
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	089b      	lsrs	r3, r3, #2
 80032f0:	3302      	adds	r3, #2
 80032f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	220f      	movs	r2, #15
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4013      	ands	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a48      	ldr	r2, [pc, #288]	; (8003434 <HAL_GPIO_Init+0x2ec>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d019      	beq.n	800334a <HAL_GPIO_Init+0x202>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a47      	ldr	r2, [pc, #284]	; (8003438 <HAL_GPIO_Init+0x2f0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d013      	beq.n	8003346 <HAL_GPIO_Init+0x1fe>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a46      	ldr	r2, [pc, #280]	; (800343c <HAL_GPIO_Init+0x2f4>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d00d      	beq.n	8003342 <HAL_GPIO_Init+0x1fa>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a45      	ldr	r2, [pc, #276]	; (8003440 <HAL_GPIO_Init+0x2f8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d007      	beq.n	800333e <HAL_GPIO_Init+0x1f6>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a44      	ldr	r2, [pc, #272]	; (8003444 <HAL_GPIO_Init+0x2fc>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d101      	bne.n	800333a <HAL_GPIO_Init+0x1f2>
 8003336:	2304      	movs	r3, #4
 8003338:	e008      	b.n	800334c <HAL_GPIO_Init+0x204>
 800333a:	2307      	movs	r3, #7
 800333c:	e006      	b.n	800334c <HAL_GPIO_Init+0x204>
 800333e:	2303      	movs	r3, #3
 8003340:	e004      	b.n	800334c <HAL_GPIO_Init+0x204>
 8003342:	2302      	movs	r3, #2
 8003344:	e002      	b.n	800334c <HAL_GPIO_Init+0x204>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <HAL_GPIO_Init+0x204>
 800334a:	2300      	movs	r3, #0
 800334c:	69fa      	ldr	r2, [r7, #28]
 800334e:	f002 0203 	and.w	r2, r2, #3
 8003352:	0092      	lsls	r2, r2, #2
 8003354:	4093      	lsls	r3, r2
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4313      	orrs	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800335c:	4934      	ldr	r1, [pc, #208]	; (8003430 <HAL_GPIO_Init+0x2e8>)
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	089b      	lsrs	r3, r3, #2
 8003362:	3302      	adds	r3, #2
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800336a:	4b37      	ldr	r3, [pc, #220]	; (8003448 <HAL_GPIO_Init+0x300>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	43db      	mvns	r3, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4013      	ands	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800338e:	4a2e      	ldr	r2, [pc, #184]	; (8003448 <HAL_GPIO_Init+0x300>)
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003394:	4b2c      	ldr	r3, [pc, #176]	; (8003448 <HAL_GPIO_Init+0x300>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033b8:	4a23      	ldr	r2, [pc, #140]	; (8003448 <HAL_GPIO_Init+0x300>)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033be:	4b22      	ldr	r3, [pc, #136]	; (8003448 <HAL_GPIO_Init+0x300>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	43db      	mvns	r3, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4013      	ands	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033e2:	4a19      	ldr	r2, [pc, #100]	; (8003448 <HAL_GPIO_Init+0x300>)
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033e8:	4b17      	ldr	r3, [pc, #92]	; (8003448 <HAL_GPIO_Init+0x300>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800340c:	4a0e      	ldr	r2, [pc, #56]	; (8003448 <HAL_GPIO_Init+0x300>)
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3301      	adds	r3, #1
 8003416:	61fb      	str	r3, [r7, #28]
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	2b0f      	cmp	r3, #15
 800341c:	f67f aea2 	bls.w	8003164 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003420:	bf00      	nop
 8003422:	3724      	adds	r7, #36	; 0x24
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	40023800 	.word	0x40023800
 8003430:	40013800 	.word	0x40013800
 8003434:	40020000 	.word	0x40020000
 8003438:	40020400 	.word	0x40020400
 800343c:	40020800 	.word	0x40020800
 8003440:	40020c00 	.word	0x40020c00
 8003444:	40021000 	.word	0x40021000
 8003448:	40013c00 	.word	0x40013c00

0800344c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	460b      	mov	r3, r1
 8003456:	807b      	strh	r3, [r7, #2]
 8003458:	4613      	mov	r3, r2
 800345a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800345c:	787b      	ldrb	r3, [r7, #1]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003462:	887a      	ldrh	r2, [r7, #2]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003468:	e003      	b.n	8003472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800346a:	887b      	ldrh	r3, [r7, #2]
 800346c:	041a      	lsls	r2, r3, #16
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	619a      	str	r2, [r3, #24]
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e11f      	b.n	80036d2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d106      	bne.n	80034ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7fe fbde 	bl	8001c68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2224      	movs	r2, #36	; 0x24
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0201 	bic.w	r2, r2, #1
 80034c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034e4:	f001 fbb6 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
 80034e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	4a7b      	ldr	r2, [pc, #492]	; (80036dc <HAL_I2C_Init+0x25c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d807      	bhi.n	8003504 <HAL_I2C_Init+0x84>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4a7a      	ldr	r2, [pc, #488]	; (80036e0 <HAL_I2C_Init+0x260>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	bf94      	ite	ls
 80034fc:	2301      	movls	r3, #1
 80034fe:	2300      	movhi	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	e006      	b.n	8003512 <HAL_I2C_Init+0x92>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4a77      	ldr	r2, [pc, #476]	; (80036e4 <HAL_I2C_Init+0x264>)
 8003508:	4293      	cmp	r3, r2
 800350a:	bf94      	ite	ls
 800350c:	2301      	movls	r3, #1
 800350e:	2300      	movhi	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e0db      	b.n	80036d2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	4a72      	ldr	r2, [pc, #456]	; (80036e8 <HAL_I2C_Init+0x268>)
 800351e:	fba2 2303 	umull	r2, r3, r2, r3
 8003522:	0c9b      	lsrs	r3, r3, #18
 8003524:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	4a64      	ldr	r2, [pc, #400]	; (80036dc <HAL_I2C_Init+0x25c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d802      	bhi.n	8003554 <HAL_I2C_Init+0xd4>
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	3301      	adds	r3, #1
 8003552:	e009      	b.n	8003568 <HAL_I2C_Init+0xe8>
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800355a:	fb02 f303 	mul.w	r3, r2, r3
 800355e:	4a63      	ldr	r2, [pc, #396]	; (80036ec <HAL_I2C_Init+0x26c>)
 8003560:	fba2 2303 	umull	r2, r3, r2, r3
 8003564:	099b      	lsrs	r3, r3, #6
 8003566:	3301      	adds	r3, #1
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6812      	ldr	r2, [r2, #0]
 800356c:	430b      	orrs	r3, r1
 800356e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800357a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	4956      	ldr	r1, [pc, #344]	; (80036dc <HAL_I2C_Init+0x25c>)
 8003584:	428b      	cmp	r3, r1
 8003586:	d80d      	bhi.n	80035a4 <HAL_I2C_Init+0x124>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	1e59      	subs	r1, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	fbb1 f3f3 	udiv	r3, r1, r3
 8003596:	3301      	adds	r3, #1
 8003598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800359c:	2b04      	cmp	r3, #4
 800359e:	bf38      	it	cc
 80035a0:	2304      	movcc	r3, #4
 80035a2:	e04f      	b.n	8003644 <HAL_I2C_Init+0x1c4>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d111      	bne.n	80035d0 <HAL_I2C_Init+0x150>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	1e58      	subs	r0, r3, #1
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6859      	ldr	r1, [r3, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	440b      	add	r3, r1
 80035ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80035be:	3301      	adds	r3, #1
 80035c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bf0c      	ite	eq
 80035c8:	2301      	moveq	r3, #1
 80035ca:	2300      	movne	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	e012      	b.n	80035f6 <HAL_I2C_Init+0x176>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	1e58      	subs	r0, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6859      	ldr	r1, [r3, #4]
 80035d8:	460b      	mov	r3, r1
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	0099      	lsls	r1, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e6:	3301      	adds	r3, #1
 80035e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf0c      	ite	eq
 80035f0:	2301      	moveq	r3, #1
 80035f2:	2300      	movne	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_I2C_Init+0x17e>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e022      	b.n	8003644 <HAL_I2C_Init+0x1c4>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10e      	bne.n	8003624 <HAL_I2C_Init+0x1a4>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1e58      	subs	r0, r3, #1
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6859      	ldr	r1, [r3, #4]
 800360e:	460b      	mov	r3, r1
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	440b      	add	r3, r1
 8003614:	fbb0 f3f3 	udiv	r3, r0, r3
 8003618:	3301      	adds	r3, #1
 800361a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800361e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003622:	e00f      	b.n	8003644 <HAL_I2C_Init+0x1c4>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	1e58      	subs	r0, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6859      	ldr	r1, [r3, #4]
 800362c:	460b      	mov	r3, r1
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	0099      	lsls	r1, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	fbb0 f3f3 	udiv	r3, r0, r3
 800363a:	3301      	adds	r3, #1
 800363c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003640:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	6809      	ldr	r1, [r1, #0]
 8003648:	4313      	orrs	r3, r2
 800364a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69da      	ldr	r2, [r3, #28]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003672:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6911      	ldr	r1, [r2, #16]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	68d2      	ldr	r2, [r2, #12]
 800367e:	4311      	orrs	r1, r2
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	430b      	orrs	r3, r1
 8003686:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	695a      	ldr	r2, [r3, #20]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 0201 	orr.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	000186a0 	.word	0x000186a0
 80036e0:	001e847f 	.word	0x001e847f
 80036e4:	003d08ff 	.word	0x003d08ff
 80036e8:	431bde83 	.word	0x431bde83
 80036ec:	10624dd3 	.word	0x10624dd3

080036f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b088      	sub	sp, #32
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	4608      	mov	r0, r1
 80036fa:	4611      	mov	r1, r2
 80036fc:	461a      	mov	r2, r3
 80036fe:	4603      	mov	r3, r0
 8003700:	817b      	strh	r3, [r7, #10]
 8003702:	460b      	mov	r3, r1
 8003704:	813b      	strh	r3, [r7, #8]
 8003706:	4613      	mov	r3, r2
 8003708:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800370a:	f7ff fc09 	bl	8002f20 <HAL_GetTick>
 800370e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b20      	cmp	r3, #32
 800371a:	f040 80d9 	bne.w	80038d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	2319      	movs	r3, #25
 8003724:	2201      	movs	r2, #1
 8003726:	496d      	ldr	r1, [pc, #436]	; (80038dc <HAL_I2C_Mem_Write+0x1ec>)
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 fc7b 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003734:	2302      	movs	r3, #2
 8003736:	e0cc      	b.n	80038d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800373e:	2b01      	cmp	r3, #1
 8003740:	d101      	bne.n	8003746 <HAL_I2C_Mem_Write+0x56>
 8003742:	2302      	movs	r3, #2
 8003744:	e0c5      	b.n	80038d2 <HAL_I2C_Mem_Write+0x1e2>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b01      	cmp	r3, #1
 800375a:	d007      	beq.n	800376c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800377a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2221      	movs	r2, #33	; 0x21
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2240      	movs	r2, #64	; 0x40
 8003788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a3a      	ldr	r2, [r7, #32]
 8003796:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800379c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4a4d      	ldr	r2, [pc, #308]	; (80038e0 <HAL_I2C_Mem_Write+0x1f0>)
 80037ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037ae:	88f8      	ldrh	r0, [r7, #6]
 80037b0:	893a      	ldrh	r2, [r7, #8]
 80037b2:	8979      	ldrh	r1, [r7, #10]
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	9301      	str	r3, [sp, #4]
 80037b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	4603      	mov	r3, r0
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 fab6 	bl	8003d30 <I2C_RequestMemoryWrite>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d052      	beq.n	8003870 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e081      	b.n	80038d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 fcfc 	bl	80041d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00d      	beq.n	80037fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d107      	bne.n	80037f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e06b      	b.n	80038d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	781a      	ldrb	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	1c5a      	adds	r2, r3, #1
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003814:	3b01      	subs	r3, #1
 8003816:	b29a      	uxth	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003820:	b29b      	uxth	r3, r3
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b04      	cmp	r3, #4
 8003836:	d11b      	bne.n	8003870 <HAL_I2C_Mem_Write+0x180>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383c:	2b00      	cmp	r3, #0
 800383e:	d017      	beq.n	8003870 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	781a      	ldrb	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1aa      	bne.n	80037ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 fce8 	bl	8004252 <I2C_WaitOnBTFFlagUntilTimeout>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00d      	beq.n	80038a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	2b04      	cmp	r3, #4
 800388e:	d107      	bne.n	80038a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800389e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e016      	b.n	80038d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	e000      	b.n	80038d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038d0:	2302      	movs	r3, #2
  }
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	00100002 	.word	0x00100002
 80038e0:	ffff0000 	.word	0xffff0000

080038e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08c      	sub	sp, #48	; 0x30
 80038e8:	af02      	add	r7, sp, #8
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	4608      	mov	r0, r1
 80038ee:	4611      	mov	r1, r2
 80038f0:	461a      	mov	r2, r3
 80038f2:	4603      	mov	r3, r0
 80038f4:	817b      	strh	r3, [r7, #10]
 80038f6:	460b      	mov	r3, r1
 80038f8:	813b      	strh	r3, [r7, #8]
 80038fa:	4613      	mov	r3, r2
 80038fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038fe:	f7ff fb0f 	bl	8002f20 <HAL_GetTick>
 8003902:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b20      	cmp	r3, #32
 800390e:	f040 8208 	bne.w	8003d22 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	2319      	movs	r3, #25
 8003918:	2201      	movs	r2, #1
 800391a:	497b      	ldr	r1, [pc, #492]	; (8003b08 <HAL_I2C_Mem_Read+0x224>)
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 fb81 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003928:	2302      	movs	r3, #2
 800392a:	e1fb      	b.n	8003d24 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_I2C_Mem_Read+0x56>
 8003936:	2302      	movs	r3, #2
 8003938:	e1f4      	b.n	8003d24 <HAL_I2C_Mem_Read+0x440>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b01      	cmp	r3, #1
 800394e:	d007      	beq.n	8003960 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0201 	orr.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800396e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2222      	movs	r2, #34	; 0x22
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2240      	movs	r2, #64	; 0x40
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800398a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003990:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4a5b      	ldr	r2, [pc, #364]	; (8003b0c <HAL_I2C_Mem_Read+0x228>)
 80039a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039a2:	88f8      	ldrh	r0, [r7, #6]
 80039a4:	893a      	ldrh	r2, [r7, #8]
 80039a6:	8979      	ldrh	r1, [r7, #10]
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	9301      	str	r3, [sp, #4]
 80039ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	4603      	mov	r3, r0
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 fa50 	bl	8003e58 <I2C_RequestMemoryRead>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e1b0      	b.n	8003d24 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d113      	bne.n	80039f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ca:	2300      	movs	r3, #0
 80039cc:	623b      	str	r3, [r7, #32]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	623b      	str	r3, [r7, #32]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	623b      	str	r3, [r7, #32]
 80039de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	e184      	b.n	8003cfc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d11b      	bne.n	8003a32 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61fb      	str	r3, [r7, #28]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	61fb      	str	r3, [r7, #28]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	61fb      	str	r3, [r7, #28]
 8003a1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	e164      	b.n	8003cfc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d11b      	bne.n	8003a72 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a48:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61bb      	str	r3, [r7, #24]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	61bb      	str	r3, [r7, #24]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	e144      	b.n	8003cfc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a72:	2300      	movs	r3, #0
 8003a74:	617b      	str	r3, [r7, #20]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	617b      	str	r3, [r7, #20]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a88:	e138      	b.n	8003cfc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8e:	2b03      	cmp	r3, #3
 8003a90:	f200 80f1 	bhi.w	8003c76 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d123      	bne.n	8003ae4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 fc17 	bl	80042d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e139      	b.n	8003d24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ae2:	e10b      	b.n	8003cfc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d14e      	bne.n	8003b8a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af2:	2200      	movs	r2, #0
 8003af4:	4906      	ldr	r1, [pc, #24]	; (8003b10 <HAL_I2C_Mem_Read+0x22c>)
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 fa94 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d008      	beq.n	8003b14 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e10e      	b.n	8003d24 <HAL_I2C_Mem_Read+0x440>
 8003b06:	bf00      	nop
 8003b08:	00100002 	.word	0x00100002
 8003b0c:	ffff0000 	.word	0xffff0000
 8003b10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	691a      	ldr	r2, [r3, #16]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b88:	e0b8      	b.n	8003cfc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b90:	2200      	movs	r2, #0
 8003b92:	4966      	ldr	r1, [pc, #408]	; (8003d2c <HAL_I2C_Mem_Read+0x448>)
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 fa45 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e0bf      	b.n	8003d24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691a      	ldr	r2, [r3, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bec:	2200      	movs	r2, #0
 8003bee:	494f      	ldr	r1, [pc, #316]	; (8003d2c <HAL_I2C_Mem_Read+0x448>)
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 fa17 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e091      	b.n	8003d24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	691a      	ldr	r2, [r3, #16]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c74:	e042      	b.n	8003cfc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 fb2a 	bl	80042d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e04c      	b.n	8003d24 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d118      	bne.n	8003cfc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	b2d2      	uxtb	r2, r2
 8003cd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f47f aec2 	bne.w	8003a8a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	e000      	b.n	8003d24 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003d22:	2302      	movs	r3, #2
  }
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3728      	adds	r7, #40	; 0x28
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	00010004 	.word	0x00010004

08003d30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	4608      	mov	r0, r1
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4603      	mov	r3, r0
 8003d40:	817b      	strh	r3, [r7, #10]
 8003d42:	460b      	mov	r3, r1
 8003d44:	813b      	strh	r3, [r7, #8]
 8003d46:	4613      	mov	r3, r2
 8003d48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 f95c 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00c      	beq.n	8003d8c <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e05f      	b.n	8003e4c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d8c:	897b      	ldrh	r3, [r7, #10]
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	461a      	mov	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d9a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	6a3a      	ldr	r2, [r7, #32]
 8003da0:	492c      	ldr	r1, [pc, #176]	; (8003e54 <I2C_RequestMemoryWrite+0x124>)
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 f995 	bl	80040d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e04c      	b.n	8003e4c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dca:	6a39      	ldr	r1, [r7, #32]
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 f9ff 	bl	80041d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00d      	beq.n	8003df4 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d107      	bne.n	8003df0 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e02b      	b.n	8003e4c <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003df4:	88fb      	ldrh	r3, [r7, #6]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d105      	bne.n	8003e06 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dfa:	893b      	ldrh	r3, [r7, #8]
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	611a      	str	r2, [r3, #16]
 8003e04:	e021      	b.n	8003e4a <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e06:	893b      	ldrh	r3, [r7, #8]
 8003e08:	0a1b      	lsrs	r3, r3, #8
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e16:	6a39      	ldr	r1, [r7, #32]
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 f9d9 	bl	80041d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00d      	beq.n	8003e40 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d107      	bne.n	8003e3c <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e3a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e005      	b.n	8003e4c <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e40:	893b      	ldrh	r3, [r7, #8]
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3718      	adds	r7, #24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	00010002 	.word	0x00010002

08003e58 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	4608      	mov	r0, r1
 8003e62:	4611      	mov	r1, r2
 8003e64:	461a      	mov	r2, r3
 8003e66:	4603      	mov	r3, r0
 8003e68:	817b      	strh	r3, [r7, #10]
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	813b      	strh	r3, [r7, #8]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e80:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f8c0 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00c      	beq.n	8003ec4 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ebe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e0a9      	b.n	8004018 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ec4:	897b      	ldrh	r3, [r7, #10]
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	461a      	mov	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ed2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	6a3a      	ldr	r2, [r7, #32]
 8003ed8:	4951      	ldr	r1, [pc, #324]	; (8004020 <I2C_RequestMemoryRead+0x1c8>)
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 f8f9 	bl	80040d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e096      	b.n	8004018 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eea:	2300      	movs	r3, #0
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f02:	6a39      	ldr	r1, [r7, #32]
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 f963 	bl	80041d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00d      	beq.n	8003f2c <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	d107      	bne.n	8003f28 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e075      	b.n	8004018 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f2c:	88fb      	ldrh	r3, [r7, #6]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d105      	bne.n	8003f3e <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f32:	893b      	ldrh	r3, [r7, #8]
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	611a      	str	r2, [r3, #16]
 8003f3c:	e021      	b.n	8003f82 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f3e:	893b      	ldrh	r3, [r7, #8]
 8003f40:	0a1b      	lsrs	r3, r3, #8
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f4e:	6a39      	ldr	r1, [r7, #32]
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f93d 	bl	80041d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00d      	beq.n	8003f78 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	2b04      	cmp	r3, #4
 8003f62:	d107      	bne.n	8003f74 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e04f      	b.n	8004018 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f78:	893b      	ldrh	r3, [r7, #8]
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f84:	6a39      	ldr	r1, [r7, #32]
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 f922 	bl	80041d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00d      	beq.n	8003fae <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d107      	bne.n	8003faa <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e034      	b.n	8004018 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fbc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 f82a 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00c      	beq.n	8003ff0 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d003      	beq.n	8003fec <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e013      	b.n	8004018 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ff0:	897b      	ldrh	r3, [r7, #10]
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	6a3a      	ldr	r2, [r7, #32]
 8004004:	4906      	ldr	r1, [pc, #24]	; (8004020 <I2C_RequestMemoryRead+0x1c8>)
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 f863 	bl	80040d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	00010002 	.word	0x00010002

08004024 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	603b      	str	r3, [r7, #0]
 8004030:	4613      	mov	r3, r2
 8004032:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004034:	e025      	b.n	8004082 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403c:	d021      	beq.n	8004082 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800403e:	f7fe ff6f 	bl	8002f20 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d302      	bcc.n	8004054 <I2C_WaitOnFlagUntilTimeout+0x30>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d116      	bne.n	8004082 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2220      	movs	r2, #32
 800405e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	f043 0220 	orr.w	r2, r3, #32
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e023      	b.n	80040ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	0c1b      	lsrs	r3, r3, #16
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b01      	cmp	r3, #1
 800408a:	d10d      	bne.n	80040a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	43da      	mvns	r2, r3
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4013      	ands	r3, r2
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	bf0c      	ite	eq
 800409e:	2301      	moveq	r3, #1
 80040a0:	2300      	movne	r3, #0
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	461a      	mov	r2, r3
 80040a6:	e00c      	b.n	80040c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	43da      	mvns	r2, r3
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	4013      	ands	r3, r2
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	bf0c      	ite	eq
 80040ba:	2301      	moveq	r3, #1
 80040bc:	2300      	movne	r3, #0
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	461a      	mov	r2, r3
 80040c2:	79fb      	ldrb	r3, [r7, #7]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d0b6      	beq.n	8004036 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b084      	sub	sp, #16
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	60f8      	str	r0, [r7, #12]
 80040da:	60b9      	str	r1, [r7, #8]
 80040dc:	607a      	str	r2, [r7, #4]
 80040de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040e0:	e051      	b.n	8004186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f0:	d123      	bne.n	800413a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004100:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800410a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	f043 0204 	orr.w	r2, r3, #4
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e046      	b.n	80041c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004140:	d021      	beq.n	8004186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004142:	f7fe feed 	bl	8002f20 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	429a      	cmp	r2, r3
 8004150:	d302      	bcc.n	8004158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d116      	bne.n	8004186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2220      	movs	r2, #32
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	f043 0220 	orr.w	r2, r3, #32
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e020      	b.n	80041c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	0c1b      	lsrs	r3, r3, #16
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b01      	cmp	r3, #1
 800418e:	d10c      	bne.n	80041aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	43da      	mvns	r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4013      	ands	r3, r2
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	bf14      	ite	ne
 80041a2:	2301      	movne	r3, #1
 80041a4:	2300      	moveq	r3, #0
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	e00b      	b.n	80041c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	43da      	mvns	r2, r3
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	4013      	ands	r3, r2
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	bf14      	ite	ne
 80041bc:	2301      	movne	r3, #1
 80041be:	2300      	moveq	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d18d      	bne.n	80040e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041dc:	e02d      	b.n	800423a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 f8ce 	bl	8004380 <I2C_IsAcknowledgeFailed>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e02d      	b.n	800424a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f4:	d021      	beq.n	800423a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f6:	f7fe fe93 	bl	8002f20 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	429a      	cmp	r2, r3
 8004204:	d302      	bcc.n	800420c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d116      	bne.n	800423a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2220      	movs	r2, #32
 8004216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	f043 0220 	orr.w	r2, r3, #32
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e007      	b.n	800424a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004244:	2b80      	cmp	r3, #128	; 0x80
 8004246:	d1ca      	bne.n	80041de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800425e:	e02d      	b.n	80042bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 f88d 	bl	8004380 <I2C_IsAcknowledgeFailed>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e02d      	b.n	80042cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004276:	d021      	beq.n	80042bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004278:	f7fe fe52 	bl	8002f20 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	429a      	cmp	r2, r3
 8004286:	d302      	bcc.n	800428e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d116      	bne.n	80042bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a8:	f043 0220 	orr.w	r2, r3, #32
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e007      	b.n	80042cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	f003 0304 	and.w	r3, r3, #4
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d1ca      	bne.n	8004260 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042e0:	e042      	b.n	8004368 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	f003 0310 	and.w	r3, r3, #16
 80042ec:	2b10      	cmp	r3, #16
 80042ee:	d119      	bne.n	8004324 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f06f 0210 	mvn.w	r2, #16
 80042f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e029      	b.n	8004378 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004324:	f7fe fdfc 	bl	8002f20 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	429a      	cmp	r2, r3
 8004332:	d302      	bcc.n	800433a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d116      	bne.n	8004368 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	f043 0220 	orr.w	r2, r3, #32
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e007      	b.n	8004378 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004372:	2b40      	cmp	r3, #64	; 0x40
 8004374:	d1b5      	bne.n	80042e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004396:	d11b      	bne.n	80043d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043bc:	f043 0204 	orr.w	r2, r3, #4
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e000      	b.n	80043d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
	...

080043e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e25b      	b.n	80048aa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d075      	beq.n	80044ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043fe:	4ba3      	ldr	r3, [pc, #652]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 030c 	and.w	r3, r3, #12
 8004406:	2b04      	cmp	r3, #4
 8004408:	d00c      	beq.n	8004424 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800440a:	4ba0      	ldr	r3, [pc, #640]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004412:	2b08      	cmp	r3, #8
 8004414:	d112      	bne.n	800443c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004416:	4b9d      	ldr	r3, [pc, #628]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800441e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004422:	d10b      	bne.n	800443c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004424:	4b99      	ldr	r3, [pc, #612]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d05b      	beq.n	80044e8 <HAL_RCC_OscConfig+0x108>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d157      	bne.n	80044e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e236      	b.n	80048aa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004444:	d106      	bne.n	8004454 <HAL_RCC_OscConfig+0x74>
 8004446:	4b91      	ldr	r3, [pc, #580]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a90      	ldr	r2, [pc, #576]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 800444c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	e01d      	b.n	8004490 <HAL_RCC_OscConfig+0xb0>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800445c:	d10c      	bne.n	8004478 <HAL_RCC_OscConfig+0x98>
 800445e:	4b8b      	ldr	r3, [pc, #556]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a8a      	ldr	r2, [pc, #552]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 8004464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	4b88      	ldr	r3, [pc, #544]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a87      	ldr	r2, [pc, #540]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 8004470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	e00b      	b.n	8004490 <HAL_RCC_OscConfig+0xb0>
 8004478:	4b84      	ldr	r3, [pc, #528]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a83      	ldr	r2, [pc, #524]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 800447e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	4b81      	ldr	r3, [pc, #516]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a80      	ldr	r2, [pc, #512]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 800448a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800448e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d013      	beq.n	80044c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004498:	f7fe fd42 	bl	8002f20 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044a0:	f7fe fd3e 	bl	8002f20 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b64      	cmp	r3, #100	; 0x64
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e1fb      	b.n	80048aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b2:	4b76      	ldr	r3, [pc, #472]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0f0      	beq.n	80044a0 <HAL_RCC_OscConfig+0xc0>
 80044be:	e014      	b.n	80044ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c0:	f7fe fd2e 	bl	8002f20 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044c8:	f7fe fd2a 	bl	8002f20 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b64      	cmp	r3, #100	; 0x64
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e1e7      	b.n	80048aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044da:	4b6c      	ldr	r3, [pc, #432]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f0      	bne.n	80044c8 <HAL_RCC_OscConfig+0xe8>
 80044e6:	e000      	b.n	80044ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d063      	beq.n	80045be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044f6:	4b65      	ldr	r3, [pc, #404]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 030c 	and.w	r3, r3, #12
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00b      	beq.n	800451a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004502:	4b62      	ldr	r3, [pc, #392]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800450a:	2b08      	cmp	r3, #8
 800450c:	d11c      	bne.n	8004548 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800450e:	4b5f      	ldr	r3, [pc, #380]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d116      	bne.n	8004548 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800451a:	4b5c      	ldr	r3, [pc, #368]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d005      	beq.n	8004532 <HAL_RCC_OscConfig+0x152>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d001      	beq.n	8004532 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e1bb      	b.n	80048aa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004532:	4b56      	ldr	r3, [pc, #344]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	4952      	ldr	r1, [pc, #328]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 8004542:	4313      	orrs	r3, r2
 8004544:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004546:	e03a      	b.n	80045be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d020      	beq.n	8004592 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004550:	4b4f      	ldr	r3, [pc, #316]	; (8004690 <HAL_RCC_OscConfig+0x2b0>)
 8004552:	2201      	movs	r2, #1
 8004554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004556:	f7fe fce3 	bl	8002f20 <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800455e:	f7fe fcdf 	bl	8002f20 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e19c      	b.n	80048aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004570:	4b46      	ldr	r3, [pc, #280]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0f0      	beq.n	800455e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457c:	4b43      	ldr	r3, [pc, #268]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	4940      	ldr	r1, [pc, #256]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 800458c:	4313      	orrs	r3, r2
 800458e:	600b      	str	r3, [r1, #0]
 8004590:	e015      	b.n	80045be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004592:	4b3f      	ldr	r3, [pc, #252]	; (8004690 <HAL_RCC_OscConfig+0x2b0>)
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004598:	f7fe fcc2 	bl	8002f20 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045a0:	f7fe fcbe 	bl	8002f20 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e17b      	b.n	80048aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045b2:	4b36      	ldr	r3, [pc, #216]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f0      	bne.n	80045a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d030      	beq.n	800462c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d016      	beq.n	8004600 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045d2:	4b30      	ldr	r3, [pc, #192]	; (8004694 <HAL_RCC_OscConfig+0x2b4>)
 80045d4:	2201      	movs	r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d8:	f7fe fca2 	bl	8002f20 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045e0:	f7fe fc9e 	bl	8002f20 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e15b      	b.n	80048aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045f2:	4b26      	ldr	r3, [pc, #152]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 80045f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0f0      	beq.n	80045e0 <HAL_RCC_OscConfig+0x200>
 80045fe:	e015      	b.n	800462c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004600:	4b24      	ldr	r3, [pc, #144]	; (8004694 <HAL_RCC_OscConfig+0x2b4>)
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004606:	f7fe fc8b 	bl	8002f20 <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800460c:	e008      	b.n	8004620 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800460e:	f7fe fc87 	bl	8002f20 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d901      	bls.n	8004620 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e144      	b.n	80048aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004620:	4b1a      	ldr	r3, [pc, #104]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 8004622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1f0      	bne.n	800460e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 80a0 	beq.w	800477a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800463a:	2300      	movs	r3, #0
 800463c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800463e:	4b13      	ldr	r3, [pc, #76]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10f      	bne.n	800466a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800464a:	2300      	movs	r3, #0
 800464c:	60bb      	str	r3, [r7, #8]
 800464e:	4b0f      	ldr	r3, [pc, #60]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	4a0e      	ldr	r2, [pc, #56]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 8004654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004658:	6413      	str	r3, [r2, #64]	; 0x40
 800465a:	4b0c      	ldr	r3, [pc, #48]	; (800468c <HAL_RCC_OscConfig+0x2ac>)
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004662:	60bb      	str	r3, [r7, #8]
 8004664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004666:	2301      	movs	r3, #1
 8004668:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800466a:	4b0b      	ldr	r3, [pc, #44]	; (8004698 <HAL_RCC_OscConfig+0x2b8>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004672:	2b00      	cmp	r3, #0
 8004674:	d121      	bne.n	80046ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004676:	4b08      	ldr	r3, [pc, #32]	; (8004698 <HAL_RCC_OscConfig+0x2b8>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a07      	ldr	r2, [pc, #28]	; (8004698 <HAL_RCC_OscConfig+0x2b8>)
 800467c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004682:	f7fe fc4d 	bl	8002f20 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004688:	e011      	b.n	80046ae <HAL_RCC_OscConfig+0x2ce>
 800468a:	bf00      	nop
 800468c:	40023800 	.word	0x40023800
 8004690:	42470000 	.word	0x42470000
 8004694:	42470e80 	.word	0x42470e80
 8004698:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800469c:	f7fe fc40 	bl	8002f20 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e0fd      	b.n	80048aa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ae:	4b81      	ldr	r3, [pc, #516]	; (80048b4 <HAL_RCC_OscConfig+0x4d4>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0f0      	beq.n	800469c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d106      	bne.n	80046d0 <HAL_RCC_OscConfig+0x2f0>
 80046c2:	4b7d      	ldr	r3, [pc, #500]	; (80048b8 <HAL_RCC_OscConfig+0x4d8>)
 80046c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c6:	4a7c      	ldr	r2, [pc, #496]	; (80048b8 <HAL_RCC_OscConfig+0x4d8>)
 80046c8:	f043 0301 	orr.w	r3, r3, #1
 80046cc:	6713      	str	r3, [r2, #112]	; 0x70
 80046ce:	e01c      	b.n	800470a <HAL_RCC_OscConfig+0x32a>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	2b05      	cmp	r3, #5
 80046d6:	d10c      	bne.n	80046f2 <HAL_RCC_OscConfig+0x312>
 80046d8:	4b77      	ldr	r3, [pc, #476]	; (80048b8 <HAL_RCC_OscConfig+0x4d8>)
 80046da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046dc:	4a76      	ldr	r2, [pc, #472]	; (80048b8 <HAL_RCC_OscConfig+0x4d8>)
 80046de:	f043 0304 	orr.w	r3, r3, #4
 80046e2:	6713      	str	r3, [r2, #112]	; 0x70
 80046e4:	4b74      	ldr	r3, [pc, #464]	; (80048b8 <HAL_RCC_OscConfig+0x4d8>)
 80046e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e8:	4a73      	ldr	r2, [pc, #460]	; (80048b8 <HAL_RCC_OscConfig+0x4d8>)
 80046ea:	f043 0301 	orr.w	r3, r3, #1
 80046ee:	6713      	str	r3, [r2, #112]	; 0x70
 80046f0:	e00b      	b.n	800470a <HAL_RCC_OscConfig+0x32a>
 80046f2:	4b71      	ldr	r3, [pc, #452]	; (80048b8 <HAL_RCC_OscConfig+0x4d8>)
 80046f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f6:	4a70      	ldr	r2, [pc, #448]	; (80048b8 <HAL_RCC_OscConfig+0x4d8>)
 80046f8:	f023 0301 	bic.w	r3, r3, #1
 80046fc:	6713      	str	r3, [r2, #112]	; 0x70
 80046fe:	4b6e      	ldr	r3, [pc, #440]	; (80048b8 <HAL_RCC_OscConfig+0x4d8>)
 8004700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004702:	4a6d      	ldr	r2, [pc, #436]	; (80048b8 <HAL_RCC_OscConfig+0x4d8>)
 8004704:	f023 0304 	bic.w	r3, r3, #4
 8004708:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d015      	beq.n	800473e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004712:	f7fe fc05 	bl	8002f20 <HAL_GetTick>
 8004716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004718:	e00a      	b.n	8004730 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800471a:	f7fe fc01 	bl	8002f20 <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	f241 3288 	movw	r2, #5000	; 0x1388
 8004728:	4293      	cmp	r3, r2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e0bc      	b.n	80048aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004730:	4b61      	ldr	r3, [pc, #388]	; (80048b8 <HAL_RCC_OscConfig+0x4d8>)
 8004732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0ee      	beq.n	800471a <HAL_RCC_OscConfig+0x33a>
 800473c:	e014      	b.n	8004768 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800473e:	f7fe fbef 	bl	8002f20 <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004744:	e00a      	b.n	800475c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004746:	f7fe fbeb 	bl	8002f20 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	f241 3288 	movw	r2, #5000	; 0x1388
 8004754:	4293      	cmp	r3, r2
 8004756:	d901      	bls.n	800475c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e0a6      	b.n	80048aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800475c:	4b56      	ldr	r3, [pc, #344]	; (80048b8 <HAL_RCC_OscConfig+0x4d8>)
 800475e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1ee      	bne.n	8004746 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004768:	7dfb      	ldrb	r3, [r7, #23]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d105      	bne.n	800477a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800476e:	4b52      	ldr	r3, [pc, #328]	; (80048b8 <HAL_RCC_OscConfig+0x4d8>)
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	4a51      	ldr	r2, [pc, #324]	; (80048b8 <HAL_RCC_OscConfig+0x4d8>)
 8004774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004778:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	2b00      	cmp	r3, #0
 8004780:	f000 8092 	beq.w	80048a8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004784:	4b4c      	ldr	r3, [pc, #304]	; (80048b8 <HAL_RCC_OscConfig+0x4d8>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f003 030c 	and.w	r3, r3, #12
 800478c:	2b08      	cmp	r3, #8
 800478e:	d05c      	beq.n	800484a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	2b02      	cmp	r3, #2
 8004796:	d141      	bne.n	800481c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004798:	4b48      	ldr	r3, [pc, #288]	; (80048bc <HAL_RCC_OscConfig+0x4dc>)
 800479a:	2200      	movs	r2, #0
 800479c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800479e:	f7fe fbbf 	bl	8002f20 <HAL_GetTick>
 80047a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a4:	e008      	b.n	80047b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047a6:	f7fe fbbb 	bl	8002f20 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d901      	bls.n	80047b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e078      	b.n	80048aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b8:	4b3f      	ldr	r3, [pc, #252]	; (80048b8 <HAL_RCC_OscConfig+0x4d8>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1f0      	bne.n	80047a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	69da      	ldr	r2, [r3, #28]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	431a      	orrs	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	019b      	lsls	r3, r3, #6
 80047d4:	431a      	orrs	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047da:	085b      	lsrs	r3, r3, #1
 80047dc:	3b01      	subs	r3, #1
 80047de:	041b      	lsls	r3, r3, #16
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e6:	061b      	lsls	r3, r3, #24
 80047e8:	4933      	ldr	r1, [pc, #204]	; (80048b8 <HAL_RCC_OscConfig+0x4d8>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047ee:	4b33      	ldr	r3, [pc, #204]	; (80048bc <HAL_RCC_OscConfig+0x4dc>)
 80047f0:	2201      	movs	r2, #1
 80047f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f4:	f7fe fb94 	bl	8002f20 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047fc:	f7fe fb90 	bl	8002f20 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e04d      	b.n	80048aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800480e:	4b2a      	ldr	r3, [pc, #168]	; (80048b8 <HAL_RCC_OscConfig+0x4d8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0f0      	beq.n	80047fc <HAL_RCC_OscConfig+0x41c>
 800481a:	e045      	b.n	80048a8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800481c:	4b27      	ldr	r3, [pc, #156]	; (80048bc <HAL_RCC_OscConfig+0x4dc>)
 800481e:	2200      	movs	r2, #0
 8004820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004822:	f7fe fb7d 	bl	8002f20 <HAL_GetTick>
 8004826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004828:	e008      	b.n	800483c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800482a:	f7fe fb79 	bl	8002f20 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e036      	b.n	80048aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800483c:	4b1e      	ldr	r3, [pc, #120]	; (80048b8 <HAL_RCC_OscConfig+0x4d8>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1f0      	bne.n	800482a <HAL_RCC_OscConfig+0x44a>
 8004848:	e02e      	b.n	80048a8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d101      	bne.n	8004856 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e029      	b.n	80048aa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004856:	4b18      	ldr	r3, [pc, #96]	; (80048b8 <HAL_RCC_OscConfig+0x4d8>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	429a      	cmp	r2, r3
 8004868:	d11c      	bne.n	80048a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004874:	429a      	cmp	r2, r3
 8004876:	d115      	bne.n	80048a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800487e:	4013      	ands	r3, r2
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004884:	4293      	cmp	r3, r2
 8004886:	d10d      	bne.n	80048a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004892:	429a      	cmp	r2, r3
 8004894:	d106      	bne.n	80048a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d001      	beq.n	80048a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e000      	b.n	80048aa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	40007000 	.word	0x40007000
 80048b8:	40023800 	.word	0x40023800
 80048bc:	42470060 	.word	0x42470060

080048c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e0cc      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048d4:	4b68      	ldr	r3, [pc, #416]	; (8004a78 <HAL_RCC_ClockConfig+0x1b8>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 030f 	and.w	r3, r3, #15
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d90c      	bls.n	80048fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048e2:	4b65      	ldr	r3, [pc, #404]	; (8004a78 <HAL_RCC_ClockConfig+0x1b8>)
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ea:	4b63      	ldr	r3, [pc, #396]	; (8004a78 <HAL_RCC_ClockConfig+0x1b8>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d001      	beq.n	80048fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e0b8      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d020      	beq.n	800494a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	2b00      	cmp	r3, #0
 8004912:	d005      	beq.n	8004920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004914:	4b59      	ldr	r3, [pc, #356]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	4a58      	ldr	r2, [pc, #352]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800491e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0308 	and.w	r3, r3, #8
 8004928:	2b00      	cmp	r3, #0
 800492a:	d005      	beq.n	8004938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800492c:	4b53      	ldr	r3, [pc, #332]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	4a52      	ldr	r2, [pc, #328]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 8004932:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004936:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004938:	4b50      	ldr	r3, [pc, #320]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	494d      	ldr	r1, [pc, #308]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 8004946:	4313      	orrs	r3, r2
 8004948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d044      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d107      	bne.n	800496e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495e:	4b47      	ldr	r3, [pc, #284]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d119      	bne.n	800499e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e07f      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b02      	cmp	r3, #2
 8004974:	d003      	beq.n	800497e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800497a:	2b03      	cmp	r3, #3
 800497c:	d107      	bne.n	800498e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800497e:	4b3f      	ldr	r3, [pc, #252]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d109      	bne.n	800499e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e06f      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800498e:	4b3b      	ldr	r3, [pc, #236]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e067      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800499e:	4b37      	ldr	r3, [pc, #220]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f023 0203 	bic.w	r2, r3, #3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	4934      	ldr	r1, [pc, #208]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049b0:	f7fe fab6 	bl	8002f20 <HAL_GetTick>
 80049b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b6:	e00a      	b.n	80049ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b8:	f7fe fab2 	bl	8002f20 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e04f      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ce:	4b2b      	ldr	r3, [pc, #172]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 020c 	and.w	r2, r3, #12
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	429a      	cmp	r2, r3
 80049de:	d1eb      	bne.n	80049b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049e0:	4b25      	ldr	r3, [pc, #148]	; (8004a78 <HAL_RCC_ClockConfig+0x1b8>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 030f 	and.w	r3, r3, #15
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d20c      	bcs.n	8004a08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ee:	4b22      	ldr	r3, [pc, #136]	; (8004a78 <HAL_RCC_ClockConfig+0x1b8>)
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	b2d2      	uxtb	r2, r2
 80049f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f6:	4b20      	ldr	r3, [pc, #128]	; (8004a78 <HAL_RCC_ClockConfig+0x1b8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 030f 	and.w	r3, r3, #15
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d001      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e032      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d008      	beq.n	8004a26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a14:	4b19      	ldr	r3, [pc, #100]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	4916      	ldr	r1, [pc, #88]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0308 	and.w	r3, r3, #8
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d009      	beq.n	8004a46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a32:	4b12      	ldr	r3, [pc, #72]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	490e      	ldr	r1, [pc, #56]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a46:	f000 f821 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8004a4a:	4601      	mov	r1, r0
 8004a4c:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <HAL_RCC_ClockConfig+0x1bc>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	091b      	lsrs	r3, r3, #4
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	4a0a      	ldr	r2, [pc, #40]	; (8004a80 <HAL_RCC_ClockConfig+0x1c0>)
 8004a58:	5cd3      	ldrb	r3, [r2, r3]
 8004a5a:	fa21 f303 	lsr.w	r3, r1, r3
 8004a5e:	4a09      	ldr	r2, [pc, #36]	; (8004a84 <HAL_RCC_ClockConfig+0x1c4>)
 8004a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a62:	4b09      	ldr	r3, [pc, #36]	; (8004a88 <HAL_RCC_ClockConfig+0x1c8>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fe fa16 	bl	8002e98 <HAL_InitTick>

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	40023c00 	.word	0x40023c00
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	08006b7c 	.word	0x08006b7c
 8004a84:	20000000 	.word	0x20000000
 8004a88:	20000004 	.word	0x20000004

08004a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	607b      	str	r3, [r7, #4]
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004aa2:	4b63      	ldr	r3, [pc, #396]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 030c 	and.w	r3, r3, #12
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d007      	beq.n	8004abe <HAL_RCC_GetSysClockFreq+0x32>
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d008      	beq.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x38>
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f040 80b4 	bne.w	8004c20 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ab8:	4b5e      	ldr	r3, [pc, #376]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004aba:	60bb      	str	r3, [r7, #8]
       break;
 8004abc:	e0b3      	b.n	8004c26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004abe:	4b5e      	ldr	r3, [pc, #376]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004ac0:	60bb      	str	r3, [r7, #8]
      break;
 8004ac2:	e0b0      	b.n	8004c26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ac4:	4b5a      	ldr	r3, [pc, #360]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004acc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ace:	4b58      	ldr	r3, [pc, #352]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d04a      	beq.n	8004b70 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ada:	4b55      	ldr	r3, [pc, #340]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	099b      	lsrs	r3, r3, #6
 8004ae0:	f04f 0400 	mov.w	r4, #0
 8004ae4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	ea03 0501 	and.w	r5, r3, r1
 8004af0:	ea04 0602 	and.w	r6, r4, r2
 8004af4:	4629      	mov	r1, r5
 8004af6:	4632      	mov	r2, r6
 8004af8:	f04f 0300 	mov.w	r3, #0
 8004afc:	f04f 0400 	mov.w	r4, #0
 8004b00:	0154      	lsls	r4, r2, #5
 8004b02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b06:	014b      	lsls	r3, r1, #5
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4622      	mov	r2, r4
 8004b0c:	1b49      	subs	r1, r1, r5
 8004b0e:	eb62 0206 	sbc.w	r2, r2, r6
 8004b12:	f04f 0300 	mov.w	r3, #0
 8004b16:	f04f 0400 	mov.w	r4, #0
 8004b1a:	0194      	lsls	r4, r2, #6
 8004b1c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b20:	018b      	lsls	r3, r1, #6
 8004b22:	1a5b      	subs	r3, r3, r1
 8004b24:	eb64 0402 	sbc.w	r4, r4, r2
 8004b28:	f04f 0100 	mov.w	r1, #0
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	00e2      	lsls	r2, r4, #3
 8004b32:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b36:	00d9      	lsls	r1, r3, #3
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4614      	mov	r4, r2
 8004b3c:	195b      	adds	r3, r3, r5
 8004b3e:	eb44 0406 	adc.w	r4, r4, r6
 8004b42:	f04f 0100 	mov.w	r1, #0
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	0262      	lsls	r2, r4, #9
 8004b4c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004b50:	0259      	lsls	r1, r3, #9
 8004b52:	460b      	mov	r3, r1
 8004b54:	4614      	mov	r4, r2
 8004b56:	4618      	mov	r0, r3
 8004b58:	4621      	mov	r1, r4
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f04f 0400 	mov.w	r4, #0
 8004b60:	461a      	mov	r2, r3
 8004b62:	4623      	mov	r3, r4
 8004b64:	f7fb fdcc 	bl	8000700 <__aeabi_uldivmod>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	460c      	mov	r4, r1
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	e049      	b.n	8004c04 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b70:	4b2f      	ldr	r3, [pc, #188]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	099b      	lsrs	r3, r3, #6
 8004b76:	f04f 0400 	mov.w	r4, #0
 8004b7a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b7e:	f04f 0200 	mov.w	r2, #0
 8004b82:	ea03 0501 	and.w	r5, r3, r1
 8004b86:	ea04 0602 	and.w	r6, r4, r2
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	4632      	mov	r2, r6
 8004b8e:	f04f 0300 	mov.w	r3, #0
 8004b92:	f04f 0400 	mov.w	r4, #0
 8004b96:	0154      	lsls	r4, r2, #5
 8004b98:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b9c:	014b      	lsls	r3, r1, #5
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4622      	mov	r2, r4
 8004ba2:	1b49      	subs	r1, r1, r5
 8004ba4:	eb62 0206 	sbc.w	r2, r2, r6
 8004ba8:	f04f 0300 	mov.w	r3, #0
 8004bac:	f04f 0400 	mov.w	r4, #0
 8004bb0:	0194      	lsls	r4, r2, #6
 8004bb2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004bb6:	018b      	lsls	r3, r1, #6
 8004bb8:	1a5b      	subs	r3, r3, r1
 8004bba:	eb64 0402 	sbc.w	r4, r4, r2
 8004bbe:	f04f 0100 	mov.w	r1, #0
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	00e2      	lsls	r2, r4, #3
 8004bc8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004bcc:	00d9      	lsls	r1, r3, #3
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4614      	mov	r4, r2
 8004bd2:	195b      	adds	r3, r3, r5
 8004bd4:	eb44 0406 	adc.w	r4, r4, r6
 8004bd8:	f04f 0100 	mov.w	r1, #0
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	02a2      	lsls	r2, r4, #10
 8004be2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004be6:	0299      	lsls	r1, r3, #10
 8004be8:	460b      	mov	r3, r1
 8004bea:	4614      	mov	r4, r2
 8004bec:	4618      	mov	r0, r3
 8004bee:	4621      	mov	r1, r4
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f04f 0400 	mov.w	r4, #0
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	4623      	mov	r3, r4
 8004bfa:	f7fb fd81 	bl	8000700 <__aeabi_uldivmod>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	460c      	mov	r4, r1
 8004c02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c04:	4b0a      	ldr	r3, [pc, #40]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	0c1b      	lsrs	r3, r3, #16
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	3301      	adds	r3, #1
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1c:	60bb      	str	r3, [r7, #8]
      break;
 8004c1e:	e002      	b.n	8004c26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c20:	4b04      	ldr	r3, [pc, #16]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004c22:	60bb      	str	r3, [r7, #8]
      break;
 8004c24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c26:	68bb      	ldr	r3, [r7, #8]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c30:	40023800 	.word	0x40023800
 8004c34:	00f42400 	.word	0x00f42400
 8004c38:	007a1200 	.word	0x007a1200

08004c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c40:	4b03      	ldr	r3, [pc, #12]	; (8004c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c42:	681b      	ldr	r3, [r3, #0]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	20000000 	.word	0x20000000

08004c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c58:	f7ff fff0 	bl	8004c3c <HAL_RCC_GetHCLKFreq>
 8004c5c:	4601      	mov	r1, r0
 8004c5e:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	0a9b      	lsrs	r3, r3, #10
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	4a03      	ldr	r2, [pc, #12]	; (8004c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c6a:	5cd3      	ldrb	r3, [r2, r3]
 8004c6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40023800 	.word	0x40023800
 8004c78:	08006b8c 	.word	0x08006b8c

08004c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c80:	f7ff ffdc 	bl	8004c3c <HAL_RCC_GetHCLKFreq>
 8004c84:	4601      	mov	r1, r0
 8004c86:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	0b5b      	lsrs	r3, r3, #13
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	4a03      	ldr	r2, [pc, #12]	; (8004ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c92:	5cd3      	ldrb	r3, [r2, r3]
 8004c94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	08006b8c 	.word	0x08006b8c

08004ca4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e01d      	b.n	8004cf2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d106      	bne.n	8004cd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7fd ffca 	bl	8002c64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3304      	adds	r3, #4
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4610      	mov	r0, r2
 8004ce4:	f000 fab8 	bl	8005258 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b082      	sub	sp, #8
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e01d      	b.n	8004d48 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d106      	bne.n	8004d26 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f815 	bl	8004d50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2202      	movs	r2, #2
 8004d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3304      	adds	r3, #4
 8004d36:	4619      	mov	r1, r3
 8004d38:	4610      	mov	r0, r2
 8004d3a:	f000 fa8d 	bl	8005258 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2201      	movs	r2, #1
 8004d74:	6839      	ldr	r1, [r7, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 fd14 	bl	80057a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a10      	ldr	r2, [pc, #64]	; (8004dc4 <HAL_TIM_PWM_Start+0x60>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d107      	bne.n	8004d96 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f003 0307 	and.w	r3, r3, #7
 8004da0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2b06      	cmp	r3, #6
 8004da6:	d007      	beq.n	8004db8 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0201 	orr.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40010000 	.word	0x40010000

08004dc8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e083      	b.n	8004ee4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d106      	bne.n	8004df6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7fd fe9d 	bl	8002b30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2202      	movs	r2, #2
 8004dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6812      	ldr	r2, [r2, #0]
 8004e08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e0c:	f023 0307 	bic.w	r3, r3, #7
 8004e10:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	3304      	adds	r3, #4
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	4610      	mov	r0, r2
 8004e1e:	f000 fa1b 	bl	8005258 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e4a:	f023 0303 	bic.w	r3, r3, #3
 8004e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	021b      	lsls	r3, r3, #8
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004e68:	f023 030c 	bic.w	r3, r3, #12
 8004e6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	68da      	ldr	r2, [r3, #12]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	021b      	lsls	r3, r3, #8
 8004e84:	4313      	orrs	r3, r2
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	011a      	lsls	r2, r3, #4
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	031b      	lsls	r3, r3, #12
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004ea6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004eae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3718      	adds	r7, #24
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d002      	beq.n	8004f02 <HAL_TIM_Encoder_Start+0x16>
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d008      	beq.n	8004f12 <HAL_TIM_Encoder_Start+0x26>
 8004f00:	e00f      	b.n	8004f22 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2201      	movs	r2, #1
 8004f08:	2100      	movs	r1, #0
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 fc4a 	bl	80057a4 <TIM_CCxChannelCmd>
      break;
 8004f10:	e016      	b.n	8004f40 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2201      	movs	r2, #1
 8004f18:	2104      	movs	r1, #4
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 fc42 	bl	80057a4 <TIM_CCxChannelCmd>
      break;
 8004f20:	e00e      	b.n	8004f40 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2201      	movs	r2, #1
 8004f28:	2100      	movs	r1, #0
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 fc3a 	bl	80057a4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2201      	movs	r2, #1
 8004f36:	2104      	movs	r1, #4
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 fc33 	bl	80057a4 <TIM_CCxChannelCmd>
      break;
 8004f3e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0201 	orr.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d101      	bne.n	8004f76 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004f72:	2302      	movs	r3, #2
 8004f74:	e0b4      	b.n	80050e0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2202      	movs	r2, #2
 8004f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b0c      	cmp	r3, #12
 8004f8a:	f200 809f 	bhi.w	80050cc <HAL_TIM_PWM_ConfigChannel+0x170>
 8004f8e:	a201      	add	r2, pc, #4	; (adr r2, 8004f94 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f94:	08004fc9 	.word	0x08004fc9
 8004f98:	080050cd 	.word	0x080050cd
 8004f9c:	080050cd 	.word	0x080050cd
 8004fa0:	080050cd 	.word	0x080050cd
 8004fa4:	08005009 	.word	0x08005009
 8004fa8:	080050cd 	.word	0x080050cd
 8004fac:	080050cd 	.word	0x080050cd
 8004fb0:	080050cd 	.word	0x080050cd
 8004fb4:	0800504b 	.word	0x0800504b
 8004fb8:	080050cd 	.word	0x080050cd
 8004fbc:	080050cd 	.word	0x080050cd
 8004fc0:	080050cd 	.word	0x080050cd
 8004fc4:	0800508b 	.word	0x0800508b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68b9      	ldr	r1, [r7, #8]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 f9c2 	bl	8005358 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699a      	ldr	r2, [r3, #24]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0208 	orr.w	r2, r2, #8
 8004fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699a      	ldr	r2, [r3, #24]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0204 	bic.w	r2, r2, #4
 8004ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6999      	ldr	r1, [r3, #24]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	691a      	ldr	r2, [r3, #16]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	619a      	str	r2, [r3, #24]
      break;
 8005006:	e062      	b.n	80050ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68b9      	ldr	r1, [r7, #8]
 800500e:	4618      	mov	r0, r3
 8005010:	f000 fa08 	bl	8005424 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699a      	ldr	r2, [r3, #24]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699a      	ldr	r2, [r3, #24]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6999      	ldr	r1, [r3, #24]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	021a      	lsls	r2, r3, #8
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	619a      	str	r2, [r3, #24]
      break;
 8005048:	e041      	b.n	80050ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68b9      	ldr	r1, [r7, #8]
 8005050:	4618      	mov	r0, r3
 8005052:	f000 fa53 	bl	80054fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	69da      	ldr	r2, [r3, #28]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f042 0208 	orr.w	r2, r2, #8
 8005064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	69da      	ldr	r2, [r3, #28]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0204 	bic.w	r2, r2, #4
 8005074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69d9      	ldr	r1, [r3, #28]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	691a      	ldr	r2, [r3, #16]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	61da      	str	r2, [r3, #28]
      break;
 8005088:	e021      	b.n	80050ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68b9      	ldr	r1, [r7, #8]
 8005090:	4618      	mov	r0, r3
 8005092:	f000 fa9d 	bl	80055d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	69da      	ldr	r2, [r3, #28]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69da      	ldr	r2, [r3, #28]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	69d9      	ldr	r1, [r3, #28]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	021a      	lsls	r2, r3, #8
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	61da      	str	r2, [r3, #28]
      break;
 80050ca:	e000      	b.n	80050ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80050cc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d101      	bne.n	8005100 <HAL_TIM_ConfigClockSource+0x18>
 80050fc:	2302      	movs	r3, #2
 80050fe:	e0a6      	b.n	800524e <HAL_TIM_ConfigClockSource+0x166>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800511e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005126:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b40      	cmp	r3, #64	; 0x40
 8005136:	d067      	beq.n	8005208 <HAL_TIM_ConfigClockSource+0x120>
 8005138:	2b40      	cmp	r3, #64	; 0x40
 800513a:	d80b      	bhi.n	8005154 <HAL_TIM_ConfigClockSource+0x6c>
 800513c:	2b10      	cmp	r3, #16
 800513e:	d073      	beq.n	8005228 <HAL_TIM_ConfigClockSource+0x140>
 8005140:	2b10      	cmp	r3, #16
 8005142:	d802      	bhi.n	800514a <HAL_TIM_ConfigClockSource+0x62>
 8005144:	2b00      	cmp	r3, #0
 8005146:	d06f      	beq.n	8005228 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005148:	e078      	b.n	800523c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800514a:	2b20      	cmp	r3, #32
 800514c:	d06c      	beq.n	8005228 <HAL_TIM_ConfigClockSource+0x140>
 800514e:	2b30      	cmp	r3, #48	; 0x30
 8005150:	d06a      	beq.n	8005228 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005152:	e073      	b.n	800523c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005154:	2b70      	cmp	r3, #112	; 0x70
 8005156:	d00d      	beq.n	8005174 <HAL_TIM_ConfigClockSource+0x8c>
 8005158:	2b70      	cmp	r3, #112	; 0x70
 800515a:	d804      	bhi.n	8005166 <HAL_TIM_ConfigClockSource+0x7e>
 800515c:	2b50      	cmp	r3, #80	; 0x50
 800515e:	d033      	beq.n	80051c8 <HAL_TIM_ConfigClockSource+0xe0>
 8005160:	2b60      	cmp	r3, #96	; 0x60
 8005162:	d041      	beq.n	80051e8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005164:	e06a      	b.n	800523c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800516a:	d066      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x152>
 800516c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005170:	d017      	beq.n	80051a2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005172:	e063      	b.n	800523c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6818      	ldr	r0, [r3, #0]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	6899      	ldr	r1, [r3, #8]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f000 faee 	bl	8005764 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005196:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	609a      	str	r2, [r3, #8]
      break;
 80051a0:	e04c      	b.n	800523c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6818      	ldr	r0, [r3, #0]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	6899      	ldr	r1, [r3, #8]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f000 fad7 	bl	8005764 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051c4:	609a      	str	r2, [r3, #8]
      break;
 80051c6:	e039      	b.n	800523c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6818      	ldr	r0, [r3, #0]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	6859      	ldr	r1, [r3, #4]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	461a      	mov	r2, r3
 80051d6:	f000 fa4b 	bl	8005670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2150      	movs	r1, #80	; 0x50
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 faa4 	bl	800572e <TIM_ITRx_SetConfig>
      break;
 80051e6:	e029      	b.n	800523c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6818      	ldr	r0, [r3, #0]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	6859      	ldr	r1, [r3, #4]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	461a      	mov	r2, r3
 80051f6:	f000 fa6a 	bl	80056ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2160      	movs	r1, #96	; 0x60
 8005200:	4618      	mov	r0, r3
 8005202:	f000 fa94 	bl	800572e <TIM_ITRx_SetConfig>
      break;
 8005206:	e019      	b.n	800523c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6818      	ldr	r0, [r3, #0]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	6859      	ldr	r1, [r3, #4]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	461a      	mov	r2, r3
 8005216:	f000 fa2b 	bl	8005670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2140      	movs	r1, #64	; 0x40
 8005220:	4618      	mov	r0, r3
 8005222:	f000 fa84 	bl	800572e <TIM_ITRx_SetConfig>
      break;
 8005226:	e009      	b.n	800523c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4619      	mov	r1, r3
 8005232:	4610      	mov	r0, r2
 8005234:	f000 fa7b 	bl	800572e <TIM_ITRx_SetConfig>
      break;
 8005238:	e000      	b.n	800523c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800523a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a34      	ldr	r2, [pc, #208]	; (800533c <TIM_Base_SetConfig+0xe4>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d00f      	beq.n	8005290 <TIM_Base_SetConfig+0x38>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005276:	d00b      	beq.n	8005290 <TIM_Base_SetConfig+0x38>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a31      	ldr	r2, [pc, #196]	; (8005340 <TIM_Base_SetConfig+0xe8>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d007      	beq.n	8005290 <TIM_Base_SetConfig+0x38>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a30      	ldr	r2, [pc, #192]	; (8005344 <TIM_Base_SetConfig+0xec>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d003      	beq.n	8005290 <TIM_Base_SetConfig+0x38>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a2f      	ldr	r2, [pc, #188]	; (8005348 <TIM_Base_SetConfig+0xf0>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d108      	bne.n	80052a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a25      	ldr	r2, [pc, #148]	; (800533c <TIM_Base_SetConfig+0xe4>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d01b      	beq.n	80052e2 <TIM_Base_SetConfig+0x8a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b0:	d017      	beq.n	80052e2 <TIM_Base_SetConfig+0x8a>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a22      	ldr	r2, [pc, #136]	; (8005340 <TIM_Base_SetConfig+0xe8>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d013      	beq.n	80052e2 <TIM_Base_SetConfig+0x8a>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a21      	ldr	r2, [pc, #132]	; (8005344 <TIM_Base_SetConfig+0xec>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00f      	beq.n	80052e2 <TIM_Base_SetConfig+0x8a>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a20      	ldr	r2, [pc, #128]	; (8005348 <TIM_Base_SetConfig+0xf0>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d00b      	beq.n	80052e2 <TIM_Base_SetConfig+0x8a>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a1f      	ldr	r2, [pc, #124]	; (800534c <TIM_Base_SetConfig+0xf4>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d007      	beq.n	80052e2 <TIM_Base_SetConfig+0x8a>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a1e      	ldr	r2, [pc, #120]	; (8005350 <TIM_Base_SetConfig+0xf8>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d003      	beq.n	80052e2 <TIM_Base_SetConfig+0x8a>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a1d      	ldr	r2, [pc, #116]	; (8005354 <TIM_Base_SetConfig+0xfc>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d108      	bne.n	80052f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a08      	ldr	r2, [pc, #32]	; (800533c <TIM_Base_SetConfig+0xe4>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d103      	bne.n	8005328 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	615a      	str	r2, [r3, #20]
}
 800532e:	bf00      	nop
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	40010000 	.word	0x40010000
 8005340:	40000400 	.word	0x40000400
 8005344:	40000800 	.word	0x40000800
 8005348:	40000c00 	.word	0x40000c00
 800534c:	40014000 	.word	0x40014000
 8005350:	40014400 	.word	0x40014400
 8005354:	40014800 	.word	0x40014800

08005358 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005358:	b480      	push	{r7}
 800535a:	b087      	sub	sp, #28
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	f023 0201 	bic.w	r2, r3, #1
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f023 0303 	bic.w	r3, r3, #3
 800538e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f023 0302 	bic.w	r3, r3, #2
 80053a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a1c      	ldr	r2, [pc, #112]	; (8005420 <TIM_OC1_SetConfig+0xc8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d10c      	bne.n	80053ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f023 0308 	bic.w	r3, r3, #8
 80053ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f023 0304 	bic.w	r3, r3, #4
 80053cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a13      	ldr	r2, [pc, #76]	; (8005420 <TIM_OC1_SetConfig+0xc8>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d111      	bne.n	80053fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	621a      	str	r2, [r3, #32]
}
 8005414:	bf00      	nop
 8005416:	371c      	adds	r7, #28
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	40010000 	.word	0x40010000

08005424 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005424:	b480      	push	{r7}
 8005426:	b087      	sub	sp, #28
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	f023 0210 	bic.w	r2, r3, #16
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800545a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	021b      	lsls	r3, r3, #8
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	4313      	orrs	r3, r2
 8005466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f023 0320 	bic.w	r3, r3, #32
 800546e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	4313      	orrs	r3, r2
 800547a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a1e      	ldr	r2, [pc, #120]	; (80054f8 <TIM_OC2_SetConfig+0xd4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d10d      	bne.n	80054a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800548a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	011b      	lsls	r3, r3, #4
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	4313      	orrs	r3, r2
 8005496:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800549e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a15      	ldr	r2, [pc, #84]	; (80054f8 <TIM_OC2_SetConfig+0xd4>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d113      	bne.n	80054d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	621a      	str	r2, [r3, #32]
}
 80054ea:	bf00      	nop
 80054ec:	371c      	adds	r7, #28
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40010000 	.word	0x40010000

080054fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0303 	bic.w	r3, r3, #3
 8005532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	021b      	lsls	r3, r3, #8
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	4313      	orrs	r3, r2
 8005550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a1d      	ldr	r2, [pc, #116]	; (80055cc <TIM_OC3_SetConfig+0xd0>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d10d      	bne.n	8005576 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005560:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	021b      	lsls	r3, r3, #8
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	4313      	orrs	r3, r2
 800556c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a14      	ldr	r2, [pc, #80]	; (80055cc <TIM_OC3_SetConfig+0xd0>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d113      	bne.n	80055a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800558c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	011b      	lsls	r3, r3, #4
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	4313      	orrs	r3, r2
 8005598:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	011b      	lsls	r3, r3, #4
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	621a      	str	r2, [r3, #32]
}
 80055c0:	bf00      	nop
 80055c2:	371c      	adds	r7, #28
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	40010000 	.word	0x40010000

080055d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	021b      	lsls	r3, r3, #8
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	4313      	orrs	r3, r2
 8005612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800561a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	031b      	lsls	r3, r3, #12
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4313      	orrs	r3, r2
 8005626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a10      	ldr	r2, [pc, #64]	; (800566c <TIM_OC4_SetConfig+0x9c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d109      	bne.n	8005644 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005636:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	019b      	lsls	r3, r3, #6
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	621a      	str	r2, [r3, #32]
}
 800565e:	bf00      	nop
 8005660:	371c      	adds	r7, #28
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	40010000 	.word	0x40010000

08005670 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	f023 0201 	bic.w	r2, r3, #1
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800569a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	011b      	lsls	r3, r3, #4
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f023 030a 	bic.w	r3, r3, #10
 80056ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	621a      	str	r2, [r3, #32]
}
 80056c2:	bf00      	nop
 80056c4:	371c      	adds	r7, #28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b087      	sub	sp, #28
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	60f8      	str	r0, [r7, #12]
 80056d6:	60b9      	str	r1, [r7, #8]
 80056d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	f023 0210 	bic.w	r2, r3, #16
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	031b      	lsls	r3, r3, #12
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	4313      	orrs	r3, r2
 8005702:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800570a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	011b      	lsls	r3, r3, #4
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	4313      	orrs	r3, r2
 8005714:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	621a      	str	r2, [r3, #32]
}
 8005722:	bf00      	nop
 8005724:	371c      	adds	r7, #28
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800572e:	b480      	push	{r7}
 8005730:	b085      	sub	sp, #20
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005744:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4313      	orrs	r3, r2
 800574c:	f043 0307 	orr.w	r3, r3, #7
 8005750:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	609a      	str	r2, [r3, #8]
}
 8005758:	bf00      	nop
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
 8005770:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800577e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	021a      	lsls	r2, r3, #8
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	431a      	orrs	r2, r3
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	4313      	orrs	r3, r2
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	609a      	str	r2, [r3, #8]
}
 8005798:	bf00      	nop
 800579a:	371c      	adds	r7, #28
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f003 031f 	and.w	r3, r3, #31
 80057b6:	2201      	movs	r2, #1
 80057b8:	fa02 f303 	lsl.w	r3, r2, r3
 80057bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6a1a      	ldr	r2, [r3, #32]
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	43db      	mvns	r3, r3
 80057c6:	401a      	ands	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6a1a      	ldr	r2, [r3, #32]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	f003 031f 	and.w	r3, r3, #31
 80057d6:	6879      	ldr	r1, [r7, #4]
 80057d8:	fa01 f303 	lsl.w	r3, r1, r3
 80057dc:	431a      	orrs	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	621a      	str	r2, [r3, #32]
}
 80057e2:	bf00      	nop
 80057e4:	371c      	adds	r7, #28
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
	...

080057f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005804:	2302      	movs	r3, #2
 8005806:	e050      	b.n	80058aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a1c      	ldr	r2, [pc, #112]	; (80058b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d018      	beq.n	800587e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005854:	d013      	beq.n	800587e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a18      	ldr	r2, [pc, #96]	; (80058bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d00e      	beq.n	800587e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a16      	ldr	r2, [pc, #88]	; (80058c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d009      	beq.n	800587e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a15      	ldr	r2, [pc, #84]	; (80058c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d004      	beq.n	800587e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a13      	ldr	r2, [pc, #76]	; (80058c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d10c      	bne.n	8005898 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005884:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	4313      	orrs	r3, r2
 800588e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	40010000 	.word	0x40010000
 80058bc:	40000400 	.word	0x40000400
 80058c0:	40000800 	.word	0x40000800
 80058c4:	40000c00 	.word	0x40000c00
 80058c8:	40014000 	.word	0x40014000

080058cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e03f      	b.n	800595e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d106      	bne.n	80058f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7fd fa3c 	bl	8002d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2224      	movs	r2, #36	; 0x24
 80058fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68da      	ldr	r2, [r3, #12]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800590e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f90b 	bl	8005b2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	691a      	ldr	r2, [r3, #16]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005924:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	695a      	ldr	r2, [r3, #20]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005934:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68da      	ldr	r2, [r3, #12]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005944:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2220      	movs	r2, #32
 8005950:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2220      	movs	r2, #32
 8005958:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b088      	sub	sp, #32
 800596a:	af02      	add	r7, sp, #8
 800596c:	60f8      	str	r0, [r7, #12]
 800596e:	60b9      	str	r1, [r7, #8]
 8005970:	603b      	str	r3, [r7, #0]
 8005972:	4613      	mov	r3, r2
 8005974:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005976:	2300      	movs	r3, #0
 8005978:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b20      	cmp	r3, #32
 8005984:	f040 8083 	bne.w	8005a8e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <HAL_UART_Transmit+0x2e>
 800598e:	88fb      	ldrh	r3, [r7, #6]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e07b      	b.n	8005a90 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d101      	bne.n	80059a6 <HAL_UART_Transmit+0x40>
 80059a2:	2302      	movs	r3, #2
 80059a4:	e074      	b.n	8005a90 <HAL_UART_Transmit+0x12a>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2221      	movs	r2, #33	; 0x21
 80059b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80059bc:	f7fd fab0 	bl	8002f20 <HAL_GetTick>
 80059c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	88fa      	ldrh	r2, [r7, #6]
 80059c6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	88fa      	ldrh	r2, [r7, #6]
 80059cc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80059d6:	e042      	b.n	8005a5e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059dc:	b29b      	uxth	r3, r3
 80059de:	3b01      	subs	r3, #1
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ee:	d122      	bne.n	8005a36 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	2200      	movs	r2, #0
 80059f8:	2180      	movs	r1, #128	; 0x80
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f000 f84c 	bl	8005a98 <UART_WaitOnFlagUntilTimeout>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e042      	b.n	8005a90 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	461a      	mov	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a1c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d103      	bne.n	8005a2e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	3302      	adds	r3, #2
 8005a2a:	60bb      	str	r3, [r7, #8]
 8005a2c:	e017      	b.n	8005a5e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	3301      	adds	r3, #1
 8005a32:	60bb      	str	r3, [r7, #8]
 8005a34:	e013      	b.n	8005a5e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	2180      	movs	r1, #128	; 0x80
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 f829 	bl	8005a98 <UART_WaitOnFlagUntilTimeout>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e01f      	b.n	8005a90 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	60ba      	str	r2, [r7, #8]
 8005a56:	781a      	ldrb	r2, [r3, #0]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1b7      	bne.n	80059d8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	2140      	movs	r1, #64	; 0x40
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 f810 	bl	8005a98 <UART_WaitOnFlagUntilTimeout>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e006      	b.n	8005a90 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2220      	movs	r2, #32
 8005a86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	e000      	b.n	8005a90 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005a8e:	2302      	movs	r3, #2
  }
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	603b      	str	r3, [r7, #0]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aa8:	e02c      	b.n	8005b04 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab0:	d028      	beq.n	8005b04 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d007      	beq.n	8005ac8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ab8:	f7fd fa32 	bl	8002f20 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d21d      	bcs.n	8005b04 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68da      	ldr	r2, [r3, #12]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ad6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	695a      	ldr	r2, [r3, #20]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 0201 	bic.w	r2, r2, #1
 8005ae6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2220      	movs	r2, #32
 8005aec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2220      	movs	r2, #32
 8005af4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e00f      	b.n	8005b24 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	bf0c      	ite	eq
 8005b14:	2301      	moveq	r3, #1
 8005b16:	2300      	movne	r3, #0
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	79fb      	ldrb	r3, [r7, #7]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d0c3      	beq.n	8005aaa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b30:	b085      	sub	sp, #20
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68da      	ldr	r2, [r3, #12]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689a      	ldr	r2, [r3, #8]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	431a      	orrs	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005b6e:	f023 030c 	bic.w	r3, r3, #12
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6812      	ldr	r2, [r2, #0]
 8005b76:	68f9      	ldr	r1, [r7, #12]
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	699a      	ldr	r2, [r3, #24]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b9a:	f040 818b 	bne.w	8005eb4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4ac1      	ldr	r2, [pc, #772]	; (8005ea8 <UART_SetConfig+0x37c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d005      	beq.n	8005bb4 <UART_SetConfig+0x88>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4abf      	ldr	r2, [pc, #764]	; (8005eac <UART_SetConfig+0x380>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	f040 80bd 	bne.w	8005d2e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bb4:	f7ff f862 	bl	8004c7c <HAL_RCC_GetPCLK2Freq>
 8005bb8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	461d      	mov	r5, r3
 8005bbe:	f04f 0600 	mov.w	r6, #0
 8005bc2:	46a8      	mov	r8, r5
 8005bc4:	46b1      	mov	r9, r6
 8005bc6:	eb18 0308 	adds.w	r3, r8, r8
 8005bca:	eb49 0409 	adc.w	r4, r9, r9
 8005bce:	4698      	mov	r8, r3
 8005bd0:	46a1      	mov	r9, r4
 8005bd2:	eb18 0805 	adds.w	r8, r8, r5
 8005bd6:	eb49 0906 	adc.w	r9, r9, r6
 8005bda:	f04f 0100 	mov.w	r1, #0
 8005bde:	f04f 0200 	mov.w	r2, #0
 8005be2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005be6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005bea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005bee:	4688      	mov	r8, r1
 8005bf0:	4691      	mov	r9, r2
 8005bf2:	eb18 0005 	adds.w	r0, r8, r5
 8005bf6:	eb49 0106 	adc.w	r1, r9, r6
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	461d      	mov	r5, r3
 8005c00:	f04f 0600 	mov.w	r6, #0
 8005c04:	196b      	adds	r3, r5, r5
 8005c06:	eb46 0406 	adc.w	r4, r6, r6
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	4623      	mov	r3, r4
 8005c0e:	f7fa fd77 	bl	8000700 <__aeabi_uldivmod>
 8005c12:	4603      	mov	r3, r0
 8005c14:	460c      	mov	r4, r1
 8005c16:	461a      	mov	r2, r3
 8005c18:	4ba5      	ldr	r3, [pc, #660]	; (8005eb0 <UART_SetConfig+0x384>)
 8005c1a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c1e:	095b      	lsrs	r3, r3, #5
 8005c20:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	461d      	mov	r5, r3
 8005c28:	f04f 0600 	mov.w	r6, #0
 8005c2c:	46a9      	mov	r9, r5
 8005c2e:	46b2      	mov	sl, r6
 8005c30:	eb19 0309 	adds.w	r3, r9, r9
 8005c34:	eb4a 040a 	adc.w	r4, sl, sl
 8005c38:	4699      	mov	r9, r3
 8005c3a:	46a2      	mov	sl, r4
 8005c3c:	eb19 0905 	adds.w	r9, r9, r5
 8005c40:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c44:	f04f 0100 	mov.w	r1, #0
 8005c48:	f04f 0200 	mov.w	r2, #0
 8005c4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c58:	4689      	mov	r9, r1
 8005c5a:	4692      	mov	sl, r2
 8005c5c:	eb19 0005 	adds.w	r0, r9, r5
 8005c60:	eb4a 0106 	adc.w	r1, sl, r6
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	461d      	mov	r5, r3
 8005c6a:	f04f 0600 	mov.w	r6, #0
 8005c6e:	196b      	adds	r3, r5, r5
 8005c70:	eb46 0406 	adc.w	r4, r6, r6
 8005c74:	461a      	mov	r2, r3
 8005c76:	4623      	mov	r3, r4
 8005c78:	f7fa fd42 	bl	8000700 <__aeabi_uldivmod>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	460c      	mov	r4, r1
 8005c80:	461a      	mov	r2, r3
 8005c82:	4b8b      	ldr	r3, [pc, #556]	; (8005eb0 <UART_SetConfig+0x384>)
 8005c84:	fba3 1302 	umull	r1, r3, r3, r2
 8005c88:	095b      	lsrs	r3, r3, #5
 8005c8a:	2164      	movs	r1, #100	; 0x64
 8005c8c:	fb01 f303 	mul.w	r3, r1, r3
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	3332      	adds	r3, #50	; 0x32
 8005c96:	4a86      	ldr	r2, [pc, #536]	; (8005eb0 <UART_SetConfig+0x384>)
 8005c98:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9c:	095b      	lsrs	r3, r3, #5
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ca4:	4498      	add	r8, r3
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	461d      	mov	r5, r3
 8005caa:	f04f 0600 	mov.w	r6, #0
 8005cae:	46a9      	mov	r9, r5
 8005cb0:	46b2      	mov	sl, r6
 8005cb2:	eb19 0309 	adds.w	r3, r9, r9
 8005cb6:	eb4a 040a 	adc.w	r4, sl, sl
 8005cba:	4699      	mov	r9, r3
 8005cbc:	46a2      	mov	sl, r4
 8005cbe:	eb19 0905 	adds.w	r9, r9, r5
 8005cc2:	eb4a 0a06 	adc.w	sl, sl, r6
 8005cc6:	f04f 0100 	mov.w	r1, #0
 8005cca:	f04f 0200 	mov.w	r2, #0
 8005cce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cd2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005cd6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cda:	4689      	mov	r9, r1
 8005cdc:	4692      	mov	sl, r2
 8005cde:	eb19 0005 	adds.w	r0, r9, r5
 8005ce2:	eb4a 0106 	adc.w	r1, sl, r6
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	461d      	mov	r5, r3
 8005cec:	f04f 0600 	mov.w	r6, #0
 8005cf0:	196b      	adds	r3, r5, r5
 8005cf2:	eb46 0406 	adc.w	r4, r6, r6
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	4623      	mov	r3, r4
 8005cfa:	f7fa fd01 	bl	8000700 <__aeabi_uldivmod>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	460c      	mov	r4, r1
 8005d02:	461a      	mov	r2, r3
 8005d04:	4b6a      	ldr	r3, [pc, #424]	; (8005eb0 <UART_SetConfig+0x384>)
 8005d06:	fba3 1302 	umull	r1, r3, r3, r2
 8005d0a:	095b      	lsrs	r3, r3, #5
 8005d0c:	2164      	movs	r1, #100	; 0x64
 8005d0e:	fb01 f303 	mul.w	r3, r1, r3
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	3332      	adds	r3, #50	; 0x32
 8005d18:	4a65      	ldr	r2, [pc, #404]	; (8005eb0 <UART_SetConfig+0x384>)
 8005d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1e:	095b      	lsrs	r3, r3, #5
 8005d20:	f003 0207 	and.w	r2, r3, #7
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4442      	add	r2, r8
 8005d2a:	609a      	str	r2, [r3, #8]
 8005d2c:	e26f      	b.n	800620e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d2e:	f7fe ff91 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
 8005d32:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	461d      	mov	r5, r3
 8005d38:	f04f 0600 	mov.w	r6, #0
 8005d3c:	46a8      	mov	r8, r5
 8005d3e:	46b1      	mov	r9, r6
 8005d40:	eb18 0308 	adds.w	r3, r8, r8
 8005d44:	eb49 0409 	adc.w	r4, r9, r9
 8005d48:	4698      	mov	r8, r3
 8005d4a:	46a1      	mov	r9, r4
 8005d4c:	eb18 0805 	adds.w	r8, r8, r5
 8005d50:	eb49 0906 	adc.w	r9, r9, r6
 8005d54:	f04f 0100 	mov.w	r1, #0
 8005d58:	f04f 0200 	mov.w	r2, #0
 8005d5c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d60:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d64:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d68:	4688      	mov	r8, r1
 8005d6a:	4691      	mov	r9, r2
 8005d6c:	eb18 0005 	adds.w	r0, r8, r5
 8005d70:	eb49 0106 	adc.w	r1, r9, r6
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	461d      	mov	r5, r3
 8005d7a:	f04f 0600 	mov.w	r6, #0
 8005d7e:	196b      	adds	r3, r5, r5
 8005d80:	eb46 0406 	adc.w	r4, r6, r6
 8005d84:	461a      	mov	r2, r3
 8005d86:	4623      	mov	r3, r4
 8005d88:	f7fa fcba 	bl	8000700 <__aeabi_uldivmod>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	460c      	mov	r4, r1
 8005d90:	461a      	mov	r2, r3
 8005d92:	4b47      	ldr	r3, [pc, #284]	; (8005eb0 <UART_SetConfig+0x384>)
 8005d94:	fba3 2302 	umull	r2, r3, r3, r2
 8005d98:	095b      	lsrs	r3, r3, #5
 8005d9a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	461d      	mov	r5, r3
 8005da2:	f04f 0600 	mov.w	r6, #0
 8005da6:	46a9      	mov	r9, r5
 8005da8:	46b2      	mov	sl, r6
 8005daa:	eb19 0309 	adds.w	r3, r9, r9
 8005dae:	eb4a 040a 	adc.w	r4, sl, sl
 8005db2:	4699      	mov	r9, r3
 8005db4:	46a2      	mov	sl, r4
 8005db6:	eb19 0905 	adds.w	r9, r9, r5
 8005dba:	eb4a 0a06 	adc.w	sl, sl, r6
 8005dbe:	f04f 0100 	mov.w	r1, #0
 8005dc2:	f04f 0200 	mov.w	r2, #0
 8005dc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005dce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005dd2:	4689      	mov	r9, r1
 8005dd4:	4692      	mov	sl, r2
 8005dd6:	eb19 0005 	adds.w	r0, r9, r5
 8005dda:	eb4a 0106 	adc.w	r1, sl, r6
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	461d      	mov	r5, r3
 8005de4:	f04f 0600 	mov.w	r6, #0
 8005de8:	196b      	adds	r3, r5, r5
 8005dea:	eb46 0406 	adc.w	r4, r6, r6
 8005dee:	461a      	mov	r2, r3
 8005df0:	4623      	mov	r3, r4
 8005df2:	f7fa fc85 	bl	8000700 <__aeabi_uldivmod>
 8005df6:	4603      	mov	r3, r0
 8005df8:	460c      	mov	r4, r1
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	4b2c      	ldr	r3, [pc, #176]	; (8005eb0 <UART_SetConfig+0x384>)
 8005dfe:	fba3 1302 	umull	r1, r3, r3, r2
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	2164      	movs	r1, #100	; 0x64
 8005e06:	fb01 f303 	mul.w	r3, r1, r3
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	3332      	adds	r3, #50	; 0x32
 8005e10:	4a27      	ldr	r2, [pc, #156]	; (8005eb0 <UART_SetConfig+0x384>)
 8005e12:	fba2 2303 	umull	r2, r3, r2, r3
 8005e16:	095b      	lsrs	r3, r3, #5
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e1e:	4498      	add	r8, r3
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	461d      	mov	r5, r3
 8005e24:	f04f 0600 	mov.w	r6, #0
 8005e28:	46a9      	mov	r9, r5
 8005e2a:	46b2      	mov	sl, r6
 8005e2c:	eb19 0309 	adds.w	r3, r9, r9
 8005e30:	eb4a 040a 	adc.w	r4, sl, sl
 8005e34:	4699      	mov	r9, r3
 8005e36:	46a2      	mov	sl, r4
 8005e38:	eb19 0905 	adds.w	r9, r9, r5
 8005e3c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e40:	f04f 0100 	mov.w	r1, #0
 8005e44:	f04f 0200 	mov.w	r2, #0
 8005e48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e4c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e50:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e54:	4689      	mov	r9, r1
 8005e56:	4692      	mov	sl, r2
 8005e58:	eb19 0005 	adds.w	r0, r9, r5
 8005e5c:	eb4a 0106 	adc.w	r1, sl, r6
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	461d      	mov	r5, r3
 8005e66:	f04f 0600 	mov.w	r6, #0
 8005e6a:	196b      	adds	r3, r5, r5
 8005e6c:	eb46 0406 	adc.w	r4, r6, r6
 8005e70:	461a      	mov	r2, r3
 8005e72:	4623      	mov	r3, r4
 8005e74:	f7fa fc44 	bl	8000700 <__aeabi_uldivmod>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	460c      	mov	r4, r1
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	4b0c      	ldr	r3, [pc, #48]	; (8005eb0 <UART_SetConfig+0x384>)
 8005e80:	fba3 1302 	umull	r1, r3, r3, r2
 8005e84:	095b      	lsrs	r3, r3, #5
 8005e86:	2164      	movs	r1, #100	; 0x64
 8005e88:	fb01 f303 	mul.w	r3, r1, r3
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	00db      	lsls	r3, r3, #3
 8005e90:	3332      	adds	r3, #50	; 0x32
 8005e92:	4a07      	ldr	r2, [pc, #28]	; (8005eb0 <UART_SetConfig+0x384>)
 8005e94:	fba2 2303 	umull	r2, r3, r2, r3
 8005e98:	095b      	lsrs	r3, r3, #5
 8005e9a:	f003 0207 	and.w	r2, r3, #7
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4442      	add	r2, r8
 8005ea4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005ea6:	e1b2      	b.n	800620e <UART_SetConfig+0x6e2>
 8005ea8:	40011000 	.word	0x40011000
 8005eac:	40011400 	.word	0x40011400
 8005eb0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4ad7      	ldr	r2, [pc, #860]	; (8006218 <UART_SetConfig+0x6ec>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d005      	beq.n	8005eca <UART_SetConfig+0x39e>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4ad6      	ldr	r2, [pc, #856]	; (800621c <UART_SetConfig+0x6f0>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	f040 80d1 	bne.w	800606c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005eca:	f7fe fed7 	bl	8004c7c <HAL_RCC_GetPCLK2Freq>
 8005ece:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	469a      	mov	sl, r3
 8005ed4:	f04f 0b00 	mov.w	fp, #0
 8005ed8:	46d0      	mov	r8, sl
 8005eda:	46d9      	mov	r9, fp
 8005edc:	eb18 0308 	adds.w	r3, r8, r8
 8005ee0:	eb49 0409 	adc.w	r4, r9, r9
 8005ee4:	4698      	mov	r8, r3
 8005ee6:	46a1      	mov	r9, r4
 8005ee8:	eb18 080a 	adds.w	r8, r8, sl
 8005eec:	eb49 090b 	adc.w	r9, r9, fp
 8005ef0:	f04f 0100 	mov.w	r1, #0
 8005ef4:	f04f 0200 	mov.w	r2, #0
 8005ef8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005efc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f00:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f04:	4688      	mov	r8, r1
 8005f06:	4691      	mov	r9, r2
 8005f08:	eb1a 0508 	adds.w	r5, sl, r8
 8005f0c:	eb4b 0609 	adc.w	r6, fp, r9
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	4619      	mov	r1, r3
 8005f16:	f04f 0200 	mov.w	r2, #0
 8005f1a:	f04f 0300 	mov.w	r3, #0
 8005f1e:	f04f 0400 	mov.w	r4, #0
 8005f22:	0094      	lsls	r4, r2, #2
 8005f24:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f28:	008b      	lsls	r3, r1, #2
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	4623      	mov	r3, r4
 8005f2e:	4628      	mov	r0, r5
 8005f30:	4631      	mov	r1, r6
 8005f32:	f7fa fbe5 	bl	8000700 <__aeabi_uldivmod>
 8005f36:	4603      	mov	r3, r0
 8005f38:	460c      	mov	r4, r1
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	4bb8      	ldr	r3, [pc, #736]	; (8006220 <UART_SetConfig+0x6f4>)
 8005f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f42:	095b      	lsrs	r3, r3, #5
 8005f44:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	469b      	mov	fp, r3
 8005f4c:	f04f 0c00 	mov.w	ip, #0
 8005f50:	46d9      	mov	r9, fp
 8005f52:	46e2      	mov	sl, ip
 8005f54:	eb19 0309 	adds.w	r3, r9, r9
 8005f58:	eb4a 040a 	adc.w	r4, sl, sl
 8005f5c:	4699      	mov	r9, r3
 8005f5e:	46a2      	mov	sl, r4
 8005f60:	eb19 090b 	adds.w	r9, r9, fp
 8005f64:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f68:	f04f 0100 	mov.w	r1, #0
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f7c:	4689      	mov	r9, r1
 8005f7e:	4692      	mov	sl, r2
 8005f80:	eb1b 0509 	adds.w	r5, fp, r9
 8005f84:	eb4c 060a 	adc.w	r6, ip, sl
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	f04f 0200 	mov.w	r2, #0
 8005f92:	f04f 0300 	mov.w	r3, #0
 8005f96:	f04f 0400 	mov.w	r4, #0
 8005f9a:	0094      	lsls	r4, r2, #2
 8005f9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005fa0:	008b      	lsls	r3, r1, #2
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	4623      	mov	r3, r4
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	4631      	mov	r1, r6
 8005faa:	f7fa fba9 	bl	8000700 <__aeabi_uldivmod>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	460c      	mov	r4, r1
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	4b9a      	ldr	r3, [pc, #616]	; (8006220 <UART_SetConfig+0x6f4>)
 8005fb6:	fba3 1302 	umull	r1, r3, r3, r2
 8005fba:	095b      	lsrs	r3, r3, #5
 8005fbc:	2164      	movs	r1, #100	; 0x64
 8005fbe:	fb01 f303 	mul.w	r3, r1, r3
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	011b      	lsls	r3, r3, #4
 8005fc6:	3332      	adds	r3, #50	; 0x32
 8005fc8:	4a95      	ldr	r2, [pc, #596]	; (8006220 <UART_SetConfig+0x6f4>)
 8005fca:	fba2 2303 	umull	r2, r3, r2, r3
 8005fce:	095b      	lsrs	r3, r3, #5
 8005fd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fd4:	4498      	add	r8, r3
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	469b      	mov	fp, r3
 8005fda:	f04f 0c00 	mov.w	ip, #0
 8005fde:	46d9      	mov	r9, fp
 8005fe0:	46e2      	mov	sl, ip
 8005fe2:	eb19 0309 	adds.w	r3, r9, r9
 8005fe6:	eb4a 040a 	adc.w	r4, sl, sl
 8005fea:	4699      	mov	r9, r3
 8005fec:	46a2      	mov	sl, r4
 8005fee:	eb19 090b 	adds.w	r9, r9, fp
 8005ff2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ff6:	f04f 0100 	mov.w	r1, #0
 8005ffa:	f04f 0200 	mov.w	r2, #0
 8005ffe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006002:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006006:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800600a:	4689      	mov	r9, r1
 800600c:	4692      	mov	sl, r2
 800600e:	eb1b 0509 	adds.w	r5, fp, r9
 8006012:	eb4c 060a 	adc.w	r6, ip, sl
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	4619      	mov	r1, r3
 800601c:	f04f 0200 	mov.w	r2, #0
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	f04f 0400 	mov.w	r4, #0
 8006028:	0094      	lsls	r4, r2, #2
 800602a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800602e:	008b      	lsls	r3, r1, #2
 8006030:	461a      	mov	r2, r3
 8006032:	4623      	mov	r3, r4
 8006034:	4628      	mov	r0, r5
 8006036:	4631      	mov	r1, r6
 8006038:	f7fa fb62 	bl	8000700 <__aeabi_uldivmod>
 800603c:	4603      	mov	r3, r0
 800603e:	460c      	mov	r4, r1
 8006040:	461a      	mov	r2, r3
 8006042:	4b77      	ldr	r3, [pc, #476]	; (8006220 <UART_SetConfig+0x6f4>)
 8006044:	fba3 1302 	umull	r1, r3, r3, r2
 8006048:	095b      	lsrs	r3, r3, #5
 800604a:	2164      	movs	r1, #100	; 0x64
 800604c:	fb01 f303 	mul.w	r3, r1, r3
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	011b      	lsls	r3, r3, #4
 8006054:	3332      	adds	r3, #50	; 0x32
 8006056:	4a72      	ldr	r2, [pc, #456]	; (8006220 <UART_SetConfig+0x6f4>)
 8006058:	fba2 2303 	umull	r2, r3, r2, r3
 800605c:	095b      	lsrs	r3, r3, #5
 800605e:	f003 020f 	and.w	r2, r3, #15
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4442      	add	r2, r8
 8006068:	609a      	str	r2, [r3, #8]
 800606a:	e0d0      	b.n	800620e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800606c:	f7fe fdf2 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
 8006070:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	469a      	mov	sl, r3
 8006076:	f04f 0b00 	mov.w	fp, #0
 800607a:	46d0      	mov	r8, sl
 800607c:	46d9      	mov	r9, fp
 800607e:	eb18 0308 	adds.w	r3, r8, r8
 8006082:	eb49 0409 	adc.w	r4, r9, r9
 8006086:	4698      	mov	r8, r3
 8006088:	46a1      	mov	r9, r4
 800608a:	eb18 080a 	adds.w	r8, r8, sl
 800608e:	eb49 090b 	adc.w	r9, r9, fp
 8006092:	f04f 0100 	mov.w	r1, #0
 8006096:	f04f 0200 	mov.w	r2, #0
 800609a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800609e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80060a6:	4688      	mov	r8, r1
 80060a8:	4691      	mov	r9, r2
 80060aa:	eb1a 0508 	adds.w	r5, sl, r8
 80060ae:	eb4b 0609 	adc.w	r6, fp, r9
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	4619      	mov	r1, r3
 80060b8:	f04f 0200 	mov.w	r2, #0
 80060bc:	f04f 0300 	mov.w	r3, #0
 80060c0:	f04f 0400 	mov.w	r4, #0
 80060c4:	0094      	lsls	r4, r2, #2
 80060c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060ca:	008b      	lsls	r3, r1, #2
 80060cc:	461a      	mov	r2, r3
 80060ce:	4623      	mov	r3, r4
 80060d0:	4628      	mov	r0, r5
 80060d2:	4631      	mov	r1, r6
 80060d4:	f7fa fb14 	bl	8000700 <__aeabi_uldivmod>
 80060d8:	4603      	mov	r3, r0
 80060da:	460c      	mov	r4, r1
 80060dc:	461a      	mov	r2, r3
 80060de:	4b50      	ldr	r3, [pc, #320]	; (8006220 <UART_SetConfig+0x6f4>)
 80060e0:	fba3 2302 	umull	r2, r3, r3, r2
 80060e4:	095b      	lsrs	r3, r3, #5
 80060e6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	469b      	mov	fp, r3
 80060ee:	f04f 0c00 	mov.w	ip, #0
 80060f2:	46d9      	mov	r9, fp
 80060f4:	46e2      	mov	sl, ip
 80060f6:	eb19 0309 	adds.w	r3, r9, r9
 80060fa:	eb4a 040a 	adc.w	r4, sl, sl
 80060fe:	4699      	mov	r9, r3
 8006100:	46a2      	mov	sl, r4
 8006102:	eb19 090b 	adds.w	r9, r9, fp
 8006106:	eb4a 0a0c 	adc.w	sl, sl, ip
 800610a:	f04f 0100 	mov.w	r1, #0
 800610e:	f04f 0200 	mov.w	r2, #0
 8006112:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006116:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800611a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800611e:	4689      	mov	r9, r1
 8006120:	4692      	mov	sl, r2
 8006122:	eb1b 0509 	adds.w	r5, fp, r9
 8006126:	eb4c 060a 	adc.w	r6, ip, sl
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	4619      	mov	r1, r3
 8006130:	f04f 0200 	mov.w	r2, #0
 8006134:	f04f 0300 	mov.w	r3, #0
 8006138:	f04f 0400 	mov.w	r4, #0
 800613c:	0094      	lsls	r4, r2, #2
 800613e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006142:	008b      	lsls	r3, r1, #2
 8006144:	461a      	mov	r2, r3
 8006146:	4623      	mov	r3, r4
 8006148:	4628      	mov	r0, r5
 800614a:	4631      	mov	r1, r6
 800614c:	f7fa fad8 	bl	8000700 <__aeabi_uldivmod>
 8006150:	4603      	mov	r3, r0
 8006152:	460c      	mov	r4, r1
 8006154:	461a      	mov	r2, r3
 8006156:	4b32      	ldr	r3, [pc, #200]	; (8006220 <UART_SetConfig+0x6f4>)
 8006158:	fba3 1302 	umull	r1, r3, r3, r2
 800615c:	095b      	lsrs	r3, r3, #5
 800615e:	2164      	movs	r1, #100	; 0x64
 8006160:	fb01 f303 	mul.w	r3, r1, r3
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	011b      	lsls	r3, r3, #4
 8006168:	3332      	adds	r3, #50	; 0x32
 800616a:	4a2d      	ldr	r2, [pc, #180]	; (8006220 <UART_SetConfig+0x6f4>)
 800616c:	fba2 2303 	umull	r2, r3, r2, r3
 8006170:	095b      	lsrs	r3, r3, #5
 8006172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006176:	4498      	add	r8, r3
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	469b      	mov	fp, r3
 800617c:	f04f 0c00 	mov.w	ip, #0
 8006180:	46d9      	mov	r9, fp
 8006182:	46e2      	mov	sl, ip
 8006184:	eb19 0309 	adds.w	r3, r9, r9
 8006188:	eb4a 040a 	adc.w	r4, sl, sl
 800618c:	4699      	mov	r9, r3
 800618e:	46a2      	mov	sl, r4
 8006190:	eb19 090b 	adds.w	r9, r9, fp
 8006194:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006198:	f04f 0100 	mov.w	r1, #0
 800619c:	f04f 0200 	mov.w	r2, #0
 80061a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061ac:	4689      	mov	r9, r1
 80061ae:	4692      	mov	sl, r2
 80061b0:	eb1b 0509 	adds.w	r5, fp, r9
 80061b4:	eb4c 060a 	adc.w	r6, ip, sl
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	4619      	mov	r1, r3
 80061be:	f04f 0200 	mov.w	r2, #0
 80061c2:	f04f 0300 	mov.w	r3, #0
 80061c6:	f04f 0400 	mov.w	r4, #0
 80061ca:	0094      	lsls	r4, r2, #2
 80061cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061d0:	008b      	lsls	r3, r1, #2
 80061d2:	461a      	mov	r2, r3
 80061d4:	4623      	mov	r3, r4
 80061d6:	4628      	mov	r0, r5
 80061d8:	4631      	mov	r1, r6
 80061da:	f7fa fa91 	bl	8000700 <__aeabi_uldivmod>
 80061de:	4603      	mov	r3, r0
 80061e0:	460c      	mov	r4, r1
 80061e2:	461a      	mov	r2, r3
 80061e4:	4b0e      	ldr	r3, [pc, #56]	; (8006220 <UART_SetConfig+0x6f4>)
 80061e6:	fba3 1302 	umull	r1, r3, r3, r2
 80061ea:	095b      	lsrs	r3, r3, #5
 80061ec:	2164      	movs	r1, #100	; 0x64
 80061ee:	fb01 f303 	mul.w	r3, r1, r3
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	011b      	lsls	r3, r3, #4
 80061f6:	3332      	adds	r3, #50	; 0x32
 80061f8:	4a09      	ldr	r2, [pc, #36]	; (8006220 <UART_SetConfig+0x6f4>)
 80061fa:	fba2 2303 	umull	r2, r3, r2, r3
 80061fe:	095b      	lsrs	r3, r3, #5
 8006200:	f003 020f 	and.w	r2, r3, #15
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4442      	add	r2, r8
 800620a:	609a      	str	r2, [r3, #8]
}
 800620c:	e7ff      	b.n	800620e <UART_SetConfig+0x6e2>
 800620e:	bf00      	nop
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006218:	40011000 	.word	0x40011000
 800621c:	40011400 	.word	0x40011400
 8006220:	51eb851f 	.word	0x51eb851f

08006224 <__errno>:
 8006224:	4b01      	ldr	r3, [pc, #4]	; (800622c <__errno+0x8>)
 8006226:	6818      	ldr	r0, [r3, #0]
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	2000000c 	.word	0x2000000c

08006230 <__libc_init_array>:
 8006230:	b570      	push	{r4, r5, r6, lr}
 8006232:	4e0d      	ldr	r6, [pc, #52]	; (8006268 <__libc_init_array+0x38>)
 8006234:	4c0d      	ldr	r4, [pc, #52]	; (800626c <__libc_init_array+0x3c>)
 8006236:	1ba4      	subs	r4, r4, r6
 8006238:	10a4      	asrs	r4, r4, #2
 800623a:	2500      	movs	r5, #0
 800623c:	42a5      	cmp	r5, r4
 800623e:	d109      	bne.n	8006254 <__libc_init_array+0x24>
 8006240:	4e0b      	ldr	r6, [pc, #44]	; (8006270 <__libc_init_array+0x40>)
 8006242:	4c0c      	ldr	r4, [pc, #48]	; (8006274 <__libc_init_array+0x44>)
 8006244:	f000 fc88 	bl	8006b58 <_init>
 8006248:	1ba4      	subs	r4, r4, r6
 800624a:	10a4      	asrs	r4, r4, #2
 800624c:	2500      	movs	r5, #0
 800624e:	42a5      	cmp	r5, r4
 8006250:	d105      	bne.n	800625e <__libc_init_array+0x2e>
 8006252:	bd70      	pop	{r4, r5, r6, pc}
 8006254:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006258:	4798      	blx	r3
 800625a:	3501      	adds	r5, #1
 800625c:	e7ee      	b.n	800623c <__libc_init_array+0xc>
 800625e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006262:	4798      	blx	r3
 8006264:	3501      	adds	r5, #1
 8006266:	e7f2      	b.n	800624e <__libc_init_array+0x1e>
 8006268:	08006c00 	.word	0x08006c00
 800626c:	08006c00 	.word	0x08006c00
 8006270:	08006c00 	.word	0x08006c00
 8006274:	08006c04 	.word	0x08006c04

08006278 <memset>:
 8006278:	4402      	add	r2, r0
 800627a:	4603      	mov	r3, r0
 800627c:	4293      	cmp	r3, r2
 800627e:	d100      	bne.n	8006282 <memset+0xa>
 8006280:	4770      	bx	lr
 8006282:	f803 1b01 	strb.w	r1, [r3], #1
 8006286:	e7f9      	b.n	800627c <memset+0x4>

08006288 <_puts_r>:
 8006288:	b570      	push	{r4, r5, r6, lr}
 800628a:	460e      	mov	r6, r1
 800628c:	4605      	mov	r5, r0
 800628e:	b118      	cbz	r0, 8006298 <_puts_r+0x10>
 8006290:	6983      	ldr	r3, [r0, #24]
 8006292:	b90b      	cbnz	r3, 8006298 <_puts_r+0x10>
 8006294:	f000 fa0c 	bl	80066b0 <__sinit>
 8006298:	69ab      	ldr	r3, [r5, #24]
 800629a:	68ac      	ldr	r4, [r5, #8]
 800629c:	b913      	cbnz	r3, 80062a4 <_puts_r+0x1c>
 800629e:	4628      	mov	r0, r5
 80062a0:	f000 fa06 	bl	80066b0 <__sinit>
 80062a4:	4b23      	ldr	r3, [pc, #140]	; (8006334 <_puts_r+0xac>)
 80062a6:	429c      	cmp	r4, r3
 80062a8:	d117      	bne.n	80062da <_puts_r+0x52>
 80062aa:	686c      	ldr	r4, [r5, #4]
 80062ac:	89a3      	ldrh	r3, [r4, #12]
 80062ae:	071b      	lsls	r3, r3, #28
 80062b0:	d51d      	bpl.n	80062ee <_puts_r+0x66>
 80062b2:	6923      	ldr	r3, [r4, #16]
 80062b4:	b1db      	cbz	r3, 80062ee <_puts_r+0x66>
 80062b6:	3e01      	subs	r6, #1
 80062b8:	68a3      	ldr	r3, [r4, #8]
 80062ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80062be:	3b01      	subs	r3, #1
 80062c0:	60a3      	str	r3, [r4, #8]
 80062c2:	b9e9      	cbnz	r1, 8006300 <_puts_r+0x78>
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	da2e      	bge.n	8006326 <_puts_r+0x9e>
 80062c8:	4622      	mov	r2, r4
 80062ca:	210a      	movs	r1, #10
 80062cc:	4628      	mov	r0, r5
 80062ce:	f000 f83f 	bl	8006350 <__swbuf_r>
 80062d2:	3001      	adds	r0, #1
 80062d4:	d011      	beq.n	80062fa <_puts_r+0x72>
 80062d6:	200a      	movs	r0, #10
 80062d8:	e011      	b.n	80062fe <_puts_r+0x76>
 80062da:	4b17      	ldr	r3, [pc, #92]	; (8006338 <_puts_r+0xb0>)
 80062dc:	429c      	cmp	r4, r3
 80062de:	d101      	bne.n	80062e4 <_puts_r+0x5c>
 80062e0:	68ac      	ldr	r4, [r5, #8]
 80062e2:	e7e3      	b.n	80062ac <_puts_r+0x24>
 80062e4:	4b15      	ldr	r3, [pc, #84]	; (800633c <_puts_r+0xb4>)
 80062e6:	429c      	cmp	r4, r3
 80062e8:	bf08      	it	eq
 80062ea:	68ec      	ldreq	r4, [r5, #12]
 80062ec:	e7de      	b.n	80062ac <_puts_r+0x24>
 80062ee:	4621      	mov	r1, r4
 80062f0:	4628      	mov	r0, r5
 80062f2:	f000 f87f 	bl	80063f4 <__swsetup_r>
 80062f6:	2800      	cmp	r0, #0
 80062f8:	d0dd      	beq.n	80062b6 <_puts_r+0x2e>
 80062fa:	f04f 30ff 	mov.w	r0, #4294967295
 80062fe:	bd70      	pop	{r4, r5, r6, pc}
 8006300:	2b00      	cmp	r3, #0
 8006302:	da04      	bge.n	800630e <_puts_r+0x86>
 8006304:	69a2      	ldr	r2, [r4, #24]
 8006306:	429a      	cmp	r2, r3
 8006308:	dc06      	bgt.n	8006318 <_puts_r+0x90>
 800630a:	290a      	cmp	r1, #10
 800630c:	d004      	beq.n	8006318 <_puts_r+0x90>
 800630e:	6823      	ldr	r3, [r4, #0]
 8006310:	1c5a      	adds	r2, r3, #1
 8006312:	6022      	str	r2, [r4, #0]
 8006314:	7019      	strb	r1, [r3, #0]
 8006316:	e7cf      	b.n	80062b8 <_puts_r+0x30>
 8006318:	4622      	mov	r2, r4
 800631a:	4628      	mov	r0, r5
 800631c:	f000 f818 	bl	8006350 <__swbuf_r>
 8006320:	3001      	adds	r0, #1
 8006322:	d1c9      	bne.n	80062b8 <_puts_r+0x30>
 8006324:	e7e9      	b.n	80062fa <_puts_r+0x72>
 8006326:	6823      	ldr	r3, [r4, #0]
 8006328:	200a      	movs	r0, #10
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	6022      	str	r2, [r4, #0]
 800632e:	7018      	strb	r0, [r3, #0]
 8006330:	e7e5      	b.n	80062fe <_puts_r+0x76>
 8006332:	bf00      	nop
 8006334:	08006bb8 	.word	0x08006bb8
 8006338:	08006bd8 	.word	0x08006bd8
 800633c:	08006b98 	.word	0x08006b98

08006340 <puts>:
 8006340:	4b02      	ldr	r3, [pc, #8]	; (800634c <puts+0xc>)
 8006342:	4601      	mov	r1, r0
 8006344:	6818      	ldr	r0, [r3, #0]
 8006346:	f7ff bf9f 	b.w	8006288 <_puts_r>
 800634a:	bf00      	nop
 800634c:	2000000c 	.word	0x2000000c

08006350 <__swbuf_r>:
 8006350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006352:	460e      	mov	r6, r1
 8006354:	4614      	mov	r4, r2
 8006356:	4605      	mov	r5, r0
 8006358:	b118      	cbz	r0, 8006362 <__swbuf_r+0x12>
 800635a:	6983      	ldr	r3, [r0, #24]
 800635c:	b90b      	cbnz	r3, 8006362 <__swbuf_r+0x12>
 800635e:	f000 f9a7 	bl	80066b0 <__sinit>
 8006362:	4b21      	ldr	r3, [pc, #132]	; (80063e8 <__swbuf_r+0x98>)
 8006364:	429c      	cmp	r4, r3
 8006366:	d12a      	bne.n	80063be <__swbuf_r+0x6e>
 8006368:	686c      	ldr	r4, [r5, #4]
 800636a:	69a3      	ldr	r3, [r4, #24]
 800636c:	60a3      	str	r3, [r4, #8]
 800636e:	89a3      	ldrh	r3, [r4, #12]
 8006370:	071a      	lsls	r2, r3, #28
 8006372:	d52e      	bpl.n	80063d2 <__swbuf_r+0x82>
 8006374:	6923      	ldr	r3, [r4, #16]
 8006376:	b363      	cbz	r3, 80063d2 <__swbuf_r+0x82>
 8006378:	6923      	ldr	r3, [r4, #16]
 800637a:	6820      	ldr	r0, [r4, #0]
 800637c:	1ac0      	subs	r0, r0, r3
 800637e:	6963      	ldr	r3, [r4, #20]
 8006380:	b2f6      	uxtb	r6, r6
 8006382:	4283      	cmp	r3, r0
 8006384:	4637      	mov	r7, r6
 8006386:	dc04      	bgt.n	8006392 <__swbuf_r+0x42>
 8006388:	4621      	mov	r1, r4
 800638a:	4628      	mov	r0, r5
 800638c:	f000 f926 	bl	80065dc <_fflush_r>
 8006390:	bb28      	cbnz	r0, 80063de <__swbuf_r+0x8e>
 8006392:	68a3      	ldr	r3, [r4, #8]
 8006394:	3b01      	subs	r3, #1
 8006396:	60a3      	str	r3, [r4, #8]
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	6022      	str	r2, [r4, #0]
 800639e:	701e      	strb	r6, [r3, #0]
 80063a0:	6963      	ldr	r3, [r4, #20]
 80063a2:	3001      	adds	r0, #1
 80063a4:	4283      	cmp	r3, r0
 80063a6:	d004      	beq.n	80063b2 <__swbuf_r+0x62>
 80063a8:	89a3      	ldrh	r3, [r4, #12]
 80063aa:	07db      	lsls	r3, r3, #31
 80063ac:	d519      	bpl.n	80063e2 <__swbuf_r+0x92>
 80063ae:	2e0a      	cmp	r6, #10
 80063b0:	d117      	bne.n	80063e2 <__swbuf_r+0x92>
 80063b2:	4621      	mov	r1, r4
 80063b4:	4628      	mov	r0, r5
 80063b6:	f000 f911 	bl	80065dc <_fflush_r>
 80063ba:	b190      	cbz	r0, 80063e2 <__swbuf_r+0x92>
 80063bc:	e00f      	b.n	80063de <__swbuf_r+0x8e>
 80063be:	4b0b      	ldr	r3, [pc, #44]	; (80063ec <__swbuf_r+0x9c>)
 80063c0:	429c      	cmp	r4, r3
 80063c2:	d101      	bne.n	80063c8 <__swbuf_r+0x78>
 80063c4:	68ac      	ldr	r4, [r5, #8]
 80063c6:	e7d0      	b.n	800636a <__swbuf_r+0x1a>
 80063c8:	4b09      	ldr	r3, [pc, #36]	; (80063f0 <__swbuf_r+0xa0>)
 80063ca:	429c      	cmp	r4, r3
 80063cc:	bf08      	it	eq
 80063ce:	68ec      	ldreq	r4, [r5, #12]
 80063d0:	e7cb      	b.n	800636a <__swbuf_r+0x1a>
 80063d2:	4621      	mov	r1, r4
 80063d4:	4628      	mov	r0, r5
 80063d6:	f000 f80d 	bl	80063f4 <__swsetup_r>
 80063da:	2800      	cmp	r0, #0
 80063dc:	d0cc      	beq.n	8006378 <__swbuf_r+0x28>
 80063de:	f04f 37ff 	mov.w	r7, #4294967295
 80063e2:	4638      	mov	r0, r7
 80063e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063e6:	bf00      	nop
 80063e8:	08006bb8 	.word	0x08006bb8
 80063ec:	08006bd8 	.word	0x08006bd8
 80063f0:	08006b98 	.word	0x08006b98

080063f4 <__swsetup_r>:
 80063f4:	4b32      	ldr	r3, [pc, #200]	; (80064c0 <__swsetup_r+0xcc>)
 80063f6:	b570      	push	{r4, r5, r6, lr}
 80063f8:	681d      	ldr	r5, [r3, #0]
 80063fa:	4606      	mov	r6, r0
 80063fc:	460c      	mov	r4, r1
 80063fe:	b125      	cbz	r5, 800640a <__swsetup_r+0x16>
 8006400:	69ab      	ldr	r3, [r5, #24]
 8006402:	b913      	cbnz	r3, 800640a <__swsetup_r+0x16>
 8006404:	4628      	mov	r0, r5
 8006406:	f000 f953 	bl	80066b0 <__sinit>
 800640a:	4b2e      	ldr	r3, [pc, #184]	; (80064c4 <__swsetup_r+0xd0>)
 800640c:	429c      	cmp	r4, r3
 800640e:	d10f      	bne.n	8006430 <__swsetup_r+0x3c>
 8006410:	686c      	ldr	r4, [r5, #4]
 8006412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006416:	b29a      	uxth	r2, r3
 8006418:	0715      	lsls	r5, r2, #28
 800641a:	d42c      	bmi.n	8006476 <__swsetup_r+0x82>
 800641c:	06d0      	lsls	r0, r2, #27
 800641e:	d411      	bmi.n	8006444 <__swsetup_r+0x50>
 8006420:	2209      	movs	r2, #9
 8006422:	6032      	str	r2, [r6, #0]
 8006424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006428:	81a3      	strh	r3, [r4, #12]
 800642a:	f04f 30ff 	mov.w	r0, #4294967295
 800642e:	e03e      	b.n	80064ae <__swsetup_r+0xba>
 8006430:	4b25      	ldr	r3, [pc, #148]	; (80064c8 <__swsetup_r+0xd4>)
 8006432:	429c      	cmp	r4, r3
 8006434:	d101      	bne.n	800643a <__swsetup_r+0x46>
 8006436:	68ac      	ldr	r4, [r5, #8]
 8006438:	e7eb      	b.n	8006412 <__swsetup_r+0x1e>
 800643a:	4b24      	ldr	r3, [pc, #144]	; (80064cc <__swsetup_r+0xd8>)
 800643c:	429c      	cmp	r4, r3
 800643e:	bf08      	it	eq
 8006440:	68ec      	ldreq	r4, [r5, #12]
 8006442:	e7e6      	b.n	8006412 <__swsetup_r+0x1e>
 8006444:	0751      	lsls	r1, r2, #29
 8006446:	d512      	bpl.n	800646e <__swsetup_r+0x7a>
 8006448:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800644a:	b141      	cbz	r1, 800645e <__swsetup_r+0x6a>
 800644c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006450:	4299      	cmp	r1, r3
 8006452:	d002      	beq.n	800645a <__swsetup_r+0x66>
 8006454:	4630      	mov	r0, r6
 8006456:	f000 fa19 	bl	800688c <_free_r>
 800645a:	2300      	movs	r3, #0
 800645c:	6363      	str	r3, [r4, #52]	; 0x34
 800645e:	89a3      	ldrh	r3, [r4, #12]
 8006460:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006464:	81a3      	strh	r3, [r4, #12]
 8006466:	2300      	movs	r3, #0
 8006468:	6063      	str	r3, [r4, #4]
 800646a:	6923      	ldr	r3, [r4, #16]
 800646c:	6023      	str	r3, [r4, #0]
 800646e:	89a3      	ldrh	r3, [r4, #12]
 8006470:	f043 0308 	orr.w	r3, r3, #8
 8006474:	81a3      	strh	r3, [r4, #12]
 8006476:	6923      	ldr	r3, [r4, #16]
 8006478:	b94b      	cbnz	r3, 800648e <__swsetup_r+0x9a>
 800647a:	89a3      	ldrh	r3, [r4, #12]
 800647c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006484:	d003      	beq.n	800648e <__swsetup_r+0x9a>
 8006486:	4621      	mov	r1, r4
 8006488:	4630      	mov	r0, r6
 800648a:	f000 f9bf 	bl	800680c <__smakebuf_r>
 800648e:	89a2      	ldrh	r2, [r4, #12]
 8006490:	f012 0301 	ands.w	r3, r2, #1
 8006494:	d00c      	beq.n	80064b0 <__swsetup_r+0xbc>
 8006496:	2300      	movs	r3, #0
 8006498:	60a3      	str	r3, [r4, #8]
 800649a:	6963      	ldr	r3, [r4, #20]
 800649c:	425b      	negs	r3, r3
 800649e:	61a3      	str	r3, [r4, #24]
 80064a0:	6923      	ldr	r3, [r4, #16]
 80064a2:	b953      	cbnz	r3, 80064ba <__swsetup_r+0xc6>
 80064a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064a8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80064ac:	d1ba      	bne.n	8006424 <__swsetup_r+0x30>
 80064ae:	bd70      	pop	{r4, r5, r6, pc}
 80064b0:	0792      	lsls	r2, r2, #30
 80064b2:	bf58      	it	pl
 80064b4:	6963      	ldrpl	r3, [r4, #20]
 80064b6:	60a3      	str	r3, [r4, #8]
 80064b8:	e7f2      	b.n	80064a0 <__swsetup_r+0xac>
 80064ba:	2000      	movs	r0, #0
 80064bc:	e7f7      	b.n	80064ae <__swsetup_r+0xba>
 80064be:	bf00      	nop
 80064c0:	2000000c 	.word	0x2000000c
 80064c4:	08006bb8 	.word	0x08006bb8
 80064c8:	08006bd8 	.word	0x08006bd8
 80064cc:	08006b98 	.word	0x08006b98

080064d0 <__sflush_r>:
 80064d0:	898a      	ldrh	r2, [r1, #12]
 80064d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d6:	4605      	mov	r5, r0
 80064d8:	0710      	lsls	r0, r2, #28
 80064da:	460c      	mov	r4, r1
 80064dc:	d458      	bmi.n	8006590 <__sflush_r+0xc0>
 80064de:	684b      	ldr	r3, [r1, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	dc05      	bgt.n	80064f0 <__sflush_r+0x20>
 80064e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	dc02      	bgt.n	80064f0 <__sflush_r+0x20>
 80064ea:	2000      	movs	r0, #0
 80064ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064f2:	2e00      	cmp	r6, #0
 80064f4:	d0f9      	beq.n	80064ea <__sflush_r+0x1a>
 80064f6:	2300      	movs	r3, #0
 80064f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80064fc:	682f      	ldr	r7, [r5, #0]
 80064fe:	6a21      	ldr	r1, [r4, #32]
 8006500:	602b      	str	r3, [r5, #0]
 8006502:	d032      	beq.n	800656a <__sflush_r+0x9a>
 8006504:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006506:	89a3      	ldrh	r3, [r4, #12]
 8006508:	075a      	lsls	r2, r3, #29
 800650a:	d505      	bpl.n	8006518 <__sflush_r+0x48>
 800650c:	6863      	ldr	r3, [r4, #4]
 800650e:	1ac0      	subs	r0, r0, r3
 8006510:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006512:	b10b      	cbz	r3, 8006518 <__sflush_r+0x48>
 8006514:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006516:	1ac0      	subs	r0, r0, r3
 8006518:	2300      	movs	r3, #0
 800651a:	4602      	mov	r2, r0
 800651c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800651e:	6a21      	ldr	r1, [r4, #32]
 8006520:	4628      	mov	r0, r5
 8006522:	47b0      	blx	r6
 8006524:	1c43      	adds	r3, r0, #1
 8006526:	89a3      	ldrh	r3, [r4, #12]
 8006528:	d106      	bne.n	8006538 <__sflush_r+0x68>
 800652a:	6829      	ldr	r1, [r5, #0]
 800652c:	291d      	cmp	r1, #29
 800652e:	d848      	bhi.n	80065c2 <__sflush_r+0xf2>
 8006530:	4a29      	ldr	r2, [pc, #164]	; (80065d8 <__sflush_r+0x108>)
 8006532:	40ca      	lsrs	r2, r1
 8006534:	07d6      	lsls	r6, r2, #31
 8006536:	d544      	bpl.n	80065c2 <__sflush_r+0xf2>
 8006538:	2200      	movs	r2, #0
 800653a:	6062      	str	r2, [r4, #4]
 800653c:	04d9      	lsls	r1, r3, #19
 800653e:	6922      	ldr	r2, [r4, #16]
 8006540:	6022      	str	r2, [r4, #0]
 8006542:	d504      	bpl.n	800654e <__sflush_r+0x7e>
 8006544:	1c42      	adds	r2, r0, #1
 8006546:	d101      	bne.n	800654c <__sflush_r+0x7c>
 8006548:	682b      	ldr	r3, [r5, #0]
 800654a:	b903      	cbnz	r3, 800654e <__sflush_r+0x7e>
 800654c:	6560      	str	r0, [r4, #84]	; 0x54
 800654e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006550:	602f      	str	r7, [r5, #0]
 8006552:	2900      	cmp	r1, #0
 8006554:	d0c9      	beq.n	80064ea <__sflush_r+0x1a>
 8006556:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800655a:	4299      	cmp	r1, r3
 800655c:	d002      	beq.n	8006564 <__sflush_r+0x94>
 800655e:	4628      	mov	r0, r5
 8006560:	f000 f994 	bl	800688c <_free_r>
 8006564:	2000      	movs	r0, #0
 8006566:	6360      	str	r0, [r4, #52]	; 0x34
 8006568:	e7c0      	b.n	80064ec <__sflush_r+0x1c>
 800656a:	2301      	movs	r3, #1
 800656c:	4628      	mov	r0, r5
 800656e:	47b0      	blx	r6
 8006570:	1c41      	adds	r1, r0, #1
 8006572:	d1c8      	bne.n	8006506 <__sflush_r+0x36>
 8006574:	682b      	ldr	r3, [r5, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0c5      	beq.n	8006506 <__sflush_r+0x36>
 800657a:	2b1d      	cmp	r3, #29
 800657c:	d001      	beq.n	8006582 <__sflush_r+0xb2>
 800657e:	2b16      	cmp	r3, #22
 8006580:	d101      	bne.n	8006586 <__sflush_r+0xb6>
 8006582:	602f      	str	r7, [r5, #0]
 8006584:	e7b1      	b.n	80064ea <__sflush_r+0x1a>
 8006586:	89a3      	ldrh	r3, [r4, #12]
 8006588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800658c:	81a3      	strh	r3, [r4, #12]
 800658e:	e7ad      	b.n	80064ec <__sflush_r+0x1c>
 8006590:	690f      	ldr	r7, [r1, #16]
 8006592:	2f00      	cmp	r7, #0
 8006594:	d0a9      	beq.n	80064ea <__sflush_r+0x1a>
 8006596:	0793      	lsls	r3, r2, #30
 8006598:	680e      	ldr	r6, [r1, #0]
 800659a:	bf08      	it	eq
 800659c:	694b      	ldreq	r3, [r1, #20]
 800659e:	600f      	str	r7, [r1, #0]
 80065a0:	bf18      	it	ne
 80065a2:	2300      	movne	r3, #0
 80065a4:	eba6 0807 	sub.w	r8, r6, r7
 80065a8:	608b      	str	r3, [r1, #8]
 80065aa:	f1b8 0f00 	cmp.w	r8, #0
 80065ae:	dd9c      	ble.n	80064ea <__sflush_r+0x1a>
 80065b0:	4643      	mov	r3, r8
 80065b2:	463a      	mov	r2, r7
 80065b4:	6a21      	ldr	r1, [r4, #32]
 80065b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80065b8:	4628      	mov	r0, r5
 80065ba:	47b0      	blx	r6
 80065bc:	2800      	cmp	r0, #0
 80065be:	dc06      	bgt.n	80065ce <__sflush_r+0xfe>
 80065c0:	89a3      	ldrh	r3, [r4, #12]
 80065c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065c6:	81a3      	strh	r3, [r4, #12]
 80065c8:	f04f 30ff 	mov.w	r0, #4294967295
 80065cc:	e78e      	b.n	80064ec <__sflush_r+0x1c>
 80065ce:	4407      	add	r7, r0
 80065d0:	eba8 0800 	sub.w	r8, r8, r0
 80065d4:	e7e9      	b.n	80065aa <__sflush_r+0xda>
 80065d6:	bf00      	nop
 80065d8:	20400001 	.word	0x20400001

080065dc <_fflush_r>:
 80065dc:	b538      	push	{r3, r4, r5, lr}
 80065de:	690b      	ldr	r3, [r1, #16]
 80065e0:	4605      	mov	r5, r0
 80065e2:	460c      	mov	r4, r1
 80065e4:	b1db      	cbz	r3, 800661e <_fflush_r+0x42>
 80065e6:	b118      	cbz	r0, 80065f0 <_fflush_r+0x14>
 80065e8:	6983      	ldr	r3, [r0, #24]
 80065ea:	b90b      	cbnz	r3, 80065f0 <_fflush_r+0x14>
 80065ec:	f000 f860 	bl	80066b0 <__sinit>
 80065f0:	4b0c      	ldr	r3, [pc, #48]	; (8006624 <_fflush_r+0x48>)
 80065f2:	429c      	cmp	r4, r3
 80065f4:	d109      	bne.n	800660a <_fflush_r+0x2e>
 80065f6:	686c      	ldr	r4, [r5, #4]
 80065f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065fc:	b17b      	cbz	r3, 800661e <_fflush_r+0x42>
 80065fe:	4621      	mov	r1, r4
 8006600:	4628      	mov	r0, r5
 8006602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006606:	f7ff bf63 	b.w	80064d0 <__sflush_r>
 800660a:	4b07      	ldr	r3, [pc, #28]	; (8006628 <_fflush_r+0x4c>)
 800660c:	429c      	cmp	r4, r3
 800660e:	d101      	bne.n	8006614 <_fflush_r+0x38>
 8006610:	68ac      	ldr	r4, [r5, #8]
 8006612:	e7f1      	b.n	80065f8 <_fflush_r+0x1c>
 8006614:	4b05      	ldr	r3, [pc, #20]	; (800662c <_fflush_r+0x50>)
 8006616:	429c      	cmp	r4, r3
 8006618:	bf08      	it	eq
 800661a:	68ec      	ldreq	r4, [r5, #12]
 800661c:	e7ec      	b.n	80065f8 <_fflush_r+0x1c>
 800661e:	2000      	movs	r0, #0
 8006620:	bd38      	pop	{r3, r4, r5, pc}
 8006622:	bf00      	nop
 8006624:	08006bb8 	.word	0x08006bb8
 8006628:	08006bd8 	.word	0x08006bd8
 800662c:	08006b98 	.word	0x08006b98

08006630 <std>:
 8006630:	2300      	movs	r3, #0
 8006632:	b510      	push	{r4, lr}
 8006634:	4604      	mov	r4, r0
 8006636:	e9c0 3300 	strd	r3, r3, [r0]
 800663a:	6083      	str	r3, [r0, #8]
 800663c:	8181      	strh	r1, [r0, #12]
 800663e:	6643      	str	r3, [r0, #100]	; 0x64
 8006640:	81c2      	strh	r2, [r0, #14]
 8006642:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006646:	6183      	str	r3, [r0, #24]
 8006648:	4619      	mov	r1, r3
 800664a:	2208      	movs	r2, #8
 800664c:	305c      	adds	r0, #92	; 0x5c
 800664e:	f7ff fe13 	bl	8006278 <memset>
 8006652:	4b05      	ldr	r3, [pc, #20]	; (8006668 <std+0x38>)
 8006654:	6263      	str	r3, [r4, #36]	; 0x24
 8006656:	4b05      	ldr	r3, [pc, #20]	; (800666c <std+0x3c>)
 8006658:	62a3      	str	r3, [r4, #40]	; 0x28
 800665a:	4b05      	ldr	r3, [pc, #20]	; (8006670 <std+0x40>)
 800665c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800665e:	4b05      	ldr	r3, [pc, #20]	; (8006674 <std+0x44>)
 8006660:	6224      	str	r4, [r4, #32]
 8006662:	6323      	str	r3, [r4, #48]	; 0x30
 8006664:	bd10      	pop	{r4, pc}
 8006666:	bf00      	nop
 8006668:	080069fd 	.word	0x080069fd
 800666c:	08006a1f 	.word	0x08006a1f
 8006670:	08006a57 	.word	0x08006a57
 8006674:	08006a7b 	.word	0x08006a7b

08006678 <_cleanup_r>:
 8006678:	4901      	ldr	r1, [pc, #4]	; (8006680 <_cleanup_r+0x8>)
 800667a:	f000 b885 	b.w	8006788 <_fwalk_reent>
 800667e:	bf00      	nop
 8006680:	080065dd 	.word	0x080065dd

08006684 <__sfmoreglue>:
 8006684:	b570      	push	{r4, r5, r6, lr}
 8006686:	1e4a      	subs	r2, r1, #1
 8006688:	2568      	movs	r5, #104	; 0x68
 800668a:	4355      	muls	r5, r2
 800668c:	460e      	mov	r6, r1
 800668e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006692:	f000 f949 	bl	8006928 <_malloc_r>
 8006696:	4604      	mov	r4, r0
 8006698:	b140      	cbz	r0, 80066ac <__sfmoreglue+0x28>
 800669a:	2100      	movs	r1, #0
 800669c:	e9c0 1600 	strd	r1, r6, [r0]
 80066a0:	300c      	adds	r0, #12
 80066a2:	60a0      	str	r0, [r4, #8]
 80066a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80066a8:	f7ff fde6 	bl	8006278 <memset>
 80066ac:	4620      	mov	r0, r4
 80066ae:	bd70      	pop	{r4, r5, r6, pc}

080066b0 <__sinit>:
 80066b0:	6983      	ldr	r3, [r0, #24]
 80066b2:	b510      	push	{r4, lr}
 80066b4:	4604      	mov	r4, r0
 80066b6:	bb33      	cbnz	r3, 8006706 <__sinit+0x56>
 80066b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80066bc:	6503      	str	r3, [r0, #80]	; 0x50
 80066be:	4b12      	ldr	r3, [pc, #72]	; (8006708 <__sinit+0x58>)
 80066c0:	4a12      	ldr	r2, [pc, #72]	; (800670c <__sinit+0x5c>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6282      	str	r2, [r0, #40]	; 0x28
 80066c6:	4298      	cmp	r0, r3
 80066c8:	bf04      	itt	eq
 80066ca:	2301      	moveq	r3, #1
 80066cc:	6183      	streq	r3, [r0, #24]
 80066ce:	f000 f81f 	bl	8006710 <__sfp>
 80066d2:	6060      	str	r0, [r4, #4]
 80066d4:	4620      	mov	r0, r4
 80066d6:	f000 f81b 	bl	8006710 <__sfp>
 80066da:	60a0      	str	r0, [r4, #8]
 80066dc:	4620      	mov	r0, r4
 80066de:	f000 f817 	bl	8006710 <__sfp>
 80066e2:	2200      	movs	r2, #0
 80066e4:	60e0      	str	r0, [r4, #12]
 80066e6:	2104      	movs	r1, #4
 80066e8:	6860      	ldr	r0, [r4, #4]
 80066ea:	f7ff ffa1 	bl	8006630 <std>
 80066ee:	2201      	movs	r2, #1
 80066f0:	2109      	movs	r1, #9
 80066f2:	68a0      	ldr	r0, [r4, #8]
 80066f4:	f7ff ff9c 	bl	8006630 <std>
 80066f8:	2202      	movs	r2, #2
 80066fa:	2112      	movs	r1, #18
 80066fc:	68e0      	ldr	r0, [r4, #12]
 80066fe:	f7ff ff97 	bl	8006630 <std>
 8006702:	2301      	movs	r3, #1
 8006704:	61a3      	str	r3, [r4, #24]
 8006706:	bd10      	pop	{r4, pc}
 8006708:	08006b94 	.word	0x08006b94
 800670c:	08006679 	.word	0x08006679

08006710 <__sfp>:
 8006710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006712:	4b1b      	ldr	r3, [pc, #108]	; (8006780 <__sfp+0x70>)
 8006714:	681e      	ldr	r6, [r3, #0]
 8006716:	69b3      	ldr	r3, [r6, #24]
 8006718:	4607      	mov	r7, r0
 800671a:	b913      	cbnz	r3, 8006722 <__sfp+0x12>
 800671c:	4630      	mov	r0, r6
 800671e:	f7ff ffc7 	bl	80066b0 <__sinit>
 8006722:	3648      	adds	r6, #72	; 0x48
 8006724:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006728:	3b01      	subs	r3, #1
 800672a:	d503      	bpl.n	8006734 <__sfp+0x24>
 800672c:	6833      	ldr	r3, [r6, #0]
 800672e:	b133      	cbz	r3, 800673e <__sfp+0x2e>
 8006730:	6836      	ldr	r6, [r6, #0]
 8006732:	e7f7      	b.n	8006724 <__sfp+0x14>
 8006734:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006738:	b16d      	cbz	r5, 8006756 <__sfp+0x46>
 800673a:	3468      	adds	r4, #104	; 0x68
 800673c:	e7f4      	b.n	8006728 <__sfp+0x18>
 800673e:	2104      	movs	r1, #4
 8006740:	4638      	mov	r0, r7
 8006742:	f7ff ff9f 	bl	8006684 <__sfmoreglue>
 8006746:	6030      	str	r0, [r6, #0]
 8006748:	2800      	cmp	r0, #0
 800674a:	d1f1      	bne.n	8006730 <__sfp+0x20>
 800674c:	230c      	movs	r3, #12
 800674e:	603b      	str	r3, [r7, #0]
 8006750:	4604      	mov	r4, r0
 8006752:	4620      	mov	r0, r4
 8006754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006756:	4b0b      	ldr	r3, [pc, #44]	; (8006784 <__sfp+0x74>)
 8006758:	6665      	str	r5, [r4, #100]	; 0x64
 800675a:	e9c4 5500 	strd	r5, r5, [r4]
 800675e:	60a5      	str	r5, [r4, #8]
 8006760:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006764:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006768:	2208      	movs	r2, #8
 800676a:	4629      	mov	r1, r5
 800676c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006770:	f7ff fd82 	bl	8006278 <memset>
 8006774:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006778:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800677c:	e7e9      	b.n	8006752 <__sfp+0x42>
 800677e:	bf00      	nop
 8006780:	08006b94 	.word	0x08006b94
 8006784:	ffff0001 	.word	0xffff0001

08006788 <_fwalk_reent>:
 8006788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800678c:	4680      	mov	r8, r0
 800678e:	4689      	mov	r9, r1
 8006790:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006794:	2600      	movs	r6, #0
 8006796:	b914      	cbnz	r4, 800679e <_fwalk_reent+0x16>
 8006798:	4630      	mov	r0, r6
 800679a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800679e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80067a2:	3f01      	subs	r7, #1
 80067a4:	d501      	bpl.n	80067aa <_fwalk_reent+0x22>
 80067a6:	6824      	ldr	r4, [r4, #0]
 80067a8:	e7f5      	b.n	8006796 <_fwalk_reent+0xe>
 80067aa:	89ab      	ldrh	r3, [r5, #12]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d907      	bls.n	80067c0 <_fwalk_reent+0x38>
 80067b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067b4:	3301      	adds	r3, #1
 80067b6:	d003      	beq.n	80067c0 <_fwalk_reent+0x38>
 80067b8:	4629      	mov	r1, r5
 80067ba:	4640      	mov	r0, r8
 80067bc:	47c8      	blx	r9
 80067be:	4306      	orrs	r6, r0
 80067c0:	3568      	adds	r5, #104	; 0x68
 80067c2:	e7ee      	b.n	80067a2 <_fwalk_reent+0x1a>

080067c4 <__swhatbuf_r>:
 80067c4:	b570      	push	{r4, r5, r6, lr}
 80067c6:	460e      	mov	r6, r1
 80067c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067cc:	2900      	cmp	r1, #0
 80067ce:	b096      	sub	sp, #88	; 0x58
 80067d0:	4614      	mov	r4, r2
 80067d2:	461d      	mov	r5, r3
 80067d4:	da07      	bge.n	80067e6 <__swhatbuf_r+0x22>
 80067d6:	2300      	movs	r3, #0
 80067d8:	602b      	str	r3, [r5, #0]
 80067da:	89b3      	ldrh	r3, [r6, #12]
 80067dc:	061a      	lsls	r2, r3, #24
 80067de:	d410      	bmi.n	8006802 <__swhatbuf_r+0x3e>
 80067e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067e4:	e00e      	b.n	8006804 <__swhatbuf_r+0x40>
 80067e6:	466a      	mov	r2, sp
 80067e8:	f000 f96e 	bl	8006ac8 <_fstat_r>
 80067ec:	2800      	cmp	r0, #0
 80067ee:	dbf2      	blt.n	80067d6 <__swhatbuf_r+0x12>
 80067f0:	9a01      	ldr	r2, [sp, #4]
 80067f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80067f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80067fa:	425a      	negs	r2, r3
 80067fc:	415a      	adcs	r2, r3
 80067fe:	602a      	str	r2, [r5, #0]
 8006800:	e7ee      	b.n	80067e0 <__swhatbuf_r+0x1c>
 8006802:	2340      	movs	r3, #64	; 0x40
 8006804:	2000      	movs	r0, #0
 8006806:	6023      	str	r3, [r4, #0]
 8006808:	b016      	add	sp, #88	; 0x58
 800680a:	bd70      	pop	{r4, r5, r6, pc}

0800680c <__smakebuf_r>:
 800680c:	898b      	ldrh	r3, [r1, #12]
 800680e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006810:	079d      	lsls	r5, r3, #30
 8006812:	4606      	mov	r6, r0
 8006814:	460c      	mov	r4, r1
 8006816:	d507      	bpl.n	8006828 <__smakebuf_r+0x1c>
 8006818:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800681c:	6023      	str	r3, [r4, #0]
 800681e:	6123      	str	r3, [r4, #16]
 8006820:	2301      	movs	r3, #1
 8006822:	6163      	str	r3, [r4, #20]
 8006824:	b002      	add	sp, #8
 8006826:	bd70      	pop	{r4, r5, r6, pc}
 8006828:	ab01      	add	r3, sp, #4
 800682a:	466a      	mov	r2, sp
 800682c:	f7ff ffca 	bl	80067c4 <__swhatbuf_r>
 8006830:	9900      	ldr	r1, [sp, #0]
 8006832:	4605      	mov	r5, r0
 8006834:	4630      	mov	r0, r6
 8006836:	f000 f877 	bl	8006928 <_malloc_r>
 800683a:	b948      	cbnz	r0, 8006850 <__smakebuf_r+0x44>
 800683c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006840:	059a      	lsls	r2, r3, #22
 8006842:	d4ef      	bmi.n	8006824 <__smakebuf_r+0x18>
 8006844:	f023 0303 	bic.w	r3, r3, #3
 8006848:	f043 0302 	orr.w	r3, r3, #2
 800684c:	81a3      	strh	r3, [r4, #12]
 800684e:	e7e3      	b.n	8006818 <__smakebuf_r+0xc>
 8006850:	4b0d      	ldr	r3, [pc, #52]	; (8006888 <__smakebuf_r+0x7c>)
 8006852:	62b3      	str	r3, [r6, #40]	; 0x28
 8006854:	89a3      	ldrh	r3, [r4, #12]
 8006856:	6020      	str	r0, [r4, #0]
 8006858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800685c:	81a3      	strh	r3, [r4, #12]
 800685e:	9b00      	ldr	r3, [sp, #0]
 8006860:	6163      	str	r3, [r4, #20]
 8006862:	9b01      	ldr	r3, [sp, #4]
 8006864:	6120      	str	r0, [r4, #16]
 8006866:	b15b      	cbz	r3, 8006880 <__smakebuf_r+0x74>
 8006868:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800686c:	4630      	mov	r0, r6
 800686e:	f000 f93d 	bl	8006aec <_isatty_r>
 8006872:	b128      	cbz	r0, 8006880 <__smakebuf_r+0x74>
 8006874:	89a3      	ldrh	r3, [r4, #12]
 8006876:	f023 0303 	bic.w	r3, r3, #3
 800687a:	f043 0301 	orr.w	r3, r3, #1
 800687e:	81a3      	strh	r3, [r4, #12]
 8006880:	89a3      	ldrh	r3, [r4, #12]
 8006882:	431d      	orrs	r5, r3
 8006884:	81a5      	strh	r5, [r4, #12]
 8006886:	e7cd      	b.n	8006824 <__smakebuf_r+0x18>
 8006888:	08006679 	.word	0x08006679

0800688c <_free_r>:
 800688c:	b538      	push	{r3, r4, r5, lr}
 800688e:	4605      	mov	r5, r0
 8006890:	2900      	cmp	r1, #0
 8006892:	d045      	beq.n	8006920 <_free_r+0x94>
 8006894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006898:	1f0c      	subs	r4, r1, #4
 800689a:	2b00      	cmp	r3, #0
 800689c:	bfb8      	it	lt
 800689e:	18e4      	addlt	r4, r4, r3
 80068a0:	f000 f946 	bl	8006b30 <__malloc_lock>
 80068a4:	4a1f      	ldr	r2, [pc, #124]	; (8006924 <_free_r+0x98>)
 80068a6:	6813      	ldr	r3, [r2, #0]
 80068a8:	4610      	mov	r0, r2
 80068aa:	b933      	cbnz	r3, 80068ba <_free_r+0x2e>
 80068ac:	6063      	str	r3, [r4, #4]
 80068ae:	6014      	str	r4, [r2, #0]
 80068b0:	4628      	mov	r0, r5
 80068b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068b6:	f000 b93c 	b.w	8006b32 <__malloc_unlock>
 80068ba:	42a3      	cmp	r3, r4
 80068bc:	d90c      	bls.n	80068d8 <_free_r+0x4c>
 80068be:	6821      	ldr	r1, [r4, #0]
 80068c0:	1862      	adds	r2, r4, r1
 80068c2:	4293      	cmp	r3, r2
 80068c4:	bf04      	itt	eq
 80068c6:	681a      	ldreq	r2, [r3, #0]
 80068c8:	685b      	ldreq	r3, [r3, #4]
 80068ca:	6063      	str	r3, [r4, #4]
 80068cc:	bf04      	itt	eq
 80068ce:	1852      	addeq	r2, r2, r1
 80068d0:	6022      	streq	r2, [r4, #0]
 80068d2:	6004      	str	r4, [r0, #0]
 80068d4:	e7ec      	b.n	80068b0 <_free_r+0x24>
 80068d6:	4613      	mov	r3, r2
 80068d8:	685a      	ldr	r2, [r3, #4]
 80068da:	b10a      	cbz	r2, 80068e0 <_free_r+0x54>
 80068dc:	42a2      	cmp	r2, r4
 80068de:	d9fa      	bls.n	80068d6 <_free_r+0x4a>
 80068e0:	6819      	ldr	r1, [r3, #0]
 80068e2:	1858      	adds	r0, r3, r1
 80068e4:	42a0      	cmp	r0, r4
 80068e6:	d10b      	bne.n	8006900 <_free_r+0x74>
 80068e8:	6820      	ldr	r0, [r4, #0]
 80068ea:	4401      	add	r1, r0
 80068ec:	1858      	adds	r0, r3, r1
 80068ee:	4282      	cmp	r2, r0
 80068f0:	6019      	str	r1, [r3, #0]
 80068f2:	d1dd      	bne.n	80068b0 <_free_r+0x24>
 80068f4:	6810      	ldr	r0, [r2, #0]
 80068f6:	6852      	ldr	r2, [r2, #4]
 80068f8:	605a      	str	r2, [r3, #4]
 80068fa:	4401      	add	r1, r0
 80068fc:	6019      	str	r1, [r3, #0]
 80068fe:	e7d7      	b.n	80068b0 <_free_r+0x24>
 8006900:	d902      	bls.n	8006908 <_free_r+0x7c>
 8006902:	230c      	movs	r3, #12
 8006904:	602b      	str	r3, [r5, #0]
 8006906:	e7d3      	b.n	80068b0 <_free_r+0x24>
 8006908:	6820      	ldr	r0, [r4, #0]
 800690a:	1821      	adds	r1, r4, r0
 800690c:	428a      	cmp	r2, r1
 800690e:	bf04      	itt	eq
 8006910:	6811      	ldreq	r1, [r2, #0]
 8006912:	6852      	ldreq	r2, [r2, #4]
 8006914:	6062      	str	r2, [r4, #4]
 8006916:	bf04      	itt	eq
 8006918:	1809      	addeq	r1, r1, r0
 800691a:	6021      	streq	r1, [r4, #0]
 800691c:	605c      	str	r4, [r3, #4]
 800691e:	e7c7      	b.n	80068b0 <_free_r+0x24>
 8006920:	bd38      	pop	{r3, r4, r5, pc}
 8006922:	bf00      	nop
 8006924:	20000098 	.word	0x20000098

08006928 <_malloc_r>:
 8006928:	b570      	push	{r4, r5, r6, lr}
 800692a:	1ccd      	adds	r5, r1, #3
 800692c:	f025 0503 	bic.w	r5, r5, #3
 8006930:	3508      	adds	r5, #8
 8006932:	2d0c      	cmp	r5, #12
 8006934:	bf38      	it	cc
 8006936:	250c      	movcc	r5, #12
 8006938:	2d00      	cmp	r5, #0
 800693a:	4606      	mov	r6, r0
 800693c:	db01      	blt.n	8006942 <_malloc_r+0x1a>
 800693e:	42a9      	cmp	r1, r5
 8006940:	d903      	bls.n	800694a <_malloc_r+0x22>
 8006942:	230c      	movs	r3, #12
 8006944:	6033      	str	r3, [r6, #0]
 8006946:	2000      	movs	r0, #0
 8006948:	bd70      	pop	{r4, r5, r6, pc}
 800694a:	f000 f8f1 	bl	8006b30 <__malloc_lock>
 800694e:	4a21      	ldr	r2, [pc, #132]	; (80069d4 <_malloc_r+0xac>)
 8006950:	6814      	ldr	r4, [r2, #0]
 8006952:	4621      	mov	r1, r4
 8006954:	b991      	cbnz	r1, 800697c <_malloc_r+0x54>
 8006956:	4c20      	ldr	r4, [pc, #128]	; (80069d8 <_malloc_r+0xb0>)
 8006958:	6823      	ldr	r3, [r4, #0]
 800695a:	b91b      	cbnz	r3, 8006964 <_malloc_r+0x3c>
 800695c:	4630      	mov	r0, r6
 800695e:	f000 f83d 	bl	80069dc <_sbrk_r>
 8006962:	6020      	str	r0, [r4, #0]
 8006964:	4629      	mov	r1, r5
 8006966:	4630      	mov	r0, r6
 8006968:	f000 f838 	bl	80069dc <_sbrk_r>
 800696c:	1c43      	adds	r3, r0, #1
 800696e:	d124      	bne.n	80069ba <_malloc_r+0x92>
 8006970:	230c      	movs	r3, #12
 8006972:	6033      	str	r3, [r6, #0]
 8006974:	4630      	mov	r0, r6
 8006976:	f000 f8dc 	bl	8006b32 <__malloc_unlock>
 800697a:	e7e4      	b.n	8006946 <_malloc_r+0x1e>
 800697c:	680b      	ldr	r3, [r1, #0]
 800697e:	1b5b      	subs	r3, r3, r5
 8006980:	d418      	bmi.n	80069b4 <_malloc_r+0x8c>
 8006982:	2b0b      	cmp	r3, #11
 8006984:	d90f      	bls.n	80069a6 <_malloc_r+0x7e>
 8006986:	600b      	str	r3, [r1, #0]
 8006988:	50cd      	str	r5, [r1, r3]
 800698a:	18cc      	adds	r4, r1, r3
 800698c:	4630      	mov	r0, r6
 800698e:	f000 f8d0 	bl	8006b32 <__malloc_unlock>
 8006992:	f104 000b 	add.w	r0, r4, #11
 8006996:	1d23      	adds	r3, r4, #4
 8006998:	f020 0007 	bic.w	r0, r0, #7
 800699c:	1ac3      	subs	r3, r0, r3
 800699e:	d0d3      	beq.n	8006948 <_malloc_r+0x20>
 80069a0:	425a      	negs	r2, r3
 80069a2:	50e2      	str	r2, [r4, r3]
 80069a4:	e7d0      	b.n	8006948 <_malloc_r+0x20>
 80069a6:	428c      	cmp	r4, r1
 80069a8:	684b      	ldr	r3, [r1, #4]
 80069aa:	bf16      	itet	ne
 80069ac:	6063      	strne	r3, [r4, #4]
 80069ae:	6013      	streq	r3, [r2, #0]
 80069b0:	460c      	movne	r4, r1
 80069b2:	e7eb      	b.n	800698c <_malloc_r+0x64>
 80069b4:	460c      	mov	r4, r1
 80069b6:	6849      	ldr	r1, [r1, #4]
 80069b8:	e7cc      	b.n	8006954 <_malloc_r+0x2c>
 80069ba:	1cc4      	adds	r4, r0, #3
 80069bc:	f024 0403 	bic.w	r4, r4, #3
 80069c0:	42a0      	cmp	r0, r4
 80069c2:	d005      	beq.n	80069d0 <_malloc_r+0xa8>
 80069c4:	1a21      	subs	r1, r4, r0
 80069c6:	4630      	mov	r0, r6
 80069c8:	f000 f808 	bl	80069dc <_sbrk_r>
 80069cc:	3001      	adds	r0, #1
 80069ce:	d0cf      	beq.n	8006970 <_malloc_r+0x48>
 80069d0:	6025      	str	r5, [r4, #0]
 80069d2:	e7db      	b.n	800698c <_malloc_r+0x64>
 80069d4:	20000098 	.word	0x20000098
 80069d8:	2000009c 	.word	0x2000009c

080069dc <_sbrk_r>:
 80069dc:	b538      	push	{r3, r4, r5, lr}
 80069de:	4c06      	ldr	r4, [pc, #24]	; (80069f8 <_sbrk_r+0x1c>)
 80069e0:	2300      	movs	r3, #0
 80069e2:	4605      	mov	r5, r0
 80069e4:	4608      	mov	r0, r1
 80069e6:	6023      	str	r3, [r4, #0]
 80069e8:	f7fb ff36 	bl	8002858 <_sbrk>
 80069ec:	1c43      	adds	r3, r0, #1
 80069ee:	d102      	bne.n	80069f6 <_sbrk_r+0x1a>
 80069f0:	6823      	ldr	r3, [r4, #0]
 80069f2:	b103      	cbz	r3, 80069f6 <_sbrk_r+0x1a>
 80069f4:	602b      	str	r3, [r5, #0]
 80069f6:	bd38      	pop	{r3, r4, r5, pc}
 80069f8:	20000268 	.word	0x20000268

080069fc <__sread>:
 80069fc:	b510      	push	{r4, lr}
 80069fe:	460c      	mov	r4, r1
 8006a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a04:	f000 f896 	bl	8006b34 <_read_r>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	bfab      	itete	ge
 8006a0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a0e:	89a3      	ldrhlt	r3, [r4, #12]
 8006a10:	181b      	addge	r3, r3, r0
 8006a12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a16:	bfac      	ite	ge
 8006a18:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a1a:	81a3      	strhlt	r3, [r4, #12]
 8006a1c:	bd10      	pop	{r4, pc}

08006a1e <__swrite>:
 8006a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a22:	461f      	mov	r7, r3
 8006a24:	898b      	ldrh	r3, [r1, #12]
 8006a26:	05db      	lsls	r3, r3, #23
 8006a28:	4605      	mov	r5, r0
 8006a2a:	460c      	mov	r4, r1
 8006a2c:	4616      	mov	r6, r2
 8006a2e:	d505      	bpl.n	8006a3c <__swrite+0x1e>
 8006a30:	2302      	movs	r3, #2
 8006a32:	2200      	movs	r2, #0
 8006a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a38:	f000 f868 	bl	8006b0c <_lseek_r>
 8006a3c:	89a3      	ldrh	r3, [r4, #12]
 8006a3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a46:	81a3      	strh	r3, [r4, #12]
 8006a48:	4632      	mov	r2, r6
 8006a4a:	463b      	mov	r3, r7
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a52:	f000 b817 	b.w	8006a84 <_write_r>

08006a56 <__sseek>:
 8006a56:	b510      	push	{r4, lr}
 8006a58:	460c      	mov	r4, r1
 8006a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a5e:	f000 f855 	bl	8006b0c <_lseek_r>
 8006a62:	1c43      	adds	r3, r0, #1
 8006a64:	89a3      	ldrh	r3, [r4, #12]
 8006a66:	bf15      	itete	ne
 8006a68:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a72:	81a3      	strheq	r3, [r4, #12]
 8006a74:	bf18      	it	ne
 8006a76:	81a3      	strhne	r3, [r4, #12]
 8006a78:	bd10      	pop	{r4, pc}

08006a7a <__sclose>:
 8006a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a7e:	f000 b813 	b.w	8006aa8 <_close_r>
	...

08006a84 <_write_r>:
 8006a84:	b538      	push	{r3, r4, r5, lr}
 8006a86:	4c07      	ldr	r4, [pc, #28]	; (8006aa4 <_write_r+0x20>)
 8006a88:	4605      	mov	r5, r0
 8006a8a:	4608      	mov	r0, r1
 8006a8c:	4611      	mov	r1, r2
 8006a8e:	2200      	movs	r2, #0
 8006a90:	6022      	str	r2, [r4, #0]
 8006a92:	461a      	mov	r2, r3
 8006a94:	f7fb f930 	bl	8001cf8 <_write>
 8006a98:	1c43      	adds	r3, r0, #1
 8006a9a:	d102      	bne.n	8006aa2 <_write_r+0x1e>
 8006a9c:	6823      	ldr	r3, [r4, #0]
 8006a9e:	b103      	cbz	r3, 8006aa2 <_write_r+0x1e>
 8006aa0:	602b      	str	r3, [r5, #0]
 8006aa2:	bd38      	pop	{r3, r4, r5, pc}
 8006aa4:	20000268 	.word	0x20000268

08006aa8 <_close_r>:
 8006aa8:	b538      	push	{r3, r4, r5, lr}
 8006aaa:	4c06      	ldr	r4, [pc, #24]	; (8006ac4 <_close_r+0x1c>)
 8006aac:	2300      	movs	r3, #0
 8006aae:	4605      	mov	r5, r0
 8006ab0:	4608      	mov	r0, r1
 8006ab2:	6023      	str	r3, [r4, #0]
 8006ab4:	f7fb fe9b 	bl	80027ee <_close>
 8006ab8:	1c43      	adds	r3, r0, #1
 8006aba:	d102      	bne.n	8006ac2 <_close_r+0x1a>
 8006abc:	6823      	ldr	r3, [r4, #0]
 8006abe:	b103      	cbz	r3, 8006ac2 <_close_r+0x1a>
 8006ac0:	602b      	str	r3, [r5, #0]
 8006ac2:	bd38      	pop	{r3, r4, r5, pc}
 8006ac4:	20000268 	.word	0x20000268

08006ac8 <_fstat_r>:
 8006ac8:	b538      	push	{r3, r4, r5, lr}
 8006aca:	4c07      	ldr	r4, [pc, #28]	; (8006ae8 <_fstat_r+0x20>)
 8006acc:	2300      	movs	r3, #0
 8006ace:	4605      	mov	r5, r0
 8006ad0:	4608      	mov	r0, r1
 8006ad2:	4611      	mov	r1, r2
 8006ad4:	6023      	str	r3, [r4, #0]
 8006ad6:	f7fb fe96 	bl	8002806 <_fstat>
 8006ada:	1c43      	adds	r3, r0, #1
 8006adc:	d102      	bne.n	8006ae4 <_fstat_r+0x1c>
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	b103      	cbz	r3, 8006ae4 <_fstat_r+0x1c>
 8006ae2:	602b      	str	r3, [r5, #0]
 8006ae4:	bd38      	pop	{r3, r4, r5, pc}
 8006ae6:	bf00      	nop
 8006ae8:	20000268 	.word	0x20000268

08006aec <_isatty_r>:
 8006aec:	b538      	push	{r3, r4, r5, lr}
 8006aee:	4c06      	ldr	r4, [pc, #24]	; (8006b08 <_isatty_r+0x1c>)
 8006af0:	2300      	movs	r3, #0
 8006af2:	4605      	mov	r5, r0
 8006af4:	4608      	mov	r0, r1
 8006af6:	6023      	str	r3, [r4, #0]
 8006af8:	f7fb fe95 	bl	8002826 <_isatty>
 8006afc:	1c43      	adds	r3, r0, #1
 8006afe:	d102      	bne.n	8006b06 <_isatty_r+0x1a>
 8006b00:	6823      	ldr	r3, [r4, #0]
 8006b02:	b103      	cbz	r3, 8006b06 <_isatty_r+0x1a>
 8006b04:	602b      	str	r3, [r5, #0]
 8006b06:	bd38      	pop	{r3, r4, r5, pc}
 8006b08:	20000268 	.word	0x20000268

08006b0c <_lseek_r>:
 8006b0c:	b538      	push	{r3, r4, r5, lr}
 8006b0e:	4c07      	ldr	r4, [pc, #28]	; (8006b2c <_lseek_r+0x20>)
 8006b10:	4605      	mov	r5, r0
 8006b12:	4608      	mov	r0, r1
 8006b14:	4611      	mov	r1, r2
 8006b16:	2200      	movs	r2, #0
 8006b18:	6022      	str	r2, [r4, #0]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	f7fb fe8e 	bl	800283c <_lseek>
 8006b20:	1c43      	adds	r3, r0, #1
 8006b22:	d102      	bne.n	8006b2a <_lseek_r+0x1e>
 8006b24:	6823      	ldr	r3, [r4, #0]
 8006b26:	b103      	cbz	r3, 8006b2a <_lseek_r+0x1e>
 8006b28:	602b      	str	r3, [r5, #0]
 8006b2a:	bd38      	pop	{r3, r4, r5, pc}
 8006b2c:	20000268 	.word	0x20000268

08006b30 <__malloc_lock>:
 8006b30:	4770      	bx	lr

08006b32 <__malloc_unlock>:
 8006b32:	4770      	bx	lr

08006b34 <_read_r>:
 8006b34:	b538      	push	{r3, r4, r5, lr}
 8006b36:	4c07      	ldr	r4, [pc, #28]	; (8006b54 <_read_r+0x20>)
 8006b38:	4605      	mov	r5, r0
 8006b3a:	4608      	mov	r0, r1
 8006b3c:	4611      	mov	r1, r2
 8006b3e:	2200      	movs	r2, #0
 8006b40:	6022      	str	r2, [r4, #0]
 8006b42:	461a      	mov	r2, r3
 8006b44:	f7fb fe36 	bl	80027b4 <_read>
 8006b48:	1c43      	adds	r3, r0, #1
 8006b4a:	d102      	bne.n	8006b52 <_read_r+0x1e>
 8006b4c:	6823      	ldr	r3, [r4, #0]
 8006b4e:	b103      	cbz	r3, 8006b52 <_read_r+0x1e>
 8006b50:	602b      	str	r3, [r5, #0]
 8006b52:	bd38      	pop	{r3, r4, r5, pc}
 8006b54:	20000268 	.word	0x20000268

08006b58 <_init>:
 8006b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5a:	bf00      	nop
 8006b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b5e:	bc08      	pop	{r3}
 8006b60:	469e      	mov	lr, r3
 8006b62:	4770      	bx	lr

08006b64 <_fini>:
 8006b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b66:	bf00      	nop
 8006b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b6a:	bc08      	pop	{r3}
 8006b6c:	469e      	mov	lr, r3
 8006b6e:	4770      	bx	lr
